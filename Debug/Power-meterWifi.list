
Power-meterWifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ece8  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  0800ee74  0800ee74  0001ee74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f12c  0800f12c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800f12c  0800f12c  0001f12c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f134  0800f134  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800f134  0800f134  0001f134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800f13c  0800f13c  0001f13c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800f144  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007e8  20000070  0800f1b4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000858  0800f1b4  00020858  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cb5e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040f9  00000000  00000000  0003cbfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017c8  00000000  00000000  00040cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001668  00000000  00000000  000424c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026139  00000000  00000000  00043b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f4db  00000000  00000000  00069c61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9af9  00000000  00000000  0008913c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00162c35  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064f8  00000000  00000000  00162c88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000070 	.word	0x20000070
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800ee5c 	.word	0x0800ee5c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000074 	.word	0x20000074
 80001c8:	0800ee5c 	.word	0x0800ee5c

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <Send_WifiCmd>:
 *      Author: MKS
 */
#include "esp8266.h"

void Send_WifiCmd(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	unsigned char i;
	unsigned int x,y;
	static unsigned int ContentLength;

	switch(wifi_command)
 80004d4:	4bcf      	ldr	r3, [pc, #828]	; (8000814 <Send_WifiCmd+0x344>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	3b05      	subs	r3, #5
 80004da:	2b73      	cmp	r3, #115	; 0x73
 80004dc:	f202 834e 	bhi.w	8002b7c <Send_WifiCmd+0x26ac>
 80004e0:	a201      	add	r2, pc, #4	; (adr r2, 80004e8 <Send_WifiCmd+0x18>)
 80004e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004e6:	bf00      	nop
 80004e8:	080006b9 	.word	0x080006b9
 80004ec:	08002b7d 	.word	0x08002b7d
 80004f0:	08002b7d 	.word	0x08002b7d
 80004f4:	08002b7d 	.word	0x08002b7d
 80004f8:	08002b7d 	.word	0x08002b7d
 80004fc:	080006df 	.word	0x080006df
 8000500:	0800073b 	.word	0x0800073b
 8000504:	08000761 	.word	0x08000761
 8000508:	080007ab 	.word	0x080007ab
 800050c:	080007d1 	.word	0x080007d1
 8000510:	08000835 	.word	0x08000835
 8000514:	08002b7d 	.word	0x08002b7d
 8000518:	08002b7d 	.word	0x08002b7d
 800051c:	08002b7d 	.word	0x08002b7d
 8000520:	08002b7d 	.word	0x08002b7d
 8000524:	08000855 	.word	0x08000855
 8000528:	080008e1 	.word	0x080008e1
 800052c:	08002b7d 	.word	0x08002b7d
 8000530:	08002b7d 	.word	0x08002b7d
 8000534:	08002b7d 	.word	0x08002b7d
 8000538:	08002b7d 	.word	0x08002b7d
 800053c:	08002b7d 	.word	0x08002b7d
 8000540:	08002b7d 	.word	0x08002b7d
 8000544:	08002b7d 	.word	0x08002b7d
 8000548:	08002b7d 	.word	0x08002b7d
 800054c:	0800091f 	.word	0x0800091f
 8000550:	08002b7d 	.word	0x08002b7d
 8000554:	08002b7d 	.word	0x08002b7d
 8000558:	08002b7d 	.word	0x08002b7d
 800055c:	08002b7d 	.word	0x08002b7d
 8000560:	08002b7d 	.word	0x08002b7d
 8000564:	08002b7d 	.word	0x08002b7d
 8000568:	08002b7d 	.word	0x08002b7d
 800056c:	08002b7d 	.word	0x08002b7d
 8000570:	08002b7d 	.word	0x08002b7d
 8000574:	08002b7d 	.word	0x08002b7d
 8000578:	08000a3b 	.word	0x08000a3b
 800057c:	08002b7d 	.word	0x08002b7d
 8000580:	08002b7d 	.word	0x08002b7d
 8000584:	08002b7d 	.word	0x08002b7d
 8000588:	08002b7d 	.word	0x08002b7d
 800058c:	08002b7d 	.word	0x08002b7d
 8000590:	08002b7d 	.word	0x08002b7d
 8000594:	08002b7d 	.word	0x08002b7d
 8000598:	08000a61 	.word	0x08000a61
 800059c:	08000a87 	.word	0x08000a87
 80005a0:	08000b15 	.word	0x08000b15
 80005a4:	08002b7d 	.word	0x08002b7d
 80005a8:	08002b7d 	.word	0x08002b7d
 80005ac:	08002b7d 	.word	0x08002b7d
 80005b0:	08002b7d 	.word	0x08002b7d
 80005b4:	08002b7d 	.word	0x08002b7d
 80005b8:	08002b7d 	.word	0x08002b7d
 80005bc:	08002b7d 	.word	0x08002b7d
 80005c0:	08002b7d 	.word	0x08002b7d
 80005c4:	08002b7d 	.word	0x08002b7d
 80005c8:	08002b7d 	.word	0x08002b7d
 80005cc:	08002b7d 	.word	0x08002b7d
 80005d0:	08002b7d 	.word	0x08002b7d
 80005d4:	08002b7d 	.word	0x08002b7d
 80005d8:	08002b7d 	.word	0x08002b7d
 80005dc:	08002b7d 	.word	0x08002b7d
 80005e0:	08002b7d 	.word	0x08002b7d
 80005e4:	08002b7d 	.word	0x08002b7d
 80005e8:	08002b7d 	.word	0x08002b7d
 80005ec:	08000b3b 	.word	0x08000b3b
 80005f0:	08000bb5 	.word	0x08000bb5
 80005f4:	08002b7d 	.word	0x08002b7d
 80005f8:	08002b7d 	.word	0x08002b7d
 80005fc:	08002b7d 	.word	0x08002b7d
 8000600:	08002b7d 	.word	0x08002b7d
 8000604:	08002b7d 	.word	0x08002b7d
 8000608:	08002b7d 	.word	0x08002b7d
 800060c:	08002b7d 	.word	0x08002b7d
 8000610:	08002b7d 	.word	0x08002b7d
 8000614:	08000bdb 	.word	0x08000bdb
 8000618:	08000d3f 	.word	0x08000d3f
 800061c:	08002b7d 	.word	0x08002b7d
 8000620:	08002b7d 	.word	0x08002b7d
 8000624:	08002b7d 	.word	0x08002b7d
 8000628:	08002b7d 	.word	0x08002b7d
 800062c:	08002b7d 	.word	0x08002b7d
 8000630:	08002b7d 	.word	0x08002b7d
 8000634:	08002b7d 	.word	0x08002b7d
 8000638:	08002b7d 	.word	0x08002b7d
 800063c:	08000d7d 	.word	0x08000d7d
 8000640:	08000ed3 	.word	0x08000ed3
 8000644:	08002b7d 	.word	0x08002b7d
 8000648:	08002b7d 	.word	0x08002b7d
 800064c:	08002b7d 	.word	0x08002b7d
 8000650:	08002b7d 	.word	0x08002b7d
 8000654:	08002b7d 	.word	0x08002b7d
 8000658:	08002b7d 	.word	0x08002b7d
 800065c:	08002b7d 	.word	0x08002b7d
 8000660:	08002b7d 	.word	0x08002b7d
 8000664:	08000f31 	.word	0x08000f31
 8000668:	08001e89 	.word	0x08001e89
 800066c:	08002acd 	.word	0x08002acd
 8000670:	08002aef 	.word	0x08002aef
 8000674:	08002a6f 	.word	0x08002a6f
 8000678:	08002aab 	.word	0x08002aab
 800067c:	08002495 	.word	0x08002495
 8000680:	08002b7d 	.word	0x08002b7d
 8000684:	08002b7d 	.word	0x08002b7d
 8000688:	08002b7d 	.word	0x08002b7d
 800068c:	08002b11 	.word	0x08002b11
 8000690:	08002b7d 	.word	0x08002b7d
 8000694:	08002b7d 	.word	0x08002b7d
 8000698:	08002b7d 	.word	0x08002b7d
 800069c:	08002b7d 	.word	0x08002b7d
 80006a0:	08002b7d 	.word	0x08002b7d
 80006a4:	08002b7d 	.word	0x08002b7d
 80006a8:	08002b7d 	.word	0x08002b7d
 80006ac:	08002b7d 	.word	0x08002b7d
 80006b0:	08002b7d 	.word	0x08002b7d
 80006b4:	08002b85 	.word	0x08002b85
 	{
 	case 5:
 		HAL_GPIO_WritePin(GPIOB, WIFIRST_Pin, GPIO_PIN_SET);
 80006b8:	2201      	movs	r2, #1
 80006ba:	2104      	movs	r1, #4
 80006bc:	4856      	ldr	r0, [pc, #344]	; (8000818 <Send_WifiCmd+0x348>)
 80006be:	f009 fedb 	bl	800a478 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80006c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006c6:	f009 fba9 	bl	8009e1c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, WIFIRST_Pin, GPIO_PIN_RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2104      	movs	r1, #4
 80006ce:	4852      	ldr	r0, [pc, #328]	; (8000818 <Send_WifiCmd+0x348>)
 80006d0:	f009 fed2 	bl	800a478 <HAL_GPIO_WritePin>
		wifi_command=13;
 80006d4:	4b4f      	ldr	r3, [pc, #316]	; (8000814 <Send_WifiCmd+0x344>)
 80006d6:	220d      	movs	r2, #13
 80006d8:	701a      	strb	r2, [r3, #0]

	break;
 80006da:	f002 ba6e 	b.w	8002bba <Send_WifiCmd+0x26ea>
 	case 10://reset
	ESP8266TXData[0] = 'A';
 80006de:	4b4f      	ldr	r3, [pc, #316]	; (800081c <Send_WifiCmd+0x34c>)
 80006e0:	2241      	movs	r2, #65	; 0x41
 80006e2:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[1] = 'T';
 80006e4:	4b4d      	ldr	r3, [pc, #308]	; (800081c <Send_WifiCmd+0x34c>)
 80006e6:	2254      	movs	r2, #84	; 0x54
 80006e8:	705a      	strb	r2, [r3, #1]
	ESP8266TXData[2] = '+';
 80006ea:	4b4c      	ldr	r3, [pc, #304]	; (800081c <Send_WifiCmd+0x34c>)
 80006ec:	222b      	movs	r2, #43	; 0x2b
 80006ee:	709a      	strb	r2, [r3, #2]
	ESP8266TXData[3] = 'R';
 80006f0:	4b4a      	ldr	r3, [pc, #296]	; (800081c <Send_WifiCmd+0x34c>)
 80006f2:	2252      	movs	r2, #82	; 0x52
 80006f4:	70da      	strb	r2, [r3, #3]
	ESP8266TXData[4] = 'S';
 80006f6:	4b49      	ldr	r3, [pc, #292]	; (800081c <Send_WifiCmd+0x34c>)
 80006f8:	2253      	movs	r2, #83	; 0x53
 80006fa:	711a      	strb	r2, [r3, #4]
	ESP8266TXData[5] = 'T';
 80006fc:	4b47      	ldr	r3, [pc, #284]	; (800081c <Send_WifiCmd+0x34c>)
 80006fe:	2254      	movs	r2, #84	; 0x54
 8000700:	715a      	strb	r2, [r3, #5]
	ESP8266TXData[6] = 0x0d;
 8000702:	4b46      	ldr	r3, [pc, #280]	; (800081c <Send_WifiCmd+0x34c>)
 8000704:	220d      	movs	r2, #13
 8000706:	719a      	strb	r2, [r3, #6]
	ESP8266TXData[7] = 0x0a;
 8000708:	4b44      	ldr	r3, [pc, #272]	; (800081c <Send_WifiCmd+0x34c>)
 800070a:	220a      	movs	r2, #10
 800070c:	71da      	strb	r2, [r3, #7]
	NoOfdata_byte=7;
 800070e:	4b44      	ldr	r3, [pc, #272]	; (8000820 <Send_WifiCmd+0x350>)
 8000710:	2207      	movs	r2, #7
 8000712:	701a      	strb	r2, [r3, #0]
	wifi_command=13;
 8000714:	4b3f      	ldr	r3, [pc, #252]	; (8000814 <Send_WifiCmd+0x344>)
 8000716:	220d      	movs	r2, #13
 8000718:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 800071a:	4b42      	ldr	r3, [pc, #264]	; (8000824 <Send_WifiCmd+0x354>)
 800071c:	2200      	movs	r2, #0
 800071e:	701a      	strb	r2, [r3, #0]
	bufferptr=0;
 8000720:	4b41      	ldr	r3, [pc, #260]	; (8000828 <Send_WifiCmd+0x358>)
 8000722:	2200      	movs	r2, #0
 8000724:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,ESP8266TXData,NoOfdata_byte);
 8000726:	4b3e      	ldr	r3, [pc, #248]	; (8000820 <Send_WifiCmd+0x350>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	b29b      	uxth	r3, r3
 800072c:	461a      	mov	r2, r3
 800072e:	493b      	ldr	r1, [pc, #236]	; (800081c <Send_WifiCmd+0x34c>)
 8000730:	483e      	ldr	r0, [pc, #248]	; (800082c <Send_WifiCmd+0x35c>)
 8000732:	f00c ff99 	bl	800d668 <HAL_UART_Transmit_IT>
	break;
 8000736:	f002 ba40 	b.w	8002bba <Send_WifiCmd+0x26ea>
	case 11:
	if(++Timerdelay >6)
 800073a:	4b3a      	ldr	r3, [pc, #232]	; (8000824 <Send_WifiCmd+0x354>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	3301      	adds	r3, #1
 8000740:	b2da      	uxtb	r2, r3
 8000742:	4b38      	ldr	r3, [pc, #224]	; (8000824 <Send_WifiCmd+0x354>)
 8000744:	701a      	strb	r2, [r3, #0]
 8000746:	4b37      	ldr	r3, [pc, #220]	; (8000824 <Send_WifiCmd+0x354>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b06      	cmp	r3, #6
 800074c:	f242 821c 	bls.w	8002b88 <Send_WifiCmd+0x26b8>
	{
		Timerdelay=0;
 8000750:	4b34      	ldr	r3, [pc, #208]	; (8000824 <Send_WifiCmd+0x354>)
 8000752:	2200      	movs	r2, #0
 8000754:	701a      	strb	r2, [r3, #0]
		wifi_command=14;
 8000756:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <Send_WifiCmd+0x344>)
 8000758:	220e      	movs	r2, #14
 800075a:	701a      	strb	r2, [r3, #0]
	}
	break;
 800075c:	f002 ba14 	b.w	8002b88 <Send_WifiCmd+0x26b8>
	case 12:
	ESP8266TXData[0] = 'A';
 8000760:	4b2e      	ldr	r3, [pc, #184]	; (800081c <Send_WifiCmd+0x34c>)
 8000762:	2241      	movs	r2, #65	; 0x41
 8000764:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[1] = 'T';
 8000766:	4b2d      	ldr	r3, [pc, #180]	; (800081c <Send_WifiCmd+0x34c>)
 8000768:	2254      	movs	r2, #84	; 0x54
 800076a:	705a      	strb	r2, [r3, #1]
	ESP8266TXData[2] = 'E';
 800076c:	4b2b      	ldr	r3, [pc, #172]	; (800081c <Send_WifiCmd+0x34c>)
 800076e:	2245      	movs	r2, #69	; 0x45
 8000770:	709a      	strb	r2, [r3, #2]
	ESP8266TXData[3] = '0';
 8000772:	4b2a      	ldr	r3, [pc, #168]	; (800081c <Send_WifiCmd+0x34c>)
 8000774:	2230      	movs	r2, #48	; 0x30
 8000776:	70da      	strb	r2, [r3, #3]
	ESP8266TXData[4] = 0x0d;
 8000778:	4b28      	ldr	r3, [pc, #160]	; (800081c <Send_WifiCmd+0x34c>)
 800077a:	220d      	movs	r2, #13
 800077c:	711a      	strb	r2, [r3, #4]
	ESP8266TXData[5] = 0x0a;
 800077e:	4b27      	ldr	r3, [pc, #156]	; (800081c <Send_WifiCmd+0x34c>)
 8000780:	220a      	movs	r2, #10
 8000782:	715a      	strb	r2, [r3, #5]
	NoOfdata_byte=6;
 8000784:	4b26      	ldr	r3, [pc, #152]	; (8000820 <Send_WifiCmd+0x350>)
 8000786:	2206      	movs	r2, #6
 8000788:	701a      	strb	r2, [r3, #0]
	wifi_command=13;
 800078a:	4b22      	ldr	r3, [pc, #136]	; (8000814 <Send_WifiCmd+0x344>)
 800078c:	220d      	movs	r2, #13
 800078e:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 8000790:	4b24      	ldr	r3, [pc, #144]	; (8000824 <Send_WifiCmd+0x354>)
 8000792:	2200      	movs	r2, #0
 8000794:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,ESP8266TXData,NoOfdata_byte);
 8000796:	4b22      	ldr	r3, [pc, #136]	; (8000820 <Send_WifiCmd+0x350>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	b29b      	uxth	r3, r3
 800079c:	461a      	mov	r2, r3
 800079e:	491f      	ldr	r1, [pc, #124]	; (800081c <Send_WifiCmd+0x34c>)
 80007a0:	4822      	ldr	r0, [pc, #136]	; (800082c <Send_WifiCmd+0x35c>)
 80007a2:	f00c ff61 	bl	800d668 <HAL_UART_Transmit_IT>
	break;
 80007a6:	f002 ba08 	b.w	8002bba <Send_WifiCmd+0x26ea>
	case 13:
	if(++Timerdelay >15)
 80007aa:	4b1e      	ldr	r3, [pc, #120]	; (8000824 <Send_WifiCmd+0x354>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	3301      	adds	r3, #1
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <Send_WifiCmd+0x354>)
 80007b4:	701a      	strb	r2, [r3, #0]
 80007b6:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <Send_WifiCmd+0x354>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	2b0f      	cmp	r3, #15
 80007bc:	f242 81e6 	bls.w	8002b8c <Send_WifiCmd+0x26bc>
	{
		Timerdelay=0;
 80007c0:	4b18      	ldr	r3, [pc, #96]	; (8000824 <Send_WifiCmd+0x354>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	701a      	strb	r2, [r3, #0]
		wifi_command=20;
 80007c6:	4b13      	ldr	r3, [pc, #76]	; (8000814 <Send_WifiCmd+0x344>)
 80007c8:	2214      	movs	r2, #20
 80007ca:	701a      	strb	r2, [r3, #0]
	}
	break;
 80007cc:	f002 b9de 	b.w	8002b8c <Send_WifiCmd+0x26bc>
	case 14:
	ESP8266TXData[0] = 'A';
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <Send_WifiCmd+0x34c>)
 80007d2:	2241      	movs	r2, #65	; 0x41
 80007d4:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[1] = 'T';
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <Send_WifiCmd+0x34c>)
 80007d8:	2254      	movs	r2, #84	; 0x54
 80007da:	705a      	strb	r2, [r3, #1]
	ESP8266TXData[2] = 0x0d;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <Send_WifiCmd+0x34c>)
 80007de:	220d      	movs	r2, #13
 80007e0:	709a      	strb	r2, [r3, #2]
	ESP8266TXData[3] = 0x0a;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <Send_WifiCmd+0x34c>)
 80007e4:	220a      	movs	r2, #10
 80007e6:	70da      	strb	r2, [r3, #3]
	NoOfdata_byte=4;
 80007e8:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <Send_WifiCmd+0x350>)
 80007ea:	2204      	movs	r2, #4
 80007ec:	701a      	strb	r2, [r3, #0]
	Rxseqdecoder=8;
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <Send_WifiCmd+0x360>)
 80007f0:	2208      	movs	r2, #8
 80007f2:	701a      	strb	r2, [r3, #0]
	wifi_command=20;//default wait 30sec
 80007f4:	4b07      	ldr	r3, [pc, #28]	; (8000814 <Send_WifiCmd+0x344>)
 80007f6:	2214      	movs	r2, #20
 80007f8:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 80007fa:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <Send_WifiCmd+0x354>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,ESP8266TXData,NoOfdata_byte);
 8000800:	4b07      	ldr	r3, [pc, #28]	; (8000820 <Send_WifiCmd+0x350>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	b29b      	uxth	r3, r3
 8000806:	461a      	mov	r2, r3
 8000808:	4904      	ldr	r1, [pc, #16]	; (800081c <Send_WifiCmd+0x34c>)
 800080a:	4808      	ldr	r0, [pc, #32]	; (800082c <Send_WifiCmd+0x35c>)
 800080c:	f00c ff2c 	bl	800d668 <HAL_UART_Transmit_IT>
	break;
 8000810:	f002 b9d3 	b.w	8002bba <Send_WifiCmd+0x26ea>
 8000814:	2000008d 	.word	0x2000008d
 8000818:	48000400 	.word	0x48000400
 800081c:	20000090 	.word	0x20000090
 8000820:	20000257 	.word	0x20000257
 8000824:	20000258 	.word	0x20000258
 8000828:	20000254 	.word	0x20000254
 800082c:	200003d4 	.word	0x200003d4
 8000830:	20000255 	.word	0x20000255
	case 15:
	if(++Timerdelay >2)
 8000834:	4baf      	ldr	r3, [pc, #700]	; (8000af4 <Send_WifiCmd+0x624>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	3301      	adds	r3, #1
 800083a:	b2da      	uxtb	r2, r3
 800083c:	4bad      	ldr	r3, [pc, #692]	; (8000af4 <Send_WifiCmd+0x624>)
 800083e:	701a      	strb	r2, [r3, #0]
 8000840:	4bac      	ldr	r3, [pc, #688]	; (8000af4 <Send_WifiCmd+0x624>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b02      	cmp	r3, #2
 8000846:	f242 81a3 	bls.w	8002b90 <Send_WifiCmd+0x26c0>
	{
		Timerdelay=0;
 800084a:	4baa      	ldr	r3, [pc, #680]	; (8000af4 <Send_WifiCmd+0x624>)
 800084c:	2200      	movs	r2, #0
 800084e:	701a      	strb	r2, [r3, #0]
	}
	break;
 8000850:	f002 b99e 	b.w	8002b90 <Send_WifiCmd+0x26c0>
	case 20:   //CWMODE		//hardrest sequce//1.0 for wifi reset
	ESP8266TXData[0] = 'A';
 8000854:	4ba8      	ldr	r3, [pc, #672]	; (8000af8 <Send_WifiCmd+0x628>)
 8000856:	2241      	movs	r2, #65	; 0x41
 8000858:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[1] = 'T';
 800085a:	4ba7      	ldr	r3, [pc, #668]	; (8000af8 <Send_WifiCmd+0x628>)
 800085c:	2254      	movs	r2, #84	; 0x54
 800085e:	705a      	strb	r2, [r3, #1]
	ESP8266TXData[2] = '+';
 8000860:	4ba5      	ldr	r3, [pc, #660]	; (8000af8 <Send_WifiCmd+0x628>)
 8000862:	222b      	movs	r2, #43	; 0x2b
 8000864:	709a      	strb	r2, [r3, #2]
	ESP8266TXData[3] = 'C';
 8000866:	4ba4      	ldr	r3, [pc, #656]	; (8000af8 <Send_WifiCmd+0x628>)
 8000868:	2243      	movs	r2, #67	; 0x43
 800086a:	70da      	strb	r2, [r3, #3]
	ESP8266TXData[4] = 'W';
 800086c:	4ba2      	ldr	r3, [pc, #648]	; (8000af8 <Send_WifiCmd+0x628>)
 800086e:	2257      	movs	r2, #87	; 0x57
 8000870:	711a      	strb	r2, [r3, #4]
	ESP8266TXData[5] = 'M';
 8000872:	4ba1      	ldr	r3, [pc, #644]	; (8000af8 <Send_WifiCmd+0x628>)
 8000874:	224d      	movs	r2, #77	; 0x4d
 8000876:	715a      	strb	r2, [r3, #5]
	ESP8266TXData[6] = 'O';
 8000878:	4b9f      	ldr	r3, [pc, #636]	; (8000af8 <Send_WifiCmd+0x628>)
 800087a:	224f      	movs	r2, #79	; 0x4f
 800087c:	719a      	strb	r2, [r3, #6]
	ESP8266TXData[7] = 'D';
 800087e:	4b9e      	ldr	r3, [pc, #632]	; (8000af8 <Send_WifiCmd+0x628>)
 8000880:	2244      	movs	r2, #68	; 0x44
 8000882:	71da      	strb	r2, [r3, #7]
	ESP8266TXData[8] = 'E';
 8000884:	4b9c      	ldr	r3, [pc, #624]	; (8000af8 <Send_WifiCmd+0x628>)
 8000886:	2245      	movs	r2, #69	; 0x45
 8000888:	721a      	strb	r2, [r3, #8]
	ESP8266TXData[9] = '=';
 800088a:	4b9b      	ldr	r3, [pc, #620]	; (8000af8 <Send_WifiCmd+0x628>)
 800088c:	223d      	movs	r2, #61	; 0x3d
 800088e:	725a      	strb	r2, [r3, #9]
	ESP8266TXData[10] = '1';
 8000890:	4b99      	ldr	r3, [pc, #612]	; (8000af8 <Send_WifiCmd+0x628>)
 8000892:	2231      	movs	r2, #49	; 0x31
 8000894:	729a      	strb	r2, [r3, #10]
	ESP8266TXData[11] = 0x0d;
 8000896:	4b98      	ldr	r3, [pc, #608]	; (8000af8 <Send_WifiCmd+0x628>)
 8000898:	220d      	movs	r2, #13
 800089a:	72da      	strb	r2, [r3, #11]
	ESP8266TXData[12] = 0x0a;
 800089c:	4b96      	ldr	r3, [pc, #600]	; (8000af8 <Send_WifiCmd+0x628>)
 800089e:	220a      	movs	r2, #10
 80008a0:	731a      	strb	r2, [r3, #12]
	NoOfdata_byte=13;
 80008a2:	4b96      	ldr	r3, [pc, #600]	; (8000afc <Send_WifiCmd+0x62c>)
 80008a4:	220d      	movs	r2, #13
 80008a6:	701a      	strb	r2, [r3, #0]
	Rxseqdecoder=1;	  //add retry
 80008a8:	4b95      	ldr	r3, [pc, #596]	; (8000b00 <Send_WifiCmd+0x630>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 80008ae:	4b91      	ldr	r3, [pc, #580]	; (8000af4 <Send_WifiCmd+0x624>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	701a      	strb	r2, [r3, #0]
	bufferptr=0;
 80008b4:	4b93      	ldr	r3, [pc, #588]	; (8000b04 <Send_WifiCmd+0x634>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,ESP8266TXData,NoOfdata_byte);
 80008ba:	4b90      	ldr	r3, [pc, #576]	; (8000afc <Send_WifiCmd+0x62c>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	b29b      	uxth	r3, r3
 80008c0:	461a      	mov	r2, r3
 80008c2:	498d      	ldr	r1, [pc, #564]	; (8000af8 <Send_WifiCmd+0x628>)
 80008c4:	4890      	ldr	r0, [pc, #576]	; (8000b08 <Send_WifiCmd+0x638>)
 80008c6:	f00c fecf 	bl	800d668 <HAL_UART_Transmit_IT>
	Check_CWMODE_For_Hang = Check_CWMODE_For_Hang+1;
 80008ca:	4b90      	ldr	r3, [pc, #576]	; (8000b0c <Send_WifiCmd+0x63c>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	3301      	adds	r3, #1
 80008d0:	b2da      	uxtb	r2, r3
 80008d2:	4b8e      	ldr	r3, [pc, #568]	; (8000b0c <Send_WifiCmd+0x63c>)
 80008d4:	701a      	strb	r2, [r3, #0]
	wifi_command=21;
 80008d6:	4b8e      	ldr	r3, [pc, #568]	; (8000b10 <Send_WifiCmd+0x640>)
 80008d8:	2215      	movs	r2, #21
 80008da:	701a      	strb	r2, [r3, #0]

	break;
 80008dc:	f002 b96d 	b.w	8002bba <Send_WifiCmd+0x26ea>
	case 21:	//waiting for Ok  && if above 30 seconds resend command
	if(++Timerdelay >5)
 80008e0:	4b84      	ldr	r3, [pc, #528]	; (8000af4 <Send_WifiCmd+0x624>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	3301      	adds	r3, #1
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	4b82      	ldr	r3, [pc, #520]	; (8000af4 <Send_WifiCmd+0x624>)
 80008ea:	701a      	strb	r2, [r3, #0]
 80008ec:	4b81      	ldr	r3, [pc, #516]	; (8000af4 <Send_WifiCmd+0x624>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b05      	cmp	r3, #5
 80008f2:	f242 814f 	bls.w	8002b94 <Send_WifiCmd+0x26c4>
	{
		Timerdelay=0;
 80008f6:	4b7f      	ldr	r3, [pc, #508]	; (8000af4 <Send_WifiCmd+0x624>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	701a      	strb	r2, [r3, #0]
		if(5 ==  Check_CWMODE_For_Hang)
 80008fc:	4b83      	ldr	r3, [pc, #524]	; (8000b0c <Send_WifiCmd+0x63c>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b05      	cmp	r3, #5
 8000902:	d107      	bne.n	8000914 <Send_WifiCmd+0x444>
		{
			wifi_command=5;	 //Hardware reset
 8000904:	4b82      	ldr	r3, [pc, #520]	; (8000b10 <Send_WifiCmd+0x640>)
 8000906:	2205      	movs	r2, #5
 8000908:	701a      	strb	r2, [r3, #0]
			Check_CWMODE_For_Hang = 0;
 800090a:	4b80      	ldr	r3, [pc, #512]	; (8000b0c <Send_WifiCmd+0x63c>)
 800090c:	2200      	movs	r2, #0
 800090e:	701a      	strb	r2, [r3, #0]
		else
		{
			wifi_command=10;
		}
	}
	break;
 8000910:	f002 b940 	b.w	8002b94 <Send_WifiCmd+0x26c4>
			wifi_command=10;
 8000914:	4b7e      	ldr	r3, [pc, #504]	; (8000b10 <Send_WifiCmd+0x640>)
 8000916:	220a      	movs	r2, #10
 8000918:	701a      	strb	r2, [r3, #0]
	break;
 800091a:	f002 b93b 	b.w	8002b94 <Send_WifiCmd+0x26c4>
	case 30:   //CWJAP	   //userid-9digit,psw 8digit  //userid-5digit,psw 8digit
	ESP8266TXData[0] = 'A';
 800091e:	4b76      	ldr	r3, [pc, #472]	; (8000af8 <Send_WifiCmd+0x628>)
 8000920:	2241      	movs	r2, #65	; 0x41
 8000922:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[1] = 'T';
 8000924:	4b74      	ldr	r3, [pc, #464]	; (8000af8 <Send_WifiCmd+0x628>)
 8000926:	2254      	movs	r2, #84	; 0x54
 8000928:	705a      	strb	r2, [r3, #1]
	ESP8266TXData[2] = '+';
 800092a:	4b73      	ldr	r3, [pc, #460]	; (8000af8 <Send_WifiCmd+0x628>)
 800092c:	222b      	movs	r2, #43	; 0x2b
 800092e:	709a      	strb	r2, [r3, #2]
	ESP8266TXData[3] = 'C';
 8000930:	4b71      	ldr	r3, [pc, #452]	; (8000af8 <Send_WifiCmd+0x628>)
 8000932:	2243      	movs	r2, #67	; 0x43
 8000934:	70da      	strb	r2, [r3, #3]
	ESP8266TXData[4] = 'W';
 8000936:	4b70      	ldr	r3, [pc, #448]	; (8000af8 <Send_WifiCmd+0x628>)
 8000938:	2257      	movs	r2, #87	; 0x57
 800093a:	711a      	strb	r2, [r3, #4]
	ESP8266TXData[5] = 'J';
 800093c:	4b6e      	ldr	r3, [pc, #440]	; (8000af8 <Send_WifiCmd+0x628>)
 800093e:	224a      	movs	r2, #74	; 0x4a
 8000940:	715a      	strb	r2, [r3, #5]
	ESP8266TXData[6] = 'A';
 8000942:	4b6d      	ldr	r3, [pc, #436]	; (8000af8 <Send_WifiCmd+0x628>)
 8000944:	2241      	movs	r2, #65	; 0x41
 8000946:	719a      	strb	r2, [r3, #6]
	ESP8266TXData[7] = 'P';
 8000948:	4b6b      	ldr	r3, [pc, #428]	; (8000af8 <Send_WifiCmd+0x628>)
 800094a:	2250      	movs	r2, #80	; 0x50
 800094c:	71da      	strb	r2, [r3, #7]
	ESP8266TXData[8] = '=';
 800094e:	4b6a      	ldr	r3, [pc, #424]	; (8000af8 <Send_WifiCmd+0x628>)
 8000950:	223d      	movs	r2, #61	; 0x3d
 8000952:	721a      	strb	r2, [r3, #8]
	ESP8266TXData[9] = '"';
 8000954:	4b68      	ldr	r3, [pc, #416]	; (8000af8 <Send_WifiCmd+0x628>)
 8000956:	2222      	movs	r2, #34	; 0x22
 8000958:	725a      	strb	r2, [r3, #9]
	ESP8266TXData[10] = 'T';
 800095a:	4b67      	ldr	r3, [pc, #412]	; (8000af8 <Send_WifiCmd+0x628>)
 800095c:	2254      	movs	r2, #84	; 0x54
 800095e:	729a      	strb	r2, [r3, #10]
	ESP8266TXData[11] = 'P';
 8000960:	4b65      	ldr	r3, [pc, #404]	; (8000af8 <Send_WifiCmd+0x628>)
 8000962:	2250      	movs	r2, #80	; 0x50
 8000964:	72da      	strb	r2, [r3, #11]
	ESP8266TXData[12] = '-';
 8000966:	4b64      	ldr	r3, [pc, #400]	; (8000af8 <Send_WifiCmd+0x628>)
 8000968:	222d      	movs	r2, #45	; 0x2d
 800096a:	731a      	strb	r2, [r3, #12]
	ESP8266TXData[13] = 'L';
 800096c:	4b62      	ldr	r3, [pc, #392]	; (8000af8 <Send_WifiCmd+0x628>)
 800096e:	224c      	movs	r2, #76	; 0x4c
 8000970:	735a      	strb	r2, [r3, #13]
	ESP8266TXData[14] = 'I';
 8000972:	4b61      	ldr	r3, [pc, #388]	; (8000af8 <Send_WifiCmd+0x628>)
 8000974:	2249      	movs	r2, #73	; 0x49
 8000976:	739a      	strb	r2, [r3, #14]
	ESP8266TXData[15] = 'N';
 8000978:	4b5f      	ldr	r3, [pc, #380]	; (8000af8 <Send_WifiCmd+0x628>)
 800097a:	224e      	movs	r2, #78	; 0x4e
 800097c:	73da      	strb	r2, [r3, #15]
	ESP8266TXData[16] = 'K';
 800097e:	4b5e      	ldr	r3, [pc, #376]	; (8000af8 <Send_WifiCmd+0x628>)
 8000980:	224b      	movs	r2, #75	; 0x4b
 8000982:	741a      	strb	r2, [r3, #16]
	ESP8266TXData[17] = '_';
 8000984:	4b5c      	ldr	r3, [pc, #368]	; (8000af8 <Send_WifiCmd+0x628>)
 8000986:	225f      	movs	r2, #95	; 0x5f
 8000988:	745a      	strb	r2, [r3, #17]
	ESP8266TXData[18] = 'A';
 800098a:	4b5b      	ldr	r3, [pc, #364]	; (8000af8 <Send_WifiCmd+0x628>)
 800098c:	2241      	movs	r2, #65	; 0x41
 800098e:	749a      	strb	r2, [r3, #18]
	ESP8266TXData[19] = 'C';
 8000990:	4b59      	ldr	r3, [pc, #356]	; (8000af8 <Send_WifiCmd+0x628>)
 8000992:	2243      	movs	r2, #67	; 0x43
 8000994:	74da      	strb	r2, [r3, #19]
	ESP8266TXData[20] = 'C';
 8000996:	4b58      	ldr	r3, [pc, #352]	; (8000af8 <Send_WifiCmd+0x628>)
 8000998:	2243      	movs	r2, #67	; 0x43
 800099a:	751a      	strb	r2, [r3, #20]
	ESP8266TXData[21] = 'E';
 800099c:	4b56      	ldr	r3, [pc, #344]	; (8000af8 <Send_WifiCmd+0x628>)
 800099e:	2245      	movs	r2, #69	; 0x45
 80009a0:	755a      	strb	r2, [r3, #21]
	ESP8266TXData[22] = 'E';
 80009a2:	4b55      	ldr	r3, [pc, #340]	; (8000af8 <Send_WifiCmd+0x628>)
 80009a4:	2245      	movs	r2, #69	; 0x45
 80009a6:	759a      	strb	r2, [r3, #22]
	ESP8266TXData[23] = 'D';
 80009a8:	4b53      	ldr	r3, [pc, #332]	; (8000af8 <Send_WifiCmd+0x628>)
 80009aa:	2244      	movs	r2, #68	; 0x44
 80009ac:	75da      	strb	r2, [r3, #23]
	ESP8266TXData[24] = '"';
 80009ae:	4b52      	ldr	r3, [pc, #328]	; (8000af8 <Send_WifiCmd+0x628>)
 80009b0:	2222      	movs	r2, #34	; 0x22
 80009b2:	761a      	strb	r2, [r3, #24]
	ESP8266TXData[25] = ',';
 80009b4:	4b50      	ldr	r3, [pc, #320]	; (8000af8 <Send_WifiCmd+0x628>)
 80009b6:	222c      	movs	r2, #44	; 0x2c
 80009b8:	765a      	strb	r2, [r3, #25]
	ESP8266TXData[26] = '"';
 80009ba:	4b4f      	ldr	r3, [pc, #316]	; (8000af8 <Send_WifiCmd+0x628>)
 80009bc:	2222      	movs	r2, #34	; 0x22
 80009be:	769a      	strb	r2, [r3, #26]
	ESP8266TXData[27] = '9';//(unsigned char)(((WifiUserId%10000)/1000)+0x30);	4259241555
 80009c0:	4b4d      	ldr	r3, [pc, #308]	; (8000af8 <Send_WifiCmd+0x628>)
 80009c2:	2239      	movs	r2, #57	; 0x39
 80009c4:	76da      	strb	r2, [r3, #27]
	ESP8266TXData[28] = '9';//(unsigned char)(((WifiUserId%1000)/100)+0x30);//'e';
 80009c6:	4b4c      	ldr	r3, [pc, #304]	; (8000af8 <Send_WifiCmd+0x628>)
 80009c8:	2239      	movs	r2, #57	; 0x39
 80009ca:	771a      	strb	r2, [r3, #28]
	ESP8266TXData[29] = '9';//(unsigned char)(((WifiUserId%100)/10)+0x30);//'s';
 80009cc:	4b4a      	ldr	r3, [pc, #296]	; (8000af8 <Send_WifiCmd+0x628>)
 80009ce:	2239      	movs	r2, #57	; 0x39
 80009d0:	775a      	strb	r2, [r3, #29]
	ESP8266TXData[30] = '4';//(unsigned char)((WifiUserId%10)+0x30);//'h';
 80009d2:	4b49      	ldr	r3, [pc, #292]	; (8000af8 <Send_WifiCmd+0x628>)
 80009d4:	2234      	movs	r2, #52	; 0x34
 80009d6:	779a      	strb	r2, [r3, #30]
	ESP8266TXData[31] = '1';//(unsigned char)(((WifiUserId2%10000)/1000)+0x30);
 80009d8:	4b47      	ldr	r3, [pc, #284]	; (8000af8 <Send_WifiCmd+0x628>)
 80009da:	2231      	movs	r2, #49	; 0x31
 80009dc:	77da      	strb	r2, [r3, #31]
	ESP8266TXData[32] = '1';//(unsigned char)(((WifiUserId2%1000)/100)+0x30);//'e';
 80009de:	4b46      	ldr	r3, [pc, #280]	; (8000af8 <Send_WifiCmd+0x628>)
 80009e0:	2231      	movs	r2, #49	; 0x31
 80009e2:	f883 2020 	strb.w	r2, [r3, #32]
	ESP8266TXData[33] = '1';//(unsigned char)(((WifiUserId2%100)/10)+0x30);//'s';
 80009e6:	4b44      	ldr	r3, [pc, #272]	; (8000af8 <Send_WifiCmd+0x628>)
 80009e8:	2231      	movs	r2, #49	; 0x31
 80009ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	ESP8266TXData[34] = '2';//(unsigned char)(((WifiUserId%10000)/1000)+0x30);
 80009ee:	4b42      	ldr	r3, [pc, #264]	; (8000af8 <Send_WifiCmd+0x628>)
 80009f0:	2232      	movs	r2, #50	; 0x32
 80009f2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	ESP8266TXData[35] = '"';
 80009f6:	4b40      	ldr	r3, [pc, #256]	; (8000af8 <Send_WifiCmd+0x628>)
 80009f8:	2222      	movs	r2, #34	; 0x22
 80009fa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	ESP8266TXData[36] = 0x0d;
 80009fe:	4b3e      	ldr	r3, [pc, #248]	; (8000af8 <Send_WifiCmd+0x628>)
 8000a00:	220d      	movs	r2, #13
 8000a02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	ESP8266TXData[37] = 0x0a;
 8000a06:	4b3c      	ldr	r3, [pc, #240]	; (8000af8 <Send_WifiCmd+0x628>)
 8000a08:	220a      	movs	r2, #10
 8000a0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	NoOfdata_byte=38;//32;
 8000a0e:	4b3b      	ldr	r3, [pc, #236]	; (8000afc <Send_WifiCmd+0x62c>)
 8000a10:	2226      	movs	r2, #38	; 0x26
 8000a12:	701a      	strb	r2, [r3, #0]
	Rxseqdecoder=2;
 8000a14:	4b3a      	ldr	r3, [pc, #232]	; (8000b00 <Send_WifiCmd+0x630>)
 8000a16:	2202      	movs	r2, #2
 8000a18:	701a      	strb	r2, [r3, #0]
	wifi_command=41;
 8000a1a:	4b3d      	ldr	r3, [pc, #244]	; (8000b10 <Send_WifiCmd+0x640>)
 8000a1c:	2229      	movs	r2, #41	; 0x29
 8000a1e:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 8000a20:	4b34      	ldr	r3, [pc, #208]	; (8000af4 <Send_WifiCmd+0x624>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,ESP8266TXData,NoOfdata_byte);
 8000a26:	4b35      	ldr	r3, [pc, #212]	; (8000afc <Send_WifiCmd+0x62c>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	b29b      	uxth	r3, r3
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	4932      	ldr	r1, [pc, #200]	; (8000af8 <Send_WifiCmd+0x628>)
 8000a30:	4835      	ldr	r0, [pc, #212]	; (8000b08 <Send_WifiCmd+0x638>)
 8000a32:	f00c fe19 	bl	800d668 <HAL_UART_Transmit_IT>
	break;		   //add retry
 8000a36:	f002 b8c0 	b.w	8002bba <Send_WifiCmd+0x26ea>
	case 41:	   //resend if o replay
	if(++Timerdelay >15)
 8000a3a:	4b2e      	ldr	r3, [pc, #184]	; (8000af4 <Send_WifiCmd+0x624>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	4b2c      	ldr	r3, [pc, #176]	; (8000af4 <Send_WifiCmd+0x624>)
 8000a44:	701a      	strb	r2, [r3, #0]
 8000a46:	4b2b      	ldr	r3, [pc, #172]	; (8000af4 <Send_WifiCmd+0x624>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b0f      	cmp	r3, #15
 8000a4c:	f242 80a4 	bls.w	8002b98 <Send_WifiCmd+0x26c8>
	{
		Timerdelay=0;
 8000a50:	4b28      	ldr	r3, [pc, #160]	; (8000af4 <Send_WifiCmd+0x624>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	701a      	strb	r2, [r3, #0]
		wifi_command=10;	//41
 8000a56:	4b2e      	ldr	r3, [pc, #184]	; (8000b10 <Send_WifiCmd+0x640>)
 8000a58:	220a      	movs	r2, #10
 8000a5a:	701a      	strb	r2, [r3, #0]
	}
	break;
 8000a5c:	f002 b89c 	b.w	8002b98 <Send_WifiCmd+0x26c8>
	case 49:
	if(++Timerdelay >8)
 8000a60:	4b24      	ldr	r3, [pc, #144]	; (8000af4 <Send_WifiCmd+0x624>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	3301      	adds	r3, #1
 8000a66:	b2da      	uxtb	r2, r3
 8000a68:	4b22      	ldr	r3, [pc, #136]	; (8000af4 <Send_WifiCmd+0x624>)
 8000a6a:	701a      	strb	r2, [r3, #0]
 8000a6c:	4b21      	ldr	r3, [pc, #132]	; (8000af4 <Send_WifiCmd+0x624>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b08      	cmp	r3, #8
 8000a72:	f242 8093 	bls.w	8002b9c <Send_WifiCmd+0x26cc>
	{
		Timerdelay=0;
 8000a76:	4b1f      	ldr	r3, [pc, #124]	; (8000af4 <Send_WifiCmd+0x624>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
		wifi_command=50;
 8000a7c:	4b24      	ldr	r3, [pc, #144]	; (8000b10 <Send_WifiCmd+0x640>)
 8000a7e:	2232      	movs	r2, #50	; 0x32
 8000a80:	701a      	strb	r2, [r3, #0]
	}
	break;
 8000a82:	f002 b88b 	b.w	8002b9c <Send_WifiCmd+0x26cc>
	case 50:   //CWJAP
	ESP8266TXData[0] = 'A';
 8000a86:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <Send_WifiCmd+0x628>)
 8000a88:	2241      	movs	r2, #65	; 0x41
 8000a8a:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[1] = 'T';
 8000a8c:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <Send_WifiCmd+0x628>)
 8000a8e:	2254      	movs	r2, #84	; 0x54
 8000a90:	705a      	strb	r2, [r3, #1]
	ESP8266TXData[2] = '+';
 8000a92:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <Send_WifiCmd+0x628>)
 8000a94:	222b      	movs	r2, #43	; 0x2b
 8000a96:	709a      	strb	r2, [r3, #2]
	ESP8266TXData[3] = 'C';
 8000a98:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <Send_WifiCmd+0x628>)
 8000a9a:	2243      	movs	r2, #67	; 0x43
 8000a9c:	70da      	strb	r2, [r3, #3]
	ESP8266TXData[4] = 'W';
 8000a9e:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <Send_WifiCmd+0x628>)
 8000aa0:	2257      	movs	r2, #87	; 0x57
 8000aa2:	711a      	strb	r2, [r3, #4]
	ESP8266TXData[5] = 'J';
 8000aa4:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <Send_WifiCmd+0x628>)
 8000aa6:	224a      	movs	r2, #74	; 0x4a
 8000aa8:	715a      	strb	r2, [r3, #5]
	ESP8266TXData[6] = 'A';
 8000aaa:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <Send_WifiCmd+0x628>)
 8000aac:	2241      	movs	r2, #65	; 0x41
 8000aae:	719a      	strb	r2, [r3, #6]
	ESP8266TXData[7] = 'P';
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <Send_WifiCmd+0x628>)
 8000ab2:	2250      	movs	r2, #80	; 0x50
 8000ab4:	71da      	strb	r2, [r3, #7]
	ESP8266TXData[8] = '?';
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <Send_WifiCmd+0x628>)
 8000ab8:	223f      	movs	r2, #63	; 0x3f
 8000aba:	721a      	strb	r2, [r3, #8]
	ESP8266TXData[9] = 0x0d;
 8000abc:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <Send_WifiCmd+0x628>)
 8000abe:	220d      	movs	r2, #13
 8000ac0:	725a      	strb	r2, [r3, #9]
	ESP8266TXData[10] = 0x0a;
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <Send_WifiCmd+0x628>)
 8000ac4:	220a      	movs	r2, #10
 8000ac6:	729a      	strb	r2, [r3, #10]
	NoOfdata_byte=11;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <Send_WifiCmd+0x62c>)
 8000aca:	220b      	movs	r2, #11
 8000acc:	701a      	strb	r2, [r3, #0]
	wifi_command=51;
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <Send_WifiCmd+0x640>)
 8000ad0:	2233      	movs	r2, #51	; 0x33
 8000ad2:	701a      	strb	r2, [r3, #0]
	Rxseqdecoder=3;
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <Send_WifiCmd+0x630>)
 8000ad6:	2203      	movs	r2, #3
 8000ad8:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <Send_WifiCmd+0x624>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,ESP8266TXData,NoOfdata_byte);
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <Send_WifiCmd+0x62c>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	4903      	ldr	r1, [pc, #12]	; (8000af8 <Send_WifiCmd+0x628>)
 8000aea:	4807      	ldr	r0, [pc, #28]	; (8000b08 <Send_WifiCmd+0x638>)
 8000aec:	f00c fdbc 	bl	800d668 <HAL_UART_Transmit_IT>
	break;
 8000af0:	f002 b863 	b.w	8002bba <Send_WifiCmd+0x26ea>
 8000af4:	20000258 	.word	0x20000258
 8000af8:	20000090 	.word	0x20000090
 8000afc:	20000257 	.word	0x20000257
 8000b00:	20000255 	.word	0x20000255
 8000b04:	20000254 	.word	0x20000254
 8000b08:	200003d4 	.word	0x200003d4
 8000b0c:	20000256 	.word	0x20000256
 8000b10:	2000008d 	.word	0x2000008d
	case 51:
	if(++Timerdelay >15)
 8000b14:	4b93      	ldr	r3, [pc, #588]	; (8000d64 <Send_WifiCmd+0x894>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	b2da      	uxtb	r2, r3
 8000b1c:	4b91      	ldr	r3, [pc, #580]	; (8000d64 <Send_WifiCmd+0x894>)
 8000b1e:	701a      	strb	r2, [r3, #0]
 8000b20:	4b90      	ldr	r3, [pc, #576]	; (8000d64 <Send_WifiCmd+0x894>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	2b0f      	cmp	r3, #15
 8000b26:	f242 803b 	bls.w	8002ba0 <Send_WifiCmd+0x26d0>
	{
		Timerdelay=0;
 8000b2a:	4b8e      	ldr	r3, [pc, #568]	; (8000d64 <Send_WifiCmd+0x894>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	701a      	strb	r2, [r3, #0]
		wifi_command=10; //50
 8000b30:	4b8d      	ldr	r3, [pc, #564]	; (8000d68 <Send_WifiCmd+0x898>)
 8000b32:	220a      	movs	r2, #10
 8000b34:	701a      	strb	r2, [r3, #0]
	}

	break;
 8000b36:	f002 b833 	b.w	8002ba0 <Send_WifiCmd+0x26d0>
	case 70:   //CIPMUX
	ESP8266TXData[0] = 'A';
 8000b3a:	4b8c      	ldr	r3, [pc, #560]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000b3c:	2241      	movs	r2, #65	; 0x41
 8000b3e:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[1] = 'T';
 8000b40:	4b8a      	ldr	r3, [pc, #552]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000b42:	2254      	movs	r2, #84	; 0x54
 8000b44:	705a      	strb	r2, [r3, #1]
	ESP8266TXData[2] = '+';
 8000b46:	4b89      	ldr	r3, [pc, #548]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000b48:	222b      	movs	r2, #43	; 0x2b
 8000b4a:	709a      	strb	r2, [r3, #2]
	ESP8266TXData[3] = 'C';
 8000b4c:	4b87      	ldr	r3, [pc, #540]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000b4e:	2243      	movs	r2, #67	; 0x43
 8000b50:	70da      	strb	r2, [r3, #3]
	ESP8266TXData[4] = 'I';
 8000b52:	4b86      	ldr	r3, [pc, #536]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000b54:	2249      	movs	r2, #73	; 0x49
 8000b56:	711a      	strb	r2, [r3, #4]
	ESP8266TXData[5] = 'P';
 8000b58:	4b84      	ldr	r3, [pc, #528]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000b5a:	2250      	movs	r2, #80	; 0x50
 8000b5c:	715a      	strb	r2, [r3, #5]
	ESP8266TXData[6] = 'M';
 8000b5e:	4b83      	ldr	r3, [pc, #524]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000b60:	224d      	movs	r2, #77	; 0x4d
 8000b62:	719a      	strb	r2, [r3, #6]
	ESP8266TXData[7] = 'U';
 8000b64:	4b81      	ldr	r3, [pc, #516]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000b66:	2255      	movs	r2, #85	; 0x55
 8000b68:	71da      	strb	r2, [r3, #7]
	ESP8266TXData[8] = 'X';
 8000b6a:	4b80      	ldr	r3, [pc, #512]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000b6c:	2258      	movs	r2, #88	; 0x58
 8000b6e:	721a      	strb	r2, [r3, #8]
	ESP8266TXData[9] = '=';
 8000b70:	4b7e      	ldr	r3, [pc, #504]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000b72:	223d      	movs	r2, #61	; 0x3d
 8000b74:	725a      	strb	r2, [r3, #9]
	ESP8266TXData[10] = '0';
 8000b76:	4b7d      	ldr	r3, [pc, #500]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000b78:	2230      	movs	r2, #48	; 0x30
 8000b7a:	729a      	strb	r2, [r3, #10]
	ESP8266TXData[11] = 0x0d;
 8000b7c:	4b7b      	ldr	r3, [pc, #492]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000b7e:	220d      	movs	r2, #13
 8000b80:	72da      	strb	r2, [r3, #11]
	ESP8266TXData[12] = 0x0a;
 8000b82:	4b7a      	ldr	r3, [pc, #488]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000b84:	220a      	movs	r2, #10
 8000b86:	731a      	strb	r2, [r3, #12]
	NoOfdata_byte=13;
 8000b88:	4b79      	ldr	r3, [pc, #484]	; (8000d70 <Send_WifiCmd+0x8a0>)
 8000b8a:	220d      	movs	r2, #13
 8000b8c:	701a      	strb	r2, [r3, #0]
	wifi_command=71;
 8000b8e:	4b76      	ldr	r3, [pc, #472]	; (8000d68 <Send_WifiCmd+0x898>)
 8000b90:	2247      	movs	r2, #71	; 0x47
 8000b92:	701a      	strb	r2, [r3, #0]
	Rxseqdecoder=4;
 8000b94:	4b77      	ldr	r3, [pc, #476]	; (8000d74 <Send_WifiCmd+0x8a4>)
 8000b96:	2204      	movs	r2, #4
 8000b98:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 8000b9a:	4b72      	ldr	r3, [pc, #456]	; (8000d64 <Send_WifiCmd+0x894>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,ESP8266TXData,NoOfdata_byte);
 8000ba0:	4b73      	ldr	r3, [pc, #460]	; (8000d70 <Send_WifiCmd+0x8a0>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	4970      	ldr	r1, [pc, #448]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000baa:	4873      	ldr	r0, [pc, #460]	; (8000d78 <Send_WifiCmd+0x8a8>)
 8000bac:	f00c fd5c 	bl	800d668 <HAL_UART_Transmit_IT>
	break;	  //2sec
 8000bb0:	f002 b803 	b.w	8002bba <Send_WifiCmd+0x26ea>
	case 71:
	if(++Timerdelay >15)
 8000bb4:	4b6b      	ldr	r3, [pc, #428]	; (8000d64 <Send_WifiCmd+0x894>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	4b69      	ldr	r3, [pc, #420]	; (8000d64 <Send_WifiCmd+0x894>)
 8000bbe:	701a      	strb	r2, [r3, #0]
 8000bc0:	4b68      	ldr	r3, [pc, #416]	; (8000d64 <Send_WifiCmd+0x894>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2b0f      	cmp	r3, #15
 8000bc6:	f241 87ed 	bls.w	8002ba4 <Send_WifiCmd+0x26d4>
	{
		Timerdelay=0;
 8000bca:	4b66      	ldr	r3, [pc, #408]	; (8000d64 <Send_WifiCmd+0x894>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	701a      	strb	r2, [r3, #0]
		wifi_command=10;   //70
 8000bd0:	4b65      	ldr	r3, [pc, #404]	; (8000d68 <Send_WifiCmd+0x898>)
 8000bd2:	220a      	movs	r2, #10
 8000bd4:	701a      	strb	r2, [r3, #0]
	}
	break;
 8000bd6:	f001 bfe5 	b.w	8002ba4 <Send_WifiCmd+0x26d4>
	case 80:
	ESP8266TXData[0] = 'A';
 8000bda:	4b64      	ldr	r3, [pc, #400]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000bdc:	2241      	movs	r2, #65	; 0x41
 8000bde:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[1] = 'T';
 8000be0:	4b62      	ldr	r3, [pc, #392]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000be2:	2254      	movs	r2, #84	; 0x54
 8000be4:	705a      	strb	r2, [r3, #1]
	ESP8266TXData[2] = '+';
 8000be6:	4b61      	ldr	r3, [pc, #388]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000be8:	222b      	movs	r2, #43	; 0x2b
 8000bea:	709a      	strb	r2, [r3, #2]
	ESP8266TXData[3] = 'C';
 8000bec:	4b5f      	ldr	r3, [pc, #380]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000bee:	2243      	movs	r2, #67	; 0x43
 8000bf0:	70da      	strb	r2, [r3, #3]
	ESP8266TXData[4] = 'I';
 8000bf2:	4b5e      	ldr	r3, [pc, #376]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000bf4:	2249      	movs	r2, #73	; 0x49
 8000bf6:	711a      	strb	r2, [r3, #4]
	ESP8266TXData[5] = 'P';
 8000bf8:	4b5c      	ldr	r3, [pc, #368]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000bfa:	2250      	movs	r2, #80	; 0x50
 8000bfc:	715a      	strb	r2, [r3, #5]
	ESP8266TXData[6] = 'S';
 8000bfe:	4b5b      	ldr	r3, [pc, #364]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000c00:	2253      	movs	r2, #83	; 0x53
 8000c02:	719a      	strb	r2, [r3, #6]
	ESP8266TXData[7] = 'T';
 8000c04:	4b59      	ldr	r3, [pc, #356]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000c06:	2254      	movs	r2, #84	; 0x54
 8000c08:	71da      	strb	r2, [r3, #7]
	ESP8266TXData[8] = 'A';
 8000c0a:	4b58      	ldr	r3, [pc, #352]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000c0c:	2241      	movs	r2, #65	; 0x41
 8000c0e:	721a      	strb	r2, [r3, #8]
	ESP8266TXData[9] = 'R';
 8000c10:	4b56      	ldr	r3, [pc, #344]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000c12:	2252      	movs	r2, #82	; 0x52
 8000c14:	725a      	strb	r2, [r3, #9]
	ESP8266TXData[10] = 'T';
 8000c16:	4b55      	ldr	r3, [pc, #340]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000c18:	2254      	movs	r2, #84	; 0x54
 8000c1a:	729a      	strb	r2, [r3, #10]
	ESP8266TXData[11] = '=';
 8000c1c:	4b53      	ldr	r3, [pc, #332]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000c1e:	223d      	movs	r2, #61	; 0x3d
 8000c20:	72da      	strb	r2, [r3, #11]
	ESP8266TXData[12] = '"';
 8000c22:	4b52      	ldr	r3, [pc, #328]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000c24:	2222      	movs	r2, #34	; 0x22
 8000c26:	731a      	strb	r2, [r3, #12]
	ESP8266TXData[13] = 'T';
 8000c28:	4b50      	ldr	r3, [pc, #320]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000c2a:	2254      	movs	r2, #84	; 0x54
 8000c2c:	735a      	strb	r2, [r3, #13]
	ESP8266TXData[14] = 'C';
 8000c2e:	4b4f      	ldr	r3, [pc, #316]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000c30:	2243      	movs	r2, #67	; 0x43
 8000c32:	739a      	strb	r2, [r3, #14]
	ESP8266TXData[15] = 'P';
 8000c34:	4b4d      	ldr	r3, [pc, #308]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000c36:	2250      	movs	r2, #80	; 0x50
 8000c38:	73da      	strb	r2, [r3, #15]
	ESP8266TXData[16] = '"';
 8000c3a:	4b4c      	ldr	r3, [pc, #304]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000c3c:	2222      	movs	r2, #34	; 0x22
 8000c3e:	741a      	strb	r2, [r3, #16]
	ESP8266TXData[17] = ',';
 8000c40:	4b4a      	ldr	r3, [pc, #296]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000c42:	222c      	movs	r2, #44	; 0x2c
 8000c44:	745a      	strb	r2, [r3, #17]
	ESP8266TXData[18] = '"';
 8000c46:	4b49      	ldr	r3, [pc, #292]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000c48:	2222      	movs	r2, #34	; 0x22
 8000c4a:	749a      	strb	r2, [r3, #18]
	ESP8266TXData[19] = 'l';	//ESP8266TXData[19] = '5';
 8000c4c:	4b47      	ldr	r3, [pc, #284]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000c4e:	226c      	movs	r2, #108	; 0x6c
 8000c50:	74da      	strb	r2, [r3, #19]
	ESP8266TXData[20] = 'p';	//ESP8266TXData[20] = '2';
 8000c52:	4b46      	ldr	r3, [pc, #280]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000c54:	2270      	movs	r2, #112	; 0x70
 8000c56:	751a      	strb	r2, [r3, #20]
	ESP8266TXData[21] = 'd';	//ESP8266TXData[21] = '.';
 8000c58:	4b44      	ldr	r3, [pc, #272]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000c5a:	2264      	movs	r2, #100	; 0x64
 8000c5c:	755a      	strb	r2, [r3, #21]
	ESP8266TXData[22] = 'c';	//ESP8266TXData[22] = '1';
 8000c5e:	4b43      	ldr	r3, [pc, #268]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000c60:	2263      	movs	r2, #99	; 0x63
 8000c62:	759a      	strb	r2, [r3, #22]
	ESP8266TXData[23] = '-';	//ESP8266TXData[23] = '8';
 8000c64:	4b41      	ldr	r3, [pc, #260]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000c66:	222d      	movs	r2, #45	; 0x2d
 8000c68:	75da      	strb	r2, [r3, #23]
	ESP8266TXData[24] = 'u';	//ESP8266TXData[24] = '4';
 8000c6a:	4b40      	ldr	r3, [pc, #256]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000c6c:	2275      	movs	r2, #117	; 0x75
 8000c6e:	761a      	strb	r2, [r3, #24]
	ESP8266TXData[25] = 's';	//ESP8266TXData[25] = '.';
 8000c70:	4b3e      	ldr	r3, [pc, #248]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000c72:	2273      	movs	r2, #115	; 0x73
 8000c74:	765a      	strb	r2, [r3, #25]
	ESP8266TXData[26] = 'm';	//ESP8266TXData[26] = '4';
 8000c76:	4b3d      	ldr	r3, [pc, #244]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000c78:	226d      	movs	r2, #109	; 0x6d
 8000c7a:	769a      	strb	r2, [r3, #26]
 	ESP8266TXData[27] = '3';	//ESP8266TXData[27] = '9';
 8000c7c:	4b3b      	ldr	r3, [pc, #236]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000c7e:	2233      	movs	r2, #51	; 0x33
 8000c80:	76da      	strb	r2, [r3, #27]
	ESP8266TXData[28] = '.';	//ESP8266TXData[28] = '.';
 8000c82:	4b3a      	ldr	r3, [pc, #232]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000c84:	222e      	movs	r2, #46	; 0x2e
 8000c86:	771a      	strb	r2, [r3, #28]
	ESP8266TXData[29] = 'a';	//ESP8266TXData[29] = '2';
 8000c88:	4b38      	ldr	r3, [pc, #224]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000c8a:	2261      	movs	r2, #97	; 0x61
 8000c8c:	775a      	strb	r2, [r3, #29]
	ESP8266TXData[30] = 'c';	//ESP8266TXData[30] = '5';
 8000c8e:	4b37      	ldr	r3, [pc, #220]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000c90:	2263      	movs	r2, #99	; 0x63
 8000c92:	779a      	strb	r2, [r3, #30]
	ESP8266TXData[31] = 'c';	//ESP8266TXData[31] = '5';
 8000c94:	4b35      	ldr	r3, [pc, #212]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000c96:	2263      	movs	r2, #99	; 0x63
 8000c98:	77da      	strb	r2, [r3, #31]
	ESP8266TXData[32] = 'e';	//ESP8266TXData[32] = '"';
 8000c9a:	4b34      	ldr	r3, [pc, #208]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000c9c:	2265      	movs	r2, #101	; 0x65
 8000c9e:	f883 2020 	strb.w	r2, [r3, #32]
	ESP8266TXData[33] = 'e';
 8000ca2:	4b32      	ldr	r3, [pc, #200]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000ca4:	2265      	movs	r2, #101	; 0x65
 8000ca6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	ESP8266TXData[34] = 'd';
 8000caa:	4b30      	ldr	r3, [pc, #192]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000cac:	2264      	movs	r2, #100	; 0x64
 8000cae:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	ESP8266TXData[35] = 'o';
 8000cb2:	4b2e      	ldr	r3, [pc, #184]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000cb4:	226f      	movs	r2, #111	; 0x6f
 8000cb6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	ESP8266TXData[36] = '.';
 8000cba:	4b2c      	ldr	r3, [pc, #176]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000cbc:	222e      	movs	r2, #46	; 0x2e
 8000cbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	ESP8266TXData[37] = 'i';
 8000cc2:	4b2a      	ldr	r3, [pc, #168]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000cc4:	2269      	movs	r2, #105	; 0x69
 8000cc6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	ESP8266TXData[38] = 'n';
 8000cca:	4b28      	ldr	r3, [pc, #160]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000ccc:	226e      	movs	r2, #110	; 0x6e
 8000cce:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	ESP8266TXData[39] = '"';
 8000cd2:	4b26      	ldr	r3, [pc, #152]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000cd4:	2222      	movs	r2, #34	; 0x22
 8000cd6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	ESP8266TXData[40] = ',';
 8000cda:	4b24      	ldr	r3, [pc, #144]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000cdc:	222c      	movs	r2, #44	; 0x2c
 8000cde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	ESP8266TXData[41] = '9';
 8000ce2:	4b22      	ldr	r3, [pc, #136]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000ce4:	2239      	movs	r2, #57	; 0x39
 8000ce6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	ESP8266TXData[42] = '0';
 8000cea:	4b20      	ldr	r3, [pc, #128]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000cec:	2230      	movs	r2, #48	; 0x30
 8000cee:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	ESP8266TXData[43] = '0';
 8000cf2:	4b1e      	ldr	r3, [pc, #120]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000cf4:	2230      	movs	r2, #48	; 0x30
 8000cf6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	ESP8266TXData[44] = '9';
 8000cfa:	4b1c      	ldr	r3, [pc, #112]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000cfc:	2239      	movs	r2, #57	; 0x39
 8000cfe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	ESP8266TXData[45] = 0x0d;
 8000d02:	4b1a      	ldr	r3, [pc, #104]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000d04:	220d      	movs	r2, #13
 8000d06:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	ESP8266TXData[46] = 0x0a;
 8000d0a:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000d0c:	220a      	movs	r2, #10
 8000d0e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	NoOfdata_byte=47;//41;
 8000d12:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <Send_WifiCmd+0x8a0>)
 8000d14:	222f      	movs	r2, #47	; 0x2f
 8000d16:	701a      	strb	r2, [r3, #0]
	wifi_command=81;
 8000d18:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <Send_WifiCmd+0x898>)
 8000d1a:	2251      	movs	r2, #81	; 0x51
 8000d1c:	701a      	strb	r2, [r3, #0]
	Rxseqdecoder=5;
 8000d1e:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <Send_WifiCmd+0x8a4>)
 8000d20:	2205      	movs	r2, #5
 8000d22:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 8000d24:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <Send_WifiCmd+0x894>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,ESP8266TXData,NoOfdata_byte);
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <Send_WifiCmd+0x8a0>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	461a      	mov	r2, r3
 8000d32:	490e      	ldr	r1, [pc, #56]	; (8000d6c <Send_WifiCmd+0x89c>)
 8000d34:	4810      	ldr	r0, [pc, #64]	; (8000d78 <Send_WifiCmd+0x8a8>)
 8000d36:	f00c fc97 	bl	800d668 <HAL_UART_Transmit_IT>
	break;
 8000d3a:	f001 bf3e 	b.w	8002bba <Send_WifiCmd+0x26ea>
	case 81:					//5sec
	if(++Timerdelay >20)
 8000d3e:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <Send_WifiCmd+0x894>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	3301      	adds	r3, #1
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <Send_WifiCmd+0x894>)
 8000d48:	701a      	strb	r2, [r3, #0]
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <Send_WifiCmd+0x894>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	2b14      	cmp	r3, #20
 8000d50:	f241 872a 	bls.w	8002ba8 <Send_WifiCmd+0x26d8>
	{
		Timerdelay=0;
 8000d54:	4b03      	ldr	r3, [pc, #12]	; (8000d64 <Send_WifiCmd+0x894>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	701a      	strb	r2, [r3, #0]
		wifi_command=10;
 8000d5a:	4b03      	ldr	r3, [pc, #12]	; (8000d68 <Send_WifiCmd+0x898>)
 8000d5c:	220a      	movs	r2, #10
 8000d5e:	701a      	strb	r2, [r3, #0]
	}
	break;
 8000d60:	f001 bf22 	b.w	8002ba8 <Send_WifiCmd+0x26d8>
 8000d64:	20000258 	.word	0x20000258
 8000d68:	2000008d 	.word	0x2000008d
 8000d6c:	20000090 	.word	0x20000090
 8000d70:	20000257 	.word	0x20000257
 8000d74:	20000255 	.word	0x20000255
 8000d78:	200003d4 	.word	0x200003d4
	}
	else{
		Sl_no_to_send 				= Sl_no;
	}*/
	//ContentLength = (58*NoOfBatch_to_Send)+1+(NoOfBatch_to_Send);
	NoOfBatch_to_Send=1;
 8000d7c:	4b5e      	ldr	r3, [pc, #376]	; (8000ef8 <Send_WifiCmd+0xa28>)
 8000d7e:	2201      	movs	r2, #1
 8000d80:	701a      	strb	r2, [r3, #0]
	ContentLength = (60*NoOfBatch_to_Send)-(NoOfBatch_to_Send-1);
 8000d82:	4b5d      	ldr	r3, [pc, #372]	; (8000ef8 <Send_WifiCmd+0xa28>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	461a      	mov	r2, r3
 8000d88:	4613      	mov	r3, r2
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	1a9b      	subs	r3, r3, r2
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	461a      	mov	r2, r3
 8000d92:	4b59      	ldr	r3, [pc, #356]	; (8000ef8 <Send_WifiCmd+0xa28>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	4b57      	ldr	r3, [pc, #348]	; (8000efc <Send_WifiCmd+0xa2c>)
 8000d9e:	601a      	str	r2, [r3, #0]
	Dyn_data_calc = 151+(ContentLength);
 8000da0:	4b56      	ldr	r3, [pc, #344]	; (8000efc <Send_WifiCmd+0xa2c>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	3397      	adds	r3, #151	; 0x97
 8000da8:	b29a      	uxth	r2, r3
 8000daa:	4b55      	ldr	r3, [pc, #340]	; (8000f00 <Send_WifiCmd+0xa30>)
 8000dac:	801a      	strh	r2, [r3, #0]
	Framecheck=0;
 8000dae:	4b55      	ldr	r3, [pc, #340]	; (8000f04 <Send_WifiCmd+0xa34>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[0] = 'A';
 8000db4:	4b54      	ldr	r3, [pc, #336]	; (8000f08 <Send_WifiCmd+0xa38>)
 8000db6:	2241      	movs	r2, #65	; 0x41
 8000db8:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[1] = 'T';
 8000dba:	4b53      	ldr	r3, [pc, #332]	; (8000f08 <Send_WifiCmd+0xa38>)
 8000dbc:	2254      	movs	r2, #84	; 0x54
 8000dbe:	705a      	strb	r2, [r3, #1]
	ESP8266TXData[2] = '+';
 8000dc0:	4b51      	ldr	r3, [pc, #324]	; (8000f08 <Send_WifiCmd+0xa38>)
 8000dc2:	222b      	movs	r2, #43	; 0x2b
 8000dc4:	709a      	strb	r2, [r3, #2]
	ESP8266TXData[3] = 'C';
 8000dc6:	4b50      	ldr	r3, [pc, #320]	; (8000f08 <Send_WifiCmd+0xa38>)
 8000dc8:	2243      	movs	r2, #67	; 0x43
 8000dca:	70da      	strb	r2, [r3, #3]
	ESP8266TXData[4] = 'I';
 8000dcc:	4b4e      	ldr	r3, [pc, #312]	; (8000f08 <Send_WifiCmd+0xa38>)
 8000dce:	2249      	movs	r2, #73	; 0x49
 8000dd0:	711a      	strb	r2, [r3, #4]
	ESP8266TXData[5] = 'P';
 8000dd2:	4b4d      	ldr	r3, [pc, #308]	; (8000f08 <Send_WifiCmd+0xa38>)
 8000dd4:	2250      	movs	r2, #80	; 0x50
 8000dd6:	715a      	strb	r2, [r3, #5]
	ESP8266TXData[6] = 'S';
 8000dd8:	4b4b      	ldr	r3, [pc, #300]	; (8000f08 <Send_WifiCmd+0xa38>)
 8000dda:	2253      	movs	r2, #83	; 0x53
 8000ddc:	719a      	strb	r2, [r3, #6]
	ESP8266TXData[7] = 'E';
 8000dde:	4b4a      	ldr	r3, [pc, #296]	; (8000f08 <Send_WifiCmd+0xa38>)
 8000de0:	2245      	movs	r2, #69	; 0x45
 8000de2:	71da      	strb	r2, [r3, #7]
	ESP8266TXData[8] = 'N';
 8000de4:	4b48      	ldr	r3, [pc, #288]	; (8000f08 <Send_WifiCmd+0xa38>)
 8000de6:	224e      	movs	r2, #78	; 0x4e
 8000de8:	721a      	strb	r2, [r3, #8]
	ESP8266TXData[9] = 'D';
 8000dea:	4b47      	ldr	r3, [pc, #284]	; (8000f08 <Send_WifiCmd+0xa38>)
 8000dec:	2244      	movs	r2, #68	; 0x44
 8000dee:	725a      	strb	r2, [r3, #9]
	ESP8266TXData[10] = '=';
 8000df0:	4b45      	ldr	r3, [pc, #276]	; (8000f08 <Send_WifiCmd+0xa38>)
 8000df2:	223d      	movs	r2, #61	; 0x3d
 8000df4:	729a      	strb	r2, [r3, #10]
	ESP8266TXData[11] = (unsigned char)(((Dyn_data_calc%10000)/1000)+0x30);
 8000df6:	4b42      	ldr	r3, [pc, #264]	; (8000f00 <Send_WifiCmd+0xa30>)
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	4a44      	ldr	r2, [pc, #272]	; (8000f0c <Send_WifiCmd+0xa3c>)
 8000dfc:	fba2 1203 	umull	r1, r2, r2, r3
 8000e00:	0b52      	lsrs	r2, r2, #13
 8000e02:	f242 7110 	movw	r1, #10000	; 0x2710
 8000e06:	fb01 f202 	mul.w	r2, r1, r2
 8000e0a:	1a9b      	subs	r3, r3, r2
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	4a40      	ldr	r2, [pc, #256]	; (8000f10 <Send_WifiCmd+0xa40>)
 8000e10:	fba2 2303 	umull	r2, r3, r2, r3
 8000e14:	099b      	lsrs	r3, r3, #6
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	3330      	adds	r3, #48	; 0x30
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4b3a      	ldr	r3, [pc, #232]	; (8000f08 <Send_WifiCmd+0xa38>)
 8000e20:	72da      	strb	r2, [r3, #11]
 	ESP8266TXData[12] = (unsigned char)(((Dyn_data_calc%1000)/100)+0x30);	  //url_send	ESP8266TXData[13] = '2';
 8000e22:	4b37      	ldr	r3, [pc, #220]	; (8000f00 <Send_WifiCmd+0xa30>)
 8000e24:	881b      	ldrh	r3, [r3, #0]
 8000e26:	4a3a      	ldr	r2, [pc, #232]	; (8000f10 <Send_WifiCmd+0xa40>)
 8000e28:	fba2 1203 	umull	r1, r2, r2, r3
 8000e2c:	0992      	lsrs	r2, r2, #6
 8000e2e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e32:	fb01 f202 	mul.w	r2, r1, r2
 8000e36:	1a9b      	subs	r3, r3, r2
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	4a36      	ldr	r2, [pc, #216]	; (8000f14 <Send_WifiCmd+0xa44>)
 8000e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e40:	095b      	lsrs	r3, r3, #5
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	3330      	adds	r3, #48	; 0x30
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	4b2f      	ldr	r3, [pc, #188]	; (8000f08 <Send_WifiCmd+0xa38>)
 8000e4c:	731a      	strb	r2, [r3, #12]
	ESP8266TXData[13] = (unsigned char)(((Dyn_data_calc%100)/10)+0x30);	//	ESP8266TXData[14] = '0';
 8000e4e:	4b2c      	ldr	r3, [pc, #176]	; (8000f00 <Send_WifiCmd+0xa30>)
 8000e50:	881b      	ldrh	r3, [r3, #0]
 8000e52:	4a30      	ldr	r2, [pc, #192]	; (8000f14 <Send_WifiCmd+0xa44>)
 8000e54:	fba2 1203 	umull	r1, r2, r2, r3
 8000e58:	0952      	lsrs	r2, r2, #5
 8000e5a:	2164      	movs	r1, #100	; 0x64
 8000e5c:	fb01 f202 	mul.w	r2, r1, r2
 8000e60:	1a9b      	subs	r3, r3, r2
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	4a2c      	ldr	r2, [pc, #176]	; (8000f18 <Send_WifiCmd+0xa48>)
 8000e66:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6a:	08db      	lsrs	r3, r3, #3
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	3330      	adds	r3, #48	; 0x30
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	4b24      	ldr	r3, [pc, #144]	; (8000f08 <Send_WifiCmd+0xa38>)
 8000e76:	735a      	strb	r2, [r3, #13]
	ESP8266TXData[14] = (unsigned char)((Dyn_data_calc%10)+0x30);		//	ESP8266TXData[15] = '3';	//179-178  //194
 8000e78:	4b21      	ldr	r3, [pc, #132]	; (8000f00 <Send_WifiCmd+0xa30>)
 8000e7a:	881a      	ldrh	r2, [r3, #0]
 8000e7c:	4b26      	ldr	r3, [pc, #152]	; (8000f18 <Send_WifiCmd+0xa48>)
 8000e7e:	fba3 1302 	umull	r1, r3, r3, r2
 8000e82:	08d9      	lsrs	r1, r3, #3
 8000e84:	460b      	mov	r3, r1
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	440b      	add	r3, r1
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	3330      	adds	r3, #48	; 0x30
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	4b1c      	ldr	r3, [pc, #112]	; (8000f08 <Send_WifiCmd+0xa38>)
 8000e98:	739a      	strb	r2, [r3, #14]
	ESP8266TXData[15] = 0x0d;
 8000e9a:	4b1b      	ldr	r3, [pc, #108]	; (8000f08 <Send_WifiCmd+0xa38>)
 8000e9c:	220d      	movs	r2, #13
 8000e9e:	73da      	strb	r2, [r3, #15]
	ESP8266TXData[16] = 0x0a;
 8000ea0:	4b19      	ldr	r3, [pc, #100]	; (8000f08 <Send_WifiCmd+0xa38>)
 8000ea2:	220a      	movs	r2, #10
 8000ea4:	741a      	strb	r2, [r3, #16]
	NoOfdata_byte	= 17;
 8000ea6:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <Send_WifiCmd+0xa4c>)
 8000ea8:	2211      	movs	r2, #17
 8000eaa:	701a      	strb	r2, [r3, #0]
	wifi_command=91;
 8000eac:	4b1c      	ldr	r3, [pc, #112]	; (8000f20 <Send_WifiCmd+0xa50>)
 8000eae:	225b      	movs	r2, #91	; 0x5b
 8000eb0:	701a      	strb	r2, [r3, #0]
	Rxseqdecoder=6;
 8000eb2:	4b1c      	ldr	r3, [pc, #112]	; (8000f24 <Send_WifiCmd+0xa54>)
 8000eb4:	2206      	movs	r2, #6
 8000eb6:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 8000eb8:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <Send_WifiCmd+0xa58>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,ESP8266TXData,NoOfdata_byte);
 8000ebe:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <Send_WifiCmd+0xa4c>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4910      	ldr	r1, [pc, #64]	; (8000f08 <Send_WifiCmd+0xa38>)
 8000ec8:	4818      	ldr	r0, [pc, #96]	; (8000f2c <Send_WifiCmd+0xa5c>)
 8000eca:	f00c fbcd 	bl	800d668 <HAL_UART_Transmit_IT>
	break;
 8000ece:	f001 be74 	b.w	8002bba <Send_WifiCmd+0x26ea>
	case 91:
	if(++Timerdelay >15)
 8000ed2:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <Send_WifiCmd+0xa58>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <Send_WifiCmd+0xa58>)
 8000edc:	701a      	strb	r2, [r3, #0]
 8000ede:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <Send_WifiCmd+0xa58>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b0f      	cmp	r3, #15
 8000ee4:	f241 8662 	bls.w	8002bac <Send_WifiCmd+0x26dc>
	{
		Timerdelay=0;
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <Send_WifiCmd+0xa58>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	701a      	strb	r2, [r3, #0]
		wifi_command=10;
 8000eee:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <Send_WifiCmd+0xa50>)
 8000ef0:	220a      	movs	r2, #10
 8000ef2:	701a      	strb	r2, [r3, #0]
	}
	break;
 8000ef4:	f001 be5a 	b.w	8002bac <Send_WifiCmd+0x26dc>
 8000ef8:	2000025c 	.word	0x2000025c
 8000efc:	20000260 	.word	0x20000260
 8000f00:	2000025a 	.word	0x2000025a
 8000f04:	2000025d 	.word	0x2000025d
 8000f08:	20000090 	.word	0x20000090
 8000f0c:	d1b71759 	.word	0xd1b71759
 8000f10:	10624dd3 	.word	0x10624dd3
 8000f14:	51eb851f 	.word	0x51eb851f
 8000f18:	cccccccd 	.word	0xcccccccd
 8000f1c:	20000257 	.word	0x20000257
 8000f20:	2000008d 	.word	0x2000008d
 8000f24:	20000255 	.word	0x20000255
 8000f28:	20000258 	.word	0x20000258
 8000f2c:	200003d4 	.word	0x200003d4
	case 100:

	url_buffer =0;
 8000f30:	4ba0      	ldr	r3, [pc, #640]	; (80011b4 <Send_WifiCmd+0xce4>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	701a      	strb	r2, [r3, #0]
   	ESP8266TXData[url_buffer] = 'P';
 8000f36:	4b9f      	ldr	r3, [pc, #636]	; (80011b4 <Send_WifiCmd+0xce4>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	4b9e      	ldr	r3, [pc, #632]	; (80011b8 <Send_WifiCmd+0xce8>)
 8000f3e:	2150      	movs	r1, #80	; 0x50
 8000f40:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8000f42:	4b9c      	ldr	r3, [pc, #624]	; (80011b4 <Send_WifiCmd+0xce4>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	3301      	adds	r3, #1
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	4b9a      	ldr	r3, [pc, #616]	; (80011b4 <Send_WifiCmd+0xce4>)
 8000f4c:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] = 'O';
 8000f4e:	4b99      	ldr	r3, [pc, #612]	; (80011b4 <Send_WifiCmd+0xce4>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	461a      	mov	r2, r3
 8000f54:	4b98      	ldr	r3, [pc, #608]	; (80011b8 <Send_WifiCmd+0xce8>)
 8000f56:	214f      	movs	r1, #79	; 0x4f
 8000f58:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8000f5a:	4b96      	ldr	r3, [pc, #600]	; (80011b4 <Send_WifiCmd+0xce4>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	4b94      	ldr	r3, [pc, #592]	; (80011b4 <Send_WifiCmd+0xce4>)
 8000f64:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] = 'S';
 8000f66:	4b93      	ldr	r3, [pc, #588]	; (80011b4 <Send_WifiCmd+0xce4>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	4b92      	ldr	r3, [pc, #584]	; (80011b8 <Send_WifiCmd+0xce8>)
 8000f6e:	2153      	movs	r1, #83	; 0x53
 8000f70:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8000f72:	4b90      	ldr	r3, [pc, #576]	; (80011b4 <Send_WifiCmd+0xce4>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	3301      	adds	r3, #1
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	4b8e      	ldr	r3, [pc, #568]	; (80011b4 <Send_WifiCmd+0xce4>)
 8000f7c:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] = 'T';
 8000f7e:	4b8d      	ldr	r3, [pc, #564]	; (80011b4 <Send_WifiCmd+0xce4>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	461a      	mov	r2, r3
 8000f84:	4b8c      	ldr	r3, [pc, #560]	; (80011b8 <Send_WifiCmd+0xce8>)
 8000f86:	2154      	movs	r1, #84	; 0x54
 8000f88:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8000f8a:	4b8a      	ldr	r3, [pc, #552]	; (80011b4 <Send_WifiCmd+0xce4>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	4b88      	ldr	r3, [pc, #544]	; (80011b4 <Send_WifiCmd+0xce4>)
 8000f94:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] = ' ';
 8000f96:	4b87      	ldr	r3, [pc, #540]	; (80011b4 <Send_WifiCmd+0xce4>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	4b86      	ldr	r3, [pc, #536]	; (80011b8 <Send_WifiCmd+0xce8>)
 8000f9e:	2120      	movs	r1, #32
 8000fa0:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8000fa2:	4b84      	ldr	r3, [pc, #528]	; (80011b4 <Send_WifiCmd+0xce4>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4b82      	ldr	r3, [pc, #520]	; (80011b4 <Send_WifiCmd+0xce4>)
 8000fac:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] = '/';
 8000fae:	4b81      	ldr	r3, [pc, #516]	; (80011b4 <Send_WifiCmd+0xce4>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	4b80      	ldr	r3, [pc, #512]	; (80011b8 <Send_WifiCmd+0xce8>)
 8000fb6:	212f      	movs	r1, #47	; 0x2f
 8000fb8:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8000fba:	4b7e      	ldr	r3, [pc, #504]	; (80011b4 <Send_WifiCmd+0xce4>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4b7c      	ldr	r3, [pc, #496]	; (80011b4 <Send_WifiCmd+0xce4>)
 8000fc4:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] = 'p';
 8000fc6:	4b7b      	ldr	r3, [pc, #492]	; (80011b4 <Send_WifiCmd+0xce4>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	4b7a      	ldr	r3, [pc, #488]	; (80011b8 <Send_WifiCmd+0xce8>)
 8000fce:	2170      	movs	r1, #112	; 0x70
 8000fd0:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8000fd2:	4b78      	ldr	r3, [pc, #480]	; (80011b4 <Send_WifiCmd+0xce4>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4b76      	ldr	r3, [pc, #472]	; (80011b4 <Send_WifiCmd+0xce4>)
 8000fdc:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] = 'r';
 8000fde:	4b75      	ldr	r3, [pc, #468]	; (80011b4 <Send_WifiCmd+0xce4>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	4b74      	ldr	r3, [pc, #464]	; (80011b8 <Send_WifiCmd+0xce8>)
 8000fe6:	2172      	movs	r1, #114	; 0x72
 8000fe8:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8000fea:	4b72      	ldr	r3, [pc, #456]	; (80011b4 <Send_WifiCmd+0xce4>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	4b70      	ldr	r3, [pc, #448]	; (80011b4 <Send_WifiCmd+0xce4>)
 8000ff4:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] = 'o';
 8000ff6:	4b6f      	ldr	r3, [pc, #444]	; (80011b4 <Send_WifiCmd+0xce4>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	4b6e      	ldr	r3, [pc, #440]	; (80011b8 <Send_WifiCmd+0xce8>)
 8000ffe:	216f      	movs	r1, #111	; 0x6f
 8001000:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001002:	4b6c      	ldr	r3, [pc, #432]	; (80011b4 <Send_WifiCmd+0xce4>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	3301      	adds	r3, #1
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4b6a      	ldr	r3, [pc, #424]	; (80011b4 <Send_WifiCmd+0xce4>)
 800100c:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] = 'd';
 800100e:	4b69      	ldr	r3, [pc, #420]	; (80011b4 <Send_WifiCmd+0xce4>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	461a      	mov	r2, r3
 8001014:	4b68      	ldr	r3, [pc, #416]	; (80011b8 <Send_WifiCmd+0xce8>)
 8001016:	2164      	movs	r1, #100	; 0x64
 8001018:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 800101a:	4b66      	ldr	r3, [pc, #408]	; (80011b4 <Send_WifiCmd+0xce4>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	3301      	adds	r3, #1
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4b64      	ldr	r3, [pc, #400]	; (80011b4 <Send_WifiCmd+0xce4>)
 8001024:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] = 'u';
 8001026:	4b63      	ldr	r3, [pc, #396]	; (80011b4 <Send_WifiCmd+0xce4>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	461a      	mov	r2, r3
 800102c:	4b62      	ldr	r3, [pc, #392]	; (80011b8 <Send_WifiCmd+0xce8>)
 800102e:	2175      	movs	r1, #117	; 0x75
 8001030:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001032:	4b60      	ldr	r3, [pc, #384]	; (80011b4 <Send_WifiCmd+0xce4>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	3301      	adds	r3, #1
 8001038:	b2da      	uxtb	r2, r3
 800103a:	4b5e      	ldr	r3, [pc, #376]	; (80011b4 <Send_WifiCmd+0xce4>)
 800103c:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] = 'c';
 800103e:	4b5d      	ldr	r3, [pc, #372]	; (80011b4 <Send_WifiCmd+0xce4>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	461a      	mov	r2, r3
 8001044:	4b5c      	ldr	r3, [pc, #368]	; (80011b8 <Send_WifiCmd+0xce8>)
 8001046:	2163      	movs	r1, #99	; 0x63
 8001048:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 800104a:	4b5a      	ldr	r3, [pc, #360]	; (80011b4 <Send_WifiCmd+0xce4>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	3301      	adds	r3, #1
 8001050:	b2da      	uxtb	r2, r3
 8001052:	4b58      	ldr	r3, [pc, #352]	; (80011b4 <Send_WifiCmd+0xce4>)
 8001054:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] = 't';
 8001056:	4b57      	ldr	r3, [pc, #348]	; (80011b4 <Send_WifiCmd+0xce4>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	461a      	mov	r2, r3
 800105c:	4b56      	ldr	r3, [pc, #344]	; (80011b8 <Send_WifiCmd+0xce8>)
 800105e:	2174      	movs	r1, #116	; 0x74
 8001060:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001062:	4b54      	ldr	r3, [pc, #336]	; (80011b4 <Send_WifiCmd+0xce4>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	3301      	adds	r3, #1
 8001068:	b2da      	uxtb	r2, r3
 800106a:	4b52      	ldr	r3, [pc, #328]	; (80011b4 <Send_WifiCmd+0xce4>)
 800106c:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] = 'i';
 800106e:	4b51      	ldr	r3, [pc, #324]	; (80011b4 <Send_WifiCmd+0xce4>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	461a      	mov	r2, r3
 8001074:	4b50      	ldr	r3, [pc, #320]	; (80011b8 <Send_WifiCmd+0xce8>)
 8001076:	2169      	movs	r1, #105	; 0x69
 8001078:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 800107a:	4b4e      	ldr	r3, [pc, #312]	; (80011b4 <Send_WifiCmd+0xce4>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	3301      	adds	r3, #1
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4b4c      	ldr	r3, [pc, #304]	; (80011b4 <Send_WifiCmd+0xce4>)
 8001084:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] = 'o';
 8001086:	4b4b      	ldr	r3, [pc, #300]	; (80011b4 <Send_WifiCmd+0xce4>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	461a      	mov	r2, r3
 800108c:	4b4a      	ldr	r3, [pc, #296]	; (80011b8 <Send_WifiCmd+0xce8>)
 800108e:	216f      	movs	r1, #111	; 0x6f
 8001090:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001092:	4b48      	ldr	r3, [pc, #288]	; (80011b4 <Send_WifiCmd+0xce4>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	3301      	adds	r3, #1
 8001098:	b2da      	uxtb	r2, r3
 800109a:	4b46      	ldr	r3, [pc, #280]	; (80011b4 <Send_WifiCmd+0xce4>)
 800109c:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] = 'n';
 800109e:	4b45      	ldr	r3, [pc, #276]	; (80011b4 <Send_WifiCmd+0xce4>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	461a      	mov	r2, r3
 80010a4:	4b44      	ldr	r3, [pc, #272]	; (80011b8 <Send_WifiCmd+0xce8>)
 80010a6:	216e      	movs	r1, #110	; 0x6e
 80010a8:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 80010aa:	4b42      	ldr	r3, [pc, #264]	; (80011b4 <Send_WifiCmd+0xce4>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	3301      	adds	r3, #1
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	4b40      	ldr	r3, [pc, #256]	; (80011b4 <Send_WifiCmd+0xce4>)
 80010b4:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] = 'C';
 80010b6:	4b3f      	ldr	r3, [pc, #252]	; (80011b4 <Send_WifiCmd+0xce4>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	461a      	mov	r2, r3
 80010bc:	4b3e      	ldr	r3, [pc, #248]	; (80011b8 <Send_WifiCmd+0xce8>)
 80010be:	2143      	movs	r1, #67	; 0x43
 80010c0:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 80010c2:	4b3c      	ldr	r3, [pc, #240]	; (80011b4 <Send_WifiCmd+0xce4>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	3301      	adds	r3, #1
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	4b3a      	ldr	r3, [pc, #232]	; (80011b4 <Send_WifiCmd+0xce4>)
 80010cc:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] = 'o';
 80010ce:	4b39      	ldr	r3, [pc, #228]	; (80011b4 <Send_WifiCmd+0xce4>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	461a      	mov	r2, r3
 80010d4:	4b38      	ldr	r3, [pc, #224]	; (80011b8 <Send_WifiCmd+0xce8>)
 80010d6:	216f      	movs	r1, #111	; 0x6f
 80010d8:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 80010da:	4b36      	ldr	r3, [pc, #216]	; (80011b4 <Send_WifiCmd+0xce4>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	3301      	adds	r3, #1
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4b34      	ldr	r3, [pc, #208]	; (80011b4 <Send_WifiCmd+0xce4>)
 80010e4:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] = 'u';
 80010e6:	4b33      	ldr	r3, [pc, #204]	; (80011b4 <Send_WifiCmd+0xce4>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	461a      	mov	r2, r3
 80010ec:	4b32      	ldr	r3, [pc, #200]	; (80011b8 <Send_WifiCmd+0xce8>)
 80010ee:	2175      	movs	r1, #117	; 0x75
 80010f0:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 80010f2:	4b30      	ldr	r3, [pc, #192]	; (80011b4 <Send_WifiCmd+0xce4>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	3301      	adds	r3, #1
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	4b2e      	ldr	r3, [pc, #184]	; (80011b4 <Send_WifiCmd+0xce4>)
 80010fc:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] = 'n';
 80010fe:	4b2d      	ldr	r3, [pc, #180]	; (80011b4 <Send_WifiCmd+0xce4>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	461a      	mov	r2, r3
 8001104:	4b2c      	ldr	r3, [pc, #176]	; (80011b8 <Send_WifiCmd+0xce8>)
 8001106:	216e      	movs	r1, #110	; 0x6e
 8001108:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 800110a:	4b2a      	ldr	r3, [pc, #168]	; (80011b4 <Send_WifiCmd+0xce4>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	3301      	adds	r3, #1
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4b28      	ldr	r3, [pc, #160]	; (80011b4 <Send_WifiCmd+0xce4>)
 8001114:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] = 't';
 8001116:	4b27      	ldr	r3, [pc, #156]	; (80011b4 <Send_WifiCmd+0xce4>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	461a      	mov	r2, r3
 800111c:	4b26      	ldr	r3, [pc, #152]	; (80011b8 <Send_WifiCmd+0xce8>)
 800111e:	2174      	movs	r1, #116	; 0x74
 8001120:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001122:	4b24      	ldr	r3, [pc, #144]	; (80011b4 <Send_WifiCmd+0xce4>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	3301      	adds	r3, #1
 8001128:	b2da      	uxtb	r2, r3
 800112a:	4b22      	ldr	r3, [pc, #136]	; (80011b4 <Send_WifiCmd+0xce4>)
 800112c:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] = 'P';
 800112e:	4b21      	ldr	r3, [pc, #132]	; (80011b4 <Send_WifiCmd+0xce4>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	461a      	mov	r2, r3
 8001134:	4b20      	ldr	r3, [pc, #128]	; (80011b8 <Send_WifiCmd+0xce8>)
 8001136:	2150      	movs	r1, #80	; 0x50
 8001138:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 800113a:	4b1e      	ldr	r3, [pc, #120]	; (80011b4 <Send_WifiCmd+0xce4>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	3301      	adds	r3, #1
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <Send_WifiCmd+0xce4>)
 8001144:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] = 'o';
 8001146:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <Send_WifiCmd+0xce4>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	461a      	mov	r2, r3
 800114c:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <Send_WifiCmd+0xce8>)
 800114e:	216f      	movs	r1, #111	; 0x6f
 8001150:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001152:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <Send_WifiCmd+0xce4>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	3301      	adds	r3, #1
 8001158:	b2da      	uxtb	r2, r3
 800115a:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <Send_WifiCmd+0xce4>)
 800115c:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] = 's';
 800115e:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <Send_WifiCmd+0xce4>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	461a      	mov	r2, r3
 8001164:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <Send_WifiCmd+0xce8>)
 8001166:	2173      	movs	r1, #115	; 0x73
 8001168:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 800116a:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <Send_WifiCmd+0xce4>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	3301      	adds	r3, #1
 8001170:	b2da      	uxtb	r2, r3
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <Send_WifiCmd+0xce4>)
 8001174:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] = 't';
 8001176:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <Send_WifiCmd+0xce4>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	461a      	mov	r2, r3
 800117c:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <Send_WifiCmd+0xce8>)
 800117e:	2174      	movs	r1, #116	; 0x74
 8001180:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001182:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <Send_WifiCmd+0xce4>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	3301      	adds	r3, #1
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <Send_WifiCmd+0xce4>)
 800118c:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] = '?';
 800118e:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <Send_WifiCmd+0xce4>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	461a      	mov	r2, r3
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <Send_WifiCmd+0xce8>)
 8001196:	213f      	movs	r1, #63	; 0x3f
 8001198:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 800119a:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <Send_WifiCmd+0xce4>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	3301      	adds	r3, #1
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <Send_WifiCmd+0xce4>)
 80011a4:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] = 'm';
 80011a6:	4b03      	ldr	r3, [pc, #12]	; (80011b4 <Send_WifiCmd+0xce4>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	461a      	mov	r2, r3
 80011ac:	4b02      	ldr	r3, [pc, #8]	; (80011b8 <Send_WifiCmd+0xce8>)
 80011ae:	216d      	movs	r1, #109	; 0x6d
 80011b0:	5499      	strb	r1, [r3, r2]
 80011b2:	e003      	b.n	80011bc <Send_WifiCmd+0xcec>
 80011b4:	20000259 	.word	0x20000259
 80011b8:	20000090 	.word	0x20000090
    url_buffer++;
 80011bc:	4ba0      	ldr	r3, [pc, #640]	; (8001440 <Send_WifiCmd+0xf70>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	3301      	adds	r3, #1
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	4b9e      	ldr	r3, [pc, #632]	; (8001440 <Send_WifiCmd+0xf70>)
 80011c6:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] = 'a';
 80011c8:	4b9d      	ldr	r3, [pc, #628]	; (8001440 <Send_WifiCmd+0xf70>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b9d      	ldr	r3, [pc, #628]	; (8001444 <Send_WifiCmd+0xf74>)
 80011d0:	2161      	movs	r1, #97	; 0x61
 80011d2:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 80011d4:	4b9a      	ldr	r3, [pc, #616]	; (8001440 <Send_WifiCmd+0xf70>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	3301      	adds	r3, #1
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	4b98      	ldr	r3, [pc, #608]	; (8001440 <Send_WifiCmd+0xf70>)
 80011de:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] = 'c';
 80011e0:	4b97      	ldr	r3, [pc, #604]	; (8001440 <Send_WifiCmd+0xf70>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	461a      	mov	r2, r3
 80011e6:	4b97      	ldr	r3, [pc, #604]	; (8001444 <Send_WifiCmd+0xf74>)
 80011e8:	2163      	movs	r1, #99	; 0x63
 80011ea:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 80011ec:	4b94      	ldr	r3, [pc, #592]	; (8001440 <Send_WifiCmd+0xf70>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	3301      	adds	r3, #1
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	4b92      	ldr	r3, [pc, #584]	; (8001440 <Send_WifiCmd+0xf70>)
 80011f6:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] = '=';
 80011f8:	4b91      	ldr	r3, [pc, #580]	; (8001440 <Send_WifiCmd+0xf70>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b91      	ldr	r3, [pc, #580]	; (8001444 <Send_WifiCmd+0xf74>)
 8001200:	213d      	movs	r1, #61	; 0x3d
 8001202:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001204:	4b8e      	ldr	r3, [pc, #568]	; (8001440 <Send_WifiCmd+0xf70>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	3301      	adds	r3, #1
 800120a:	b2da      	uxtb	r2, r3
 800120c:	4b8c      	ldr	r3, [pc, #560]	; (8001440 <Send_WifiCmd+0xf70>)
 800120e:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] = (unsigned char)(((0%100)/10)+0x30);//MachineId(Tuneable)
 8001210:	4b8b      	ldr	r3, [pc, #556]	; (8001440 <Send_WifiCmd+0xf70>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	461a      	mov	r2, r3
 8001216:	4b8b      	ldr	r3, [pc, #556]	; (8001444 <Send_WifiCmd+0xf74>)
 8001218:	2130      	movs	r1, #48	; 0x30
 800121a:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 800121c:	4b88      	ldr	r3, [pc, #544]	; (8001440 <Send_WifiCmd+0xf70>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	3301      	adds	r3, #1
 8001222:	b2da      	uxtb	r2, r3
 8001224:	4b86      	ldr	r3, [pc, #536]	; (8001440 <Send_WifiCmd+0xf70>)
 8001226:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] = (unsigned char)((4%10)+0x30);
 8001228:	4b85      	ldr	r3, [pc, #532]	; (8001440 <Send_WifiCmd+0xf70>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	461a      	mov	r2, r3
 800122e:	4b85      	ldr	r3, [pc, #532]	; (8001444 <Send_WifiCmd+0xf74>)
 8001230:	2134      	movs	r1, #52	; 0x34
 8001232:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001234:	4b82      	ldr	r3, [pc, #520]	; (8001440 <Send_WifiCmd+0xf70>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	3301      	adds	r3, #1
 800123a:	b2da      	uxtb	r2, r3
 800123c:	4b80      	ldr	r3, [pc, #512]	; (8001440 <Send_WifiCmd+0xf70>)
 800123e:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  ' ';
 8001240:	4b7f      	ldr	r3, [pc, #508]	; (8001440 <Send_WifiCmd+0xf70>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	461a      	mov	r2, r3
 8001246:	4b7f      	ldr	r3, [pc, #508]	; (8001444 <Send_WifiCmd+0xf74>)
 8001248:	2120      	movs	r1, #32
 800124a:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 800124c:	4b7c      	ldr	r3, [pc, #496]	; (8001440 <Send_WifiCmd+0xf70>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	3301      	adds	r3, #1
 8001252:	b2da      	uxtb	r2, r3
 8001254:	4b7a      	ldr	r3, [pc, #488]	; (8001440 <Send_WifiCmd+0xf70>)
 8001256:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'H';
 8001258:	4b79      	ldr	r3, [pc, #484]	; (8001440 <Send_WifiCmd+0xf70>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	461a      	mov	r2, r3
 800125e:	4b79      	ldr	r3, [pc, #484]	; (8001444 <Send_WifiCmd+0xf74>)
 8001260:	2148      	movs	r1, #72	; 0x48
 8001262:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001264:	4b76      	ldr	r3, [pc, #472]	; (8001440 <Send_WifiCmd+0xf70>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	3301      	adds	r3, #1
 800126a:	b2da      	uxtb	r2, r3
 800126c:	4b74      	ldr	r3, [pc, #464]	; (8001440 <Send_WifiCmd+0xf70>)
 800126e:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'T';
 8001270:	4b73      	ldr	r3, [pc, #460]	; (8001440 <Send_WifiCmd+0xf70>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	461a      	mov	r2, r3
 8001276:	4b73      	ldr	r3, [pc, #460]	; (8001444 <Send_WifiCmd+0xf74>)
 8001278:	2154      	movs	r1, #84	; 0x54
 800127a:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 800127c:	4b70      	ldr	r3, [pc, #448]	; (8001440 <Send_WifiCmd+0xf70>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	3301      	adds	r3, #1
 8001282:	b2da      	uxtb	r2, r3
 8001284:	4b6e      	ldr	r3, [pc, #440]	; (8001440 <Send_WifiCmd+0xf70>)
 8001286:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'T';
 8001288:	4b6d      	ldr	r3, [pc, #436]	; (8001440 <Send_WifiCmd+0xf70>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	461a      	mov	r2, r3
 800128e:	4b6d      	ldr	r3, [pc, #436]	; (8001444 <Send_WifiCmd+0xf74>)
 8001290:	2154      	movs	r1, #84	; 0x54
 8001292:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001294:	4b6a      	ldr	r3, [pc, #424]	; (8001440 <Send_WifiCmd+0xf70>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	3301      	adds	r3, #1
 800129a:	b2da      	uxtb	r2, r3
 800129c:	4b68      	ldr	r3, [pc, #416]	; (8001440 <Send_WifiCmd+0xf70>)
 800129e:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'P';
 80012a0:	4b67      	ldr	r3, [pc, #412]	; (8001440 <Send_WifiCmd+0xf70>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	461a      	mov	r2, r3
 80012a6:	4b67      	ldr	r3, [pc, #412]	; (8001444 <Send_WifiCmd+0xf74>)
 80012a8:	2150      	movs	r1, #80	; 0x50
 80012aa:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 80012ac:	4b64      	ldr	r3, [pc, #400]	; (8001440 <Send_WifiCmd+0xf70>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	3301      	adds	r3, #1
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	4b62      	ldr	r3, [pc, #392]	; (8001440 <Send_WifiCmd+0xf70>)
 80012b6:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  '/';
 80012b8:	4b61      	ldr	r3, [pc, #388]	; (8001440 <Send_WifiCmd+0xf70>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	461a      	mov	r2, r3
 80012be:	4b61      	ldr	r3, [pc, #388]	; (8001444 <Send_WifiCmd+0xf74>)
 80012c0:	212f      	movs	r1, #47	; 0x2f
 80012c2:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 80012c4:	4b5e      	ldr	r3, [pc, #376]	; (8001440 <Send_WifiCmd+0xf70>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	3301      	adds	r3, #1
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	4b5c      	ldr	r3, [pc, #368]	; (8001440 <Send_WifiCmd+0xf70>)
 80012ce:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  '1';
 80012d0:	4b5b      	ldr	r3, [pc, #364]	; (8001440 <Send_WifiCmd+0xf70>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	461a      	mov	r2, r3
 80012d6:	4b5b      	ldr	r3, [pc, #364]	; (8001444 <Send_WifiCmd+0xf74>)
 80012d8:	2131      	movs	r1, #49	; 0x31
 80012da:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 80012dc:	4b58      	ldr	r3, [pc, #352]	; (8001440 <Send_WifiCmd+0xf70>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	3301      	adds	r3, #1
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	4b56      	ldr	r3, [pc, #344]	; (8001440 <Send_WifiCmd+0xf70>)
 80012e6:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  '.';
 80012e8:	4b55      	ldr	r3, [pc, #340]	; (8001440 <Send_WifiCmd+0xf70>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	461a      	mov	r2, r3
 80012ee:	4b55      	ldr	r3, [pc, #340]	; (8001444 <Send_WifiCmd+0xf74>)
 80012f0:	212e      	movs	r1, #46	; 0x2e
 80012f2:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 80012f4:	4b52      	ldr	r3, [pc, #328]	; (8001440 <Send_WifiCmd+0xf70>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	3301      	adds	r3, #1
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	4b50      	ldr	r3, [pc, #320]	; (8001440 <Send_WifiCmd+0xf70>)
 80012fe:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  '1';
 8001300:	4b4f      	ldr	r3, [pc, #316]	; (8001440 <Send_WifiCmd+0xf70>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	461a      	mov	r2, r3
 8001306:	4b4f      	ldr	r3, [pc, #316]	; (8001444 <Send_WifiCmd+0xf74>)
 8001308:	2131      	movs	r1, #49	; 0x31
 800130a:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 800130c:	4b4c      	ldr	r3, [pc, #304]	; (8001440 <Send_WifiCmd+0xf70>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	3301      	adds	r3, #1
 8001312:	b2da      	uxtb	r2, r3
 8001314:	4b4a      	ldr	r3, [pc, #296]	; (8001440 <Send_WifiCmd+0xf70>)
 8001316:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  0x0d;
 8001318:	4b49      	ldr	r3, [pc, #292]	; (8001440 <Send_WifiCmd+0xf70>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	461a      	mov	r2, r3
 800131e:	4b49      	ldr	r3, [pc, #292]	; (8001444 <Send_WifiCmd+0xf74>)
 8001320:	210d      	movs	r1, #13
 8001322:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001324:	4b46      	ldr	r3, [pc, #280]	; (8001440 <Send_WifiCmd+0xf70>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	3301      	adds	r3, #1
 800132a:	b2da      	uxtb	r2, r3
 800132c:	4b44      	ldr	r3, [pc, #272]	; (8001440 <Send_WifiCmd+0xf70>)
 800132e:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  0x0a;
 8001330:	4b43      	ldr	r3, [pc, #268]	; (8001440 <Send_WifiCmd+0xf70>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	461a      	mov	r2, r3
 8001336:	4b43      	ldr	r3, [pc, #268]	; (8001444 <Send_WifiCmd+0xf74>)
 8001338:	210a      	movs	r1, #10
 800133a:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 800133c:	4b40      	ldr	r3, [pc, #256]	; (8001440 <Send_WifiCmd+0xf70>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	3301      	adds	r3, #1
 8001342:	b2da      	uxtb	r2, r3
 8001344:	4b3e      	ldr	r3, [pc, #248]	; (8001440 <Send_WifiCmd+0xf70>)
 8001346:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'H';
 8001348:	4b3d      	ldr	r3, [pc, #244]	; (8001440 <Send_WifiCmd+0xf70>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	461a      	mov	r2, r3
 800134e:	4b3d      	ldr	r3, [pc, #244]	; (8001444 <Send_WifiCmd+0xf74>)
 8001350:	2148      	movs	r1, #72	; 0x48
 8001352:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001354:	4b3a      	ldr	r3, [pc, #232]	; (8001440 <Send_WifiCmd+0xf70>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	3301      	adds	r3, #1
 800135a:	b2da      	uxtb	r2, r3
 800135c:	4b38      	ldr	r3, [pc, #224]	; (8001440 <Send_WifiCmd+0xf70>)
 800135e:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'o';
 8001360:	4b37      	ldr	r3, [pc, #220]	; (8001440 <Send_WifiCmd+0xf70>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	461a      	mov	r2, r3
 8001366:	4b37      	ldr	r3, [pc, #220]	; (8001444 <Send_WifiCmd+0xf74>)
 8001368:	216f      	movs	r1, #111	; 0x6f
 800136a:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 800136c:	4b34      	ldr	r3, [pc, #208]	; (8001440 <Send_WifiCmd+0xf70>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	3301      	adds	r3, #1
 8001372:	b2da      	uxtb	r2, r3
 8001374:	4b32      	ldr	r3, [pc, #200]	; (8001440 <Send_WifiCmd+0xf70>)
 8001376:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  's';
 8001378:	4b31      	ldr	r3, [pc, #196]	; (8001440 <Send_WifiCmd+0xf70>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	461a      	mov	r2, r3
 800137e:	4b31      	ldr	r3, [pc, #196]	; (8001444 <Send_WifiCmd+0xf74>)
 8001380:	2173      	movs	r1, #115	; 0x73
 8001382:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001384:	4b2e      	ldr	r3, [pc, #184]	; (8001440 <Send_WifiCmd+0xf70>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	3301      	adds	r3, #1
 800138a:	b2da      	uxtb	r2, r3
 800138c:	4b2c      	ldr	r3, [pc, #176]	; (8001440 <Send_WifiCmd+0xf70>)
 800138e:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  't';
 8001390:	4b2b      	ldr	r3, [pc, #172]	; (8001440 <Send_WifiCmd+0xf70>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	461a      	mov	r2, r3
 8001396:	4b2b      	ldr	r3, [pc, #172]	; (8001444 <Send_WifiCmd+0xf74>)
 8001398:	2174      	movs	r1, #116	; 0x74
 800139a:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 800139c:	4b28      	ldr	r3, [pc, #160]	; (8001440 <Send_WifiCmd+0xf70>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	3301      	adds	r3, #1
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	4b26      	ldr	r3, [pc, #152]	; (8001440 <Send_WifiCmd+0xf70>)
 80013a6:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  ':';
 80013a8:	4b25      	ldr	r3, [pc, #148]	; (8001440 <Send_WifiCmd+0xf70>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b25      	ldr	r3, [pc, #148]	; (8001444 <Send_WifiCmd+0xf74>)
 80013b0:	213a      	movs	r1, #58	; 0x3a
 80013b2:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 80013b4:	4b22      	ldr	r3, [pc, #136]	; (8001440 <Send_WifiCmd+0xf70>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	3301      	adds	r3, #1
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	4b20      	ldr	r3, [pc, #128]	; (8001440 <Send_WifiCmd+0xf70>)
 80013be:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  ' ';
 80013c0:	4b1f      	ldr	r3, [pc, #124]	; (8001440 <Send_WifiCmd+0xf70>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	461a      	mov	r2, r3
 80013c6:	4b1f      	ldr	r3, [pc, #124]	; (8001444 <Send_WifiCmd+0xf74>)
 80013c8:	2120      	movs	r1, #32
 80013ca:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 80013cc:	4b1c      	ldr	r3, [pc, #112]	; (8001440 <Send_WifiCmd+0xf70>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	3301      	adds	r3, #1
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <Send_WifiCmd+0xf70>)
 80013d6:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'l';	   //5
 80013d8:	4b19      	ldr	r3, [pc, #100]	; (8001440 <Send_WifiCmd+0xf70>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	4b19      	ldr	r3, [pc, #100]	; (8001444 <Send_WifiCmd+0xf74>)
 80013e0:	216c      	movs	r1, #108	; 0x6c
 80013e2:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 80013e4:	4b16      	ldr	r3, [pc, #88]	; (8001440 <Send_WifiCmd+0xf70>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	3301      	adds	r3, #1
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	4b14      	ldr	r3, [pc, #80]	; (8001440 <Send_WifiCmd+0xf70>)
 80013ee:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'p';	   //2
 80013f0:	4b13      	ldr	r3, [pc, #76]	; (8001440 <Send_WifiCmd+0xf70>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	461a      	mov	r2, r3
 80013f6:	4b13      	ldr	r3, [pc, #76]	; (8001444 <Send_WifiCmd+0xf74>)
 80013f8:	2170      	movs	r1, #112	; 0x70
 80013fa:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 80013fc:	4b10      	ldr	r3, [pc, #64]	; (8001440 <Send_WifiCmd+0xf70>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	3301      	adds	r3, #1
 8001402:	b2da      	uxtb	r2, r3
 8001404:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <Send_WifiCmd+0xf70>)
 8001406:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'd';	   //.
 8001408:	4b0d      	ldr	r3, [pc, #52]	; (8001440 <Send_WifiCmd+0xf70>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	461a      	mov	r2, r3
 800140e:	4b0d      	ldr	r3, [pc, #52]	; (8001444 <Send_WifiCmd+0xf74>)
 8001410:	2164      	movs	r1, #100	; 0x64
 8001412:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001414:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <Send_WifiCmd+0xf70>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	3301      	adds	r3, #1
 800141a:	b2da      	uxtb	r2, r3
 800141c:	4b08      	ldr	r3, [pc, #32]	; (8001440 <Send_WifiCmd+0xf70>)
 800141e:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'c';	   //1
 8001420:	4b07      	ldr	r3, [pc, #28]	; (8001440 <Send_WifiCmd+0xf70>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	461a      	mov	r2, r3
 8001426:	4b07      	ldr	r3, [pc, #28]	; (8001444 <Send_WifiCmd+0xf74>)
 8001428:	2163      	movs	r1, #99	; 0x63
 800142a:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 800142c:	4b04      	ldr	r3, [pc, #16]	; (8001440 <Send_WifiCmd+0xf70>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	3301      	adds	r3, #1
 8001432:	b2da      	uxtb	r2, r3
 8001434:	4b02      	ldr	r3, [pc, #8]	; (8001440 <Send_WifiCmd+0xf70>)
 8001436:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  '-';	   //8
 8001438:	4b01      	ldr	r3, [pc, #4]	; (8001440 <Send_WifiCmd+0xf70>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	e004      	b.n	8001448 <Send_WifiCmd+0xf78>
 800143e:	bf00      	nop
 8001440:	20000259 	.word	0x20000259
 8001444:	20000090 	.word	0x20000090
 8001448:	461a      	mov	r2, r3
 800144a:	4ba0      	ldr	r3, [pc, #640]	; (80016cc <Send_WifiCmd+0x11fc>)
 800144c:	212d      	movs	r1, #45	; 0x2d
 800144e:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001450:	4b9f      	ldr	r3, [pc, #636]	; (80016d0 <Send_WifiCmd+0x1200>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	3301      	adds	r3, #1
 8001456:	b2da      	uxtb	r2, r3
 8001458:	4b9d      	ldr	r3, [pc, #628]	; (80016d0 <Send_WifiCmd+0x1200>)
 800145a:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'u';	   //4
 800145c:	4b9c      	ldr	r3, [pc, #624]	; (80016d0 <Send_WifiCmd+0x1200>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	461a      	mov	r2, r3
 8001462:	4b9a      	ldr	r3, [pc, #616]	; (80016cc <Send_WifiCmd+0x11fc>)
 8001464:	2175      	movs	r1, #117	; 0x75
 8001466:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001468:	4b99      	ldr	r3, [pc, #612]	; (80016d0 <Send_WifiCmd+0x1200>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	3301      	adds	r3, #1
 800146e:	b2da      	uxtb	r2, r3
 8001470:	4b97      	ldr	r3, [pc, #604]	; (80016d0 <Send_WifiCmd+0x1200>)
 8001472:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  's';	   //.
 8001474:	4b96      	ldr	r3, [pc, #600]	; (80016d0 <Send_WifiCmd+0x1200>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	461a      	mov	r2, r3
 800147a:	4b94      	ldr	r3, [pc, #592]	; (80016cc <Send_WifiCmd+0x11fc>)
 800147c:	2173      	movs	r1, #115	; 0x73
 800147e:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001480:	4b93      	ldr	r3, [pc, #588]	; (80016d0 <Send_WifiCmd+0x1200>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	3301      	adds	r3, #1
 8001486:	b2da      	uxtb	r2, r3
 8001488:	4b91      	ldr	r3, [pc, #580]	; (80016d0 <Send_WifiCmd+0x1200>)
 800148a:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'm';	   //4
 800148c:	4b90      	ldr	r3, [pc, #576]	; (80016d0 <Send_WifiCmd+0x1200>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	461a      	mov	r2, r3
 8001492:	4b8e      	ldr	r3, [pc, #568]	; (80016cc <Send_WifiCmd+0x11fc>)
 8001494:	216d      	movs	r1, #109	; 0x6d
 8001496:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001498:	4b8d      	ldr	r3, [pc, #564]	; (80016d0 <Send_WifiCmd+0x1200>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	3301      	adds	r3, #1
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	4b8b      	ldr	r3, [pc, #556]	; (80016d0 <Send_WifiCmd+0x1200>)
 80014a2:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  '3';	   //9
 80014a4:	4b8a      	ldr	r3, [pc, #552]	; (80016d0 <Send_WifiCmd+0x1200>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b88      	ldr	r3, [pc, #544]	; (80016cc <Send_WifiCmd+0x11fc>)
 80014ac:	2133      	movs	r1, #51	; 0x33
 80014ae:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 80014b0:	4b87      	ldr	r3, [pc, #540]	; (80016d0 <Send_WifiCmd+0x1200>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	3301      	adds	r3, #1
 80014b6:	b2da      	uxtb	r2, r3
 80014b8:	4b85      	ldr	r3, [pc, #532]	; (80016d0 <Send_WifiCmd+0x1200>)
 80014ba:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  '.';	   //.
 80014bc:	4b84      	ldr	r3, [pc, #528]	; (80016d0 <Send_WifiCmd+0x1200>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	461a      	mov	r2, r3
 80014c2:	4b82      	ldr	r3, [pc, #520]	; (80016cc <Send_WifiCmd+0x11fc>)
 80014c4:	212e      	movs	r1, #46	; 0x2e
 80014c6:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 80014c8:	4b81      	ldr	r3, [pc, #516]	; (80016d0 <Send_WifiCmd+0x1200>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	3301      	adds	r3, #1
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	4b7f      	ldr	r3, [pc, #508]	; (80016d0 <Send_WifiCmd+0x1200>)
 80014d2:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'a';	   //2
 80014d4:	4b7e      	ldr	r3, [pc, #504]	; (80016d0 <Send_WifiCmd+0x1200>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	461a      	mov	r2, r3
 80014da:	4b7c      	ldr	r3, [pc, #496]	; (80016cc <Send_WifiCmd+0x11fc>)
 80014dc:	2161      	movs	r1, #97	; 0x61
 80014de:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 80014e0:	4b7b      	ldr	r3, [pc, #492]	; (80016d0 <Send_WifiCmd+0x1200>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	3301      	adds	r3, #1
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	4b79      	ldr	r3, [pc, #484]	; (80016d0 <Send_WifiCmd+0x1200>)
 80014ea:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'c';	   //5
 80014ec:	4b78      	ldr	r3, [pc, #480]	; (80016d0 <Send_WifiCmd+0x1200>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	461a      	mov	r2, r3
 80014f2:	4b76      	ldr	r3, [pc, #472]	; (80016cc <Send_WifiCmd+0x11fc>)
 80014f4:	2163      	movs	r1, #99	; 0x63
 80014f6:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 80014f8:	4b75      	ldr	r3, [pc, #468]	; (80016d0 <Send_WifiCmd+0x1200>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	3301      	adds	r3, #1
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	4b73      	ldr	r3, [pc, #460]	; (80016d0 <Send_WifiCmd+0x1200>)
 8001502:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'c';	   //5
 8001504:	4b72      	ldr	r3, [pc, #456]	; (80016d0 <Send_WifiCmd+0x1200>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	461a      	mov	r2, r3
 800150a:	4b70      	ldr	r3, [pc, #448]	; (80016cc <Send_WifiCmd+0x11fc>)
 800150c:	2163      	movs	r1, #99	; 0x63
 800150e:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001510:	4b6f      	ldr	r3, [pc, #444]	; (80016d0 <Send_WifiCmd+0x1200>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	3301      	adds	r3, #1
 8001516:	b2da      	uxtb	r2, r3
 8001518:	4b6d      	ldr	r3, [pc, #436]	; (80016d0 <Send_WifiCmd+0x1200>)
 800151a:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'e';	   //:
 800151c:	4b6c      	ldr	r3, [pc, #432]	; (80016d0 <Send_WifiCmd+0x1200>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	461a      	mov	r2, r3
 8001522:	4b6a      	ldr	r3, [pc, #424]	; (80016cc <Send_WifiCmd+0x11fc>)
 8001524:	2165      	movs	r1, #101	; 0x65
 8001526:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001528:	4b69      	ldr	r3, [pc, #420]	; (80016d0 <Send_WifiCmd+0x1200>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	3301      	adds	r3, #1
 800152e:	b2da      	uxtb	r2, r3
 8001530:	4b67      	ldr	r3, [pc, #412]	; (80016d0 <Send_WifiCmd+0x1200>)
 8001532:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'e';	   //9
 8001534:	4b66      	ldr	r3, [pc, #408]	; (80016d0 <Send_WifiCmd+0x1200>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	461a      	mov	r2, r3
 800153a:	4b64      	ldr	r3, [pc, #400]	; (80016cc <Send_WifiCmd+0x11fc>)
 800153c:	2165      	movs	r1, #101	; 0x65
 800153e:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001540:	4b63      	ldr	r3, [pc, #396]	; (80016d0 <Send_WifiCmd+0x1200>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	3301      	adds	r3, #1
 8001546:	b2da      	uxtb	r2, r3
 8001548:	4b61      	ldr	r3, [pc, #388]	; (80016d0 <Send_WifiCmd+0x1200>)
 800154a:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'd';	   //0
 800154c:	4b60      	ldr	r3, [pc, #384]	; (80016d0 <Send_WifiCmd+0x1200>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	461a      	mov	r2, r3
 8001552:	4b5e      	ldr	r3, [pc, #376]	; (80016cc <Send_WifiCmd+0x11fc>)
 8001554:	2164      	movs	r1, #100	; 0x64
 8001556:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001558:	4b5d      	ldr	r3, [pc, #372]	; (80016d0 <Send_WifiCmd+0x1200>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	3301      	adds	r3, #1
 800155e:	b2da      	uxtb	r2, r3
 8001560:	4b5b      	ldr	r3, [pc, #364]	; (80016d0 <Send_WifiCmd+0x1200>)
 8001562:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'o';	   //0
 8001564:	4b5a      	ldr	r3, [pc, #360]	; (80016d0 <Send_WifiCmd+0x1200>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	461a      	mov	r2, r3
 800156a:	4b58      	ldr	r3, [pc, #352]	; (80016cc <Send_WifiCmd+0x11fc>)
 800156c:	216f      	movs	r1, #111	; 0x6f
 800156e:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001570:	4b57      	ldr	r3, [pc, #348]	; (80016d0 <Send_WifiCmd+0x1200>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	3301      	adds	r3, #1
 8001576:	b2da      	uxtb	r2, r3
 8001578:	4b55      	ldr	r3, [pc, #340]	; (80016d0 <Send_WifiCmd+0x1200>)
 800157a:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  '.';	   //9
 800157c:	4b54      	ldr	r3, [pc, #336]	; (80016d0 <Send_WifiCmd+0x1200>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	4b52      	ldr	r3, [pc, #328]	; (80016cc <Send_WifiCmd+0x11fc>)
 8001584:	212e      	movs	r1, #46	; 0x2e
 8001586:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001588:	4b51      	ldr	r3, [pc, #324]	; (80016d0 <Send_WifiCmd+0x1200>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	3301      	adds	r3, #1
 800158e:	b2da      	uxtb	r2, r3
 8001590:	4b4f      	ldr	r3, [pc, #316]	; (80016d0 <Send_WifiCmd+0x1200>)
 8001592:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'i';	   //
 8001594:	4b4e      	ldr	r3, [pc, #312]	; (80016d0 <Send_WifiCmd+0x1200>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	461a      	mov	r2, r3
 800159a:	4b4c      	ldr	r3, [pc, #304]	; (80016cc <Send_WifiCmd+0x11fc>)
 800159c:	2169      	movs	r1, #105	; 0x69
 800159e:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 80015a0:	4b4b      	ldr	r3, [pc, #300]	; (80016d0 <Send_WifiCmd+0x1200>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	3301      	adds	r3, #1
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	4b49      	ldr	r3, [pc, #292]	; (80016d0 <Send_WifiCmd+0x1200>)
 80015aa:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'n';	   //
 80015ac:	4b48      	ldr	r3, [pc, #288]	; (80016d0 <Send_WifiCmd+0x1200>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	461a      	mov	r2, r3
 80015b2:	4b46      	ldr	r3, [pc, #280]	; (80016cc <Send_WifiCmd+0x11fc>)
 80015b4:	216e      	movs	r1, #110	; 0x6e
 80015b6:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 80015b8:	4b45      	ldr	r3, [pc, #276]	; (80016d0 <Send_WifiCmd+0x1200>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	3301      	adds	r3, #1
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	4b43      	ldr	r3, [pc, #268]	; (80016d0 <Send_WifiCmd+0x1200>)
 80015c2:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  ':';	   //
 80015c4:	4b42      	ldr	r3, [pc, #264]	; (80016d0 <Send_WifiCmd+0x1200>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	461a      	mov	r2, r3
 80015ca:	4b40      	ldr	r3, [pc, #256]	; (80016cc <Send_WifiCmd+0x11fc>)
 80015cc:	213a      	movs	r1, #58	; 0x3a
 80015ce:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 80015d0:	4b3f      	ldr	r3, [pc, #252]	; (80016d0 <Send_WifiCmd+0x1200>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	3301      	adds	r3, #1
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	4b3d      	ldr	r3, [pc, #244]	; (80016d0 <Send_WifiCmd+0x1200>)
 80015da:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  '9';	   //
 80015dc:	4b3c      	ldr	r3, [pc, #240]	; (80016d0 <Send_WifiCmd+0x1200>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	461a      	mov	r2, r3
 80015e2:	4b3a      	ldr	r3, [pc, #232]	; (80016cc <Send_WifiCmd+0x11fc>)
 80015e4:	2139      	movs	r1, #57	; 0x39
 80015e6:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 80015e8:	4b39      	ldr	r3, [pc, #228]	; (80016d0 <Send_WifiCmd+0x1200>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	3301      	adds	r3, #1
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	4b37      	ldr	r3, [pc, #220]	; (80016d0 <Send_WifiCmd+0x1200>)
 80015f2:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  '0';	   //
 80015f4:	4b36      	ldr	r3, [pc, #216]	; (80016d0 <Send_WifiCmd+0x1200>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	461a      	mov	r2, r3
 80015fa:	4b34      	ldr	r3, [pc, #208]	; (80016cc <Send_WifiCmd+0x11fc>)
 80015fc:	2130      	movs	r1, #48	; 0x30
 80015fe:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001600:	4b33      	ldr	r3, [pc, #204]	; (80016d0 <Send_WifiCmd+0x1200>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	3301      	adds	r3, #1
 8001606:	b2da      	uxtb	r2, r3
 8001608:	4b31      	ldr	r3, [pc, #196]	; (80016d0 <Send_WifiCmd+0x1200>)
 800160a:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  '0';	   //
 800160c:	4b30      	ldr	r3, [pc, #192]	; (80016d0 <Send_WifiCmd+0x1200>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	461a      	mov	r2, r3
 8001612:	4b2e      	ldr	r3, [pc, #184]	; (80016cc <Send_WifiCmd+0x11fc>)
 8001614:	2130      	movs	r1, #48	; 0x30
 8001616:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001618:	4b2d      	ldr	r3, [pc, #180]	; (80016d0 <Send_WifiCmd+0x1200>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	3301      	adds	r3, #1
 800161e:	b2da      	uxtb	r2, r3
 8001620:	4b2b      	ldr	r3, [pc, #172]	; (80016d0 <Send_WifiCmd+0x1200>)
 8001622:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  '9';	   //
 8001624:	4b2a      	ldr	r3, [pc, #168]	; (80016d0 <Send_WifiCmd+0x1200>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	461a      	mov	r2, r3
 800162a:	4b28      	ldr	r3, [pc, #160]	; (80016cc <Send_WifiCmd+0x11fc>)
 800162c:	2139      	movs	r1, #57	; 0x39
 800162e:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001630:	4b27      	ldr	r3, [pc, #156]	; (80016d0 <Send_WifiCmd+0x1200>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	3301      	adds	r3, #1
 8001636:	b2da      	uxtb	r2, r3
 8001638:	4b25      	ldr	r3, [pc, #148]	; (80016d0 <Send_WifiCmd+0x1200>)
 800163a:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  0x0d;
 800163c:	4b24      	ldr	r3, [pc, #144]	; (80016d0 <Send_WifiCmd+0x1200>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	461a      	mov	r2, r3
 8001642:	4b22      	ldr	r3, [pc, #136]	; (80016cc <Send_WifiCmd+0x11fc>)
 8001644:	210d      	movs	r1, #13
 8001646:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001648:	4b21      	ldr	r3, [pc, #132]	; (80016d0 <Send_WifiCmd+0x1200>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	3301      	adds	r3, #1
 800164e:	b2da      	uxtb	r2, r3
 8001650:	4b1f      	ldr	r3, [pc, #124]	; (80016d0 <Send_WifiCmd+0x1200>)
 8001652:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  0x0a;
 8001654:	4b1e      	ldr	r3, [pc, #120]	; (80016d0 <Send_WifiCmd+0x1200>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	461a      	mov	r2, r3
 800165a:	4b1c      	ldr	r3, [pc, #112]	; (80016cc <Send_WifiCmd+0x11fc>)
 800165c:	210a      	movs	r1, #10
 800165e:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001660:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <Send_WifiCmd+0x1200>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	3301      	adds	r3, #1
 8001666:	b2da      	uxtb	r2, r3
 8001668:	4b19      	ldr	r3, [pc, #100]	; (80016d0 <Send_WifiCmd+0x1200>)
 800166a:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'A';
 800166c:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <Send_WifiCmd+0x1200>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	461a      	mov	r2, r3
 8001672:	4b16      	ldr	r3, [pc, #88]	; (80016cc <Send_WifiCmd+0x11fc>)
 8001674:	2141      	movs	r1, #65	; 0x41
 8001676:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001678:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <Send_WifiCmd+0x1200>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	3301      	adds	r3, #1
 800167e:	b2da      	uxtb	r2, r3
 8001680:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <Send_WifiCmd+0x1200>)
 8001682:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'c';
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <Send_WifiCmd+0x1200>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	461a      	mov	r2, r3
 800168a:	4b10      	ldr	r3, [pc, #64]	; (80016cc <Send_WifiCmd+0x11fc>)
 800168c:	2163      	movs	r1, #99	; 0x63
 800168e:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <Send_WifiCmd+0x1200>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	3301      	adds	r3, #1
 8001696:	b2da      	uxtb	r2, r3
 8001698:	4b0d      	ldr	r3, [pc, #52]	; (80016d0 <Send_WifiCmd+0x1200>)
 800169a:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'c';
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <Send_WifiCmd+0x1200>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	461a      	mov	r2, r3
 80016a2:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <Send_WifiCmd+0x11fc>)
 80016a4:	2163      	movs	r1, #99	; 0x63
 80016a6:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <Send_WifiCmd+0x1200>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	3301      	adds	r3, #1
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <Send_WifiCmd+0x1200>)
 80016b2:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'e';
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <Send_WifiCmd+0x1200>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	461a      	mov	r2, r3
 80016ba:	4b04      	ldr	r3, [pc, #16]	; (80016cc <Send_WifiCmd+0x11fc>)
 80016bc:	2165      	movs	r1, #101	; 0x65
 80016be:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 80016c0:	4b03      	ldr	r3, [pc, #12]	; (80016d0 <Send_WifiCmd+0x1200>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	3301      	adds	r3, #1
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	e004      	b.n	80016d4 <Send_WifiCmd+0x1204>
 80016ca:	bf00      	nop
 80016cc:	20000090 	.word	0x20000090
 80016d0:	20000259 	.word	0x20000259
 80016d4:	4ba0      	ldr	r3, [pc, #640]	; (8001958 <Send_WifiCmd+0x1488>)
 80016d6:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'p';
 80016d8:	4b9f      	ldr	r3, [pc, #636]	; (8001958 <Send_WifiCmd+0x1488>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	461a      	mov	r2, r3
 80016de:	4b9f      	ldr	r3, [pc, #636]	; (800195c <Send_WifiCmd+0x148c>)
 80016e0:	2170      	movs	r1, #112	; 0x70
 80016e2:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 80016e4:	4b9c      	ldr	r3, [pc, #624]	; (8001958 <Send_WifiCmd+0x1488>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	3301      	adds	r3, #1
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	4b9a      	ldr	r3, [pc, #616]	; (8001958 <Send_WifiCmd+0x1488>)
 80016ee:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  't';
 80016f0:	4b99      	ldr	r3, [pc, #612]	; (8001958 <Send_WifiCmd+0x1488>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	461a      	mov	r2, r3
 80016f6:	4b99      	ldr	r3, [pc, #612]	; (800195c <Send_WifiCmd+0x148c>)
 80016f8:	2174      	movs	r1, #116	; 0x74
 80016fa:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 80016fc:	4b96      	ldr	r3, [pc, #600]	; (8001958 <Send_WifiCmd+0x1488>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	3301      	adds	r3, #1
 8001702:	b2da      	uxtb	r2, r3
 8001704:	4b94      	ldr	r3, [pc, #592]	; (8001958 <Send_WifiCmd+0x1488>)
 8001706:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  ':';
 8001708:	4b93      	ldr	r3, [pc, #588]	; (8001958 <Send_WifiCmd+0x1488>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	461a      	mov	r2, r3
 800170e:	4b93      	ldr	r3, [pc, #588]	; (800195c <Send_WifiCmd+0x148c>)
 8001710:	213a      	movs	r1, #58	; 0x3a
 8001712:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001714:	4b90      	ldr	r3, [pc, #576]	; (8001958 <Send_WifiCmd+0x1488>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	3301      	adds	r3, #1
 800171a:	b2da      	uxtb	r2, r3
 800171c:	4b8e      	ldr	r3, [pc, #568]	; (8001958 <Send_WifiCmd+0x1488>)
 800171e:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  ' ';
 8001720:	4b8d      	ldr	r3, [pc, #564]	; (8001958 <Send_WifiCmd+0x1488>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	461a      	mov	r2, r3
 8001726:	4b8d      	ldr	r3, [pc, #564]	; (800195c <Send_WifiCmd+0x148c>)
 8001728:	2120      	movs	r1, #32
 800172a:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 800172c:	4b8a      	ldr	r3, [pc, #552]	; (8001958 <Send_WifiCmd+0x1488>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	3301      	adds	r3, #1
 8001732:	b2da      	uxtb	r2, r3
 8001734:	4b88      	ldr	r3, [pc, #544]	; (8001958 <Send_WifiCmd+0x1488>)
 8001736:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  't';
 8001738:	4b87      	ldr	r3, [pc, #540]	; (8001958 <Send_WifiCmd+0x1488>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	461a      	mov	r2, r3
 800173e:	4b87      	ldr	r3, [pc, #540]	; (800195c <Send_WifiCmd+0x148c>)
 8001740:	2174      	movs	r1, #116	; 0x74
 8001742:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001744:	4b84      	ldr	r3, [pc, #528]	; (8001958 <Send_WifiCmd+0x1488>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	3301      	adds	r3, #1
 800174a:	b2da      	uxtb	r2, r3
 800174c:	4b82      	ldr	r3, [pc, #520]	; (8001958 <Send_WifiCmd+0x1488>)
 800174e:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'e';
 8001750:	4b81      	ldr	r3, [pc, #516]	; (8001958 <Send_WifiCmd+0x1488>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	461a      	mov	r2, r3
 8001756:	4b81      	ldr	r3, [pc, #516]	; (800195c <Send_WifiCmd+0x148c>)
 8001758:	2165      	movs	r1, #101	; 0x65
 800175a:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 800175c:	4b7e      	ldr	r3, [pc, #504]	; (8001958 <Send_WifiCmd+0x1488>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	3301      	adds	r3, #1
 8001762:	b2da      	uxtb	r2, r3
 8001764:	4b7c      	ldr	r3, [pc, #496]	; (8001958 <Send_WifiCmd+0x1488>)
 8001766:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'x';
 8001768:	4b7b      	ldr	r3, [pc, #492]	; (8001958 <Send_WifiCmd+0x1488>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	461a      	mov	r2, r3
 800176e:	4b7b      	ldr	r3, [pc, #492]	; (800195c <Send_WifiCmd+0x148c>)
 8001770:	2178      	movs	r1, #120	; 0x78
 8001772:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001774:	4b78      	ldr	r3, [pc, #480]	; (8001958 <Send_WifiCmd+0x1488>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	3301      	adds	r3, #1
 800177a:	b2da      	uxtb	r2, r3
 800177c:	4b76      	ldr	r3, [pc, #472]	; (8001958 <Send_WifiCmd+0x1488>)
 800177e:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  't';
 8001780:	4b75      	ldr	r3, [pc, #468]	; (8001958 <Send_WifiCmd+0x1488>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	461a      	mov	r2, r3
 8001786:	4b75      	ldr	r3, [pc, #468]	; (800195c <Send_WifiCmd+0x148c>)
 8001788:	2174      	movs	r1, #116	; 0x74
 800178a:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 800178c:	4b72      	ldr	r3, [pc, #456]	; (8001958 <Send_WifiCmd+0x1488>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	3301      	adds	r3, #1
 8001792:	b2da      	uxtb	r2, r3
 8001794:	4b70      	ldr	r3, [pc, #448]	; (8001958 <Send_WifiCmd+0x1488>)
 8001796:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  '/';
 8001798:	4b6f      	ldr	r3, [pc, #444]	; (8001958 <Send_WifiCmd+0x1488>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	461a      	mov	r2, r3
 800179e:	4b6f      	ldr	r3, [pc, #444]	; (800195c <Send_WifiCmd+0x148c>)
 80017a0:	212f      	movs	r1, #47	; 0x2f
 80017a2:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 80017a4:	4b6c      	ldr	r3, [pc, #432]	; (8001958 <Send_WifiCmd+0x1488>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	3301      	adds	r3, #1
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	4b6a      	ldr	r3, [pc, #424]	; (8001958 <Send_WifiCmd+0x1488>)
 80017ae:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'h';
 80017b0:	4b69      	ldr	r3, [pc, #420]	; (8001958 <Send_WifiCmd+0x1488>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	461a      	mov	r2, r3
 80017b6:	4b69      	ldr	r3, [pc, #420]	; (800195c <Send_WifiCmd+0x148c>)
 80017b8:	2168      	movs	r1, #104	; 0x68
 80017ba:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 80017bc:	4b66      	ldr	r3, [pc, #408]	; (8001958 <Send_WifiCmd+0x1488>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	3301      	adds	r3, #1
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	4b64      	ldr	r3, [pc, #400]	; (8001958 <Send_WifiCmd+0x1488>)
 80017c6:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  't';
 80017c8:	4b63      	ldr	r3, [pc, #396]	; (8001958 <Send_WifiCmd+0x1488>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	461a      	mov	r2, r3
 80017ce:	4b63      	ldr	r3, [pc, #396]	; (800195c <Send_WifiCmd+0x148c>)
 80017d0:	2174      	movs	r1, #116	; 0x74
 80017d2:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 80017d4:	4b60      	ldr	r3, [pc, #384]	; (8001958 <Send_WifiCmd+0x1488>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	3301      	adds	r3, #1
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	4b5e      	ldr	r3, [pc, #376]	; (8001958 <Send_WifiCmd+0x1488>)
 80017de:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'm';
 80017e0:	4b5d      	ldr	r3, [pc, #372]	; (8001958 <Send_WifiCmd+0x1488>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	461a      	mov	r2, r3
 80017e6:	4b5d      	ldr	r3, [pc, #372]	; (800195c <Send_WifiCmd+0x148c>)
 80017e8:	216d      	movs	r1, #109	; 0x6d
 80017ea:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 80017ec:	4b5a      	ldr	r3, [pc, #360]	; (8001958 <Send_WifiCmd+0x1488>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	3301      	adds	r3, #1
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	4b58      	ldr	r3, [pc, #352]	; (8001958 <Send_WifiCmd+0x1488>)
 80017f6:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'l';
 80017f8:	4b57      	ldr	r3, [pc, #348]	; (8001958 <Send_WifiCmd+0x1488>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	461a      	mov	r2, r3
 80017fe:	4b57      	ldr	r3, [pc, #348]	; (800195c <Send_WifiCmd+0x148c>)
 8001800:	216c      	movs	r1, #108	; 0x6c
 8001802:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001804:	4b54      	ldr	r3, [pc, #336]	; (8001958 <Send_WifiCmd+0x1488>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	3301      	adds	r3, #1
 800180a:	b2da      	uxtb	r2, r3
 800180c:	4b52      	ldr	r3, [pc, #328]	; (8001958 <Send_WifiCmd+0x1488>)
 800180e:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  0x0d;
 8001810:	4b51      	ldr	r3, [pc, #324]	; (8001958 <Send_WifiCmd+0x1488>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	461a      	mov	r2, r3
 8001816:	4b51      	ldr	r3, [pc, #324]	; (800195c <Send_WifiCmd+0x148c>)
 8001818:	210d      	movs	r1, #13
 800181a:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 800181c:	4b4e      	ldr	r3, [pc, #312]	; (8001958 <Send_WifiCmd+0x1488>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	3301      	adds	r3, #1
 8001822:	b2da      	uxtb	r2, r3
 8001824:	4b4c      	ldr	r3, [pc, #304]	; (8001958 <Send_WifiCmd+0x1488>)
 8001826:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  0x0a;
 8001828:	4b4b      	ldr	r3, [pc, #300]	; (8001958 <Send_WifiCmd+0x1488>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	461a      	mov	r2, r3
 800182e:	4b4b      	ldr	r3, [pc, #300]	; (800195c <Send_WifiCmd+0x148c>)
 8001830:	210a      	movs	r1, #10
 8001832:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001834:	4b48      	ldr	r3, [pc, #288]	; (8001958 <Send_WifiCmd+0x1488>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	3301      	adds	r3, #1
 800183a:	b2da      	uxtb	r2, r3
 800183c:	4b46      	ldr	r3, [pc, #280]	; (8001958 <Send_WifiCmd+0x1488>)
 800183e:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'C';
 8001840:	4b45      	ldr	r3, [pc, #276]	; (8001958 <Send_WifiCmd+0x1488>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	461a      	mov	r2, r3
 8001846:	4b45      	ldr	r3, [pc, #276]	; (800195c <Send_WifiCmd+0x148c>)
 8001848:	2143      	movs	r1, #67	; 0x43
 800184a:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 800184c:	4b42      	ldr	r3, [pc, #264]	; (8001958 <Send_WifiCmd+0x1488>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	3301      	adds	r3, #1
 8001852:	b2da      	uxtb	r2, r3
 8001854:	4b40      	ldr	r3, [pc, #256]	; (8001958 <Send_WifiCmd+0x1488>)
 8001856:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'o';
 8001858:	4b3f      	ldr	r3, [pc, #252]	; (8001958 <Send_WifiCmd+0x1488>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	461a      	mov	r2, r3
 800185e:	4b3f      	ldr	r3, [pc, #252]	; (800195c <Send_WifiCmd+0x148c>)
 8001860:	216f      	movs	r1, #111	; 0x6f
 8001862:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001864:	4b3c      	ldr	r3, [pc, #240]	; (8001958 <Send_WifiCmd+0x1488>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	3301      	adds	r3, #1
 800186a:	b2da      	uxtb	r2, r3
 800186c:	4b3a      	ldr	r3, [pc, #232]	; (8001958 <Send_WifiCmd+0x1488>)
 800186e:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'n';
 8001870:	4b39      	ldr	r3, [pc, #228]	; (8001958 <Send_WifiCmd+0x1488>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	461a      	mov	r2, r3
 8001876:	4b39      	ldr	r3, [pc, #228]	; (800195c <Send_WifiCmd+0x148c>)
 8001878:	216e      	movs	r1, #110	; 0x6e
 800187a:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 800187c:	4b36      	ldr	r3, [pc, #216]	; (8001958 <Send_WifiCmd+0x1488>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	3301      	adds	r3, #1
 8001882:	b2da      	uxtb	r2, r3
 8001884:	4b34      	ldr	r3, [pc, #208]	; (8001958 <Send_WifiCmd+0x1488>)
 8001886:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  't';
 8001888:	4b33      	ldr	r3, [pc, #204]	; (8001958 <Send_WifiCmd+0x1488>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	461a      	mov	r2, r3
 800188e:	4b33      	ldr	r3, [pc, #204]	; (800195c <Send_WifiCmd+0x148c>)
 8001890:	2174      	movs	r1, #116	; 0x74
 8001892:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001894:	4b30      	ldr	r3, [pc, #192]	; (8001958 <Send_WifiCmd+0x1488>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	3301      	adds	r3, #1
 800189a:	b2da      	uxtb	r2, r3
 800189c:	4b2e      	ldr	r3, [pc, #184]	; (8001958 <Send_WifiCmd+0x1488>)
 800189e:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'e';
 80018a0:	4b2d      	ldr	r3, [pc, #180]	; (8001958 <Send_WifiCmd+0x1488>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	461a      	mov	r2, r3
 80018a6:	4b2d      	ldr	r3, [pc, #180]	; (800195c <Send_WifiCmd+0x148c>)
 80018a8:	2165      	movs	r1, #101	; 0x65
 80018aa:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 80018ac:	4b2a      	ldr	r3, [pc, #168]	; (8001958 <Send_WifiCmd+0x1488>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	3301      	adds	r3, #1
 80018b2:	b2da      	uxtb	r2, r3
 80018b4:	4b28      	ldr	r3, [pc, #160]	; (8001958 <Send_WifiCmd+0x1488>)
 80018b6:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'n';
 80018b8:	4b27      	ldr	r3, [pc, #156]	; (8001958 <Send_WifiCmd+0x1488>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	461a      	mov	r2, r3
 80018be:	4b27      	ldr	r3, [pc, #156]	; (800195c <Send_WifiCmd+0x148c>)
 80018c0:	216e      	movs	r1, #110	; 0x6e
 80018c2:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 80018c4:	4b24      	ldr	r3, [pc, #144]	; (8001958 <Send_WifiCmd+0x1488>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	3301      	adds	r3, #1
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	4b22      	ldr	r3, [pc, #136]	; (8001958 <Send_WifiCmd+0x1488>)
 80018ce:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  't';
 80018d0:	4b21      	ldr	r3, [pc, #132]	; (8001958 <Send_WifiCmd+0x1488>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	461a      	mov	r2, r3
 80018d6:	4b21      	ldr	r3, [pc, #132]	; (800195c <Send_WifiCmd+0x148c>)
 80018d8:	2174      	movs	r1, #116	; 0x74
 80018da:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 80018dc:	4b1e      	ldr	r3, [pc, #120]	; (8001958 <Send_WifiCmd+0x1488>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	3301      	adds	r3, #1
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	4b1c      	ldr	r3, [pc, #112]	; (8001958 <Send_WifiCmd+0x1488>)
 80018e6:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  '-';
 80018e8:	4b1b      	ldr	r3, [pc, #108]	; (8001958 <Send_WifiCmd+0x1488>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	461a      	mov	r2, r3
 80018ee:	4b1b      	ldr	r3, [pc, #108]	; (800195c <Send_WifiCmd+0x148c>)
 80018f0:	212d      	movs	r1, #45	; 0x2d
 80018f2:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 80018f4:	4b18      	ldr	r3, [pc, #96]	; (8001958 <Send_WifiCmd+0x1488>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	3301      	adds	r3, #1
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	4b16      	ldr	r3, [pc, #88]	; (8001958 <Send_WifiCmd+0x1488>)
 80018fe:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'T';
 8001900:	4b15      	ldr	r3, [pc, #84]	; (8001958 <Send_WifiCmd+0x1488>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	461a      	mov	r2, r3
 8001906:	4b15      	ldr	r3, [pc, #84]	; (800195c <Send_WifiCmd+0x148c>)
 8001908:	2154      	movs	r1, #84	; 0x54
 800190a:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 800190c:	4b12      	ldr	r3, [pc, #72]	; (8001958 <Send_WifiCmd+0x1488>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	3301      	adds	r3, #1
 8001912:	b2da      	uxtb	r2, r3
 8001914:	4b10      	ldr	r3, [pc, #64]	; (8001958 <Send_WifiCmd+0x1488>)
 8001916:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'y';
 8001918:	4b0f      	ldr	r3, [pc, #60]	; (8001958 <Send_WifiCmd+0x1488>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	461a      	mov	r2, r3
 800191e:	4b0f      	ldr	r3, [pc, #60]	; (800195c <Send_WifiCmd+0x148c>)
 8001920:	2179      	movs	r1, #121	; 0x79
 8001922:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001924:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <Send_WifiCmd+0x1488>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	3301      	adds	r3, #1
 800192a:	b2da      	uxtb	r2, r3
 800192c:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <Send_WifiCmd+0x1488>)
 800192e:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'p';
 8001930:	4b09      	ldr	r3, [pc, #36]	; (8001958 <Send_WifiCmd+0x1488>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	461a      	mov	r2, r3
 8001936:	4b09      	ldr	r3, [pc, #36]	; (800195c <Send_WifiCmd+0x148c>)
 8001938:	2170      	movs	r1, #112	; 0x70
 800193a:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 800193c:	4b06      	ldr	r3, [pc, #24]	; (8001958 <Send_WifiCmd+0x1488>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	3301      	adds	r3, #1
 8001942:	b2da      	uxtb	r2, r3
 8001944:	4b04      	ldr	r3, [pc, #16]	; (8001958 <Send_WifiCmd+0x1488>)
 8001946:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'e';
 8001948:	4b03      	ldr	r3, [pc, #12]	; (8001958 <Send_WifiCmd+0x1488>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	461a      	mov	r2, r3
 800194e:	4b03      	ldr	r3, [pc, #12]	; (800195c <Send_WifiCmd+0x148c>)
 8001950:	2165      	movs	r1, #101	; 0x65
 8001952:	5499      	strb	r1, [r3, r2]
 8001954:	e004      	b.n	8001960 <Send_WifiCmd+0x1490>
 8001956:	bf00      	nop
 8001958:	20000259 	.word	0x20000259
 800195c:	20000090 	.word	0x20000090
    url_buffer++;
 8001960:	4ba0      	ldr	r3, [pc, #640]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	3301      	adds	r3, #1
 8001966:	b2da      	uxtb	r2, r3
 8001968:	4b9e      	ldr	r3, [pc, #632]	; (8001be4 <Send_WifiCmd+0x1714>)
 800196a:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  ':';
 800196c:	4b9d      	ldr	r3, [pc, #628]	; (8001be4 <Send_WifiCmd+0x1714>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	461a      	mov	r2, r3
 8001972:	4b9d      	ldr	r3, [pc, #628]	; (8001be8 <Send_WifiCmd+0x1718>)
 8001974:	213a      	movs	r1, #58	; 0x3a
 8001976:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001978:	4b9a      	ldr	r3, [pc, #616]	; (8001be4 <Send_WifiCmd+0x1714>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	3301      	adds	r3, #1
 800197e:	b2da      	uxtb	r2, r3
 8001980:	4b98      	ldr	r3, [pc, #608]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001982:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  ' ';
 8001984:	4b97      	ldr	r3, [pc, #604]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	461a      	mov	r2, r3
 800198a:	4b97      	ldr	r3, [pc, #604]	; (8001be8 <Send_WifiCmd+0x1718>)
 800198c:	2120      	movs	r1, #32
 800198e:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001990:	4b94      	ldr	r3, [pc, #592]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	3301      	adds	r3, #1
 8001996:	b2da      	uxtb	r2, r3
 8001998:	4b92      	ldr	r3, [pc, #584]	; (8001be4 <Send_WifiCmd+0x1714>)
 800199a:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'a';
 800199c:	4b91      	ldr	r3, [pc, #580]	; (8001be4 <Send_WifiCmd+0x1714>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	461a      	mov	r2, r3
 80019a2:	4b91      	ldr	r3, [pc, #580]	; (8001be8 <Send_WifiCmd+0x1718>)
 80019a4:	2161      	movs	r1, #97	; 0x61
 80019a6:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 80019a8:	4b8e      	ldr	r3, [pc, #568]	; (8001be4 <Send_WifiCmd+0x1714>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	3301      	adds	r3, #1
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	4b8c      	ldr	r3, [pc, #560]	; (8001be4 <Send_WifiCmd+0x1714>)
 80019b2:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'p';
 80019b4:	4b8b      	ldr	r3, [pc, #556]	; (8001be4 <Send_WifiCmd+0x1714>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	461a      	mov	r2, r3
 80019ba:	4b8b      	ldr	r3, [pc, #556]	; (8001be8 <Send_WifiCmd+0x1718>)
 80019bc:	2170      	movs	r1, #112	; 0x70
 80019be:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 80019c0:	4b88      	ldr	r3, [pc, #544]	; (8001be4 <Send_WifiCmd+0x1714>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	3301      	adds	r3, #1
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	4b86      	ldr	r3, [pc, #536]	; (8001be4 <Send_WifiCmd+0x1714>)
 80019ca:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'p';
 80019cc:	4b85      	ldr	r3, [pc, #532]	; (8001be4 <Send_WifiCmd+0x1714>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	461a      	mov	r2, r3
 80019d2:	4b85      	ldr	r3, [pc, #532]	; (8001be8 <Send_WifiCmd+0x1718>)
 80019d4:	2170      	movs	r1, #112	; 0x70
 80019d6:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 80019d8:	4b82      	ldr	r3, [pc, #520]	; (8001be4 <Send_WifiCmd+0x1714>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	3301      	adds	r3, #1
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	4b80      	ldr	r3, [pc, #512]	; (8001be4 <Send_WifiCmd+0x1714>)
 80019e2:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'l';
 80019e4:	4b7f      	ldr	r3, [pc, #508]	; (8001be4 <Send_WifiCmd+0x1714>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	461a      	mov	r2, r3
 80019ea:	4b7f      	ldr	r3, [pc, #508]	; (8001be8 <Send_WifiCmd+0x1718>)
 80019ec:	216c      	movs	r1, #108	; 0x6c
 80019ee:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 80019f0:	4b7c      	ldr	r3, [pc, #496]	; (8001be4 <Send_WifiCmd+0x1714>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	3301      	adds	r3, #1
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	4b7a      	ldr	r3, [pc, #488]	; (8001be4 <Send_WifiCmd+0x1714>)
 80019fa:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'i';
 80019fc:	4b79      	ldr	r3, [pc, #484]	; (8001be4 <Send_WifiCmd+0x1714>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	461a      	mov	r2, r3
 8001a02:	4b79      	ldr	r3, [pc, #484]	; (8001be8 <Send_WifiCmd+0x1718>)
 8001a04:	2169      	movs	r1, #105	; 0x69
 8001a06:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001a08:	4b76      	ldr	r3, [pc, #472]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	4b74      	ldr	r3, [pc, #464]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001a12:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'c';
 8001a14:	4b73      	ldr	r3, [pc, #460]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4b73      	ldr	r3, [pc, #460]	; (8001be8 <Send_WifiCmd+0x1718>)
 8001a1c:	2163      	movs	r1, #99	; 0x63
 8001a1e:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001a20:	4b70      	ldr	r3, [pc, #448]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	3301      	adds	r3, #1
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	4b6e      	ldr	r3, [pc, #440]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001a2a:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'a';
 8001a2c:	4b6d      	ldr	r3, [pc, #436]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	4b6d      	ldr	r3, [pc, #436]	; (8001be8 <Send_WifiCmd+0x1718>)
 8001a34:	2161      	movs	r1, #97	; 0x61
 8001a36:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001a38:	4b6a      	ldr	r3, [pc, #424]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	4b68      	ldr	r3, [pc, #416]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001a42:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  't';
 8001a44:	4b67      	ldr	r3, [pc, #412]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4b67      	ldr	r3, [pc, #412]	; (8001be8 <Send_WifiCmd+0x1718>)
 8001a4c:	2174      	movs	r1, #116	; 0x74
 8001a4e:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001a50:	4b64      	ldr	r3, [pc, #400]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	3301      	adds	r3, #1
 8001a56:	b2da      	uxtb	r2, r3
 8001a58:	4b62      	ldr	r3, [pc, #392]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001a5a:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'i';
 8001a5c:	4b61      	ldr	r3, [pc, #388]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	461a      	mov	r2, r3
 8001a62:	4b61      	ldr	r3, [pc, #388]	; (8001be8 <Send_WifiCmd+0x1718>)
 8001a64:	2169      	movs	r1, #105	; 0x69
 8001a66:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001a68:	4b5e      	ldr	r3, [pc, #376]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	4b5c      	ldr	r3, [pc, #368]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001a72:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'o';
 8001a74:	4b5b      	ldr	r3, [pc, #364]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4b5b      	ldr	r3, [pc, #364]	; (8001be8 <Send_WifiCmd+0x1718>)
 8001a7c:	216f      	movs	r1, #111	; 0x6f
 8001a7e:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001a80:	4b58      	ldr	r3, [pc, #352]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	3301      	adds	r3, #1
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	4b56      	ldr	r3, [pc, #344]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001a8a:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'n';
 8001a8c:	4b55      	ldr	r3, [pc, #340]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	461a      	mov	r2, r3
 8001a92:	4b55      	ldr	r3, [pc, #340]	; (8001be8 <Send_WifiCmd+0x1718>)
 8001a94:	216e      	movs	r1, #110	; 0x6e
 8001a96:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001a98:	4b52      	ldr	r3, [pc, #328]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	b2da      	uxtb	r2, r3
 8001aa0:	4b50      	ldr	r3, [pc, #320]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001aa2:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  '/';
 8001aa4:	4b4f      	ldr	r3, [pc, #316]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4b4f      	ldr	r3, [pc, #316]	; (8001be8 <Send_WifiCmd+0x1718>)
 8001aac:	212f      	movs	r1, #47	; 0x2f
 8001aae:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001ab0:	4b4c      	ldr	r3, [pc, #304]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	4b4a      	ldr	r3, [pc, #296]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001aba:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'j';
 8001abc:	4b49      	ldr	r3, [pc, #292]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4b49      	ldr	r3, [pc, #292]	; (8001be8 <Send_WifiCmd+0x1718>)
 8001ac4:	216a      	movs	r1, #106	; 0x6a
 8001ac6:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001ac8:	4b46      	ldr	r3, [pc, #280]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	3301      	adds	r3, #1
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	4b44      	ldr	r3, [pc, #272]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001ad2:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  's';
 8001ad4:	4b43      	ldr	r3, [pc, #268]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4b43      	ldr	r3, [pc, #268]	; (8001be8 <Send_WifiCmd+0x1718>)
 8001adc:	2173      	movs	r1, #115	; 0x73
 8001ade:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001ae0:	4b40      	ldr	r3, [pc, #256]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	4b3e      	ldr	r3, [pc, #248]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001aea:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'o';
 8001aec:	4b3d      	ldr	r3, [pc, #244]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	461a      	mov	r2, r3
 8001af2:	4b3d      	ldr	r3, [pc, #244]	; (8001be8 <Send_WifiCmd+0x1718>)
 8001af4:	216f      	movs	r1, #111	; 0x6f
 8001af6:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001af8:	4b3a      	ldr	r3, [pc, #232]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	3301      	adds	r3, #1
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	4b38      	ldr	r3, [pc, #224]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001b02:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'n';
 8001b04:	4b37      	ldr	r3, [pc, #220]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4b37      	ldr	r3, [pc, #220]	; (8001be8 <Send_WifiCmd+0x1718>)
 8001b0c:	216e      	movs	r1, #110	; 0x6e
 8001b0e:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001b10:	4b34      	ldr	r3, [pc, #208]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	3301      	adds	r3, #1
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	4b32      	ldr	r3, [pc, #200]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001b1a:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  0x0d;
 8001b1c:	4b31      	ldr	r3, [pc, #196]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	461a      	mov	r2, r3
 8001b22:	4b31      	ldr	r3, [pc, #196]	; (8001be8 <Send_WifiCmd+0x1718>)
 8001b24:	210d      	movs	r1, #13
 8001b26:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001b28:	4b2e      	ldr	r3, [pc, #184]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	b2da      	uxtb	r2, r3
 8001b30:	4b2c      	ldr	r3, [pc, #176]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001b32:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  0x0a;
 8001b34:	4b2b      	ldr	r3, [pc, #172]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4b2b      	ldr	r3, [pc, #172]	; (8001be8 <Send_WifiCmd+0x1718>)
 8001b3c:	210a      	movs	r1, #10
 8001b3e:	5499      	strb	r1, [r3, r2]
     url_buffer++;
 8001b40:	4b28      	ldr	r3, [pc, #160]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	3301      	adds	r3, #1
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	4b26      	ldr	r3, [pc, #152]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001b4a:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'C';
 8001b4c:	4b25      	ldr	r3, [pc, #148]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	461a      	mov	r2, r3
 8001b52:	4b25      	ldr	r3, [pc, #148]	; (8001be8 <Send_WifiCmd+0x1718>)
 8001b54:	2143      	movs	r1, #67	; 0x43
 8001b56:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001b58:	4b22      	ldr	r3, [pc, #136]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	4b20      	ldr	r3, [pc, #128]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001b62:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'o';
 8001b64:	4b1f      	ldr	r3, [pc, #124]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4b1f      	ldr	r3, [pc, #124]	; (8001be8 <Send_WifiCmd+0x1718>)
 8001b6c:	216f      	movs	r1, #111	; 0x6f
 8001b6e:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001b70:	4b1c      	ldr	r3, [pc, #112]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	3301      	adds	r3, #1
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	4b1a      	ldr	r3, [pc, #104]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001b7a:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'n';
 8001b7c:	4b19      	ldr	r3, [pc, #100]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	461a      	mov	r2, r3
 8001b82:	4b19      	ldr	r3, [pc, #100]	; (8001be8 <Send_WifiCmd+0x1718>)
 8001b84:	216e      	movs	r1, #110	; 0x6e
 8001b86:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001b88:	4b16      	ldr	r3, [pc, #88]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	4b14      	ldr	r3, [pc, #80]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001b92:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  't';
 8001b94:	4b13      	ldr	r3, [pc, #76]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <Send_WifiCmd+0x1718>)
 8001b9c:	2174      	movs	r1, #116	; 0x74
 8001b9e:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001ba0:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	4b0e      	ldr	r3, [pc, #56]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001baa:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'e';
 8001bac:	4b0d      	ldr	r3, [pc, #52]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	4b0d      	ldr	r3, [pc, #52]	; (8001be8 <Send_WifiCmd+0x1718>)
 8001bb4:	2165      	movs	r1, #101	; 0x65
 8001bb6:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001bb8:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001bc2:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'n';
 8001bc4:	4b07      	ldr	r3, [pc, #28]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <Send_WifiCmd+0x1718>)
 8001bcc:	216e      	movs	r1, #110	; 0x6e
 8001bce:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001bd0:	4b04      	ldr	r3, [pc, #16]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	4b02      	ldr	r3, [pc, #8]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001bda:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  't';
 8001bdc:	4b01      	ldr	r3, [pc, #4]	; (8001be4 <Send_WifiCmd+0x1714>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	e004      	b.n	8001bec <Send_WifiCmd+0x171c>
 8001be2:	bf00      	nop
 8001be4:	20000259 	.word	0x20000259
 8001be8:	20000090 	.word	0x20000090
 8001bec:	461a      	mov	r2, r3
 8001bee:	4b9b      	ldr	r3, [pc, #620]	; (8001e5c <Send_WifiCmd+0x198c>)
 8001bf0:	2174      	movs	r1, #116	; 0x74
 8001bf2:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001bf4:	4b9a      	ldr	r3, [pc, #616]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	4b98      	ldr	r3, [pc, #608]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001bfe:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  '-';
 8001c00:	4b97      	ldr	r3, [pc, #604]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	461a      	mov	r2, r3
 8001c06:	4b95      	ldr	r3, [pc, #596]	; (8001e5c <Send_WifiCmd+0x198c>)
 8001c08:	212d      	movs	r1, #45	; 0x2d
 8001c0a:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001c0c:	4b94      	ldr	r3, [pc, #592]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	3301      	adds	r3, #1
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	4b92      	ldr	r3, [pc, #584]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001c16:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'L';
 8001c18:	4b91      	ldr	r3, [pc, #580]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	4b8f      	ldr	r3, [pc, #572]	; (8001e5c <Send_WifiCmd+0x198c>)
 8001c20:	214c      	movs	r1, #76	; 0x4c
 8001c22:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001c24:	4b8e      	ldr	r3, [pc, #568]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	4b8c      	ldr	r3, [pc, #560]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001c2e:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'e';
 8001c30:	4b8b      	ldr	r3, [pc, #556]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	461a      	mov	r2, r3
 8001c36:	4b89      	ldr	r3, [pc, #548]	; (8001e5c <Send_WifiCmd+0x198c>)
 8001c38:	2165      	movs	r1, #101	; 0x65
 8001c3a:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001c3c:	4b88      	ldr	r3, [pc, #544]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	3301      	adds	r3, #1
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	4b86      	ldr	r3, [pc, #536]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001c46:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'n';
 8001c48:	4b85      	ldr	r3, [pc, #532]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4b83      	ldr	r3, [pc, #524]	; (8001e5c <Send_WifiCmd+0x198c>)
 8001c50:	216e      	movs	r1, #110	; 0x6e
 8001c52:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001c54:	4b82      	ldr	r3, [pc, #520]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	4b80      	ldr	r3, [pc, #512]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001c5e:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'g';
 8001c60:	4b7f      	ldr	r3, [pc, #508]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	461a      	mov	r2, r3
 8001c66:	4b7d      	ldr	r3, [pc, #500]	; (8001e5c <Send_WifiCmd+0x198c>)
 8001c68:	2167      	movs	r1, #103	; 0x67
 8001c6a:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001c6c:	4b7c      	ldr	r3, [pc, #496]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	3301      	adds	r3, #1
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	4b7a      	ldr	r3, [pc, #488]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001c76:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  't';
 8001c78:	4b79      	ldr	r3, [pc, #484]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4b77      	ldr	r3, [pc, #476]	; (8001e5c <Send_WifiCmd+0x198c>)
 8001c80:	2174      	movs	r1, #116	; 0x74
 8001c82:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001c84:	4b76      	ldr	r3, [pc, #472]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	4b74      	ldr	r3, [pc, #464]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001c8e:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  'h';
 8001c90:	4b73      	ldr	r3, [pc, #460]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	461a      	mov	r2, r3
 8001c96:	4b71      	ldr	r3, [pc, #452]	; (8001e5c <Send_WifiCmd+0x198c>)
 8001c98:	2168      	movs	r1, #104	; 0x68
 8001c9a:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 8001c9c:	4b70      	ldr	r3, [pc, #448]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	4b6e      	ldr	r3, [pc, #440]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001ca6:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  ':';
 8001ca8:	4b6d      	ldr	r3, [pc, #436]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	4b6b      	ldr	r3, [pc, #428]	; (8001e5c <Send_WifiCmd+0x198c>)
 8001cb0:	213a      	movs	r1, #58	; 0x3a
 8001cb2:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 8001cb4:	4b6a      	ldr	r3, [pc, #424]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	4b68      	ldr	r3, [pc, #416]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001cbe:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  ' ';
 8001cc0:	4b67      	ldr	r3, [pc, #412]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4b65      	ldr	r3, [pc, #404]	; (8001e5c <Send_WifiCmd+0x198c>)
 8001cc8:	2120      	movs	r1, #32
 8001cca:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 8001ccc:	4b64      	ldr	r3, [pc, #400]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	4b62      	ldr	r3, [pc, #392]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001cd6:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  (unsigned char)(((ContentLength%10000)/1000)+0x30);
 8001cd8:	4b62      	ldr	r3, [pc, #392]	; (8001e64 <Send_WifiCmd+0x1994>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	4b62      	ldr	r3, [pc, #392]	; (8001e68 <Send_WifiCmd+0x1998>)
 8001cde:	fba3 1302 	umull	r1, r3, r3, r2
 8001ce2:	0b5b      	lsrs	r3, r3, #13
 8001ce4:	f242 7110 	movw	r1, #10000	; 0x2710
 8001ce8:	fb01 f303 	mul.w	r3, r1, r3
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	4a5f      	ldr	r2, [pc, #380]	; (8001e6c <Send_WifiCmd+0x199c>)
 8001cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf4:	099b      	lsrs	r3, r3, #6
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	4a59      	ldr	r2, [pc, #356]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001cfa:	7812      	ldrb	r2, [r2, #0]
 8001cfc:	3330      	adds	r3, #48	; 0x30
 8001cfe:	b2d9      	uxtb	r1, r3
 8001d00:	4b56      	ldr	r3, [pc, #344]	; (8001e5c <Send_WifiCmd+0x198c>)
 8001d02:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001d04:	4b56      	ldr	r3, [pc, #344]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	4b54      	ldr	r3, [pc, #336]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001d0e:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  (unsigned char)(((ContentLength%1000)/100)+0x30);
 8001d10:	4b54      	ldr	r3, [pc, #336]	; (8001e64 <Send_WifiCmd+0x1994>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	4b55      	ldr	r3, [pc, #340]	; (8001e6c <Send_WifiCmd+0x199c>)
 8001d16:	fba3 1302 	umull	r1, r3, r3, r2
 8001d1a:	099b      	lsrs	r3, r3, #6
 8001d1c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d20:	fb01 f303 	mul.w	r3, r1, r3
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	4a52      	ldr	r2, [pc, #328]	; (8001e70 <Send_WifiCmd+0x19a0>)
 8001d28:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2c:	095b      	lsrs	r3, r3, #5
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	4a4b      	ldr	r2, [pc, #300]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001d32:	7812      	ldrb	r2, [r2, #0]
 8001d34:	3330      	adds	r3, #48	; 0x30
 8001d36:	b2d9      	uxtb	r1, r3
 8001d38:	4b48      	ldr	r3, [pc, #288]	; (8001e5c <Send_WifiCmd+0x198c>)
 8001d3a:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001d3c:	4b48      	ldr	r3, [pc, #288]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	3301      	adds	r3, #1
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	4b46      	ldr	r3, [pc, #280]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001d46:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  (unsigned char)(((ContentLength%100)/10)+0x30);
 8001d48:	4b46      	ldr	r3, [pc, #280]	; (8001e64 <Send_WifiCmd+0x1994>)
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	4b48      	ldr	r3, [pc, #288]	; (8001e70 <Send_WifiCmd+0x19a0>)
 8001d4e:	fba3 1302 	umull	r1, r3, r3, r2
 8001d52:	095b      	lsrs	r3, r3, #5
 8001d54:	2164      	movs	r1, #100	; 0x64
 8001d56:	fb01 f303 	mul.w	r3, r1, r3
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	4a45      	ldr	r2, [pc, #276]	; (8001e74 <Send_WifiCmd+0x19a4>)
 8001d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d62:	08db      	lsrs	r3, r3, #3
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	4a3e      	ldr	r2, [pc, #248]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001d68:	7812      	ldrb	r2, [r2, #0]
 8001d6a:	3330      	adds	r3, #48	; 0x30
 8001d6c:	b2d9      	uxtb	r1, r3
 8001d6e:	4b3b      	ldr	r3, [pc, #236]	; (8001e5c <Send_WifiCmd+0x198c>)
 8001d70:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001d72:	4b3b      	ldr	r3, [pc, #236]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	3301      	adds	r3, #1
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	4b39      	ldr	r3, [pc, #228]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001d7c:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  (unsigned char)((ContentLength%10)+0x30);;
 8001d7e:	4b39      	ldr	r3, [pc, #228]	; (8001e64 <Send_WifiCmd+0x1994>)
 8001d80:	6819      	ldr	r1, [r3, #0]
 8001d82:	4b3c      	ldr	r3, [pc, #240]	; (8001e74 <Send_WifiCmd+0x19a4>)
 8001d84:	fba3 2301 	umull	r2, r3, r3, r1
 8001d88:	08da      	lsrs	r2, r3, #3
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	1aca      	subs	r2, r1, r3
 8001d94:	b2d3      	uxtb	r3, r2
 8001d96:	4a32      	ldr	r2, [pc, #200]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001d98:	7812      	ldrb	r2, [r2, #0]
 8001d9a:	3330      	adds	r3, #48	; 0x30
 8001d9c:	b2d9      	uxtb	r1, r3
 8001d9e:	4b2f      	ldr	r3, [pc, #188]	; (8001e5c <Send_WifiCmd+0x198c>)
 8001da0:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 8001da2:	4b2f      	ldr	r3, [pc, #188]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	3301      	adds	r3, #1
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	4b2d      	ldr	r3, [pc, #180]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001dac:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  0x0d;
 8001dae:	4b2c      	ldr	r3, [pc, #176]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	461a      	mov	r2, r3
 8001db4:	4b29      	ldr	r3, [pc, #164]	; (8001e5c <Send_WifiCmd+0x198c>)
 8001db6:	210d      	movs	r1, #13
 8001db8:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001dba:	4b29      	ldr	r3, [pc, #164]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	4b27      	ldr	r3, [pc, #156]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001dc4:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  0x0a;
 8001dc6:	4b26      	ldr	r3, [pc, #152]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	4b23      	ldr	r3, [pc, #140]	; (8001e5c <Send_WifiCmd+0x198c>)
 8001dce:	210a      	movs	r1, #10
 8001dd0:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001dd2:	4b23      	ldr	r3, [pc, #140]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	4b21      	ldr	r3, [pc, #132]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001ddc:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  0x0d;
 8001dde:	4b20      	ldr	r3, [pc, #128]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	461a      	mov	r2, r3
 8001de4:	4b1d      	ldr	r3, [pc, #116]	; (8001e5c <Send_WifiCmd+0x198c>)
 8001de6:	210d      	movs	r1, #13
 8001de8:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001dea:	4b1d      	ldr	r3, [pc, #116]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	3301      	adds	r3, #1
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	4b1b      	ldr	r3, [pc, #108]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001df4:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  0x0a;
 8001df6:	4b1a      	ldr	r3, [pc, #104]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	4b17      	ldr	r3, [pc, #92]	; (8001e5c <Send_WifiCmd+0x198c>)
 8001dfe:	210a      	movs	r1, #10
 8001e00:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001e02:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	3301      	adds	r3, #1
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001e0c:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[url_buffer] =  '[';
 8001e0e:	4b14      	ldr	r3, [pc, #80]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	461a      	mov	r2, r3
 8001e14:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <Send_WifiCmd+0x198c>)
 8001e16:	215b      	movs	r1, #91	; 0x5b
 8001e18:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001e1a:	4b11      	ldr	r3, [pc, #68]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001e24:	701a      	strb	r2, [r3, #0]
	NoOfdata_byte	= 	url_buffer;
 8001e26:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001e28:	781a      	ldrb	r2, [r3, #0]
 8001e2a:	4b13      	ldr	r3, [pc, #76]	; (8001e78 <Send_WifiCmd+0x19a8>)
 8001e2c:	701a      	strb	r2, [r3, #0]
		wifi_command	=	101;
 8001e2e:	4b13      	ldr	r3, [pc, #76]	; (8001e7c <Send_WifiCmd+0x19ac>)
 8001e30:	2265      	movs	r2, #101	; 0x65
 8001e32:	701a      	strb	r2, [r3, #0]


	NoOfdata_byte	= url_buffer;
 8001e34:	4b0a      	ldr	r3, [pc, #40]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001e36:	781a      	ldrb	r2, [r3, #0]
 8001e38:	4b0f      	ldr	r3, [pc, #60]	; (8001e78 <Send_WifiCmd+0x19a8>)
 8001e3a:	701a      	strb	r2, [r3, #0]
	wifi_command=101;
 8001e3c:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <Send_WifiCmd+0x19ac>)
 8001e3e:	2265      	movs	r2, #101	; 0x65
 8001e40:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 8001e42:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <Send_WifiCmd+0x19b0>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit_IT(&hlpuart1,ESP8266TXData,url_buffer);
 8001e48:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <Send_WifiCmd+0x1990>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	461a      	mov	r2, r3
 8001e50:	4902      	ldr	r1, [pc, #8]	; (8001e5c <Send_WifiCmd+0x198c>)
 8001e52:	480c      	ldr	r0, [pc, #48]	; (8001e84 <Send_WifiCmd+0x19b4>)
 8001e54:	f00b fc08 	bl	800d668 <HAL_UART_Transmit_IT>
	break;
 8001e58:	f000 beaf 	b.w	8002bba <Send_WifiCmd+0x26ea>
 8001e5c:	20000090 	.word	0x20000090
 8001e60:	20000259 	.word	0x20000259
 8001e64:	20000260 	.word	0x20000260
 8001e68:	d1b71759 	.word	0xd1b71759
 8001e6c:	10624dd3 	.word	0x10624dd3
 8001e70:	51eb851f 	.word	0x51eb851f
 8001e74:	cccccccd 	.word	0xcccccccd
 8001e78:	20000257 	.word	0x20000257
 8001e7c:	2000008d 	.word	0x2000008d
 8001e80:	20000258 	.word	0x20000258
 8001e84:	200003d4 	.word	0x200003d4
	case 101:
	url_buffer=0;
 8001e88:	4b9f      	ldr	r3, [pc, #636]	; (8002108 <Send_WifiCmd+0x1c38>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	701a      	strb	r2, [r3, #0]
	Framecheck =  Framecheck+1;
 8001e8e:	4b9f      	ldr	r3, [pc, #636]	; (800210c <Send_WifiCmd+0x1c3c>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	3301      	adds	r3, #1
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	4b9d      	ldr	r3, [pc, #628]	; (800210c <Send_WifiCmd+0x1c3c>)
 8001e98:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] =  '"';
 8001e9a:	4b9b      	ldr	r3, [pc, #620]	; (8002108 <Send_WifiCmd+0x1c38>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	4b9b      	ldr	r3, [pc, #620]	; (8002110 <Send_WifiCmd+0x1c40>)
 8001ea2:	2122      	movs	r1, #34	; 0x22
 8001ea4:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001ea6:	4b98      	ldr	r3, [pc, #608]	; (8002108 <Send_WifiCmd+0x1c38>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	4b96      	ldr	r3, [pc, #600]	; (8002108 <Send_WifiCmd+0x1c38>)
 8001eb0:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = (unsigned char)(1);
 8001eb2:	4b95      	ldr	r3, [pc, #596]	; (8002108 <Send_WifiCmd+0x1c38>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	4b95      	ldr	r3, [pc, #596]	; (8002110 <Send_WifiCmd+0x1c40>)
 8001eba:	2101      	movs	r1, #1
 8001ebc:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 8001ebe:	4b92      	ldr	r3, [pc, #584]	; (8002108 <Send_WifiCmd+0x1c38>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	4b90      	ldr	r3, [pc, #576]	; (8002108 <Send_WifiCmd+0x1c38>)
 8001ec8:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] =  ',';
 8001eca:	4b8f      	ldr	r3, [pc, #572]	; (8002108 <Send_WifiCmd+0x1c38>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	4b8f      	ldr	r3, [pc, #572]	; (8002110 <Send_WifiCmd+0x1c40>)
 8001ed2:	212c      	movs	r1, #44	; 0x2c
 8001ed4:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 8001ed6:	4b8c      	ldr	r3, [pc, #560]	; (8002108 <Send_WifiCmd+0x1c38>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	3301      	adds	r3, #1
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	4b8a      	ldr	r3, [pc, #552]	; (8002108 <Send_WifiCmd+0x1c38>)
 8001ee0:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 8001ee2:	4b89      	ldr	r3, [pc, #548]	; (8002108 <Send_WifiCmd+0x1c38>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	4b89      	ldr	r3, [pc, #548]	; (8002110 <Send_WifiCmd+0x1c40>)
 8001eea:	2100      	movs	r1, #0
 8001eec:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 8001eee:	4b86      	ldr	r3, [pc, #536]	; (8002108 <Send_WifiCmd+0x1c38>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	4b84      	ldr	r3, [pc, #528]	; (8002108 <Send_WifiCmd+0x1c38>)
 8001ef8:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 8001efa:	4b83      	ldr	r3, [pc, #524]	; (8002108 <Send_WifiCmd+0x1c38>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	461a      	mov	r2, r3
 8001f00:	4b83      	ldr	r3, [pc, #524]	; (8002110 <Send_WifiCmd+0x1c40>)
 8001f02:	2100      	movs	r1, #0
 8001f04:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 8001f06:	4b80      	ldr	r3, [pc, #512]	; (8002108 <Send_WifiCmd+0x1c38>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	4b7e      	ldr	r3, [pc, #504]	; (8002108 <Send_WifiCmd+0x1c38>)
 8001f10:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 8001f12:	4b7d      	ldr	r3, [pc, #500]	; (8002108 <Send_WifiCmd+0x1c38>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	461a      	mov	r2, r3
 8001f18:	4b7d      	ldr	r3, [pc, #500]	; (8002110 <Send_WifiCmd+0x1c40>)
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 8001f1e:	4b7a      	ldr	r3, [pc, #488]	; (8002108 <Send_WifiCmd+0x1c38>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	3301      	adds	r3, #1
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	4b78      	ldr	r3, [pc, #480]	; (8002108 <Send_WifiCmd+0x1c38>)
 8001f28:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 8001f2a:	4b77      	ldr	r3, [pc, #476]	; (8002108 <Send_WifiCmd+0x1c38>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	4b77      	ldr	r3, [pc, #476]	; (8002110 <Send_WifiCmd+0x1c40>)
 8001f32:	2100      	movs	r1, #0
 8001f34:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001f36:	4b74      	ldr	r3, [pc, #464]	; (8002108 <Send_WifiCmd+0x1c38>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	4b72      	ldr	r3, [pc, #456]	; (8002108 <Send_WifiCmd+0x1c38>)
 8001f40:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] =  ',';
 8001f42:	4b71      	ldr	r3, [pc, #452]	; (8002108 <Send_WifiCmd+0x1c38>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	461a      	mov	r2, r3
 8001f48:	4b71      	ldr	r3, [pc, #452]	; (8002110 <Send_WifiCmd+0x1c40>)
 8001f4a:	212c      	movs	r1, #44	; 0x2c
 8001f4c:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 8001f4e:	4b6e      	ldr	r3, [pc, #440]	; (8002108 <Send_WifiCmd+0x1c38>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	3301      	adds	r3, #1
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	4b6c      	ldr	r3, [pc, #432]	; (8002108 <Send_WifiCmd+0x1c38>)
 8001f58:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 8001f5a:	4b6b      	ldr	r3, [pc, #428]	; (8002108 <Send_WifiCmd+0x1c38>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	4b6b      	ldr	r3, [pc, #428]	; (8002110 <Send_WifiCmd+0x1c40>)
 8001f62:	2100      	movs	r1, #0
 8001f64:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 8001f66:	4b68      	ldr	r3, [pc, #416]	; (8002108 <Send_WifiCmd+0x1c38>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	4b66      	ldr	r3, [pc, #408]	; (8002108 <Send_WifiCmd+0x1c38>)
 8001f70:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 8001f72:	4b65      	ldr	r3, [pc, #404]	; (8002108 <Send_WifiCmd+0x1c38>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	461a      	mov	r2, r3
 8001f78:	4b65      	ldr	r3, [pc, #404]	; (8002110 <Send_WifiCmd+0x1c40>)
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 8001f7e:	4b62      	ldr	r3, [pc, #392]	; (8002108 <Send_WifiCmd+0x1c38>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	3301      	adds	r3, #1
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	4b60      	ldr	r3, [pc, #384]	; (8002108 <Send_WifiCmd+0x1c38>)
 8001f88:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 8001f8a:	4b5f      	ldr	r3, [pc, #380]	; (8002108 <Send_WifiCmd+0x1c38>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	4b5f      	ldr	r3, [pc, #380]	; (8002110 <Send_WifiCmd+0x1c40>)
 8001f92:	2100      	movs	r1, #0
 8001f94:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 8001f96:	4b5c      	ldr	r3, [pc, #368]	; (8002108 <Send_WifiCmd+0x1c38>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	4b5a      	ldr	r3, [pc, #360]	; (8002108 <Send_WifiCmd+0x1c38>)
 8001fa0:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 8001fa2:	4b59      	ldr	r3, [pc, #356]	; (8002108 <Send_WifiCmd+0x1c38>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	4b59      	ldr	r3, [pc, #356]	; (8002110 <Send_WifiCmd+0x1c40>)
 8001faa:	2100      	movs	r1, #0
 8001fac:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8001fae:	4b56      	ldr	r3, [pc, #344]	; (8002108 <Send_WifiCmd+0x1c38>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	4b54      	ldr	r3, [pc, #336]	; (8002108 <Send_WifiCmd+0x1c38>)
 8001fb8:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] =  ',';
 8001fba:	4b53      	ldr	r3, [pc, #332]	; (8002108 <Send_WifiCmd+0x1c38>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	4b53      	ldr	r3, [pc, #332]	; (8002110 <Send_WifiCmd+0x1c40>)
 8001fc2:	212c      	movs	r1, #44	; 0x2c
 8001fc4:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 8001fc6:	4b50      	ldr	r3, [pc, #320]	; (8002108 <Send_WifiCmd+0x1c38>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	4b4e      	ldr	r3, [pc, #312]	; (8002108 <Send_WifiCmd+0x1c38>)
 8001fd0:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 8001fd2:	4b4d      	ldr	r3, [pc, #308]	; (8002108 <Send_WifiCmd+0x1c38>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	4b4d      	ldr	r3, [pc, #308]	; (8002110 <Send_WifiCmd+0x1c40>)
 8001fda:	2100      	movs	r1, #0
 8001fdc:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 8001fde:	4b4a      	ldr	r3, [pc, #296]	; (8002108 <Send_WifiCmd+0x1c38>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	4b48      	ldr	r3, [pc, #288]	; (8002108 <Send_WifiCmd+0x1c38>)
 8001fe8:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 8001fea:	4b47      	ldr	r3, [pc, #284]	; (8002108 <Send_WifiCmd+0x1c38>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	4b47      	ldr	r3, [pc, #284]	; (8002110 <Send_WifiCmd+0x1c40>)
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 8001ff6:	4b44      	ldr	r3, [pc, #272]	; (8002108 <Send_WifiCmd+0x1c38>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	4b42      	ldr	r3, [pc, #264]	; (8002108 <Send_WifiCmd+0x1c38>)
 8002000:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 8002002:	4b41      	ldr	r3, [pc, #260]	; (8002108 <Send_WifiCmd+0x1c38>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	461a      	mov	r2, r3
 8002008:	4b41      	ldr	r3, [pc, #260]	; (8002110 <Send_WifiCmd+0x1c40>)
 800200a:	2100      	movs	r1, #0
 800200c:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 800200e:	4b3e      	ldr	r3, [pc, #248]	; (8002108 <Send_WifiCmd+0x1c38>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	3301      	adds	r3, #1
 8002014:	b2da      	uxtb	r2, r3
 8002016:	4b3c      	ldr	r3, [pc, #240]	; (8002108 <Send_WifiCmd+0x1c38>)
 8002018:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 800201a:	4b3b      	ldr	r3, [pc, #236]	; (8002108 <Send_WifiCmd+0x1c38>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	461a      	mov	r2, r3
 8002020:	4b3b      	ldr	r3, [pc, #236]	; (8002110 <Send_WifiCmd+0x1c40>)
 8002022:	2100      	movs	r1, #0
 8002024:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8002026:	4b38      	ldr	r3, [pc, #224]	; (8002108 <Send_WifiCmd+0x1c38>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	3301      	adds	r3, #1
 800202c:	b2da      	uxtb	r2, r3
 800202e:	4b36      	ldr	r3, [pc, #216]	; (8002108 <Send_WifiCmd+0x1c38>)
 8002030:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] =  ','; //MaxLimitReached
 8002032:	4b35      	ldr	r3, [pc, #212]	; (8002108 <Send_WifiCmd+0x1c38>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	461a      	mov	r2, r3
 8002038:	4b35      	ldr	r3, [pc, #212]	; (8002110 <Send_WifiCmd+0x1c40>)
 800203a:	212c      	movs	r1, #44	; 0x2c
 800203c:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 800203e:	4b32      	ldr	r3, [pc, #200]	; (8002108 <Send_WifiCmd+0x1c38>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	3301      	adds	r3, #1
 8002044:	b2da      	uxtb	r2, r3
 8002046:	4b30      	ldr	r3, [pc, #192]	; (8002108 <Send_WifiCmd+0x1c38>)
 8002048:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 800204a:	4b2f      	ldr	r3, [pc, #188]	; (8002108 <Send_WifiCmd+0x1c38>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	461a      	mov	r2, r3
 8002050:	4b2f      	ldr	r3, [pc, #188]	; (8002110 <Send_WifiCmd+0x1c40>)
 8002052:	2100      	movs	r1, #0
 8002054:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 8002056:	4b2c      	ldr	r3, [pc, #176]	; (8002108 <Send_WifiCmd+0x1c38>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	3301      	adds	r3, #1
 800205c:	b2da      	uxtb	r2, r3
 800205e:	4b2a      	ldr	r3, [pc, #168]	; (8002108 <Send_WifiCmd+0x1c38>)
 8002060:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 8002062:	4b29      	ldr	r3, [pc, #164]	; (8002108 <Send_WifiCmd+0x1c38>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	461a      	mov	r2, r3
 8002068:	4b29      	ldr	r3, [pc, #164]	; (8002110 <Send_WifiCmd+0x1c40>)
 800206a:	2100      	movs	r1, #0
 800206c:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 800206e:	4b26      	ldr	r3, [pc, #152]	; (8002108 <Send_WifiCmd+0x1c38>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	3301      	adds	r3, #1
 8002074:	b2da      	uxtb	r2, r3
 8002076:	4b24      	ldr	r3, [pc, #144]	; (8002108 <Send_WifiCmd+0x1c38>)
 8002078:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 800207a:	4b23      	ldr	r3, [pc, #140]	; (8002108 <Send_WifiCmd+0x1c38>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	461a      	mov	r2, r3
 8002080:	4b23      	ldr	r3, [pc, #140]	; (8002110 <Send_WifiCmd+0x1c40>)
 8002082:	2100      	movs	r1, #0
 8002084:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 8002086:	4b20      	ldr	r3, [pc, #128]	; (8002108 <Send_WifiCmd+0x1c38>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	3301      	adds	r3, #1
 800208c:	b2da      	uxtb	r2, r3
 800208e:	4b1e      	ldr	r3, [pc, #120]	; (8002108 <Send_WifiCmd+0x1c38>)
 8002090:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 8002092:	4b1d      	ldr	r3, [pc, #116]	; (8002108 <Send_WifiCmd+0x1c38>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	461a      	mov	r2, r3
 8002098:	4b1d      	ldr	r3, [pc, #116]	; (8002110 <Send_WifiCmd+0x1c40>)
 800209a:	2100      	movs	r1, #0
 800209c:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 800209e:	4b1a      	ldr	r3, [pc, #104]	; (8002108 <Send_WifiCmd+0x1c38>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	3301      	adds	r3, #1
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	4b18      	ldr	r3, [pc, #96]	; (8002108 <Send_WifiCmd+0x1c38>)
 80020a8:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] =  ',';
 80020aa:	4b17      	ldr	r3, [pc, #92]	; (8002108 <Send_WifiCmd+0x1c38>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	461a      	mov	r2, r3
 80020b0:	4b17      	ldr	r3, [pc, #92]	; (8002110 <Send_WifiCmd+0x1c40>)
 80020b2:	212c      	movs	r1, #44	; 0x2c
 80020b4:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 80020b6:	4b14      	ldr	r3, [pc, #80]	; (8002108 <Send_WifiCmd+0x1c38>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	3301      	adds	r3, #1
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	4b12      	ldr	r3, [pc, #72]	; (8002108 <Send_WifiCmd+0x1c38>)
 80020c0:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 80020c2:	4b11      	ldr	r3, [pc, #68]	; (8002108 <Send_WifiCmd+0x1c38>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	461a      	mov	r2, r3
 80020c8:	4b11      	ldr	r3, [pc, #68]	; (8002110 <Send_WifiCmd+0x1c40>)
 80020ca:	2100      	movs	r1, #0
 80020cc:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 80020ce:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <Send_WifiCmd+0x1c38>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	3301      	adds	r3, #1
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <Send_WifiCmd+0x1c38>)
 80020d8:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 80020da:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <Send_WifiCmd+0x1c38>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	461a      	mov	r2, r3
 80020e0:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <Send_WifiCmd+0x1c40>)
 80020e2:	2100      	movs	r1, #0
 80020e4:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 80020e6:	4b08      	ldr	r3, [pc, #32]	; (8002108 <Send_WifiCmd+0x1c38>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	3301      	adds	r3, #1
 80020ec:	b2da      	uxtb	r2, r3
 80020ee:	4b06      	ldr	r3, [pc, #24]	; (8002108 <Send_WifiCmd+0x1c38>)
 80020f0:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 80020f2:	4b05      	ldr	r3, [pc, #20]	; (8002108 <Send_WifiCmd+0x1c38>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	461a      	mov	r2, r3
 80020f8:	4b05      	ldr	r3, [pc, #20]	; (8002110 <Send_WifiCmd+0x1c40>)
 80020fa:	2100      	movs	r1, #0
 80020fc:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 80020fe:	4b02      	ldr	r3, [pc, #8]	; (8002108 <Send_WifiCmd+0x1c38>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	3301      	adds	r3, #1
 8002104:	b2da      	uxtb	r2, r3
 8002106:	e005      	b.n	8002114 <Send_WifiCmd+0x1c44>
 8002108:	20000259 	.word	0x20000259
 800210c:	2000025d 	.word	0x2000025d
 8002110:	2000018c 	.word	0x2000018c
 8002114:	4ba0      	ldr	r3, [pc, #640]	; (8002398 <Send_WifiCmd+0x1ec8>)
 8002116:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 8002118:	4b9f      	ldr	r3, [pc, #636]	; (8002398 <Send_WifiCmd+0x1ec8>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	461a      	mov	r2, r3
 800211e:	4b9f      	ldr	r3, [pc, #636]	; (800239c <Send_WifiCmd+0x1ecc>)
 8002120:	2100      	movs	r1, #0
 8002122:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8002124:	4b9c      	ldr	r3, [pc, #624]	; (8002398 <Send_WifiCmd+0x1ec8>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	3301      	adds	r3, #1
 800212a:	b2da      	uxtb	r2, r3
 800212c:	4b9a      	ldr	r3, [pc, #616]	; (8002398 <Send_WifiCmd+0x1ec8>)
 800212e:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] =  ',';
 8002130:	4b99      	ldr	r3, [pc, #612]	; (8002398 <Send_WifiCmd+0x1ec8>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	461a      	mov	r2, r3
 8002136:	4b99      	ldr	r3, [pc, #612]	; (800239c <Send_WifiCmd+0x1ecc>)
 8002138:	212c      	movs	r1, #44	; 0x2c
 800213a:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 800213c:	4b96      	ldr	r3, [pc, #600]	; (8002398 <Send_WifiCmd+0x1ec8>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	3301      	adds	r3, #1
 8002142:	b2da      	uxtb	r2, r3
 8002144:	4b94      	ldr	r3, [pc, #592]	; (8002398 <Send_WifiCmd+0x1ec8>)
 8002146:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 8002148:	4b93      	ldr	r3, [pc, #588]	; (8002398 <Send_WifiCmd+0x1ec8>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	461a      	mov	r2, r3
 800214e:	4b93      	ldr	r3, [pc, #588]	; (800239c <Send_WifiCmd+0x1ecc>)
 8002150:	2100      	movs	r1, #0
 8002152:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 8002154:	4b90      	ldr	r3, [pc, #576]	; (8002398 <Send_WifiCmd+0x1ec8>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	3301      	adds	r3, #1
 800215a:	b2da      	uxtb	r2, r3
 800215c:	4b8e      	ldr	r3, [pc, #568]	; (8002398 <Send_WifiCmd+0x1ec8>)
 800215e:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 8002160:	4b8d      	ldr	r3, [pc, #564]	; (8002398 <Send_WifiCmd+0x1ec8>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	461a      	mov	r2, r3
 8002166:	4b8d      	ldr	r3, [pc, #564]	; (800239c <Send_WifiCmd+0x1ecc>)
 8002168:	2100      	movs	r1, #0
 800216a:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 800216c:	4b8a      	ldr	r3, [pc, #552]	; (8002398 <Send_WifiCmd+0x1ec8>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	3301      	adds	r3, #1
 8002172:	b2da      	uxtb	r2, r3
 8002174:	4b88      	ldr	r3, [pc, #544]	; (8002398 <Send_WifiCmd+0x1ec8>)
 8002176:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] =  ':';
 8002178:	4b87      	ldr	r3, [pc, #540]	; (8002398 <Send_WifiCmd+0x1ec8>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	461a      	mov	r2, r3
 800217e:	4b87      	ldr	r3, [pc, #540]	; (800239c <Send_WifiCmd+0x1ecc>)
 8002180:	213a      	movs	r1, #58	; 0x3a
 8002182:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 8002184:	4b84      	ldr	r3, [pc, #528]	; (8002398 <Send_WifiCmd+0x1ec8>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	3301      	adds	r3, #1
 800218a:	b2da      	uxtb	r2, r3
 800218c:	4b82      	ldr	r3, [pc, #520]	; (8002398 <Send_WifiCmd+0x1ec8>)
 800218e:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 8002190:	4b81      	ldr	r3, [pc, #516]	; (8002398 <Send_WifiCmd+0x1ec8>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	461a      	mov	r2, r3
 8002196:	4b81      	ldr	r3, [pc, #516]	; (800239c <Send_WifiCmd+0x1ecc>)
 8002198:	2100      	movs	r1, #0
 800219a:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 800219c:	4b7e      	ldr	r3, [pc, #504]	; (8002398 <Send_WifiCmd+0x1ec8>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	3301      	adds	r3, #1
 80021a2:	b2da      	uxtb	r2, r3
 80021a4:	4b7c      	ldr	r3, [pc, #496]	; (8002398 <Send_WifiCmd+0x1ec8>)
 80021a6:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 80021a8:	4b7b      	ldr	r3, [pc, #492]	; (8002398 <Send_WifiCmd+0x1ec8>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	461a      	mov	r2, r3
 80021ae:	4b7b      	ldr	r3, [pc, #492]	; (800239c <Send_WifiCmd+0x1ecc>)
 80021b0:	2100      	movs	r1, #0
 80021b2:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 80021b4:	4b78      	ldr	r3, [pc, #480]	; (8002398 <Send_WifiCmd+0x1ec8>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	3301      	adds	r3, #1
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	4b76      	ldr	r3, [pc, #472]	; (8002398 <Send_WifiCmd+0x1ec8>)
 80021be:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] =  ':';
 80021c0:	4b75      	ldr	r3, [pc, #468]	; (8002398 <Send_WifiCmd+0x1ec8>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	461a      	mov	r2, r3
 80021c6:	4b75      	ldr	r3, [pc, #468]	; (800239c <Send_WifiCmd+0x1ecc>)
 80021c8:	213a      	movs	r1, #58	; 0x3a
 80021ca:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 80021cc:	4b72      	ldr	r3, [pc, #456]	; (8002398 <Send_WifiCmd+0x1ec8>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	3301      	adds	r3, #1
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	4b70      	ldr	r3, [pc, #448]	; (8002398 <Send_WifiCmd+0x1ec8>)
 80021d6:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 80021d8:	4b6f      	ldr	r3, [pc, #444]	; (8002398 <Send_WifiCmd+0x1ec8>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	461a      	mov	r2, r3
 80021de:	4b6f      	ldr	r3, [pc, #444]	; (800239c <Send_WifiCmd+0x1ecc>)
 80021e0:	2100      	movs	r1, #0
 80021e2:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 80021e4:	4b6c      	ldr	r3, [pc, #432]	; (8002398 <Send_WifiCmd+0x1ec8>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	3301      	adds	r3, #1
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	4b6a      	ldr	r3, [pc, #424]	; (8002398 <Send_WifiCmd+0x1ec8>)
 80021ee:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 80021f0:	4b69      	ldr	r3, [pc, #420]	; (8002398 <Send_WifiCmd+0x1ec8>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	461a      	mov	r2, r3
 80021f6:	4b69      	ldr	r3, [pc, #420]	; (800239c <Send_WifiCmd+0x1ecc>)
 80021f8:	2100      	movs	r1, #0
 80021fa:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 80021fc:	4b66      	ldr	r3, [pc, #408]	; (8002398 <Send_WifiCmd+0x1ec8>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	3301      	adds	r3, #1
 8002202:	b2da      	uxtb	r2, r3
 8002204:	4b64      	ldr	r3, [pc, #400]	; (8002398 <Send_WifiCmd+0x1ec8>)
 8002206:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] =  ' ';
 8002208:	4b63      	ldr	r3, [pc, #396]	; (8002398 <Send_WifiCmd+0x1ec8>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	461a      	mov	r2, r3
 800220e:	4b63      	ldr	r3, [pc, #396]	; (800239c <Send_WifiCmd+0x1ecc>)
 8002210:	2120      	movs	r1, #32
 8002212:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 8002214:	4b60      	ldr	r3, [pc, #384]	; (8002398 <Send_WifiCmd+0x1ec8>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	3301      	adds	r3, #1
 800221a:	b2da      	uxtb	r2, r3
 800221c:	4b5e      	ldr	r3, [pc, #376]	; (8002398 <Send_WifiCmd+0x1ec8>)
 800221e:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 8002220:	4b5d      	ldr	r3, [pc, #372]	; (8002398 <Send_WifiCmd+0x1ec8>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	461a      	mov	r2, r3
 8002226:	4b5d      	ldr	r3, [pc, #372]	; (800239c <Send_WifiCmd+0x1ecc>)
 8002228:	2100      	movs	r1, #0
 800222a:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 800222c:	4b5a      	ldr	r3, [pc, #360]	; (8002398 <Send_WifiCmd+0x1ec8>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	3301      	adds	r3, #1
 8002232:	b2da      	uxtb	r2, r3
 8002234:	4b58      	ldr	r3, [pc, #352]	; (8002398 <Send_WifiCmd+0x1ec8>)
 8002236:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 8002238:	4b57      	ldr	r3, [pc, #348]	; (8002398 <Send_WifiCmd+0x1ec8>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	461a      	mov	r2, r3
 800223e:	4b57      	ldr	r3, [pc, #348]	; (800239c <Send_WifiCmd+0x1ecc>)
 8002240:	2100      	movs	r1, #0
 8002242:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8002244:	4b54      	ldr	r3, [pc, #336]	; (8002398 <Send_WifiCmd+0x1ec8>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	3301      	adds	r3, #1
 800224a:	b2da      	uxtb	r2, r3
 800224c:	4b52      	ldr	r3, [pc, #328]	; (8002398 <Send_WifiCmd+0x1ec8>)
 800224e:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] =  '/';
 8002250:	4b51      	ldr	r3, [pc, #324]	; (8002398 <Send_WifiCmd+0x1ec8>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	461a      	mov	r2, r3
 8002256:	4b51      	ldr	r3, [pc, #324]	; (800239c <Send_WifiCmd+0x1ecc>)
 8002258:	212f      	movs	r1, #47	; 0x2f
 800225a:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 800225c:	4b4e      	ldr	r3, [pc, #312]	; (8002398 <Send_WifiCmd+0x1ec8>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	3301      	adds	r3, #1
 8002262:	b2da      	uxtb	r2, r3
 8002264:	4b4c      	ldr	r3, [pc, #304]	; (8002398 <Send_WifiCmd+0x1ec8>)
 8002266:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 8002268:	4b4b      	ldr	r3, [pc, #300]	; (8002398 <Send_WifiCmd+0x1ec8>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	461a      	mov	r2, r3
 800226e:	4b4b      	ldr	r3, [pc, #300]	; (800239c <Send_WifiCmd+0x1ecc>)
 8002270:	2100      	movs	r1, #0
 8002272:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 8002274:	4b48      	ldr	r3, [pc, #288]	; (8002398 <Send_WifiCmd+0x1ec8>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	3301      	adds	r3, #1
 800227a:	b2da      	uxtb	r2, r3
 800227c:	4b46      	ldr	r3, [pc, #280]	; (8002398 <Send_WifiCmd+0x1ec8>)
 800227e:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 8002280:	4b45      	ldr	r3, [pc, #276]	; (8002398 <Send_WifiCmd+0x1ec8>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	461a      	mov	r2, r3
 8002286:	4b45      	ldr	r3, [pc, #276]	; (800239c <Send_WifiCmd+0x1ecc>)
 8002288:	2100      	movs	r1, #0
 800228a:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 800228c:	4b42      	ldr	r3, [pc, #264]	; (8002398 <Send_WifiCmd+0x1ec8>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	3301      	adds	r3, #1
 8002292:	b2da      	uxtb	r2, r3
 8002294:	4b40      	ldr	r3, [pc, #256]	; (8002398 <Send_WifiCmd+0x1ec8>)
 8002296:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] =  '/';
 8002298:	4b3f      	ldr	r3, [pc, #252]	; (8002398 <Send_WifiCmd+0x1ec8>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	461a      	mov	r2, r3
 800229e:	4b3f      	ldr	r3, [pc, #252]	; (800239c <Send_WifiCmd+0x1ecc>)
 80022a0:	212f      	movs	r1, #47	; 0x2f
 80022a2:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 80022a4:	4b3c      	ldr	r3, [pc, #240]	; (8002398 <Send_WifiCmd+0x1ec8>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	3301      	adds	r3, #1
 80022aa:	b2da      	uxtb	r2, r3
 80022ac:	4b3a      	ldr	r3, [pc, #232]	; (8002398 <Send_WifiCmd+0x1ec8>)
 80022ae:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 80022b0:	4b39      	ldr	r3, [pc, #228]	; (8002398 <Send_WifiCmd+0x1ec8>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	461a      	mov	r2, r3
 80022b6:	4b39      	ldr	r3, [pc, #228]	; (800239c <Send_WifiCmd+0x1ecc>)
 80022b8:	2100      	movs	r1, #0
 80022ba:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 80022bc:	4b36      	ldr	r3, [pc, #216]	; (8002398 <Send_WifiCmd+0x1ec8>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	3301      	adds	r3, #1
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	4b34      	ldr	r3, [pc, #208]	; (8002398 <Send_WifiCmd+0x1ec8>)
 80022c6:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 80022c8:	4b33      	ldr	r3, [pc, #204]	; (8002398 <Send_WifiCmd+0x1ec8>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	461a      	mov	r2, r3
 80022ce:	4b33      	ldr	r3, [pc, #204]	; (800239c <Send_WifiCmd+0x1ecc>)
 80022d0:	2100      	movs	r1, #0
 80022d2:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 80022d4:	4b30      	ldr	r3, [pc, #192]	; (8002398 <Send_WifiCmd+0x1ec8>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	3301      	adds	r3, #1
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	4b2e      	ldr	r3, [pc, #184]	; (8002398 <Send_WifiCmd+0x1ec8>)
 80022de:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] =  ',';
 80022e0:	4b2d      	ldr	r3, [pc, #180]	; (8002398 <Send_WifiCmd+0x1ec8>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	461a      	mov	r2, r3
 80022e6:	4b2d      	ldr	r3, [pc, #180]	; (800239c <Send_WifiCmd+0x1ecc>)
 80022e8:	212c      	movs	r1, #44	; 0x2c
 80022ea:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 80022ec:	4b2a      	ldr	r3, [pc, #168]	; (8002398 <Send_WifiCmd+0x1ec8>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	3301      	adds	r3, #1
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	4b28      	ldr	r3, [pc, #160]	; (8002398 <Send_WifiCmd+0x1ec8>)
 80022f6:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 80022f8:	4b27      	ldr	r3, [pc, #156]	; (8002398 <Send_WifiCmd+0x1ec8>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	461a      	mov	r2, r3
 80022fe:	4b27      	ldr	r3, [pc, #156]	; (800239c <Send_WifiCmd+0x1ecc>)
 8002300:	2100      	movs	r1, #0
 8002302:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 8002304:	4b24      	ldr	r3, [pc, #144]	; (8002398 <Send_WifiCmd+0x1ec8>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	3301      	adds	r3, #1
 800230a:	b2da      	uxtb	r2, r3
 800230c:	4b22      	ldr	r3, [pc, #136]	; (8002398 <Send_WifiCmd+0x1ec8>)
 800230e:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 8002310:	4b21      	ldr	r3, [pc, #132]	; (8002398 <Send_WifiCmd+0x1ec8>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	461a      	mov	r2, r3
 8002316:	4b21      	ldr	r3, [pc, #132]	; (800239c <Send_WifiCmd+0x1ecc>)
 8002318:	2100      	movs	r1, #0
 800231a:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 800231c:	4b1e      	ldr	r3, [pc, #120]	; (8002398 <Send_WifiCmd+0x1ec8>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	3301      	adds	r3, #1
 8002322:	b2da      	uxtb	r2, r3
 8002324:	4b1c      	ldr	r3, [pc, #112]	; (8002398 <Send_WifiCmd+0x1ec8>)
 8002326:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 8002328:	4b1b      	ldr	r3, [pc, #108]	; (8002398 <Send_WifiCmd+0x1ec8>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	461a      	mov	r2, r3
 800232e:	4b1b      	ldr	r3, [pc, #108]	; (800239c <Send_WifiCmd+0x1ecc>)
 8002330:	2100      	movs	r1, #0
 8002332:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8002334:	4b18      	ldr	r3, [pc, #96]	; (8002398 <Send_WifiCmd+0x1ec8>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	3301      	adds	r3, #1
 800233a:	b2da      	uxtb	r2, r3
 800233c:	4b16      	ldr	r3, [pc, #88]	; (8002398 <Send_WifiCmd+0x1ec8>)
 800233e:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] =  ',';
 8002340:	4b15      	ldr	r3, [pc, #84]	; (8002398 <Send_WifiCmd+0x1ec8>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	461a      	mov	r2, r3
 8002346:	4b15      	ldr	r3, [pc, #84]	; (800239c <Send_WifiCmd+0x1ecc>)
 8002348:	212c      	movs	r1, #44	; 0x2c
 800234a:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 800234c:	4b12      	ldr	r3, [pc, #72]	; (8002398 <Send_WifiCmd+0x1ec8>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	3301      	adds	r3, #1
 8002352:	b2da      	uxtb	r2, r3
 8002354:	4b10      	ldr	r3, [pc, #64]	; (8002398 <Send_WifiCmd+0x1ec8>)
 8002356:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 8002358:	4b0f      	ldr	r3, [pc, #60]	; (8002398 <Send_WifiCmd+0x1ec8>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	461a      	mov	r2, r3
 800235e:	4b0f      	ldr	r3, [pc, #60]	; (800239c <Send_WifiCmd+0x1ecc>)
 8002360:	2100      	movs	r1, #0
 8002362:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 8002364:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <Send_WifiCmd+0x1ec8>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	3301      	adds	r3, #1
 800236a:	b2da      	uxtb	r2, r3
 800236c:	4b0a      	ldr	r3, [pc, #40]	; (8002398 <Send_WifiCmd+0x1ec8>)
 800236e:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 8002370:	4b09      	ldr	r3, [pc, #36]	; (8002398 <Send_WifiCmd+0x1ec8>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	461a      	mov	r2, r3
 8002376:	4b09      	ldr	r3, [pc, #36]	; (800239c <Send_WifiCmd+0x1ecc>)
 8002378:	2100      	movs	r1, #0
 800237a:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 800237c:	4b06      	ldr	r3, [pc, #24]	; (8002398 <Send_WifiCmd+0x1ec8>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	3301      	adds	r3, #1
 8002382:	b2da      	uxtb	r2, r3
 8002384:	4b04      	ldr	r3, [pc, #16]	; (8002398 <Send_WifiCmd+0x1ec8>)
 8002386:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 8002388:	4b03      	ldr	r3, [pc, #12]	; (8002398 <Send_WifiCmd+0x1ec8>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	461a      	mov	r2, r3
 800238e:	4b03      	ldr	r3, [pc, #12]	; (800239c <Send_WifiCmd+0x1ecc>)
 8002390:	2100      	movs	r1, #0
 8002392:	5499      	strb	r1, [r3, r2]
 8002394:	e004      	b.n	80023a0 <Send_WifiCmd+0x1ed0>
 8002396:	bf00      	nop
 8002398:	20000259 	.word	0x20000259
 800239c:	2000018c 	.word	0x2000018c
    url_buffer++;
 80023a0:	4b37      	ldr	r3, [pc, #220]	; (8002480 <Send_WifiCmd+0x1fb0>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	3301      	adds	r3, #1
 80023a6:	b2da      	uxtb	r2, r3
 80023a8:	4b35      	ldr	r3, [pc, #212]	; (8002480 <Send_WifiCmd+0x1fb0>)
 80023aa:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] =  ',';
 80023ac:	4b34      	ldr	r3, [pc, #208]	; (8002480 <Send_WifiCmd+0x1fb0>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	461a      	mov	r2, r3
 80023b2:	4b34      	ldr	r3, [pc, #208]	; (8002484 <Send_WifiCmd+0x1fb4>)
 80023b4:	212c      	movs	r1, #44	; 0x2c
 80023b6:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 80023b8:	4b31      	ldr	r3, [pc, #196]	; (8002480 <Send_WifiCmd+0x1fb0>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	3301      	adds	r3, #1
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	4b2f      	ldr	r3, [pc, #188]	; (8002480 <Send_WifiCmd+0x1fb0>)
 80023c2:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 1;
 80023c4:	4b2e      	ldr	r3, [pc, #184]	; (8002480 <Send_WifiCmd+0x1fb0>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	461a      	mov	r2, r3
 80023ca:	4b2e      	ldr	r3, [pc, #184]	; (8002484 <Send_WifiCmd+0x1fb4>)
 80023cc:	2101      	movs	r1, #1
 80023ce:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 80023d0:	4b2b      	ldr	r3, [pc, #172]	; (8002480 <Send_WifiCmd+0x1fb0>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	3301      	adds	r3, #1
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	4b29      	ldr	r3, [pc, #164]	; (8002480 <Send_WifiCmd+0x1fb0>)
 80023da:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] =2;
 80023dc:	4b28      	ldr	r3, [pc, #160]	; (8002480 <Send_WifiCmd+0x1fb0>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	461a      	mov	r2, r3
 80023e2:	4b28      	ldr	r3, [pc, #160]	; (8002484 <Send_WifiCmd+0x1fb4>)
 80023e4:	2102      	movs	r1, #2
 80023e6:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 80023e8:	4b25      	ldr	r3, [pc, #148]	; (8002480 <Send_WifiCmd+0x1fb0>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	3301      	adds	r3, #1
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	4b23      	ldr	r3, [pc, #140]	; (8002480 <Send_WifiCmd+0x1fb0>)
 80023f2:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 80023f4:	4b22      	ldr	r3, [pc, #136]	; (8002480 <Send_WifiCmd+0x1fb0>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	461a      	mov	r2, r3
 80023fa:	4b22      	ldr	r3, [pc, #136]	; (8002484 <Send_WifiCmd+0x1fb4>)
 80023fc:	2100      	movs	r1, #0
 80023fe:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8002400:	4b1f      	ldr	r3, [pc, #124]	; (8002480 <Send_WifiCmd+0x1fb0>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	3301      	adds	r3, #1
 8002406:	b2da      	uxtb	r2, r3
 8002408:	4b1d      	ldr	r3, [pc, #116]	; (8002480 <Send_WifiCmd+0x1fb0>)
 800240a:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] =  '""';
 800240c:	4b1c      	ldr	r3, [pc, #112]	; (8002480 <Send_WifiCmd+0x1fb0>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	461a      	mov	r2, r3
 8002412:	4b1c      	ldr	r3, [pc, #112]	; (8002484 <Send_WifiCmd+0x1fb4>)
 8002414:	2122      	movs	r1, #34	; 0x22
 8002416:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 8002418:	4b19      	ldr	r3, [pc, #100]	; (8002480 <Send_WifiCmd+0x1fb0>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	3301      	adds	r3, #1
 800241e:	b2da      	uxtb	r2, r3
 8002420:	4b17      	ldr	r3, [pc, #92]	; (8002480 <Send_WifiCmd+0x1fb0>)
 8002422:	701a      	strb	r2, [r3, #0]
	NoOfBatch_to_Send=NoOfBatch_to_Send-1;
 8002424:	4b18      	ldr	r3, [pc, #96]	; (8002488 <Send_WifiCmd+0x1fb8>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	3b01      	subs	r3, #1
 800242a:	b2da      	uxtb	r2, r3
 800242c:	4b16      	ldr	r3, [pc, #88]	; (8002488 <Send_WifiCmd+0x1fb8>)
 800242e:	701a      	strb	r2, [r3, #0]

	if(NoOfBatch_to_Send!=0){OnlineData_buffer[url_buffer] =  ',';
 8002430:	4b15      	ldr	r3, [pc, #84]	; (8002488 <Send_WifiCmd+0x1fb8>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00b      	beq.n	8002450 <Send_WifiCmd+0x1f80>
 8002438:	4b11      	ldr	r3, [pc, #68]	; (8002480 <Send_WifiCmd+0x1fb0>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	461a      	mov	r2, r3
 800243e:	4b11      	ldr	r3, [pc, #68]	; (8002484 <Send_WifiCmd+0x1fb4>)
 8002440:	212c      	movs	r1, #44	; 0x2c
 8002442:	5499      	strb	r1, [r3, r2]
	url_buffer++; }
 8002444:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <Send_WifiCmd+0x1fb0>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	3301      	adds	r3, #1
 800244a:	b2da      	uxtb	r2, r3
 800244c:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <Send_WifiCmd+0x1fb0>)
 800244e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,OnlineData_buffer,url_buffer);
 8002450:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <Send_WifiCmd+0x1fb0>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	b29b      	uxth	r3, r3
 8002456:	461a      	mov	r2, r3
 8002458:	490a      	ldr	r1, [pc, #40]	; (8002484 <Send_WifiCmd+0x1fb4>)
 800245a:	480c      	ldr	r0, [pc, #48]	; (800248c <Send_WifiCmd+0x1fbc>)
 800245c:	f00b f904 	bl	800d668 <HAL_UART_Transmit_IT>
	wifi_command=104;
 8002460:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <Send_WifiCmd+0x1fc0>)
 8002462:	2268      	movs	r2, #104	; 0x68
 8002464:	701a      	strb	r2, [r3, #0]
	if(NoOfBatch_to_Send==0){wifi_command=104;}
 8002466:	4b08      	ldr	r3, [pc, #32]	; (8002488 <Send_WifiCmd+0x1fb8>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d103      	bne.n	8002476 <Send_WifiCmd+0x1fa6>
 800246e:	4b08      	ldr	r3, [pc, #32]	; (8002490 <Send_WifiCmd+0x1fc0>)
 8002470:	2268      	movs	r2, #104	; 0x68
 8002472:	701a      	strb	r2, [r3, #0]
	else{wifi_command=101;}
	break;
 8002474:	e3a1      	b.n	8002bba <Send_WifiCmd+0x26ea>
	else{wifi_command=101;}
 8002476:	4b06      	ldr	r3, [pc, #24]	; (8002490 <Send_WifiCmd+0x1fc0>)
 8002478:	2265      	movs	r2, #101	; 0x65
 800247a:	701a      	strb	r2, [r3, #0]
	break;
 800247c:	e39d      	b.n	8002bba <Send_WifiCmd+0x26ea>
 800247e:	bf00      	nop
 8002480:	20000259 	.word	0x20000259
 8002484:	2000018c 	.word	0x2000018c
 8002488:	2000025c 	.word	0x2000025c
 800248c:	200003d4 	.word	0x200003d4
 8002490:	2000008d 	.word	0x2000008d
	case 106:
	url_buffer=0;
 8002494:	4b9f      	ldr	r3, [pc, #636]	; (8002714 <Send_WifiCmd+0x2244>)
 8002496:	2200      	movs	r2, #0
 8002498:	701a      	strb	r2, [r3, #0]
	Framecheck =  Framecheck+1;
 800249a:	4b9f      	ldr	r3, [pc, #636]	; (8002718 <Send_WifiCmd+0x2248>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	3301      	adds	r3, #1
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4b9d      	ldr	r3, [pc, #628]	; (8002718 <Send_WifiCmd+0x2248>)
 80024a4:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] =  '"';
 80024a6:	4b9b      	ldr	r3, [pc, #620]	; (8002714 <Send_WifiCmd+0x2244>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	461a      	mov	r2, r3
 80024ac:	4b9b      	ldr	r3, [pc, #620]	; (800271c <Send_WifiCmd+0x224c>)
 80024ae:	2122      	movs	r1, #34	; 0x22
 80024b0:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 80024b2:	4b98      	ldr	r3, [pc, #608]	; (8002714 <Send_WifiCmd+0x2244>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	3301      	adds	r3, #1
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	4b96      	ldr	r3, [pc, #600]	; (8002714 <Send_WifiCmd+0x2244>)
 80024bc:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = (unsigned char)((0)+0x30);
 80024be:	4b95      	ldr	r3, [pc, #596]	; (8002714 <Send_WifiCmd+0x2244>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	461a      	mov	r2, r3
 80024c4:	4b95      	ldr	r3, [pc, #596]	; (800271c <Send_WifiCmd+0x224c>)
 80024c6:	2130      	movs	r1, #48	; 0x30
 80024c8:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 80024ca:	4b92      	ldr	r3, [pc, #584]	; (8002714 <Send_WifiCmd+0x2244>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	3301      	adds	r3, #1
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	4b90      	ldr	r3, [pc, #576]	; (8002714 <Send_WifiCmd+0x2244>)
 80024d4:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] =  ',';
 80024d6:	4b8f      	ldr	r3, [pc, #572]	; (8002714 <Send_WifiCmd+0x2244>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	461a      	mov	r2, r3
 80024dc:	4b8f      	ldr	r3, [pc, #572]	; (800271c <Send_WifiCmd+0x224c>)
 80024de:	212c      	movs	r1, #44	; 0x2c
 80024e0:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 80024e2:	4b8c      	ldr	r3, [pc, #560]	; (8002714 <Send_WifiCmd+0x2244>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	3301      	adds	r3, #1
 80024e8:	b2da      	uxtb	r2, r3
 80024ea:	4b8a      	ldr	r3, [pc, #552]	; (8002714 <Send_WifiCmd+0x2244>)
 80024ec:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 80024ee:	4b89      	ldr	r3, [pc, #548]	; (8002714 <Send_WifiCmd+0x2244>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	461a      	mov	r2, r3
 80024f4:	4b89      	ldr	r3, [pc, #548]	; (800271c <Send_WifiCmd+0x224c>)
 80024f6:	2100      	movs	r1, #0
 80024f8:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 80024fa:	4b86      	ldr	r3, [pc, #536]	; (8002714 <Send_WifiCmd+0x2244>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	3301      	adds	r3, #1
 8002500:	b2da      	uxtb	r2, r3
 8002502:	4b84      	ldr	r3, [pc, #528]	; (8002714 <Send_WifiCmd+0x2244>)
 8002504:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 8002506:	4b83      	ldr	r3, [pc, #524]	; (8002714 <Send_WifiCmd+0x2244>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	461a      	mov	r2, r3
 800250c:	4b83      	ldr	r3, [pc, #524]	; (800271c <Send_WifiCmd+0x224c>)
 800250e:	2100      	movs	r1, #0
 8002510:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 8002512:	4b80      	ldr	r3, [pc, #512]	; (8002714 <Send_WifiCmd+0x2244>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	3301      	adds	r3, #1
 8002518:	b2da      	uxtb	r2, r3
 800251a:	4b7e      	ldr	r3, [pc, #504]	; (8002714 <Send_WifiCmd+0x2244>)
 800251c:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 800251e:	4b7d      	ldr	r3, [pc, #500]	; (8002714 <Send_WifiCmd+0x2244>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	461a      	mov	r2, r3
 8002524:	4b7d      	ldr	r3, [pc, #500]	; (800271c <Send_WifiCmd+0x224c>)
 8002526:	2100      	movs	r1, #0
 8002528:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 800252a:	4b7a      	ldr	r3, [pc, #488]	; (8002714 <Send_WifiCmd+0x2244>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	3301      	adds	r3, #1
 8002530:	b2da      	uxtb	r2, r3
 8002532:	4b78      	ldr	r3, [pc, #480]	; (8002714 <Send_WifiCmd+0x2244>)
 8002534:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 8002536:	4b77      	ldr	r3, [pc, #476]	; (8002714 <Send_WifiCmd+0x2244>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	461a      	mov	r2, r3
 800253c:	4b77      	ldr	r3, [pc, #476]	; (800271c <Send_WifiCmd+0x224c>)
 800253e:	2100      	movs	r1, #0
 8002540:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8002542:	4b74      	ldr	r3, [pc, #464]	; (8002714 <Send_WifiCmd+0x2244>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	3301      	adds	r3, #1
 8002548:	b2da      	uxtb	r2, r3
 800254a:	4b72      	ldr	r3, [pc, #456]	; (8002714 <Send_WifiCmd+0x2244>)
 800254c:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] =  ',';
 800254e:	4b71      	ldr	r3, [pc, #452]	; (8002714 <Send_WifiCmd+0x2244>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	461a      	mov	r2, r3
 8002554:	4b71      	ldr	r3, [pc, #452]	; (800271c <Send_WifiCmd+0x224c>)
 8002556:	212c      	movs	r1, #44	; 0x2c
 8002558:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 800255a:	4b6e      	ldr	r3, [pc, #440]	; (8002714 <Send_WifiCmd+0x2244>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	3301      	adds	r3, #1
 8002560:	b2da      	uxtb	r2, r3
 8002562:	4b6c      	ldr	r3, [pc, #432]	; (8002714 <Send_WifiCmd+0x2244>)
 8002564:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 8002566:	4b6b      	ldr	r3, [pc, #428]	; (8002714 <Send_WifiCmd+0x2244>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	461a      	mov	r2, r3
 800256c:	4b6b      	ldr	r3, [pc, #428]	; (800271c <Send_WifiCmd+0x224c>)
 800256e:	2100      	movs	r1, #0
 8002570:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 8002572:	4b68      	ldr	r3, [pc, #416]	; (8002714 <Send_WifiCmd+0x2244>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	3301      	adds	r3, #1
 8002578:	b2da      	uxtb	r2, r3
 800257a:	4b66      	ldr	r3, [pc, #408]	; (8002714 <Send_WifiCmd+0x2244>)
 800257c:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 800257e:	4b65      	ldr	r3, [pc, #404]	; (8002714 <Send_WifiCmd+0x2244>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	461a      	mov	r2, r3
 8002584:	4b65      	ldr	r3, [pc, #404]	; (800271c <Send_WifiCmd+0x224c>)
 8002586:	2100      	movs	r1, #0
 8002588:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 800258a:	4b62      	ldr	r3, [pc, #392]	; (8002714 <Send_WifiCmd+0x2244>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	3301      	adds	r3, #1
 8002590:	b2da      	uxtb	r2, r3
 8002592:	4b60      	ldr	r3, [pc, #384]	; (8002714 <Send_WifiCmd+0x2244>)
 8002594:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 8002596:	4b5f      	ldr	r3, [pc, #380]	; (8002714 <Send_WifiCmd+0x2244>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	461a      	mov	r2, r3
 800259c:	4b5f      	ldr	r3, [pc, #380]	; (800271c <Send_WifiCmd+0x224c>)
 800259e:	2100      	movs	r1, #0
 80025a0:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 80025a2:	4b5c      	ldr	r3, [pc, #368]	; (8002714 <Send_WifiCmd+0x2244>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	3301      	adds	r3, #1
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	4b5a      	ldr	r3, [pc, #360]	; (8002714 <Send_WifiCmd+0x2244>)
 80025ac:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 80025ae:	4b59      	ldr	r3, [pc, #356]	; (8002714 <Send_WifiCmd+0x2244>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	461a      	mov	r2, r3
 80025b4:	4b59      	ldr	r3, [pc, #356]	; (800271c <Send_WifiCmd+0x224c>)
 80025b6:	2100      	movs	r1, #0
 80025b8:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 80025ba:	4b56      	ldr	r3, [pc, #344]	; (8002714 <Send_WifiCmd+0x2244>)
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	3301      	adds	r3, #1
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	4b54      	ldr	r3, [pc, #336]	; (8002714 <Send_WifiCmd+0x2244>)
 80025c4:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] =  ',';
 80025c6:	4b53      	ldr	r3, [pc, #332]	; (8002714 <Send_WifiCmd+0x2244>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	461a      	mov	r2, r3
 80025cc:	4b53      	ldr	r3, [pc, #332]	; (800271c <Send_WifiCmd+0x224c>)
 80025ce:	212c      	movs	r1, #44	; 0x2c
 80025d0:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 80025d2:	4b50      	ldr	r3, [pc, #320]	; (8002714 <Send_WifiCmd+0x2244>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	3301      	adds	r3, #1
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	4b4e      	ldr	r3, [pc, #312]	; (8002714 <Send_WifiCmd+0x2244>)
 80025dc:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 80025de:	4b4d      	ldr	r3, [pc, #308]	; (8002714 <Send_WifiCmd+0x2244>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	461a      	mov	r2, r3
 80025e4:	4b4d      	ldr	r3, [pc, #308]	; (800271c <Send_WifiCmd+0x224c>)
 80025e6:	2100      	movs	r1, #0
 80025e8:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 80025ea:	4b4a      	ldr	r3, [pc, #296]	; (8002714 <Send_WifiCmd+0x2244>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	3301      	adds	r3, #1
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	4b48      	ldr	r3, [pc, #288]	; (8002714 <Send_WifiCmd+0x2244>)
 80025f4:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 80025f6:	4b47      	ldr	r3, [pc, #284]	; (8002714 <Send_WifiCmd+0x2244>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	461a      	mov	r2, r3
 80025fc:	4b47      	ldr	r3, [pc, #284]	; (800271c <Send_WifiCmd+0x224c>)
 80025fe:	2100      	movs	r1, #0
 8002600:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 8002602:	4b44      	ldr	r3, [pc, #272]	; (8002714 <Send_WifiCmd+0x2244>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	3301      	adds	r3, #1
 8002608:	b2da      	uxtb	r2, r3
 800260a:	4b42      	ldr	r3, [pc, #264]	; (8002714 <Send_WifiCmd+0x2244>)
 800260c:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] =0;
 800260e:	4b41      	ldr	r3, [pc, #260]	; (8002714 <Send_WifiCmd+0x2244>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	461a      	mov	r2, r3
 8002614:	4b41      	ldr	r3, [pc, #260]	; (800271c <Send_WifiCmd+0x224c>)
 8002616:	2100      	movs	r1, #0
 8002618:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 800261a:	4b3e      	ldr	r3, [pc, #248]	; (8002714 <Send_WifiCmd+0x2244>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	3301      	adds	r3, #1
 8002620:	b2da      	uxtb	r2, r3
 8002622:	4b3c      	ldr	r3, [pc, #240]	; (8002714 <Send_WifiCmd+0x2244>)
 8002624:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 8002626:	4b3b      	ldr	r3, [pc, #236]	; (8002714 <Send_WifiCmd+0x2244>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	461a      	mov	r2, r3
 800262c:	4b3b      	ldr	r3, [pc, #236]	; (800271c <Send_WifiCmd+0x224c>)
 800262e:	2100      	movs	r1, #0
 8002630:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8002632:	4b38      	ldr	r3, [pc, #224]	; (8002714 <Send_WifiCmd+0x2244>)
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	3301      	adds	r3, #1
 8002638:	b2da      	uxtb	r2, r3
 800263a:	4b36      	ldr	r3, [pc, #216]	; (8002714 <Send_WifiCmd+0x2244>)
 800263c:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] =  ',';
 800263e:	4b35      	ldr	r3, [pc, #212]	; (8002714 <Send_WifiCmd+0x2244>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	461a      	mov	r2, r3
 8002644:	4b35      	ldr	r3, [pc, #212]	; (800271c <Send_WifiCmd+0x224c>)
 8002646:	212c      	movs	r1, #44	; 0x2c
 8002648:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 800264a:	4b32      	ldr	r3, [pc, #200]	; (8002714 <Send_WifiCmd+0x2244>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	3301      	adds	r3, #1
 8002650:	b2da      	uxtb	r2, r3
 8002652:	4b30      	ldr	r3, [pc, #192]	; (8002714 <Send_WifiCmd+0x2244>)
 8002654:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 8002656:	4b2f      	ldr	r3, [pc, #188]	; (8002714 <Send_WifiCmd+0x2244>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	461a      	mov	r2, r3
 800265c:	4b2f      	ldr	r3, [pc, #188]	; (800271c <Send_WifiCmd+0x224c>)
 800265e:	2100      	movs	r1, #0
 8002660:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 8002662:	4b2c      	ldr	r3, [pc, #176]	; (8002714 <Send_WifiCmd+0x2244>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	3301      	adds	r3, #1
 8002668:	b2da      	uxtb	r2, r3
 800266a:	4b2a      	ldr	r3, [pc, #168]	; (8002714 <Send_WifiCmd+0x2244>)
 800266c:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] =0;
 800266e:	4b29      	ldr	r3, [pc, #164]	; (8002714 <Send_WifiCmd+0x2244>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	461a      	mov	r2, r3
 8002674:	4b29      	ldr	r3, [pc, #164]	; (800271c <Send_WifiCmd+0x224c>)
 8002676:	2100      	movs	r1, #0
 8002678:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 800267a:	4b26      	ldr	r3, [pc, #152]	; (8002714 <Send_WifiCmd+0x2244>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	3301      	adds	r3, #1
 8002680:	b2da      	uxtb	r2, r3
 8002682:	4b24      	ldr	r3, [pc, #144]	; (8002714 <Send_WifiCmd+0x2244>)
 8002684:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 8002686:	4b23      	ldr	r3, [pc, #140]	; (8002714 <Send_WifiCmd+0x2244>)
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	461a      	mov	r2, r3
 800268c:	4b23      	ldr	r3, [pc, #140]	; (800271c <Send_WifiCmd+0x224c>)
 800268e:	2100      	movs	r1, #0
 8002690:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 8002692:	4b20      	ldr	r3, [pc, #128]	; (8002714 <Send_WifiCmd+0x2244>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	3301      	adds	r3, #1
 8002698:	b2da      	uxtb	r2, r3
 800269a:	4b1e      	ldr	r3, [pc, #120]	; (8002714 <Send_WifiCmd+0x2244>)
 800269c:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] =0;
 800269e:	4b1d      	ldr	r3, [pc, #116]	; (8002714 <Send_WifiCmd+0x2244>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	461a      	mov	r2, r3
 80026a4:	4b1d      	ldr	r3, [pc, #116]	; (800271c <Send_WifiCmd+0x224c>)
 80026a6:	2100      	movs	r1, #0
 80026a8:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 80026aa:	4b1a      	ldr	r3, [pc, #104]	; (8002714 <Send_WifiCmd+0x2244>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	3301      	adds	r3, #1
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	4b18      	ldr	r3, [pc, #96]	; (8002714 <Send_WifiCmd+0x2244>)
 80026b4:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] =  ',';
 80026b6:	4b17      	ldr	r3, [pc, #92]	; (8002714 <Send_WifiCmd+0x2244>)
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	461a      	mov	r2, r3
 80026bc:	4b17      	ldr	r3, [pc, #92]	; (800271c <Send_WifiCmd+0x224c>)
 80026be:	212c      	movs	r1, #44	; 0x2c
 80026c0:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 80026c2:	4b14      	ldr	r3, [pc, #80]	; (8002714 <Send_WifiCmd+0x2244>)
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	3301      	adds	r3, #1
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	4b12      	ldr	r3, [pc, #72]	; (8002714 <Send_WifiCmd+0x2244>)
 80026cc:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] =0;
 80026ce:	4b11      	ldr	r3, [pc, #68]	; (8002714 <Send_WifiCmd+0x2244>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	461a      	mov	r2, r3
 80026d4:	4b11      	ldr	r3, [pc, #68]	; (800271c <Send_WifiCmd+0x224c>)
 80026d6:	2100      	movs	r1, #0
 80026d8:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 80026da:	4b0e      	ldr	r3, [pc, #56]	; (8002714 <Send_WifiCmd+0x2244>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	3301      	adds	r3, #1
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	4b0c      	ldr	r3, [pc, #48]	; (8002714 <Send_WifiCmd+0x2244>)
 80026e4:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 80026e6:	4b0b      	ldr	r3, [pc, #44]	; (8002714 <Send_WifiCmd+0x2244>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	461a      	mov	r2, r3
 80026ec:	4b0b      	ldr	r3, [pc, #44]	; (800271c <Send_WifiCmd+0x224c>)
 80026ee:	2100      	movs	r1, #0
 80026f0:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 80026f2:	4b08      	ldr	r3, [pc, #32]	; (8002714 <Send_WifiCmd+0x2244>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	3301      	adds	r3, #1
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	4b06      	ldr	r3, [pc, #24]	; (8002714 <Send_WifiCmd+0x2244>)
 80026fc:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 80026fe:	4b05      	ldr	r3, [pc, #20]	; (8002714 <Send_WifiCmd+0x2244>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	4b05      	ldr	r3, [pc, #20]	; (800271c <Send_WifiCmd+0x224c>)
 8002706:	2100      	movs	r1, #0
 8002708:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 800270a:	4b02      	ldr	r3, [pc, #8]	; (8002714 <Send_WifiCmd+0x2244>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	3301      	adds	r3, #1
 8002710:	b2da      	uxtb	r2, r3
 8002712:	e005      	b.n	8002720 <Send_WifiCmd+0x2250>
 8002714:	20000259 	.word	0x20000259
 8002718:	2000025d 	.word	0x2000025d
 800271c:	2000018c 	.word	0x2000018c
 8002720:	4ba0      	ldr	r3, [pc, #640]	; (80029a4 <Send_WifiCmd+0x24d4>)
 8002722:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 8002724:	4b9f      	ldr	r3, [pc, #636]	; (80029a4 <Send_WifiCmd+0x24d4>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	461a      	mov	r2, r3
 800272a:	4b9f      	ldr	r3, [pc, #636]	; (80029a8 <Send_WifiCmd+0x24d8>)
 800272c:	2100      	movs	r1, #0
 800272e:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8002730:	4b9c      	ldr	r3, [pc, #624]	; (80029a4 <Send_WifiCmd+0x24d4>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	3301      	adds	r3, #1
 8002736:	b2da      	uxtb	r2, r3
 8002738:	4b9a      	ldr	r3, [pc, #616]	; (80029a4 <Send_WifiCmd+0x24d4>)
 800273a:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] =  ',';
 800273c:	4b99      	ldr	r3, [pc, #612]	; (80029a4 <Send_WifiCmd+0x24d4>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	461a      	mov	r2, r3
 8002742:	4b99      	ldr	r3, [pc, #612]	; (80029a8 <Send_WifiCmd+0x24d8>)
 8002744:	212c      	movs	r1, #44	; 0x2c
 8002746:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 8002748:	4b96      	ldr	r3, [pc, #600]	; (80029a4 <Send_WifiCmd+0x24d4>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	3301      	adds	r3, #1
 800274e:	b2da      	uxtb	r2, r3
 8002750:	4b94      	ldr	r3, [pc, #592]	; (80029a4 <Send_WifiCmd+0x24d4>)
 8002752:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 8002754:	4b93      	ldr	r3, [pc, #588]	; (80029a4 <Send_WifiCmd+0x24d4>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	461a      	mov	r2, r3
 800275a:	4b93      	ldr	r3, [pc, #588]	; (80029a8 <Send_WifiCmd+0x24d8>)
 800275c:	2100      	movs	r1, #0
 800275e:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 8002760:	4b90      	ldr	r3, [pc, #576]	; (80029a4 <Send_WifiCmd+0x24d4>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	3301      	adds	r3, #1
 8002766:	b2da      	uxtb	r2, r3
 8002768:	4b8e      	ldr	r3, [pc, #568]	; (80029a4 <Send_WifiCmd+0x24d4>)
 800276a:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 800276c:	4b8d      	ldr	r3, [pc, #564]	; (80029a4 <Send_WifiCmd+0x24d4>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	461a      	mov	r2, r3
 8002772:	4b8d      	ldr	r3, [pc, #564]	; (80029a8 <Send_WifiCmd+0x24d8>)
 8002774:	2100      	movs	r1, #0
 8002776:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8002778:	4b8a      	ldr	r3, [pc, #552]	; (80029a4 <Send_WifiCmd+0x24d4>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	3301      	adds	r3, #1
 800277e:	b2da      	uxtb	r2, r3
 8002780:	4b88      	ldr	r3, [pc, #544]	; (80029a4 <Send_WifiCmd+0x24d4>)
 8002782:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] =  ':';
 8002784:	4b87      	ldr	r3, [pc, #540]	; (80029a4 <Send_WifiCmd+0x24d4>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	461a      	mov	r2, r3
 800278a:	4b87      	ldr	r3, [pc, #540]	; (80029a8 <Send_WifiCmd+0x24d8>)
 800278c:	213a      	movs	r1, #58	; 0x3a
 800278e:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 8002790:	4b84      	ldr	r3, [pc, #528]	; (80029a4 <Send_WifiCmd+0x24d4>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	3301      	adds	r3, #1
 8002796:	b2da      	uxtb	r2, r3
 8002798:	4b82      	ldr	r3, [pc, #520]	; (80029a4 <Send_WifiCmd+0x24d4>)
 800279a:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 800279c:	4b81      	ldr	r3, [pc, #516]	; (80029a4 <Send_WifiCmd+0x24d4>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	461a      	mov	r2, r3
 80027a2:	4b81      	ldr	r3, [pc, #516]	; (80029a8 <Send_WifiCmd+0x24d8>)
 80027a4:	2100      	movs	r1, #0
 80027a6:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 80027a8:	4b7e      	ldr	r3, [pc, #504]	; (80029a4 <Send_WifiCmd+0x24d4>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	3301      	adds	r3, #1
 80027ae:	b2da      	uxtb	r2, r3
 80027b0:	4b7c      	ldr	r3, [pc, #496]	; (80029a4 <Send_WifiCmd+0x24d4>)
 80027b2:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 80027b4:	4b7b      	ldr	r3, [pc, #492]	; (80029a4 <Send_WifiCmd+0x24d4>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	461a      	mov	r2, r3
 80027ba:	4b7b      	ldr	r3, [pc, #492]	; (80029a8 <Send_WifiCmd+0x24d8>)
 80027bc:	2100      	movs	r1, #0
 80027be:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 80027c0:	4b78      	ldr	r3, [pc, #480]	; (80029a4 <Send_WifiCmd+0x24d4>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	3301      	adds	r3, #1
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	4b76      	ldr	r3, [pc, #472]	; (80029a4 <Send_WifiCmd+0x24d4>)
 80027ca:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] =  ':';
 80027cc:	4b75      	ldr	r3, [pc, #468]	; (80029a4 <Send_WifiCmd+0x24d4>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	461a      	mov	r2, r3
 80027d2:	4b75      	ldr	r3, [pc, #468]	; (80029a8 <Send_WifiCmd+0x24d8>)
 80027d4:	213a      	movs	r1, #58	; 0x3a
 80027d6:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 80027d8:	4b72      	ldr	r3, [pc, #456]	; (80029a4 <Send_WifiCmd+0x24d4>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	3301      	adds	r3, #1
 80027de:	b2da      	uxtb	r2, r3
 80027e0:	4b70      	ldr	r3, [pc, #448]	; (80029a4 <Send_WifiCmd+0x24d4>)
 80027e2:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 80027e4:	4b6f      	ldr	r3, [pc, #444]	; (80029a4 <Send_WifiCmd+0x24d4>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	461a      	mov	r2, r3
 80027ea:	4b6f      	ldr	r3, [pc, #444]	; (80029a8 <Send_WifiCmd+0x24d8>)
 80027ec:	2100      	movs	r1, #0
 80027ee:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 80027f0:	4b6c      	ldr	r3, [pc, #432]	; (80029a4 <Send_WifiCmd+0x24d4>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	3301      	adds	r3, #1
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	4b6a      	ldr	r3, [pc, #424]	; (80029a4 <Send_WifiCmd+0x24d4>)
 80027fa:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 80027fc:	4b69      	ldr	r3, [pc, #420]	; (80029a4 <Send_WifiCmd+0x24d4>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	461a      	mov	r2, r3
 8002802:	4b69      	ldr	r3, [pc, #420]	; (80029a8 <Send_WifiCmd+0x24d8>)
 8002804:	2100      	movs	r1, #0
 8002806:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8002808:	4b66      	ldr	r3, [pc, #408]	; (80029a4 <Send_WifiCmd+0x24d4>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	3301      	adds	r3, #1
 800280e:	b2da      	uxtb	r2, r3
 8002810:	4b64      	ldr	r3, [pc, #400]	; (80029a4 <Send_WifiCmd+0x24d4>)
 8002812:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] =  ' ';
 8002814:	4b63      	ldr	r3, [pc, #396]	; (80029a4 <Send_WifiCmd+0x24d4>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	461a      	mov	r2, r3
 800281a:	4b63      	ldr	r3, [pc, #396]	; (80029a8 <Send_WifiCmd+0x24d8>)
 800281c:	2120      	movs	r1, #32
 800281e:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 8002820:	4b60      	ldr	r3, [pc, #384]	; (80029a4 <Send_WifiCmd+0x24d4>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	3301      	adds	r3, #1
 8002826:	b2da      	uxtb	r2, r3
 8002828:	4b5e      	ldr	r3, [pc, #376]	; (80029a4 <Send_WifiCmd+0x24d4>)
 800282a:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 800282c:	4b5d      	ldr	r3, [pc, #372]	; (80029a4 <Send_WifiCmd+0x24d4>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	461a      	mov	r2, r3
 8002832:	4b5d      	ldr	r3, [pc, #372]	; (80029a8 <Send_WifiCmd+0x24d8>)
 8002834:	2100      	movs	r1, #0
 8002836:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 8002838:	4b5a      	ldr	r3, [pc, #360]	; (80029a4 <Send_WifiCmd+0x24d4>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	3301      	adds	r3, #1
 800283e:	b2da      	uxtb	r2, r3
 8002840:	4b58      	ldr	r3, [pc, #352]	; (80029a4 <Send_WifiCmd+0x24d4>)
 8002842:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 8002844:	4b57      	ldr	r3, [pc, #348]	; (80029a4 <Send_WifiCmd+0x24d4>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	461a      	mov	r2, r3
 800284a:	4b57      	ldr	r3, [pc, #348]	; (80029a8 <Send_WifiCmd+0x24d8>)
 800284c:	2100      	movs	r1, #0
 800284e:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8002850:	4b54      	ldr	r3, [pc, #336]	; (80029a4 <Send_WifiCmd+0x24d4>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	3301      	adds	r3, #1
 8002856:	b2da      	uxtb	r2, r3
 8002858:	4b52      	ldr	r3, [pc, #328]	; (80029a4 <Send_WifiCmd+0x24d4>)
 800285a:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] =  '/';
 800285c:	4b51      	ldr	r3, [pc, #324]	; (80029a4 <Send_WifiCmd+0x24d4>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	461a      	mov	r2, r3
 8002862:	4b51      	ldr	r3, [pc, #324]	; (80029a8 <Send_WifiCmd+0x24d8>)
 8002864:	212f      	movs	r1, #47	; 0x2f
 8002866:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 8002868:	4b4e      	ldr	r3, [pc, #312]	; (80029a4 <Send_WifiCmd+0x24d4>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	3301      	adds	r3, #1
 800286e:	b2da      	uxtb	r2, r3
 8002870:	4b4c      	ldr	r3, [pc, #304]	; (80029a4 <Send_WifiCmd+0x24d4>)
 8002872:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 8002874:	4b4b      	ldr	r3, [pc, #300]	; (80029a4 <Send_WifiCmd+0x24d4>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	461a      	mov	r2, r3
 800287a:	4b4b      	ldr	r3, [pc, #300]	; (80029a8 <Send_WifiCmd+0x24d8>)
 800287c:	2100      	movs	r1, #0
 800287e:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 8002880:	4b48      	ldr	r3, [pc, #288]	; (80029a4 <Send_WifiCmd+0x24d4>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	3301      	adds	r3, #1
 8002886:	b2da      	uxtb	r2, r3
 8002888:	4b46      	ldr	r3, [pc, #280]	; (80029a4 <Send_WifiCmd+0x24d4>)
 800288a:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 800288c:	4b45      	ldr	r3, [pc, #276]	; (80029a4 <Send_WifiCmd+0x24d4>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	461a      	mov	r2, r3
 8002892:	4b45      	ldr	r3, [pc, #276]	; (80029a8 <Send_WifiCmd+0x24d8>)
 8002894:	2100      	movs	r1, #0
 8002896:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8002898:	4b42      	ldr	r3, [pc, #264]	; (80029a4 <Send_WifiCmd+0x24d4>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	3301      	adds	r3, #1
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	4b40      	ldr	r3, [pc, #256]	; (80029a4 <Send_WifiCmd+0x24d4>)
 80028a2:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] =  '/';
 80028a4:	4b3f      	ldr	r3, [pc, #252]	; (80029a4 <Send_WifiCmd+0x24d4>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	461a      	mov	r2, r3
 80028aa:	4b3f      	ldr	r3, [pc, #252]	; (80029a8 <Send_WifiCmd+0x24d8>)
 80028ac:	212f      	movs	r1, #47	; 0x2f
 80028ae:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 80028b0:	4b3c      	ldr	r3, [pc, #240]	; (80029a4 <Send_WifiCmd+0x24d4>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	3301      	adds	r3, #1
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	4b3a      	ldr	r3, [pc, #232]	; (80029a4 <Send_WifiCmd+0x24d4>)
 80028ba:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 80028bc:	4b39      	ldr	r3, [pc, #228]	; (80029a4 <Send_WifiCmd+0x24d4>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	461a      	mov	r2, r3
 80028c2:	4b39      	ldr	r3, [pc, #228]	; (80029a8 <Send_WifiCmd+0x24d8>)
 80028c4:	2100      	movs	r1, #0
 80028c6:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 80028c8:	4b36      	ldr	r3, [pc, #216]	; (80029a4 <Send_WifiCmd+0x24d4>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	3301      	adds	r3, #1
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	4b34      	ldr	r3, [pc, #208]	; (80029a4 <Send_WifiCmd+0x24d4>)
 80028d2:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 80028d4:	4b33      	ldr	r3, [pc, #204]	; (80029a4 <Send_WifiCmd+0x24d4>)
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	461a      	mov	r2, r3
 80028da:	4b33      	ldr	r3, [pc, #204]	; (80029a8 <Send_WifiCmd+0x24d8>)
 80028dc:	2100      	movs	r1, #0
 80028de:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 80028e0:	4b30      	ldr	r3, [pc, #192]	; (80029a4 <Send_WifiCmd+0x24d4>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	3301      	adds	r3, #1
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	4b2e      	ldr	r3, [pc, #184]	; (80029a4 <Send_WifiCmd+0x24d4>)
 80028ea:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] =  ',';
 80028ec:	4b2d      	ldr	r3, [pc, #180]	; (80029a4 <Send_WifiCmd+0x24d4>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	461a      	mov	r2, r3
 80028f2:	4b2d      	ldr	r3, [pc, #180]	; (80029a8 <Send_WifiCmd+0x24d8>)
 80028f4:	212c      	movs	r1, #44	; 0x2c
 80028f6:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 80028f8:	4b2a      	ldr	r3, [pc, #168]	; (80029a4 <Send_WifiCmd+0x24d4>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	3301      	adds	r3, #1
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	4b28      	ldr	r3, [pc, #160]	; (80029a4 <Send_WifiCmd+0x24d4>)
 8002902:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 8002904:	4b27      	ldr	r3, [pc, #156]	; (80029a4 <Send_WifiCmd+0x24d4>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	461a      	mov	r2, r3
 800290a:	4b27      	ldr	r3, [pc, #156]	; (80029a8 <Send_WifiCmd+0x24d8>)
 800290c:	2100      	movs	r1, #0
 800290e:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 8002910:	4b24      	ldr	r3, [pc, #144]	; (80029a4 <Send_WifiCmd+0x24d4>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	3301      	adds	r3, #1
 8002916:	b2da      	uxtb	r2, r3
 8002918:	4b22      	ldr	r3, [pc, #136]	; (80029a4 <Send_WifiCmd+0x24d4>)
 800291a:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 800291c:	4b21      	ldr	r3, [pc, #132]	; (80029a4 <Send_WifiCmd+0x24d4>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	461a      	mov	r2, r3
 8002922:	4b21      	ldr	r3, [pc, #132]	; (80029a8 <Send_WifiCmd+0x24d8>)
 8002924:	2100      	movs	r1, #0
 8002926:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 8002928:	4b1e      	ldr	r3, [pc, #120]	; (80029a4 <Send_WifiCmd+0x24d4>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	3301      	adds	r3, #1
 800292e:	b2da      	uxtb	r2, r3
 8002930:	4b1c      	ldr	r3, [pc, #112]	; (80029a4 <Send_WifiCmd+0x24d4>)
 8002932:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 8002934:	4b1b      	ldr	r3, [pc, #108]	; (80029a4 <Send_WifiCmd+0x24d4>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	461a      	mov	r2, r3
 800293a:	4b1b      	ldr	r3, [pc, #108]	; (80029a8 <Send_WifiCmd+0x24d8>)
 800293c:	2100      	movs	r1, #0
 800293e:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8002940:	4b18      	ldr	r3, [pc, #96]	; (80029a4 <Send_WifiCmd+0x24d4>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	3301      	adds	r3, #1
 8002946:	b2da      	uxtb	r2, r3
 8002948:	4b16      	ldr	r3, [pc, #88]	; (80029a4 <Send_WifiCmd+0x24d4>)
 800294a:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] =  ',';
 800294c:	4b15      	ldr	r3, [pc, #84]	; (80029a4 <Send_WifiCmd+0x24d4>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	461a      	mov	r2, r3
 8002952:	4b15      	ldr	r3, [pc, #84]	; (80029a8 <Send_WifiCmd+0x24d8>)
 8002954:	212c      	movs	r1, #44	; 0x2c
 8002956:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 8002958:	4b12      	ldr	r3, [pc, #72]	; (80029a4 <Send_WifiCmd+0x24d4>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	3301      	adds	r3, #1
 800295e:	b2da      	uxtb	r2, r3
 8002960:	4b10      	ldr	r3, [pc, #64]	; (80029a4 <Send_WifiCmd+0x24d4>)
 8002962:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 8002964:	4b0f      	ldr	r3, [pc, #60]	; (80029a4 <Send_WifiCmd+0x24d4>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	461a      	mov	r2, r3
 800296a:	4b0f      	ldr	r3, [pc, #60]	; (80029a8 <Send_WifiCmd+0x24d8>)
 800296c:	2100      	movs	r1, #0
 800296e:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 8002970:	4b0c      	ldr	r3, [pc, #48]	; (80029a4 <Send_WifiCmd+0x24d4>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	3301      	adds	r3, #1
 8002976:	b2da      	uxtb	r2, r3
 8002978:	4b0a      	ldr	r3, [pc, #40]	; (80029a4 <Send_WifiCmd+0x24d4>)
 800297a:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] =0;
 800297c:	4b09      	ldr	r3, [pc, #36]	; (80029a4 <Send_WifiCmd+0x24d4>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	461a      	mov	r2, r3
 8002982:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <Send_WifiCmd+0x24d8>)
 8002984:	2100      	movs	r1, #0
 8002986:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 8002988:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <Send_WifiCmd+0x24d4>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	3301      	adds	r3, #1
 800298e:	b2da      	uxtb	r2, r3
 8002990:	4b04      	ldr	r3, [pc, #16]	; (80029a4 <Send_WifiCmd+0x24d4>)
 8002992:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 8002994:	4b03      	ldr	r3, [pc, #12]	; (80029a4 <Send_WifiCmd+0x24d4>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	461a      	mov	r2, r3
 800299a:	4b03      	ldr	r3, [pc, #12]	; (80029a8 <Send_WifiCmd+0x24d8>)
 800299c:	2100      	movs	r1, #0
 800299e:	5499      	strb	r1, [r3, r2]
 80029a0:	e004      	b.n	80029ac <Send_WifiCmd+0x24dc>
 80029a2:	bf00      	nop
 80029a4:	20000259 	.word	0x20000259
 80029a8:	2000018c 	.word	0x2000018c
    url_buffer++;
 80029ac:	4b84      	ldr	r3, [pc, #528]	; (8002bc0 <Send_WifiCmd+0x26f0>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	3301      	adds	r3, #1
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	4b82      	ldr	r3, [pc, #520]	; (8002bc0 <Send_WifiCmd+0x26f0>)
 80029b6:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] =  ',';
 80029b8:	4b81      	ldr	r3, [pc, #516]	; (8002bc0 <Send_WifiCmd+0x26f0>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	461a      	mov	r2, r3
 80029be:	4b81      	ldr	r3, [pc, #516]	; (8002bc4 <Send_WifiCmd+0x26f4>)
 80029c0:	212c      	movs	r1, #44	; 0x2c
 80029c2:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 80029c4:	4b7e      	ldr	r3, [pc, #504]	; (8002bc0 <Send_WifiCmd+0x26f0>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	3301      	adds	r3, #1
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	4b7c      	ldr	r3, [pc, #496]	; (8002bc0 <Send_WifiCmd+0x26f0>)
 80029ce:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 80029d0:	4b7b      	ldr	r3, [pc, #492]	; (8002bc0 <Send_WifiCmd+0x26f0>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	461a      	mov	r2, r3
 80029d6:	4b7b      	ldr	r3, [pc, #492]	; (8002bc4 <Send_WifiCmd+0x26f4>)
 80029d8:	2100      	movs	r1, #0
 80029da:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 80029dc:	4b78      	ldr	r3, [pc, #480]	; (8002bc0 <Send_WifiCmd+0x26f0>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	3301      	adds	r3, #1
 80029e2:	b2da      	uxtb	r2, r3
 80029e4:	4b76      	ldr	r3, [pc, #472]	; (8002bc0 <Send_WifiCmd+0x26f0>)
 80029e6:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 80029e8:	4b75      	ldr	r3, [pc, #468]	; (8002bc0 <Send_WifiCmd+0x26f0>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	461a      	mov	r2, r3
 80029ee:	4b75      	ldr	r3, [pc, #468]	; (8002bc4 <Send_WifiCmd+0x26f4>)
 80029f0:	2100      	movs	r1, #0
 80029f2:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 80029f4:	4b72      	ldr	r3, [pc, #456]	; (8002bc0 <Send_WifiCmd+0x26f0>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	3301      	adds	r3, #1
 80029fa:	b2da      	uxtb	r2, r3
 80029fc:	4b70      	ldr	r3, [pc, #448]	; (8002bc0 <Send_WifiCmd+0x26f0>)
 80029fe:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] = 0;
 8002a00:	4b6f      	ldr	r3, [pc, #444]	; (8002bc0 <Send_WifiCmd+0x26f0>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	461a      	mov	r2, r3
 8002a06:	4b6f      	ldr	r3, [pc, #444]	; (8002bc4 <Send_WifiCmd+0x26f4>)
 8002a08:	2100      	movs	r1, #0
 8002a0a:	5499      	strb	r1, [r3, r2]
    url_buffer++;
 8002a0c:	4b6c      	ldr	r3, [pc, #432]	; (8002bc0 <Send_WifiCmd+0x26f0>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	3301      	adds	r3, #1
 8002a12:	b2da      	uxtb	r2, r3
 8002a14:	4b6a      	ldr	r3, [pc, #424]	; (8002bc0 <Send_WifiCmd+0x26f0>)
 8002a16:	701a      	strb	r2, [r3, #0]
	OnlineData_buffer[url_buffer] =  '""';
 8002a18:	4b69      	ldr	r3, [pc, #420]	; (8002bc0 <Send_WifiCmd+0x26f0>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	4b69      	ldr	r3, [pc, #420]	; (8002bc4 <Send_WifiCmd+0x26f4>)
 8002a20:	2122      	movs	r1, #34	; 0x22
 8002a22:	5499      	strb	r1, [r3, r2]
	url_buffer++;
 8002a24:	4b66      	ldr	r3, [pc, #408]	; (8002bc0 <Send_WifiCmd+0x26f0>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	4b64      	ldr	r3, [pc, #400]	; (8002bc0 <Send_WifiCmd+0x26f0>)
 8002a2e:	701a      	strb	r2, [r3, #0]
	NoOfBatch_to_Send=0;
 8002a30:	4b65      	ldr	r3, [pc, #404]	; (8002bc8 <Send_WifiCmd+0x26f8>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	701a      	strb	r2, [r3, #0]
	if(NoOfBatch_to_Send!=0){OnlineData_buffer[url_buffer] =  ',';
 8002a36:	4b64      	ldr	r3, [pc, #400]	; (8002bc8 <Send_WifiCmd+0x26f8>)
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00b      	beq.n	8002a56 <Send_WifiCmd+0x2586>
 8002a3e:	4b60      	ldr	r3, [pc, #384]	; (8002bc0 <Send_WifiCmd+0x26f0>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	461a      	mov	r2, r3
 8002a44:	4b5f      	ldr	r3, [pc, #380]	; (8002bc4 <Send_WifiCmd+0x26f4>)
 8002a46:	212c      	movs	r1, #44	; 0x2c
 8002a48:	5499      	strb	r1, [r3, r2]
	url_buffer++; }
 8002a4a:	4b5d      	ldr	r3, [pc, #372]	; (8002bc0 <Send_WifiCmd+0x26f0>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	4b5b      	ldr	r3, [pc, #364]	; (8002bc0 <Send_WifiCmd+0x26f0>)
 8002a54:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,OnlineData_buffer,url_buffer);
 8002a56:	4b5a      	ldr	r3, [pc, #360]	; (8002bc0 <Send_WifiCmd+0x26f0>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	4959      	ldr	r1, [pc, #356]	; (8002bc4 <Send_WifiCmd+0x26f4>)
 8002a60:	485a      	ldr	r0, [pc, #360]	; (8002bcc <Send_WifiCmd+0x26fc>)
 8002a62:	f00a fe01 	bl	800d668 <HAL_UART_Transmit_IT>
	wifi_command=104;
 8002a66:	4b5a      	ldr	r3, [pc, #360]	; (8002bd0 <Send_WifiCmd+0x2700>)
 8002a68:	2268      	movs	r2, #104	; 0x68
 8002a6a:	701a      	strb	r2, [r3, #0]
	break;
 8002a6c:	e0a5      	b.n	8002bba <Send_WifiCmd+0x26ea>
	case 104:
		url_buffer=0;
 8002a6e:	4b54      	ldr	r3, [pc, #336]	; (8002bc0 <Send_WifiCmd+0x26f0>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	701a      	strb	r2, [r3, #0]
		OnlineData_buffer[url_buffer] =  ']';
 8002a74:	4b52      	ldr	r3, [pc, #328]	; (8002bc0 <Send_WifiCmd+0x26f0>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	461a      	mov	r2, r3
 8002a7a:	4b52      	ldr	r3, [pc, #328]	; (8002bc4 <Send_WifiCmd+0x26f4>)
 8002a7c:	215d      	movs	r1, #93	; 0x5d
 8002a7e:	5499      	strb	r1, [r3, r2]
		url_buffer++;
 8002a80:	4b4f      	ldr	r3, [pc, #316]	; (8002bc0 <Send_WifiCmd+0x26f0>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	3301      	adds	r3, #1
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	4b4d      	ldr	r3, [pc, #308]	; (8002bc0 <Send_WifiCmd+0x26f0>)
 8002a8a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&hlpuart1,OnlineData_buffer,url_buffer);
 8002a8c:	4b4c      	ldr	r3, [pc, #304]	; (8002bc0 <Send_WifiCmd+0x26f0>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	461a      	mov	r2, r3
 8002a94:	494b      	ldr	r1, [pc, #300]	; (8002bc4 <Send_WifiCmd+0x26f4>)
 8002a96:	484d      	ldr	r0, [pc, #308]	; (8002bcc <Send_WifiCmd+0x26fc>)
 8002a98:	f00a fde6 	bl	800d668 <HAL_UART_Transmit_IT>
		Rxseqdecoder=7;
 8002a9c:	4b4d      	ldr	r3, [pc, #308]	; (8002bd4 <Send_WifiCmd+0x2704>)
 8002a9e:	2207      	movs	r2, #7
 8002aa0:	701a      	strb	r2, [r3, #0]
		wifi_command=105;
 8002aa2:	4b4b      	ldr	r3, [pc, #300]	; (8002bd0 <Send_WifiCmd+0x2700>)
 8002aa4:	2269      	movs	r2, #105	; 0x69
 8002aa6:	701a      	strb	r2, [r3, #0]
	break;
 8002aa8:	e087      	b.n	8002bba <Send_WifiCmd+0x26ea>
	case 105:
		if(++Timerdelay>40)
 8002aaa:	4b4b      	ldr	r3, [pc, #300]	; (8002bd8 <Send_WifiCmd+0x2708>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	3301      	adds	r3, #1
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	4b49      	ldr	r3, [pc, #292]	; (8002bd8 <Send_WifiCmd+0x2708>)
 8002ab4:	701a      	strb	r2, [r3, #0]
 8002ab6:	4b48      	ldr	r3, [pc, #288]	; (8002bd8 <Send_WifiCmd+0x2708>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b28      	cmp	r3, #40	; 0x28
 8002abc:	d978      	bls.n	8002bb0 <Send_WifiCmd+0x26e0>
	   {
	   	Timerdelay=0;
 8002abe:	4b46      	ldr	r3, [pc, #280]	; (8002bd8 <Send_WifiCmd+0x2708>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	701a      	strb	r2, [r3, #0]
		wifi_command=10;
 8002ac4:	4b42      	ldr	r3, [pc, #264]	; (8002bd0 <Send_WifiCmd+0x2700>)
 8002ac6:	220a      	movs	r2, #10
 8002ac8:	701a      	strb	r2, [r3, #0]
	   }
	break;
 8002aca:	e071      	b.n	8002bb0 <Send_WifiCmd+0x26e0>
	case 102:

	   if(++Timerdelay>10)
 8002acc:	4b42      	ldr	r3, [pc, #264]	; (8002bd8 <Send_WifiCmd+0x2708>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	b2da      	uxtb	r2, r3
 8002ad4:	4b40      	ldr	r3, [pc, #256]	; (8002bd8 <Send_WifiCmd+0x2708>)
 8002ad6:	701a      	strb	r2, [r3, #0]
 8002ad8:	4b3f      	ldr	r3, [pc, #252]	; (8002bd8 <Send_WifiCmd+0x2708>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b0a      	cmp	r3, #10
 8002ade:	d969      	bls.n	8002bb4 <Send_WifiCmd+0x26e4>
	   {
	   	Timerdelay=0;
 8002ae0:	4b3d      	ldr	r3, [pc, #244]	; (8002bd8 <Send_WifiCmd+0x2708>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	701a      	strb	r2, [r3, #0]
		wifi_command=50;
 8002ae6:	4b3a      	ldr	r3, [pc, #232]	; (8002bd0 <Send_WifiCmd+0x2700>)
 8002ae8:	2232      	movs	r2, #50	; 0x32
 8002aea:	701a      	strb	r2, [r3, #0]
	   }
	break;
 8002aec:	e062      	b.n	8002bb4 <Send_WifiCmd+0x26e4>
	case 103:
	   if(++Timerdelay>2)
 8002aee:	4b3a      	ldr	r3, [pc, #232]	; (8002bd8 <Send_WifiCmd+0x2708>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	3301      	adds	r3, #1
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	4b38      	ldr	r3, [pc, #224]	; (8002bd8 <Send_WifiCmd+0x2708>)
 8002af8:	701a      	strb	r2, [r3, #0]
 8002afa:	4b37      	ldr	r3, [pc, #220]	; (8002bd8 <Send_WifiCmd+0x2708>)
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d95a      	bls.n	8002bb8 <Send_WifiCmd+0x26e8>
	   {
	   	Timerdelay=0;
 8002b02:	4b35      	ldr	r3, [pc, #212]	; (8002bd8 <Send_WifiCmd+0x2708>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	701a      	strb	r2, [r3, #0]
		wifi_command=10;
 8002b08:	4b31      	ldr	r3, [pc, #196]	; (8002bd0 <Send_WifiCmd+0x2700>)
 8002b0a:	220a      	movs	r2, #10
 8002b0c:	701a      	strb	r2, [r3, #0]
	   }
	break;
 8002b0e:	e053      	b.n	8002bb8 <Send_WifiCmd+0x26e8>
	case 110:
	ESP8266TXData[0] = 'A';
 8002b10:	4b32      	ldr	r3, [pc, #200]	; (8002bdc <Send_WifiCmd+0x270c>)
 8002b12:	2241      	movs	r2, #65	; 0x41
 8002b14:	701a      	strb	r2, [r3, #0]
	ESP8266TXData[1] = 'T';
 8002b16:	4b31      	ldr	r3, [pc, #196]	; (8002bdc <Send_WifiCmd+0x270c>)
 8002b18:	2254      	movs	r2, #84	; 0x54
 8002b1a:	705a      	strb	r2, [r3, #1]
	ESP8266TXData[2] = '+';
 8002b1c:	4b2f      	ldr	r3, [pc, #188]	; (8002bdc <Send_WifiCmd+0x270c>)
 8002b1e:	222b      	movs	r2, #43	; 0x2b
 8002b20:	709a      	strb	r2, [r3, #2]
	ESP8266TXData[3] = 'C';
 8002b22:	4b2e      	ldr	r3, [pc, #184]	; (8002bdc <Send_WifiCmd+0x270c>)
 8002b24:	2243      	movs	r2, #67	; 0x43
 8002b26:	70da      	strb	r2, [r3, #3]
	ESP8266TXData[4] = 'I';
 8002b28:	4b2c      	ldr	r3, [pc, #176]	; (8002bdc <Send_WifiCmd+0x270c>)
 8002b2a:	2249      	movs	r2, #73	; 0x49
 8002b2c:	711a      	strb	r2, [r3, #4]
	ESP8266TXData[5] = 'P';
 8002b2e:	4b2b      	ldr	r3, [pc, #172]	; (8002bdc <Send_WifiCmd+0x270c>)
 8002b30:	2250      	movs	r2, #80	; 0x50
 8002b32:	715a      	strb	r2, [r3, #5]
	ESP8266TXData[6] = 'C';
 8002b34:	4b29      	ldr	r3, [pc, #164]	; (8002bdc <Send_WifiCmd+0x270c>)
 8002b36:	2243      	movs	r2, #67	; 0x43
 8002b38:	719a      	strb	r2, [r3, #6]
	ESP8266TXData[7] = 'L';
 8002b3a:	4b28      	ldr	r3, [pc, #160]	; (8002bdc <Send_WifiCmd+0x270c>)
 8002b3c:	224c      	movs	r2, #76	; 0x4c
 8002b3e:	71da      	strb	r2, [r3, #7]
	ESP8266TXData[8] = 'O';
 8002b40:	4b26      	ldr	r3, [pc, #152]	; (8002bdc <Send_WifiCmd+0x270c>)
 8002b42:	224f      	movs	r2, #79	; 0x4f
 8002b44:	721a      	strb	r2, [r3, #8]
	ESP8266TXData[9] = 'S';
 8002b46:	4b25      	ldr	r3, [pc, #148]	; (8002bdc <Send_WifiCmd+0x270c>)
 8002b48:	2253      	movs	r2, #83	; 0x53
 8002b4a:	725a      	strb	r2, [r3, #9]
	ESP8266TXData[10] = 'E';
 8002b4c:	4b23      	ldr	r3, [pc, #140]	; (8002bdc <Send_WifiCmd+0x270c>)
 8002b4e:	2245      	movs	r2, #69	; 0x45
 8002b50:	729a      	strb	r2, [r3, #10]
	ESP8266TXData[11] = 0x0a;
 8002b52:	4b22      	ldr	r3, [pc, #136]	; (8002bdc <Send_WifiCmd+0x270c>)
 8002b54:	220a      	movs	r2, #10
 8002b56:	72da      	strb	r2, [r3, #11]
	ESP8266TXData[12] = 0x0d;
 8002b58:	4b20      	ldr	r3, [pc, #128]	; (8002bdc <Send_WifiCmd+0x270c>)
 8002b5a:	220d      	movs	r2, #13
 8002b5c:	731a      	strb	r2, [r3, #12]
	NoOfdata_byte=12;
 8002b5e:	4b20      	ldr	r3, [pc, #128]	; (8002be0 <Send_WifiCmd+0x2710>)
 8002b60:	220c      	movs	r2, #12
 8002b62:	701a      	strb	r2, [r3, #0]
	wifi_command=50;
 8002b64:	4b1a      	ldr	r3, [pc, #104]	; (8002bd0 <Send_WifiCmd+0x2700>)
 8002b66:	2232      	movs	r2, #50	; 0x32
 8002b68:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,ESP8266TXData,NoOfdata_byte);
 8002b6a:	4b1d      	ldr	r3, [pc, #116]	; (8002be0 <Send_WifiCmd+0x2710>)
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	461a      	mov	r2, r3
 8002b72:	491a      	ldr	r1, [pc, #104]	; (8002bdc <Send_WifiCmd+0x270c>)
 8002b74:	4815      	ldr	r0, [pc, #84]	; (8002bcc <Send_WifiCmd+0x26fc>)
 8002b76:	f00a fd77 	bl	800d668 <HAL_UART_Transmit_IT>
	break;
 8002b7a:	e01e      	b.n	8002bba <Send_WifiCmd+0x26ea>
	case 120:
	break;
	default:
	wifi_command=5;
 8002b7c:	4b14      	ldr	r3, [pc, #80]	; (8002bd0 <Send_WifiCmd+0x2700>)
 8002b7e:	2205      	movs	r2, #5
 8002b80:	701a      	strb	r2, [r3, #0]
	break;
 8002b82:	e01a      	b.n	8002bba <Send_WifiCmd+0x26ea>
	break;
 8002b84:	bf00      	nop
 8002b86:	e018      	b.n	8002bba <Send_WifiCmd+0x26ea>
	break;
 8002b88:	bf00      	nop
 8002b8a:	e016      	b.n	8002bba <Send_WifiCmd+0x26ea>
	break;
 8002b8c:	bf00      	nop
 8002b8e:	e014      	b.n	8002bba <Send_WifiCmd+0x26ea>
	break;
 8002b90:	bf00      	nop
 8002b92:	e012      	b.n	8002bba <Send_WifiCmd+0x26ea>
	break;
 8002b94:	bf00      	nop
 8002b96:	e010      	b.n	8002bba <Send_WifiCmd+0x26ea>
	break;
 8002b98:	bf00      	nop
 8002b9a:	e00e      	b.n	8002bba <Send_WifiCmd+0x26ea>
	break;
 8002b9c:	bf00      	nop
 8002b9e:	e00c      	b.n	8002bba <Send_WifiCmd+0x26ea>
	break;
 8002ba0:	bf00      	nop
 8002ba2:	e00a      	b.n	8002bba <Send_WifiCmd+0x26ea>
	break;
 8002ba4:	bf00      	nop
 8002ba6:	e008      	b.n	8002bba <Send_WifiCmd+0x26ea>
	break;
 8002ba8:	bf00      	nop
 8002baa:	e006      	b.n	8002bba <Send_WifiCmd+0x26ea>
	break;
 8002bac:	bf00      	nop
 8002bae:	e004      	b.n	8002bba <Send_WifiCmd+0x26ea>
	break;
 8002bb0:	bf00      	nop
 8002bb2:	e002      	b.n	8002bba <Send_WifiCmd+0x26ea>
	break;
 8002bb4:	bf00      	nop
 8002bb6:	e000      	b.n	8002bba <Send_WifiCmd+0x26ea>
	break;
 8002bb8:	bf00      	nop
 }
}
 8002bba:	bf00      	nop
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	20000259 	.word	0x20000259
 8002bc4:	2000018c 	.word	0x2000018c
 8002bc8:	2000025c 	.word	0x2000025c
 8002bcc:	200003d4 	.word	0x200003d4
 8002bd0:	2000008d 	.word	0x2000008d
 8002bd4:	20000255 	.word	0x20000255
 8002bd8:	20000258 	.word	0x20000258
 8002bdc:	20000090 	.word	0x20000090
 8002be0:	20000257 	.word	0x20000257

08002be4 <ESPRxDecoder>:
#include "esp8266_rx.h"
extern uint8_t checkbuff[200];
extern uint8_t refinc;

void ESPRxDecoder(unsigned char Rxwifi_data,unsigned char Rxseqdecoder)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	460a      	mov	r2, r1
 8002bee:	71fb      	strb	r3, [r7, #7]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	71bb      	strb	r3, [r7, #6]

   static unsigned char Error_Retry;
	 switch(Rxseqdecoder)
 8002bf4:	79bb      	ldrb	r3, [r7, #6]
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	2b07      	cmp	r3, #7
 8002bfa:	f201 807d 	bhi.w	8003cf8 <ESPRxDecoder+0x1114>
 8002bfe:	a201      	add	r2, pc, #4	; (adr r2, 8002c04 <ESPRxDecoder+0x20>)
 8002c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c04:	08002c25 	.word	0x08002c25
 8002c08:	08002d3b 	.word	0x08002d3b
 8002c0c:	08002d79 	.word	0x08002d79
 8002c10:	08002f71 	.word	0x08002f71
 8002c14:	08002faf 	.word	0x08002faf
 8002c18:	080031c1 	.word	0x080031c1
 8002c1c:	080031e7 	.word	0x080031e7
 8002c20:	08003cc3 	.word	0x08003cc3
	   {
	   	case 1:
			 if((Rxwifi_data=='O')&&(bufferptr==0))
 8002c24:	79fb      	ldrb	r3, [r7, #7]
 8002c26:	2b4f      	cmp	r3, #79	; 0x4f
 8002c28:	d107      	bne.n	8002c3a <ESPRxDecoder+0x56>
 8002c2a:	4b90      	ldr	r3, [pc, #576]	; (8002e6c <ESPRxDecoder+0x288>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d103      	bne.n	8002c3a <ESPRxDecoder+0x56>
			 {
			 	bufferptr=1;
 8002c32:	4b8e      	ldr	r3, [pc, #568]	; (8002e6c <ESPRxDecoder+0x288>)
 8002c34:	2201      	movs	r2, #1
 8002c36:	701a      	strb	r2, [r3, #0]
 8002c38:	e011      	b.n	8002c5e <ESPRxDecoder+0x7a>
			 }
			 else if((Rxwifi_data=='K')&&(bufferptr==1))
 8002c3a:	79fb      	ldrb	r3, [r7, #7]
 8002c3c:	2b4b      	cmp	r3, #75	; 0x4b
 8002c3e:	d10e      	bne.n	8002c5e <ESPRxDecoder+0x7a>
 8002c40:	4b8a      	ldr	r3, [pc, #552]	; (8002e6c <ESPRxDecoder+0x288>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d10a      	bne.n	8002c5e <ESPRxDecoder+0x7a>
			 {
			 	bufferptr=0;
 8002c48:	4b88      	ldr	r3, [pc, #544]	; (8002e6c <ESPRxDecoder+0x288>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	71bb      	strb	r3, [r7, #6]
				wifi_command=30;
 8002c52:	4b87      	ldr	r3, [pc, #540]	; (8002e70 <ESPRxDecoder+0x28c>)
 8002c54:	221e      	movs	r2, #30
 8002c56:	701a      	strb	r2, [r3, #0]
//				WifiStatusVar = 1;
				Check_CWMODE_For_Hang=0;
 8002c58:	4b86      	ldr	r3, [pc, #536]	; (8002e74 <ESPRxDecoder+0x290>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	701a      	strb	r2, [r3, #0]
			 }
			 else{;}

			 if((Rxwifi_data=='n')&&(bufferptr==0))
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	2b6e      	cmp	r3, #110	; 0x6e
 8002c62:	d107      	bne.n	8002c74 <ESPRxDecoder+0x90>
 8002c64:	4b81      	ldr	r3, [pc, #516]	; (8002e6c <ESPRxDecoder+0x288>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d103      	bne.n	8002c74 <ESPRxDecoder+0x90>
			 {
			 	bufferptr=1;
 8002c6c:	4b7f      	ldr	r3, [pc, #508]	; (8002e6c <ESPRxDecoder+0x288>)
 8002c6e:	2201      	movs	r2, #1
 8002c70:	701a      	strb	r2, [r3, #0]
 8002c72:	e060      	b.n	8002d36 <ESPRxDecoder+0x152>
			 }
			 else if((Rxwifi_data=='o')&&(bufferptr==1))
 8002c74:	79fb      	ldrb	r3, [r7, #7]
 8002c76:	2b6f      	cmp	r3, #111	; 0x6f
 8002c78:	d107      	bne.n	8002c8a <ESPRxDecoder+0xa6>
 8002c7a:	4b7c      	ldr	r3, [pc, #496]	; (8002e6c <ESPRxDecoder+0x288>)
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d103      	bne.n	8002c8a <ESPRxDecoder+0xa6>
			 {
			 	bufferptr=2;
 8002c82:	4b7a      	ldr	r3, [pc, #488]	; (8002e6c <ESPRxDecoder+0x288>)
 8002c84:	2202      	movs	r2, #2
 8002c86:	701a      	strb	r2, [r3, #0]
 8002c88:	e055      	b.n	8002d36 <ESPRxDecoder+0x152>
			 }
			 else if(bufferptr==2)
 8002c8a:	4b78      	ldr	r3, [pc, #480]	; (8002e6c <ESPRxDecoder+0x288>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d104      	bne.n	8002c9c <ESPRxDecoder+0xb8>
			 {
			 	bufferptr=3;
 8002c92:	4b76      	ldr	r3, [pc, #472]	; (8002e6c <ESPRxDecoder+0x288>)
 8002c94:	2203      	movs	r2, #3
 8002c96:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
				wifi_command=30;
				Check_CWMODE_For_Hang=0;
			 }
			 else{;}
		break;
 8002c98:	f001 b830 	b.w	8003cfc <ESPRxDecoder+0x1118>
			 else if((Rxwifi_data=='c')&&(bufferptr==3))
 8002c9c:	79fb      	ldrb	r3, [r7, #7]
 8002c9e:	2b63      	cmp	r3, #99	; 0x63
 8002ca0:	d107      	bne.n	8002cb2 <ESPRxDecoder+0xce>
 8002ca2:	4b72      	ldr	r3, [pc, #456]	; (8002e6c <ESPRxDecoder+0x288>)
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	2b03      	cmp	r3, #3
 8002ca8:	d103      	bne.n	8002cb2 <ESPRxDecoder+0xce>
			 	bufferptr=4;
 8002caa:	4b70      	ldr	r3, [pc, #448]	; (8002e6c <ESPRxDecoder+0x288>)
 8002cac:	2204      	movs	r2, #4
 8002cae:	701a      	strb	r2, [r3, #0]
 8002cb0:	e041      	b.n	8002d36 <ESPRxDecoder+0x152>
			 else if((Rxwifi_data=='h')&&(bufferptr==4))
 8002cb2:	79fb      	ldrb	r3, [r7, #7]
 8002cb4:	2b68      	cmp	r3, #104	; 0x68
 8002cb6:	d107      	bne.n	8002cc8 <ESPRxDecoder+0xe4>
 8002cb8:	4b6c      	ldr	r3, [pc, #432]	; (8002e6c <ESPRxDecoder+0x288>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	2b04      	cmp	r3, #4
 8002cbe:	d103      	bne.n	8002cc8 <ESPRxDecoder+0xe4>
			 	bufferptr=5;
 8002cc0:	4b6a      	ldr	r3, [pc, #424]	; (8002e6c <ESPRxDecoder+0x288>)
 8002cc2:	2205      	movs	r2, #5
 8002cc4:	701a      	strb	r2, [r3, #0]
 8002cc6:	e036      	b.n	8002d36 <ESPRxDecoder+0x152>
			 else if((Rxwifi_data=='a')&&(bufferptr==5))
 8002cc8:	79fb      	ldrb	r3, [r7, #7]
 8002cca:	2b61      	cmp	r3, #97	; 0x61
 8002ccc:	d107      	bne.n	8002cde <ESPRxDecoder+0xfa>
 8002cce:	4b67      	ldr	r3, [pc, #412]	; (8002e6c <ESPRxDecoder+0x288>)
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	2b05      	cmp	r3, #5
 8002cd4:	d103      	bne.n	8002cde <ESPRxDecoder+0xfa>
			 	bufferptr=6;
 8002cd6:	4b65      	ldr	r3, [pc, #404]	; (8002e6c <ESPRxDecoder+0x288>)
 8002cd8:	2206      	movs	r2, #6
 8002cda:	701a      	strb	r2, [r3, #0]
 8002cdc:	e02b      	b.n	8002d36 <ESPRxDecoder+0x152>
			 else if((Rxwifi_data=='n')&&(bufferptr==6))
 8002cde:	79fb      	ldrb	r3, [r7, #7]
 8002ce0:	2b6e      	cmp	r3, #110	; 0x6e
 8002ce2:	d107      	bne.n	8002cf4 <ESPRxDecoder+0x110>
 8002ce4:	4b61      	ldr	r3, [pc, #388]	; (8002e6c <ESPRxDecoder+0x288>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	2b06      	cmp	r3, #6
 8002cea:	d103      	bne.n	8002cf4 <ESPRxDecoder+0x110>
			 	bufferptr=7;
 8002cec:	4b5f      	ldr	r3, [pc, #380]	; (8002e6c <ESPRxDecoder+0x288>)
 8002cee:	2207      	movs	r2, #7
 8002cf0:	701a      	strb	r2, [r3, #0]
 8002cf2:	e020      	b.n	8002d36 <ESPRxDecoder+0x152>
			 else if((Rxwifi_data=='g')&&(bufferptr==7))
 8002cf4:	79fb      	ldrb	r3, [r7, #7]
 8002cf6:	2b67      	cmp	r3, #103	; 0x67
 8002cf8:	d107      	bne.n	8002d0a <ESPRxDecoder+0x126>
 8002cfa:	4b5c      	ldr	r3, [pc, #368]	; (8002e6c <ESPRxDecoder+0x288>)
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	2b07      	cmp	r3, #7
 8002d00:	d103      	bne.n	8002d0a <ESPRxDecoder+0x126>
			 	bufferptr=8;
 8002d02:	4b5a      	ldr	r3, [pc, #360]	; (8002e6c <ESPRxDecoder+0x288>)
 8002d04:	2208      	movs	r2, #8
 8002d06:	701a      	strb	r2, [r3, #0]
 8002d08:	e015      	b.n	8002d36 <ESPRxDecoder+0x152>
			 else if((Rxwifi_data=='e')&&(bufferptr==8))
 8002d0a:	79fb      	ldrb	r3, [r7, #7]
 8002d0c:	2b65      	cmp	r3, #101	; 0x65
 8002d0e:	f040 87f5 	bne.w	8003cfc <ESPRxDecoder+0x1118>
 8002d12:	4b56      	ldr	r3, [pc, #344]	; (8002e6c <ESPRxDecoder+0x288>)
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	2b08      	cmp	r3, #8
 8002d18:	f040 87f0 	bne.w	8003cfc <ESPRxDecoder+0x1118>
			 	bufferptr=0;
 8002d1c:	4b53      	ldr	r3, [pc, #332]	; (8002e6c <ESPRxDecoder+0x288>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8002d22:	2300      	movs	r3, #0
 8002d24:	71bb      	strb	r3, [r7, #6]
				wifi_command=30;
 8002d26:	4b52      	ldr	r3, [pc, #328]	; (8002e70 <ESPRxDecoder+0x28c>)
 8002d28:	221e      	movs	r2, #30
 8002d2a:	701a      	strb	r2, [r3, #0]
				Check_CWMODE_For_Hang=0;
 8002d2c:	4b51      	ldr	r3, [pc, #324]	; (8002e74 <ESPRxDecoder+0x290>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	701a      	strb	r2, [r3, #0]
		break;
 8002d32:	f000 bfe3 	b.w	8003cfc <ESPRxDecoder+0x1118>
 8002d36:	f000 bfe1 	b.w	8003cfc <ESPRxDecoder+0x1118>
		case 2:
			if((Rxwifi_data=='O')&&(bufferptr==0))
 8002d3a:	79fb      	ldrb	r3, [r7, #7]
 8002d3c:	2b4f      	cmp	r3, #79	; 0x4f
 8002d3e:	d108      	bne.n	8002d52 <ESPRxDecoder+0x16e>
 8002d40:	4b4a      	ldr	r3, [pc, #296]	; (8002e6c <ESPRxDecoder+0x288>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d104      	bne.n	8002d52 <ESPRxDecoder+0x16e>
			 {
			 	bufferptr=1;
 8002d48:	4b48      	ldr	r3, [pc, #288]	; (8002e6c <ESPRxDecoder+0x288>)
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	701a      	strb	r2, [r3, #0]
			 {
			 	bufferptr=0;
				Rxseqdecoder=0;
				wifi_command=49;
			 }
		break;
 8002d4e:	f000 bfd7 	b.w	8003d00 <ESPRxDecoder+0x111c>
			 else if((Rxwifi_data=='K')&&(bufferptr==1))
 8002d52:	79fb      	ldrb	r3, [r7, #7]
 8002d54:	2b4b      	cmp	r3, #75	; 0x4b
 8002d56:	f040 87d3 	bne.w	8003d00 <ESPRxDecoder+0x111c>
 8002d5a:	4b44      	ldr	r3, [pc, #272]	; (8002e6c <ESPRxDecoder+0x288>)
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	f040 87ce 	bne.w	8003d00 <ESPRxDecoder+0x111c>
			 	bufferptr=0;
 8002d64:	4b41      	ldr	r3, [pc, #260]	; (8002e6c <ESPRxDecoder+0x288>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	71bb      	strb	r3, [r7, #6]
				wifi_command=49;
 8002d6e:	4b40      	ldr	r3, [pc, #256]	; (8002e70 <ESPRxDecoder+0x28c>)
 8002d70:	2231      	movs	r2, #49	; 0x31
 8002d72:	701a      	strb	r2, [r3, #0]
		break;
 8002d74:	f000 bfc4 	b.w	8003d00 <ESPRxDecoder+0x111c>
		case 3:
			if((Rxwifi_data=='T')&&(bufferptr==0))
 8002d78:	79fb      	ldrb	r3, [r7, #7]
 8002d7a:	2b54      	cmp	r3, #84	; 0x54
 8002d7c:	d107      	bne.n	8002d8e <ESPRxDecoder+0x1aa>
 8002d7e:	4b3b      	ldr	r3, [pc, #236]	; (8002e6c <ESPRxDecoder+0x288>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d103      	bne.n	8002d8e <ESPRxDecoder+0x1aa>
			 {
			 	bufferptr=1;
 8002d86:	4b39      	ldr	r3, [pc, #228]	; (8002e6c <ESPRxDecoder+0x288>)
 8002d88:	2201      	movs	r2, #1
 8002d8a:	701a      	strb	r2, [r3, #0]
 8002d8c:	e0a2      	b.n	8002ed4 <ESPRxDecoder+0x2f0>
			 }
			 else if((Rxwifi_data=='P')&&(bufferptr==1))
 8002d8e:	79fb      	ldrb	r3, [r7, #7]
 8002d90:	2b50      	cmp	r3, #80	; 0x50
 8002d92:	d107      	bne.n	8002da4 <ESPRxDecoder+0x1c0>
 8002d94:	4b35      	ldr	r3, [pc, #212]	; (8002e6c <ESPRxDecoder+0x288>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d103      	bne.n	8002da4 <ESPRxDecoder+0x1c0>
			 {
			 	bufferptr=2;
 8002d9c:	4b33      	ldr	r3, [pc, #204]	; (8002e6c <ESPRxDecoder+0x288>)
 8002d9e:	2202      	movs	r2, #2
 8002da0:	701a      	strb	r2, [r3, #0]
 8002da2:	e097      	b.n	8002ed4 <ESPRxDecoder+0x2f0>
			 }
			 else if((Rxwifi_data=='-')&&(bufferptr==2))
 8002da4:	79fb      	ldrb	r3, [r7, #7]
 8002da6:	2b2d      	cmp	r3, #45	; 0x2d
 8002da8:	d107      	bne.n	8002dba <ESPRxDecoder+0x1d6>
 8002daa:	4b30      	ldr	r3, [pc, #192]	; (8002e6c <ESPRxDecoder+0x288>)
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d103      	bne.n	8002dba <ESPRxDecoder+0x1d6>
			 {
			 	bufferptr=3;
 8002db2:	4b2e      	ldr	r3, [pc, #184]	; (8002e6c <ESPRxDecoder+0x288>)
 8002db4:	2203      	movs	r2, #3
 8002db6:	701a      	strb	r2, [r3, #0]
 8002db8:	e08c      	b.n	8002ed4 <ESPRxDecoder+0x2f0>
			 }

			 else if((Rxwifi_data=='L')&&(bufferptr==3))
 8002dba:	79fb      	ldrb	r3, [r7, #7]
 8002dbc:	2b4c      	cmp	r3, #76	; 0x4c
 8002dbe:	d107      	bne.n	8002dd0 <ESPRxDecoder+0x1ec>
 8002dc0:	4b2a      	ldr	r3, [pc, #168]	; (8002e6c <ESPRxDecoder+0x288>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	2b03      	cmp	r3, #3
 8002dc6:	d103      	bne.n	8002dd0 <ESPRxDecoder+0x1ec>
			 {
			 	bufferptr=4;
 8002dc8:	4b28      	ldr	r3, [pc, #160]	; (8002e6c <ESPRxDecoder+0x288>)
 8002dca:	2204      	movs	r2, #4
 8002dcc:	701a      	strb	r2, [r3, #0]
 8002dce:	e081      	b.n	8002ed4 <ESPRxDecoder+0x2f0>
			 }
			 else if((Rxwifi_data=='I')&&(bufferptr==4))
 8002dd0:	79fb      	ldrb	r3, [r7, #7]
 8002dd2:	2b49      	cmp	r3, #73	; 0x49
 8002dd4:	d107      	bne.n	8002de6 <ESPRxDecoder+0x202>
 8002dd6:	4b25      	ldr	r3, [pc, #148]	; (8002e6c <ESPRxDecoder+0x288>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	d103      	bne.n	8002de6 <ESPRxDecoder+0x202>
			 {
			 	bufferptr=5;
 8002dde:	4b23      	ldr	r3, [pc, #140]	; (8002e6c <ESPRxDecoder+0x288>)
 8002de0:	2205      	movs	r2, #5
 8002de2:	701a      	strb	r2, [r3, #0]
 8002de4:	e076      	b.n	8002ed4 <ESPRxDecoder+0x2f0>
			 }
			 else if((Rxwifi_data=='N')&&(bufferptr==5))
 8002de6:	79fb      	ldrb	r3, [r7, #7]
 8002de8:	2b4e      	cmp	r3, #78	; 0x4e
 8002dea:	d107      	bne.n	8002dfc <ESPRxDecoder+0x218>
 8002dec:	4b1f      	ldr	r3, [pc, #124]	; (8002e6c <ESPRxDecoder+0x288>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	2b05      	cmp	r3, #5
 8002df2:	d103      	bne.n	8002dfc <ESPRxDecoder+0x218>
			 {
			 	bufferptr=6;
 8002df4:	4b1d      	ldr	r3, [pc, #116]	; (8002e6c <ESPRxDecoder+0x288>)
 8002df6:	2206      	movs	r2, #6
 8002df8:	701a      	strb	r2, [r3, #0]
 8002dfa:	e06b      	b.n	8002ed4 <ESPRxDecoder+0x2f0>
			 }
			 else if((Rxwifi_data=='K')&&(bufferptr==6))
 8002dfc:	79fb      	ldrb	r3, [r7, #7]
 8002dfe:	2b4b      	cmp	r3, #75	; 0x4b
 8002e00:	d107      	bne.n	8002e12 <ESPRxDecoder+0x22e>
 8002e02:	4b1a      	ldr	r3, [pc, #104]	; (8002e6c <ESPRxDecoder+0x288>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b06      	cmp	r3, #6
 8002e08:	d103      	bne.n	8002e12 <ESPRxDecoder+0x22e>
			 {
			 	bufferptr=7;
 8002e0a:	4b18      	ldr	r3, [pc, #96]	; (8002e6c <ESPRxDecoder+0x288>)
 8002e0c:	2207      	movs	r2, #7
 8002e0e:	701a      	strb	r2, [r3, #0]
 8002e10:	e060      	b.n	8002ed4 <ESPRxDecoder+0x2f0>
			 }
			 else if((Rxwifi_data=='_')&&(bufferptr==7))
 8002e12:	79fb      	ldrb	r3, [r7, #7]
 8002e14:	2b5f      	cmp	r3, #95	; 0x5f
 8002e16:	d107      	bne.n	8002e28 <ESPRxDecoder+0x244>
 8002e18:	4b14      	ldr	r3, [pc, #80]	; (8002e6c <ESPRxDecoder+0x288>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	2b07      	cmp	r3, #7
 8002e1e:	d103      	bne.n	8002e28 <ESPRxDecoder+0x244>
			 {
			 	bufferptr=8;
 8002e20:	4b12      	ldr	r3, [pc, #72]	; (8002e6c <ESPRxDecoder+0x288>)
 8002e22:	2208      	movs	r2, #8
 8002e24:	701a      	strb	r2, [r3, #0]
 8002e26:	e055      	b.n	8002ed4 <ESPRxDecoder+0x2f0>
			 }
			 else if((Rxwifi_data=='A')&&(bufferptr==8))
 8002e28:	79fb      	ldrb	r3, [r7, #7]
 8002e2a:	2b41      	cmp	r3, #65	; 0x41
 8002e2c:	d107      	bne.n	8002e3e <ESPRxDecoder+0x25a>
 8002e2e:	4b0f      	ldr	r3, [pc, #60]	; (8002e6c <ESPRxDecoder+0x288>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	2b08      	cmp	r3, #8
 8002e34:	d103      	bne.n	8002e3e <ESPRxDecoder+0x25a>
			 {
			 	bufferptr=9;
 8002e36:	4b0d      	ldr	r3, [pc, #52]	; (8002e6c <ESPRxDecoder+0x288>)
 8002e38:	2209      	movs	r2, #9
 8002e3a:	701a      	strb	r2, [r3, #0]
 8002e3c:	e04a      	b.n	8002ed4 <ESPRxDecoder+0x2f0>
			 }
			 else if((Rxwifi_data=='C')&&(bufferptr==9))
 8002e3e:	79fb      	ldrb	r3, [r7, #7]
 8002e40:	2b43      	cmp	r3, #67	; 0x43
 8002e42:	d107      	bne.n	8002e54 <ESPRxDecoder+0x270>
 8002e44:	4b09      	ldr	r3, [pc, #36]	; (8002e6c <ESPRxDecoder+0x288>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	2b09      	cmp	r3, #9
 8002e4a:	d103      	bne.n	8002e54 <ESPRxDecoder+0x270>
			 {
			 	bufferptr=10;
 8002e4c:	4b07      	ldr	r3, [pc, #28]	; (8002e6c <ESPRxDecoder+0x288>)
 8002e4e:	220a      	movs	r2, #10
 8002e50:	701a      	strb	r2, [r3, #0]
 8002e52:	e03f      	b.n	8002ed4 <ESPRxDecoder+0x2f0>
			 }
			 else if((Rxwifi_data=='C')&&(bufferptr==10))
 8002e54:	79fb      	ldrb	r3, [r7, #7]
 8002e56:	2b43      	cmp	r3, #67	; 0x43
 8002e58:	d10e      	bne.n	8002e78 <ESPRxDecoder+0x294>
 8002e5a:	4b04      	ldr	r3, [pc, #16]	; (8002e6c <ESPRxDecoder+0x288>)
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	2b0a      	cmp	r3, #10
 8002e60:	d10a      	bne.n	8002e78 <ESPRxDecoder+0x294>
			 {
			 	bufferptr=11;
 8002e62:	4b02      	ldr	r3, [pc, #8]	; (8002e6c <ESPRxDecoder+0x288>)
 8002e64:	220b      	movs	r2, #11
 8002e66:	701a      	strb	r2, [r3, #0]
 8002e68:	e034      	b.n	8002ed4 <ESPRxDecoder+0x2f0>
 8002e6a:	bf00      	nop
 8002e6c:	20000254 	.word	0x20000254
 8002e70:	2000008d 	.word	0x2000008d
 8002e74:	20000256 	.word	0x20000256
			 }
			 else if((Rxwifi_data=='E')&&(bufferptr==11))
 8002e78:	79fb      	ldrb	r3, [r7, #7]
 8002e7a:	2b45      	cmp	r3, #69	; 0x45
 8002e7c:	d107      	bne.n	8002e8e <ESPRxDecoder+0x2aa>
 8002e7e:	4b94      	ldr	r3, [pc, #592]	; (80030d0 <ESPRxDecoder+0x4ec>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	2b0b      	cmp	r3, #11
 8002e84:	d103      	bne.n	8002e8e <ESPRxDecoder+0x2aa>
			 {
			 	bufferptr=12;
 8002e86:	4b92      	ldr	r3, [pc, #584]	; (80030d0 <ESPRxDecoder+0x4ec>)
 8002e88:	220c      	movs	r2, #12
 8002e8a:	701a      	strb	r2, [r3, #0]
 8002e8c:	e022      	b.n	8002ed4 <ESPRxDecoder+0x2f0>
			 }
			 else if((Rxwifi_data=='E')&&(bufferptr==12))
 8002e8e:	79fb      	ldrb	r3, [r7, #7]
 8002e90:	2b45      	cmp	r3, #69	; 0x45
 8002e92:	d107      	bne.n	8002ea4 <ESPRxDecoder+0x2c0>
 8002e94:	4b8e      	ldr	r3, [pc, #568]	; (80030d0 <ESPRxDecoder+0x4ec>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	2b0c      	cmp	r3, #12
 8002e9a:	d103      	bne.n	8002ea4 <ESPRxDecoder+0x2c0>
			 {
			 	bufferptr=13;
 8002e9c:	4b8c      	ldr	r3, [pc, #560]	; (80030d0 <ESPRxDecoder+0x4ec>)
 8002e9e:	220d      	movs	r2, #13
 8002ea0:	701a      	strb	r2, [r3, #0]
 8002ea2:	e017      	b.n	8002ed4 <ESPRxDecoder+0x2f0>
			 }
			 else if((Rxwifi_data=='D')&&(bufferptr==13))
 8002ea4:	79fb      	ldrb	r3, [r7, #7]
 8002ea6:	2b44      	cmp	r3, #68	; 0x44
 8002ea8:	d114      	bne.n	8002ed4 <ESPRxDecoder+0x2f0>
 8002eaa:	4b89      	ldr	r3, [pc, #548]	; (80030d0 <ESPRxDecoder+0x4ec>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b0d      	cmp	r3, #13
 8002eb0:	d110      	bne.n	8002ed4 <ESPRxDecoder+0x2f0>
				 {
			 	bufferptr=0;
 8002eb2:	4b87      	ldr	r3, [pc, #540]	; (80030d0 <ESPRxDecoder+0x4ec>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	701a      	strb	r2, [r3, #0]
				Err_bufferptr=0;
 8002eb8:	4b86      	ldr	r3, [pc, #536]	; (80030d4 <ESPRxDecoder+0x4f0>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	71bb      	strb	r3, [r7, #6]
				wifi_command=70;
 8002ec2:	4b85      	ldr	r3, [pc, #532]	; (80030d8 <ESPRxDecoder+0x4f4>)
 8002ec4:	2246      	movs	r2, #70	; 0x46
 8002ec6:	701a      	strb	r2, [r3, #0]
				Error_Retry=0;
 8002ec8:	4b84      	ldr	r3, [pc, #528]	; (80030dc <ESPRxDecoder+0x4f8>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	701a      	strb	r2, [r3, #0]
				WifiDisplay = 1;
 8002ece:	4b84      	ldr	r3, [pc, #528]	; (80030e0 <ESPRxDecoder+0x4fc>)
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
				wifi_command=70;
				Error_Retry=0;
			 }	*/

			 if((Rxwifi_data=='N')&&(Err_bufferptr==0))
 8002ed4:	79fb      	ldrb	r3, [r7, #7]
 8002ed6:	2b4e      	cmp	r3, #78	; 0x4e
 8002ed8:	d107      	bne.n	8002eea <ESPRxDecoder+0x306>
 8002eda:	4b7e      	ldr	r3, [pc, #504]	; (80030d4 <ESPRxDecoder+0x4f0>)
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d103      	bne.n	8002eea <ESPRxDecoder+0x306>
			 {
			 	Err_bufferptr=1;
 8002ee2:	4b7c      	ldr	r3, [pc, #496]	; (80030d4 <ESPRxDecoder+0x4f0>)
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	701a      	strb	r2, [r3, #0]
 8002ee8:	e040      	b.n	8002f6c <ESPRxDecoder+0x388>
			 }
			 else if((Rxwifi_data=='o')&&(Err_bufferptr==1))
 8002eea:	79fb      	ldrb	r3, [r7, #7]
 8002eec:	2b6f      	cmp	r3, #111	; 0x6f
 8002eee:	d107      	bne.n	8002f00 <ESPRxDecoder+0x31c>
 8002ef0:	4b78      	ldr	r3, [pc, #480]	; (80030d4 <ESPRxDecoder+0x4f0>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d103      	bne.n	8002f00 <ESPRxDecoder+0x31c>
			 {
			 	Err_bufferptr=2;
 8002ef8:	4b76      	ldr	r3, [pc, #472]	; (80030d4 <ESPRxDecoder+0x4f0>)
 8002efa:	2202      	movs	r2, #2
 8002efc:	701a      	strb	r2, [r3, #0]
 8002efe:	e035      	b.n	8002f6c <ESPRxDecoder+0x388>
			 }
			 else if((Rxwifi_data=='A')&&(Err_bufferptr==2))
 8002f00:	79fb      	ldrb	r3, [r7, #7]
 8002f02:	2b41      	cmp	r3, #65	; 0x41
 8002f04:	d107      	bne.n	8002f16 <ESPRxDecoder+0x332>
 8002f06:	4b73      	ldr	r3, [pc, #460]	; (80030d4 <ESPRxDecoder+0x4f0>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d103      	bne.n	8002f16 <ESPRxDecoder+0x332>
			 {
			 	Err_bufferptr=3;
 8002f0e:	4b71      	ldr	r3, [pc, #452]	; (80030d4 <ESPRxDecoder+0x4f0>)
 8002f10:	2203      	movs	r2, #3
 8002f12:	701a      	strb	r2, [r3, #0]
 8002f14:	e02a      	b.n	8002f6c <ESPRxDecoder+0x388>
			 }
			 else if((Rxwifi_data=='P')&&(Err_bufferptr==3))
 8002f16:	79fb      	ldrb	r3, [r7, #7]
 8002f18:	2b50      	cmp	r3, #80	; 0x50
 8002f1a:	f040 86f3 	bne.w	8003d04 <ESPRxDecoder+0x1120>
 8002f1e:	4b6d      	ldr	r3, [pc, #436]	; (80030d4 <ESPRxDecoder+0x4f0>)
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	2b03      	cmp	r3, #3
 8002f24:	f040 86ee 	bne.w	8003d04 <ESPRxDecoder+0x1120>
			 {
			 	Err_bufferptr=0;
 8002f28:	4b6a      	ldr	r3, [pc, #424]	; (80030d4 <ESPRxDecoder+0x4f0>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	701a      	strb	r2, [r3, #0]
				bufferptr=0;
 8002f2e:	4b68      	ldr	r3, [pc, #416]	; (80030d0 <ESPRxDecoder+0x4ec>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8002f34:	2300      	movs	r3, #0
 8002f36:	71bb      	strb	r3, [r7, #6]
				WifiDisplay = 3;
 8002f38:	4b69      	ldr	r3, [pc, #420]	; (80030e0 <ESPRxDecoder+0x4fc>)
 8002f3a:	2203      	movs	r2, #3
 8002f3c:	701a      	strb	r2, [r3, #0]
				if(++Error_Retry<3)		//retry for error
 8002f3e:	4b67      	ldr	r3, [pc, #412]	; (80030dc <ESPRxDecoder+0x4f8>)
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	3301      	adds	r3, #1
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	4b65      	ldr	r3, [pc, #404]	; (80030dc <ESPRxDecoder+0x4f8>)
 8002f48:	701a      	strb	r2, [r3, #0]
 8002f4a:	4b64      	ldr	r3, [pc, #400]	; (80030dc <ESPRxDecoder+0x4f8>)
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d804      	bhi.n	8002f5c <ESPRxDecoder+0x378>
				{
				   wifi_command=50;
 8002f52:	4b61      	ldr	r3, [pc, #388]	; (80030d8 <ESPRxDecoder+0x4f4>)
 8002f54:	2232      	movs	r2, #50	; 0x32
 8002f56:	701a      	strb	r2, [r3, #0]
				{
				   wifi_command=10;
				   Error_Retry=0;
				}
			 }
		break;
 8002f58:	f000 bed4 	b.w	8003d04 <ESPRxDecoder+0x1120>
				   wifi_command=10;
 8002f5c:	4b5e      	ldr	r3, [pc, #376]	; (80030d8 <ESPRxDecoder+0x4f4>)
 8002f5e:	220a      	movs	r2, #10
 8002f60:	701a      	strb	r2, [r3, #0]
				   Error_Retry=0;
 8002f62:	4b5e      	ldr	r3, [pc, #376]	; (80030dc <ESPRxDecoder+0x4f8>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	701a      	strb	r2, [r3, #0]
		break;
 8002f68:	f000 becc 	b.w	8003d04 <ESPRxDecoder+0x1120>
 8002f6c:	f000 beca 	b.w	8003d04 <ESPRxDecoder+0x1120>
		case 4:	   //retry need to be added
			 if((Rxwifi_data=='O')&&(bufferptr==0))
 8002f70:	79fb      	ldrb	r3, [r7, #7]
 8002f72:	2b4f      	cmp	r3, #79	; 0x4f
 8002f74:	d108      	bne.n	8002f88 <ESPRxDecoder+0x3a4>
 8002f76:	4b56      	ldr	r3, [pc, #344]	; (80030d0 <ESPRxDecoder+0x4ec>)
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d104      	bne.n	8002f88 <ESPRxDecoder+0x3a4>
			 {
			 	bufferptr=1;
 8002f7e:	4b54      	ldr	r3, [pc, #336]	; (80030d0 <ESPRxDecoder+0x4ec>)
 8002f80:	2201      	movs	r2, #1
 8002f82:	701a      	strb	r2, [r3, #0]
			 {
			 	bufferptr=0;
				Rxseqdecoder=0;
				wifi_command=80;
			 }
		break;
 8002f84:	f000 bec0 	b.w	8003d08 <ESPRxDecoder+0x1124>
			 else if((Rxwifi_data=='K')&&(bufferptr==1))
 8002f88:	79fb      	ldrb	r3, [r7, #7]
 8002f8a:	2b4b      	cmp	r3, #75	; 0x4b
 8002f8c:	f040 86bc 	bne.w	8003d08 <ESPRxDecoder+0x1124>
 8002f90:	4b4f      	ldr	r3, [pc, #316]	; (80030d0 <ESPRxDecoder+0x4ec>)
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	f040 86b7 	bne.w	8003d08 <ESPRxDecoder+0x1124>
			 	bufferptr=0;
 8002f9a:	4b4d      	ldr	r3, [pc, #308]	; (80030d0 <ESPRxDecoder+0x4ec>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	71bb      	strb	r3, [r7, #6]
				wifi_command=80;
 8002fa4:	4b4c      	ldr	r3, [pc, #304]	; (80030d8 <ESPRxDecoder+0x4f4>)
 8002fa6:	2250      	movs	r2, #80	; 0x50
 8002fa8:	701a      	strb	r2, [r3, #0]
		break;
 8002faa:	f000 bead 	b.w	8003d08 <ESPRxDecoder+0x1124>
		case 5:

			if((Rxwifi_data=='C')&&(bufferptr==0))
 8002fae:	79fb      	ldrb	r3, [r7, #7]
 8002fb0:	2b43      	cmp	r3, #67	; 0x43
 8002fb2:	d107      	bne.n	8002fc4 <ESPRxDecoder+0x3e0>
 8002fb4:	4b46      	ldr	r3, [pc, #280]	; (80030d0 <ESPRxDecoder+0x4ec>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d103      	bne.n	8002fc4 <ESPRxDecoder+0x3e0>
			 {
			 	bufferptr=1;
 8002fbc:	4b44      	ldr	r3, [pc, #272]	; (80030d0 <ESPRxDecoder+0x4ec>)
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	701a      	strb	r2, [r3, #0]
 8002fc2:	e04e      	b.n	8003062 <ESPRxDecoder+0x47e>
			 }
			 else if((Rxwifi_data=='O')&&(bufferptr==1))
 8002fc4:	79fb      	ldrb	r3, [r7, #7]
 8002fc6:	2b4f      	cmp	r3, #79	; 0x4f
 8002fc8:	d107      	bne.n	8002fda <ESPRxDecoder+0x3f6>
 8002fca:	4b41      	ldr	r3, [pc, #260]	; (80030d0 <ESPRxDecoder+0x4ec>)
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d103      	bne.n	8002fda <ESPRxDecoder+0x3f6>
			 {
			 	bufferptr=2;
 8002fd2:	4b3f      	ldr	r3, [pc, #252]	; (80030d0 <ESPRxDecoder+0x4ec>)
 8002fd4:	2202      	movs	r2, #2
 8002fd6:	701a      	strb	r2, [r3, #0]
 8002fd8:	e043      	b.n	8003062 <ESPRxDecoder+0x47e>
			 }
			 else if((Rxwifi_data=='N')&&(bufferptr==2))
 8002fda:	79fb      	ldrb	r3, [r7, #7]
 8002fdc:	2b4e      	cmp	r3, #78	; 0x4e
 8002fde:	d107      	bne.n	8002ff0 <ESPRxDecoder+0x40c>
 8002fe0:	4b3b      	ldr	r3, [pc, #236]	; (80030d0 <ESPRxDecoder+0x4ec>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d103      	bne.n	8002ff0 <ESPRxDecoder+0x40c>
			 {
			 	bufferptr=3;
 8002fe8:	4b39      	ldr	r3, [pc, #228]	; (80030d0 <ESPRxDecoder+0x4ec>)
 8002fea:	2203      	movs	r2, #3
 8002fec:	701a      	strb	r2, [r3, #0]
 8002fee:	e038      	b.n	8003062 <ESPRxDecoder+0x47e>
			 }
			 else if((Rxwifi_data=='N')&&(bufferptr==3))
 8002ff0:	79fb      	ldrb	r3, [r7, #7]
 8002ff2:	2b4e      	cmp	r3, #78	; 0x4e
 8002ff4:	d107      	bne.n	8003006 <ESPRxDecoder+0x422>
 8002ff6:	4b36      	ldr	r3, [pc, #216]	; (80030d0 <ESPRxDecoder+0x4ec>)
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	2b03      	cmp	r3, #3
 8002ffc:	d103      	bne.n	8003006 <ESPRxDecoder+0x422>
			 {
			 	bufferptr=4;
 8002ffe:	4b34      	ldr	r3, [pc, #208]	; (80030d0 <ESPRxDecoder+0x4ec>)
 8003000:	2204      	movs	r2, #4
 8003002:	701a      	strb	r2, [r3, #0]
 8003004:	e02d      	b.n	8003062 <ESPRxDecoder+0x47e>
			 }
			 else if((Rxwifi_data=='E')&&(bufferptr==4))
 8003006:	79fb      	ldrb	r3, [r7, #7]
 8003008:	2b45      	cmp	r3, #69	; 0x45
 800300a:	d107      	bne.n	800301c <ESPRxDecoder+0x438>
 800300c:	4b30      	ldr	r3, [pc, #192]	; (80030d0 <ESPRxDecoder+0x4ec>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	2b04      	cmp	r3, #4
 8003012:	d103      	bne.n	800301c <ESPRxDecoder+0x438>
			 {
			 	bufferptr=5;
 8003014:	4b2e      	ldr	r3, [pc, #184]	; (80030d0 <ESPRxDecoder+0x4ec>)
 8003016:	2205      	movs	r2, #5
 8003018:	701a      	strb	r2, [r3, #0]
 800301a:	e022      	b.n	8003062 <ESPRxDecoder+0x47e>
			 }
			 else if((Rxwifi_data=='C')&&(bufferptr==5))
 800301c:	79fb      	ldrb	r3, [r7, #7]
 800301e:	2b43      	cmp	r3, #67	; 0x43
 8003020:	d107      	bne.n	8003032 <ESPRxDecoder+0x44e>
 8003022:	4b2b      	ldr	r3, [pc, #172]	; (80030d0 <ESPRxDecoder+0x4ec>)
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	2b05      	cmp	r3, #5
 8003028:	d103      	bne.n	8003032 <ESPRxDecoder+0x44e>
			 {
			 	bufferptr=6;
 800302a:	4b29      	ldr	r3, [pc, #164]	; (80030d0 <ESPRxDecoder+0x4ec>)
 800302c:	2206      	movs	r2, #6
 800302e:	701a      	strb	r2, [r3, #0]
 8003030:	e017      	b.n	8003062 <ESPRxDecoder+0x47e>
			 }
			 else if((Rxwifi_data=='T')&&(bufferptr==6))
 8003032:	79fb      	ldrb	r3, [r7, #7]
 8003034:	2b54      	cmp	r3, #84	; 0x54
 8003036:	d114      	bne.n	8003062 <ESPRxDecoder+0x47e>
 8003038:	4b25      	ldr	r3, [pc, #148]	; (80030d0 <ESPRxDecoder+0x4ec>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	2b06      	cmp	r3, #6
 800303e:	d110      	bne.n	8003062 <ESPRxDecoder+0x47e>
			 {
			 	Rxseqdecoder=0;
 8003040:	2300      	movs	r3, #0
 8003042:	71bb      	strb	r3, [r7, #6]
				wifi_command=90;
 8003044:	4b24      	ldr	r3, [pc, #144]	; (80030d8 <ESPRxDecoder+0x4f4>)
 8003046:	225a      	movs	r2, #90	; 0x5a
 8003048:	701a      	strb	r2, [r3, #0]
				bufferptr=0;
 800304a:	4b21      	ldr	r3, [pc, #132]	; (80030d0 <ESPRxDecoder+0x4ec>)
 800304c:	2200      	movs	r2, #0
 800304e:	701a      	strb	r2, [r3, #0]
				Error_Retry=0;
 8003050:	4b22      	ldr	r3, [pc, #136]	; (80030dc <ESPRxDecoder+0x4f8>)
 8003052:	2200      	movs	r2, #0
 8003054:	701a      	strb	r2, [r3, #0]
				Err_bufferptr=0; //wifi connected
 8003056:	4b1f      	ldr	r3, [pc, #124]	; (80030d4 <ESPRxDecoder+0x4f0>)
 8003058:	2200      	movs	r2, #0
 800305a:	701a      	strb	r2, [r3, #0]
			   WifiDisplay = 2;
 800305c:	4b20      	ldr	r3, [pc, #128]	; (80030e0 <ESPRxDecoder+0x4fc>)
 800305e:	2202      	movs	r2, #2
 8003060:	701a      	strb	r2, [r3, #0]
			 }
			 	if((Rxwifi_data=='L')&&(bufferptr==0))	  //linked
 8003062:	79fb      	ldrb	r3, [r7, #7]
 8003064:	2b4c      	cmp	r3, #76	; 0x4c
 8003066:	d107      	bne.n	8003078 <ESPRxDecoder+0x494>
 8003068:	4b19      	ldr	r3, [pc, #100]	; (80030d0 <ESPRxDecoder+0x4ec>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d103      	bne.n	8003078 <ESPRxDecoder+0x494>
			 {
			 	bufferptr=1;
 8003070:	4b17      	ldr	r3, [pc, #92]	; (80030d0 <ESPRxDecoder+0x4ec>)
 8003072:	2201      	movs	r2, #1
 8003074:	701a      	strb	r2, [r3, #0]
 8003076:	e04a      	b.n	800310e <ESPRxDecoder+0x52a>
			 }
			 else if((Rxwifi_data=='i')&&(bufferptr==1))
 8003078:	79fb      	ldrb	r3, [r7, #7]
 800307a:	2b69      	cmp	r3, #105	; 0x69
 800307c:	d107      	bne.n	800308e <ESPRxDecoder+0x4aa>
 800307e:	4b14      	ldr	r3, [pc, #80]	; (80030d0 <ESPRxDecoder+0x4ec>)
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d103      	bne.n	800308e <ESPRxDecoder+0x4aa>
			 {
			 	bufferptr=2;
 8003086:	4b12      	ldr	r3, [pc, #72]	; (80030d0 <ESPRxDecoder+0x4ec>)
 8003088:	2202      	movs	r2, #2
 800308a:	701a      	strb	r2, [r3, #0]
 800308c:	e03f      	b.n	800310e <ESPRxDecoder+0x52a>
			 }
			 else if((Rxwifi_data=='n')&&(bufferptr==2))
 800308e:	79fb      	ldrb	r3, [r7, #7]
 8003090:	2b6e      	cmp	r3, #110	; 0x6e
 8003092:	d107      	bne.n	80030a4 <ESPRxDecoder+0x4c0>
 8003094:	4b0e      	ldr	r3, [pc, #56]	; (80030d0 <ESPRxDecoder+0x4ec>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2b02      	cmp	r3, #2
 800309a:	d103      	bne.n	80030a4 <ESPRxDecoder+0x4c0>
			 {
			 	bufferptr=3;
 800309c:	4b0c      	ldr	r3, [pc, #48]	; (80030d0 <ESPRxDecoder+0x4ec>)
 800309e:	2203      	movs	r2, #3
 80030a0:	701a      	strb	r2, [r3, #0]
 80030a2:	e034      	b.n	800310e <ESPRxDecoder+0x52a>
			 }
			 else if((Rxwifi_data=='k')&&(bufferptr==3))
 80030a4:	79fb      	ldrb	r3, [r7, #7]
 80030a6:	2b6b      	cmp	r3, #107	; 0x6b
 80030a8:	d107      	bne.n	80030ba <ESPRxDecoder+0x4d6>
 80030aa:	4b09      	ldr	r3, [pc, #36]	; (80030d0 <ESPRxDecoder+0x4ec>)
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	2b03      	cmp	r3, #3
 80030b0:	d103      	bne.n	80030ba <ESPRxDecoder+0x4d6>
			 {
			 	bufferptr=4;
 80030b2:	4b07      	ldr	r3, [pc, #28]	; (80030d0 <ESPRxDecoder+0x4ec>)
 80030b4:	2204      	movs	r2, #4
 80030b6:	701a      	strb	r2, [r3, #0]
 80030b8:	e029      	b.n	800310e <ESPRxDecoder+0x52a>
			 }
			 else if((Rxwifi_data=='e')&&(bufferptr==4))
 80030ba:	79fb      	ldrb	r3, [r7, #7]
 80030bc:	2b65      	cmp	r3, #101	; 0x65
 80030be:	d111      	bne.n	80030e4 <ESPRxDecoder+0x500>
 80030c0:	4b03      	ldr	r3, [pc, #12]	; (80030d0 <ESPRxDecoder+0x4ec>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d10d      	bne.n	80030e4 <ESPRxDecoder+0x500>
			 {
			 	bufferptr=5;
 80030c8:	4b01      	ldr	r3, [pc, #4]	; (80030d0 <ESPRxDecoder+0x4ec>)
 80030ca:	2205      	movs	r2, #5
 80030cc:	701a      	strb	r2, [r3, #0]
 80030ce:	e01e      	b.n	800310e <ESPRxDecoder+0x52a>
 80030d0:	20000254 	.word	0x20000254
 80030d4:	200002ab 	.word	0x200002ab
 80030d8:	2000008d 	.word	0x2000008d
 80030dc:	200002b0 	.word	0x200002b0
 80030e0:	200002ac 	.word	0x200002ac
			 }
			 else if((Rxwifi_data=='d')&&(bufferptr==5))
 80030e4:	79fb      	ldrb	r3, [r7, #7]
 80030e6:	2b64      	cmp	r3, #100	; 0x64
 80030e8:	d111      	bne.n	800310e <ESPRxDecoder+0x52a>
 80030ea:	4ba0      	ldr	r3, [pc, #640]	; (800336c <ESPRxDecoder+0x788>)
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	2b05      	cmp	r3, #5
 80030f0:	d10d      	bne.n	800310e <ESPRxDecoder+0x52a>
			 {
			 	Rxseqdecoder=0;
 80030f2:	2300      	movs	r3, #0
 80030f4:	71bb      	strb	r3, [r7, #6]
				wifi_command=90;
 80030f6:	4b9e      	ldr	r3, [pc, #632]	; (8003370 <ESPRxDecoder+0x78c>)
 80030f8:	225a      	movs	r2, #90	; 0x5a
 80030fa:	701a      	strb	r2, [r3, #0]
				bufferptr=0;
 80030fc:	4b9b      	ldr	r3, [pc, #620]	; (800336c <ESPRxDecoder+0x788>)
 80030fe:	2200      	movs	r2, #0
 8003100:	701a      	strb	r2, [r3, #0]
				Error_Retry=0;
 8003102:	4b9c      	ldr	r3, [pc, #624]	; (8003374 <ESPRxDecoder+0x790>)
 8003104:	2200      	movs	r2, #0
 8003106:	701a      	strb	r2, [r3, #0]
				Err_bufferptr=0;
 8003108:	4b9b      	ldr	r3, [pc, #620]	; (8003378 <ESPRxDecoder+0x794>)
 800310a:	2200      	movs	r2, #0
 800310c:	701a      	strb	r2, [r3, #0]
			 }
			 if((Rxwifi_data=='E')&&(Err_bufferptr==0))
 800310e:	79fb      	ldrb	r3, [r7, #7]
 8003110:	2b45      	cmp	r3, #69	; 0x45
 8003112:	d107      	bne.n	8003124 <ESPRxDecoder+0x540>
 8003114:	4b98      	ldr	r3, [pc, #608]	; (8003378 <ESPRxDecoder+0x794>)
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d103      	bne.n	8003124 <ESPRxDecoder+0x540>
			 {
			 	Err_bufferptr=1;
 800311c:	4b96      	ldr	r3, [pc, #600]	; (8003378 <ESPRxDecoder+0x794>)
 800311e:	2201      	movs	r2, #1
 8003120:	701a      	strb	r2, [r3, #0]
 8003122:	e04b      	b.n	80031bc <ESPRxDecoder+0x5d8>
			 }
			 else if((Rxwifi_data=='R')&&(Err_bufferptr==1))
 8003124:	79fb      	ldrb	r3, [r7, #7]
 8003126:	2b52      	cmp	r3, #82	; 0x52
 8003128:	d107      	bne.n	800313a <ESPRxDecoder+0x556>
 800312a:	4b93      	ldr	r3, [pc, #588]	; (8003378 <ESPRxDecoder+0x794>)
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d103      	bne.n	800313a <ESPRxDecoder+0x556>
			 {
			 	Err_bufferptr=2;
 8003132:	4b91      	ldr	r3, [pc, #580]	; (8003378 <ESPRxDecoder+0x794>)
 8003134:	2202      	movs	r2, #2
 8003136:	701a      	strb	r2, [r3, #0]
 8003138:	e040      	b.n	80031bc <ESPRxDecoder+0x5d8>
			 }
			 else if((Rxwifi_data=='R')&&(Err_bufferptr==2))
 800313a:	79fb      	ldrb	r3, [r7, #7]
 800313c:	2b52      	cmp	r3, #82	; 0x52
 800313e:	d107      	bne.n	8003150 <ESPRxDecoder+0x56c>
 8003140:	4b8d      	ldr	r3, [pc, #564]	; (8003378 <ESPRxDecoder+0x794>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b02      	cmp	r3, #2
 8003146:	d103      	bne.n	8003150 <ESPRxDecoder+0x56c>
			 {
			 	Err_bufferptr=3;
 8003148:	4b8b      	ldr	r3, [pc, #556]	; (8003378 <ESPRxDecoder+0x794>)
 800314a:	2203      	movs	r2, #3
 800314c:	701a      	strb	r2, [r3, #0]
 800314e:	e035      	b.n	80031bc <ESPRxDecoder+0x5d8>
			 }
			 else if((Rxwifi_data=='O')&&(Err_bufferptr==3))
 8003150:	79fb      	ldrb	r3, [r7, #7]
 8003152:	2b4f      	cmp	r3, #79	; 0x4f
 8003154:	d107      	bne.n	8003166 <ESPRxDecoder+0x582>
 8003156:	4b88      	ldr	r3, [pc, #544]	; (8003378 <ESPRxDecoder+0x794>)
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	2b03      	cmp	r3, #3
 800315c:	d103      	bne.n	8003166 <ESPRxDecoder+0x582>
			 {
			 	Err_bufferptr=4;
 800315e:	4b86      	ldr	r3, [pc, #536]	; (8003378 <ESPRxDecoder+0x794>)
 8003160:	2204      	movs	r2, #4
 8003162:	701a      	strb	r2, [r3, #0]
 8003164:	e02a      	b.n	80031bc <ESPRxDecoder+0x5d8>
			 }
			 else if((Rxwifi_data=='R')&&(Err_bufferptr==4))
 8003166:	79fb      	ldrb	r3, [r7, #7]
 8003168:	2b52      	cmp	r3, #82	; 0x52
 800316a:	f040 85cf 	bne.w	8003d0c <ESPRxDecoder+0x1128>
 800316e:	4b82      	ldr	r3, [pc, #520]	; (8003378 <ESPRxDecoder+0x794>)
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b04      	cmp	r3, #4
 8003174:	f040 85ca 	bne.w	8003d0c <ESPRxDecoder+0x1128>
			 {
			   	Err_bufferptr=0;
 8003178:	4b7f      	ldr	r3, [pc, #508]	; (8003378 <ESPRxDecoder+0x794>)
 800317a:	2200      	movs	r2, #0
 800317c:	701a      	strb	r2, [r3, #0]
				bufferptr=0;
 800317e:	4b7b      	ldr	r3, [pc, #492]	; (800336c <ESPRxDecoder+0x788>)
 8003180:	2200      	movs	r2, #0
 8003182:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8003184:	2300      	movs	r3, #0
 8003186:	71bb      	strb	r3, [r7, #6]
				WifiDisplay = 4;
 8003188:	4b7c      	ldr	r3, [pc, #496]	; (800337c <ESPRxDecoder+0x798>)
 800318a:	2204      	movs	r2, #4
 800318c:	701a      	strb	r2, [r3, #0]
				if(++Error_Retry<3)		//retry for error
 800318e:	4b79      	ldr	r3, [pc, #484]	; (8003374 <ESPRxDecoder+0x790>)
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	3301      	adds	r3, #1
 8003194:	b2da      	uxtb	r2, r3
 8003196:	4b77      	ldr	r3, [pc, #476]	; (8003374 <ESPRxDecoder+0x790>)
 8003198:	701a      	strb	r2, [r3, #0]
 800319a:	4b76      	ldr	r3, [pc, #472]	; (8003374 <ESPRxDecoder+0x790>)
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d804      	bhi.n	80031ac <ESPRxDecoder+0x5c8>
				{
				   wifi_command=80;
 80031a2:	4b73      	ldr	r3, [pc, #460]	; (8003370 <ESPRxDecoder+0x78c>)
 80031a4:	2250      	movs	r2, #80	; 0x50
 80031a6:	701a      	strb	r2, [r3, #0]
				{
				   wifi_command=50;	 // modified by satheesh
				   Error_Retry=0;
				}
			 }
		break;
 80031a8:	f000 bdb0 	b.w	8003d0c <ESPRxDecoder+0x1128>
				   wifi_command=50;	 // modified by satheesh
 80031ac:	4b70      	ldr	r3, [pc, #448]	; (8003370 <ESPRxDecoder+0x78c>)
 80031ae:	2232      	movs	r2, #50	; 0x32
 80031b0:	701a      	strb	r2, [r3, #0]
				   Error_Retry=0;
 80031b2:	4b70      	ldr	r3, [pc, #448]	; (8003374 <ESPRxDecoder+0x790>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	701a      	strb	r2, [r3, #0]
		break;
 80031b8:	f000 bda8 	b.w	8003d0c <ESPRxDecoder+0x1128>
 80031bc:	f000 bda6 	b.w	8003d0c <ESPRxDecoder+0x1128>
		case 6:
			 if((Rxwifi_data=='>')&&(bufferptr==0))
 80031c0:	79fb      	ldrb	r3, [r7, #7]
 80031c2:	2b3e      	cmp	r3, #62	; 0x3e
 80031c4:	f040 85a4 	bne.w	8003d10 <ESPRxDecoder+0x112c>
 80031c8:	4b68      	ldr	r3, [pc, #416]	; (800336c <ESPRxDecoder+0x788>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f040 859f 	bne.w	8003d10 <ESPRxDecoder+0x112c>
			 {
			 	bufferptr=0;
 80031d2:	4b66      	ldr	r3, [pc, #408]	; (800336c <ESPRxDecoder+0x788>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 80031d8:	2300      	movs	r3, #0
 80031da:	71bb      	strb	r3, [r7, #6]
				wifi_command=100;
 80031dc:	4b64      	ldr	r3, [pc, #400]	; (8003370 <ESPRxDecoder+0x78c>)
 80031de:	2264      	movs	r2, #100	; 0x64
 80031e0:	701a      	strb	r2, [r3, #0]
			 }
		break;
 80031e2:	f000 bd95 	b.w	8003d10 <ESPRxDecoder+0x112c>
		case 7:
			checkbuff[refinc]= Rxwifi_data;
 80031e6:	4b66      	ldr	r3, [pc, #408]	; (8003380 <ESPRxDecoder+0x79c>)
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	4619      	mov	r1, r3
 80031ec:	4a65      	ldr	r2, [pc, #404]	; (8003384 <ESPRxDecoder+0x7a0>)
 80031ee:	79fb      	ldrb	r3, [r7, #7]
 80031f0:	5453      	strb	r3, [r2, r1]
			refinc++;
 80031f2:	4b63      	ldr	r3, [pc, #396]	; (8003380 <ESPRxDecoder+0x79c>)
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	3301      	adds	r3, #1
 80031f8:	b2da      	uxtb	r2, r3
 80031fa:	4b61      	ldr	r3, [pc, #388]	; (8003380 <ESPRxDecoder+0x79c>)
 80031fc:	701a      	strb	r2, [r3, #0]
			  if((Rxwifi_data=='$')&&(Data_bufferptr==0))
 80031fe:	79fb      	ldrb	r3, [r7, #7]
 8003200:	2b24      	cmp	r3, #36	; 0x24
 8003202:	d10a      	bne.n	800321a <ESPRxDecoder+0x636>
 8003204:	4b60      	ldr	r3, [pc, #384]	; (8003388 <ESPRxDecoder+0x7a4>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d106      	bne.n	800321a <ESPRxDecoder+0x636>
 				{
                     Data_bufferptr=1;
 800320c:	4b5e      	ldr	r3, [pc, #376]	; (8003388 <ESPRxDecoder+0x7a4>)
 800320e:	2201      	movs	r2, #1
 8003210:	701a      	strb	r2, [r3, #0]
                     Valid_DataWifi1= 1;
 8003212:	4b5e      	ldr	r3, [pc, #376]	; (800338c <ESPRxDecoder+0x7a8>)
 8003214:	2201      	movs	r2, #1
 8003216:	701a      	strb	r2, [r3, #0]
 8003218:	e3f0      	b.n	80039fc <ESPRxDecoder+0xe18>
 				}
			 	else if(Data_bufferptr==1)
 800321a:	4b5b      	ldr	r3, [pc, #364]	; (8003388 <ESPRxDecoder+0x7a4>)
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d10b      	bne.n	800323a <ESPRxDecoder+0x656>
				 {
                    Uart_rx_buffer[0] = DecToASCIIFun(Rxwifi_data);
 8003222:	79fb      	ldrb	r3, [r7, #7]
 8003224:	4618      	mov	r0, r3
 8003226:	f000 fd87 	bl	8003d38 <DecToASCIIFun>
 800322a:	4603      	mov	r3, r0
 800322c:	461a      	mov	r2, r3
 800322e:	4b58      	ldr	r3, [pc, #352]	; (8003390 <ESPRxDecoder+0x7ac>)
 8003230:	701a      	strb	r2, [r3, #0]
					Data_bufferptr=2;
 8003232:	4b55      	ldr	r3, [pc, #340]	; (8003388 <ESPRxDecoder+0x7a4>)
 8003234:	2202      	movs	r2, #2
 8003236:	701a      	strb	r2, [r3, #0]
 8003238:	e3e0      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==2)
 800323a:	4b53      	ldr	r3, [pc, #332]	; (8003388 <ESPRxDecoder+0x7a4>)
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	2b02      	cmp	r3, #2
 8003240:	d10b      	bne.n	800325a <ESPRxDecoder+0x676>
				{
				     Uart_rx_buffer[1] = DecToASCIIFun(Rxwifi_data);
 8003242:	79fb      	ldrb	r3, [r7, #7]
 8003244:	4618      	mov	r0, r3
 8003246:	f000 fd77 	bl	8003d38 <DecToASCIIFun>
 800324a:	4603      	mov	r3, r0
 800324c:	461a      	mov	r2, r3
 800324e:	4b50      	ldr	r3, [pc, #320]	; (8003390 <ESPRxDecoder+0x7ac>)
 8003250:	705a      	strb	r2, [r3, #1]
				     Data_bufferptr=3;
 8003252:	4b4d      	ldr	r3, [pc, #308]	; (8003388 <ESPRxDecoder+0x7a4>)
 8003254:	2203      	movs	r2, #3
 8003256:	701a      	strb	r2, [r3, #0]
 8003258:	e3d0      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==3)//,
 800325a:	4b4b      	ldr	r3, [pc, #300]	; (8003388 <ESPRxDecoder+0x7a4>)
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	2b03      	cmp	r3, #3
 8003260:	d103      	bne.n	800326a <ESPRxDecoder+0x686>
				{
				     Data_bufferptr=4;
 8003262:	4b49      	ldr	r3, [pc, #292]	; (8003388 <ESPRxDecoder+0x7a4>)
 8003264:	2204      	movs	r2, #4
 8003266:	701a      	strb	r2, [r3, #0]
 8003268:	e3c8      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==4)
 800326a:	4b47      	ldr	r3, [pc, #284]	; (8003388 <ESPRxDecoder+0x7a4>)
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	2b04      	cmp	r3, #4
 8003270:	d10b      	bne.n	800328a <ESPRxDecoder+0x6a6>
				{
				     Uart_rx_buffer[2] = DecToASCIIFun(Rxwifi_data);		//F1
 8003272:	79fb      	ldrb	r3, [r7, #7]
 8003274:	4618      	mov	r0, r3
 8003276:	f000 fd5f 	bl	8003d38 <DecToASCIIFun>
 800327a:	4603      	mov	r3, r0
 800327c:	461a      	mov	r2, r3
 800327e:	4b44      	ldr	r3, [pc, #272]	; (8003390 <ESPRxDecoder+0x7ac>)
 8003280:	709a      	strb	r2, [r3, #2]
				     Data_bufferptr=5;
 8003282:	4b41      	ldr	r3, [pc, #260]	; (8003388 <ESPRxDecoder+0x7a4>)
 8003284:	2205      	movs	r2, #5
 8003286:	701a      	strb	r2, [r3, #0]
 8003288:	e3b8      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==5)
 800328a:	4b3f      	ldr	r3, [pc, #252]	; (8003388 <ESPRxDecoder+0x7a4>)
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	2b05      	cmp	r3, #5
 8003290:	d10b      	bne.n	80032aa <ESPRxDecoder+0x6c6>
				{
					Uart_rx_buffer[3] = DecToASCIIFun(Rxwifi_data);
 8003292:	79fb      	ldrb	r3, [r7, #7]
 8003294:	4618      	mov	r0, r3
 8003296:	f000 fd4f 	bl	8003d38 <DecToASCIIFun>
 800329a:	4603      	mov	r3, r0
 800329c:	461a      	mov	r2, r3
 800329e:	4b3c      	ldr	r3, [pc, #240]	; (8003390 <ESPRxDecoder+0x7ac>)
 80032a0:	70da      	strb	r2, [r3, #3]
					Data_bufferptr=6;
 80032a2:	4b39      	ldr	r3, [pc, #228]	; (8003388 <ESPRxDecoder+0x7a4>)
 80032a4:	2206      	movs	r2, #6
 80032a6:	701a      	strb	r2, [r3, #0]
 80032a8:	e3a8      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==6)   //:
 80032aa:	4b37      	ldr	r3, [pc, #220]	; (8003388 <ESPRxDecoder+0x7a4>)
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	2b06      	cmp	r3, #6
 80032b0:	d103      	bne.n	80032ba <ESPRxDecoder+0x6d6>
				{
					Data_bufferptr=7;
 80032b2:	4b35      	ldr	r3, [pc, #212]	; (8003388 <ESPRxDecoder+0x7a4>)
 80032b4:	2207      	movs	r2, #7
 80032b6:	701a      	strb	r2, [r3, #0]
 80032b8:	e3a0      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==7)   //No of data
 80032ba:	4b33      	ldr	r3, [pc, #204]	; (8003388 <ESPRxDecoder+0x7a4>)
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	2b07      	cmp	r3, #7
 80032c0:	d10b      	bne.n	80032da <ESPRxDecoder+0x6f6>
				{
				     Uart_rx_buffer[4] = DecToASCIIFun(Rxwifi_data);
 80032c2:	79fb      	ldrb	r3, [r7, #7]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f000 fd37 	bl	8003d38 <DecToASCIIFun>
 80032ca:	4603      	mov	r3, r0
 80032cc:	461a      	mov	r2, r3
 80032ce:	4b30      	ldr	r3, [pc, #192]	; (8003390 <ESPRxDecoder+0x7ac>)
 80032d0:	711a      	strb	r2, [r3, #4]
				     Data_bufferptr=8;
 80032d2:	4b2d      	ldr	r3, [pc, #180]	; (8003388 <ESPRxDecoder+0x7a4>)
 80032d4:	2208      	movs	r2, #8
 80032d6:	701a      	strb	r2, [r3, #0]
 80032d8:	e390      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==8)
 80032da:	4b2b      	ldr	r3, [pc, #172]	; (8003388 <ESPRxDecoder+0x7a4>)
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	2b08      	cmp	r3, #8
 80032e0:	d10b      	bne.n	80032fa <ESPRxDecoder+0x716>
				{
				     Uart_rx_buffer[5] = DecToASCIIFun(Rxwifi_data);
 80032e2:	79fb      	ldrb	r3, [r7, #7]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f000 fd27 	bl	8003d38 <DecToASCIIFun>
 80032ea:	4603      	mov	r3, r0
 80032ec:	461a      	mov	r2, r3
 80032ee:	4b28      	ldr	r3, [pc, #160]	; (8003390 <ESPRxDecoder+0x7ac>)
 80032f0:	715a      	strb	r2, [r3, #5]
				     Data_bufferptr=9;
 80032f2:	4b25      	ldr	r3, [pc, #148]	; (8003388 <ESPRxDecoder+0x7a4>)
 80032f4:	2209      	movs	r2, #9
 80032f6:	701a      	strb	r2, [r3, #0]
 80032f8:	e380      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==9)
 80032fa:	4b23      	ldr	r3, [pc, #140]	; (8003388 <ESPRxDecoder+0x7a4>)
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	2b09      	cmp	r3, #9
 8003300:	d10b      	bne.n	800331a <ESPRxDecoder+0x736>
				{
				     Uart_rx_buffer[6] = DecToASCIIFun(Rxwifi_data);
 8003302:	79fb      	ldrb	r3, [r7, #7]
 8003304:	4618      	mov	r0, r3
 8003306:	f000 fd17 	bl	8003d38 <DecToASCIIFun>
 800330a:	4603      	mov	r3, r0
 800330c:	461a      	mov	r2, r3
 800330e:	4b20      	ldr	r3, [pc, #128]	; (8003390 <ESPRxDecoder+0x7ac>)
 8003310:	719a      	strb	r2, [r3, #6]
				     Data_bufferptr=10;
 8003312:	4b1d      	ldr	r3, [pc, #116]	; (8003388 <ESPRxDecoder+0x7a4>)
 8003314:	220a      	movs	r2, #10
 8003316:	701a      	strb	r2, [r3, #0]
 8003318:	e370      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==10)
 800331a:	4b1b      	ldr	r3, [pc, #108]	; (8003388 <ESPRxDecoder+0x7a4>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2b0a      	cmp	r3, #10
 8003320:	d10b      	bne.n	800333a <ESPRxDecoder+0x756>
				{
				     Data_bufferptr=11;
 8003322:	4b19      	ldr	r3, [pc, #100]	; (8003388 <ESPRxDecoder+0x7a4>)
 8003324:	220b      	movs	r2, #11
 8003326:	701a      	strb	r2, [r3, #0]
				     Uart_rx_buffer[7] = DecToASCIIFun(Rxwifi_data);
 8003328:	79fb      	ldrb	r3, [r7, #7]
 800332a:	4618      	mov	r0, r3
 800332c:	f000 fd04 	bl	8003d38 <DecToASCIIFun>
 8003330:	4603      	mov	r3, r0
 8003332:	461a      	mov	r2, r3
 8003334:	4b16      	ldr	r3, [pc, #88]	; (8003390 <ESPRxDecoder+0x7ac>)
 8003336:	71da      	strb	r2, [r3, #7]
 8003338:	e360      	b.n	80039fc <ESPRxDecoder+0xe18>
				}

				else if(Data_bufferptr==11)       //:
 800333a:	4b13      	ldr	r3, [pc, #76]	; (8003388 <ESPRxDecoder+0x7a4>)
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	2b0b      	cmp	r3, #11
 8003340:	d103      	bne.n	800334a <ESPRxDecoder+0x766>
				 {
					Data_bufferptr=12;
 8003342:	4b11      	ldr	r3, [pc, #68]	; (8003388 <ESPRxDecoder+0x7a4>)
 8003344:	220c      	movs	r2, #12
 8003346:	701a      	strb	r2, [r3, #0]
 8003348:	e358      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==12)  //Starting address
 800334a:	4b0f      	ldr	r3, [pc, #60]	; (8003388 <ESPRxDecoder+0x7a4>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	2b0c      	cmp	r3, #12
 8003350:	d120      	bne.n	8003394 <ESPRxDecoder+0x7b0>
				{
				     Uart_rx_buffer[8] = DecToASCIIFun(Rxwifi_data);
 8003352:	79fb      	ldrb	r3, [r7, #7]
 8003354:	4618      	mov	r0, r3
 8003356:	f000 fcef 	bl	8003d38 <DecToASCIIFun>
 800335a:	4603      	mov	r3, r0
 800335c:	461a      	mov	r2, r3
 800335e:	4b0c      	ldr	r3, [pc, #48]	; (8003390 <ESPRxDecoder+0x7ac>)
 8003360:	721a      	strb	r2, [r3, #8]
				     Data_bufferptr=13;
 8003362:	4b09      	ldr	r3, [pc, #36]	; (8003388 <ESPRxDecoder+0x7a4>)
 8003364:	220d      	movs	r2, #13
 8003366:	701a      	strb	r2, [r3, #0]
 8003368:	e348      	b.n	80039fc <ESPRxDecoder+0xe18>
 800336a:	bf00      	nop
 800336c:	20000254 	.word	0x20000254
 8003370:	2000008d 	.word	0x2000008d
 8003374:	200002b0 	.word	0x200002b0
 8003378:	200002ab 	.word	0x200002ab
 800337c:	200002ac 	.word	0x200002ac
 8003380:	2000037c 	.word	0x2000037c
 8003384:	200002b4 	.word	0x200002b4
 8003388:	200002aa 	.word	0x200002aa
 800338c:	200002af 	.word	0x200002af
 8003390:	20000264 	.word	0x20000264
				}
				else if(Data_bufferptr==13)
 8003394:	4b9e      	ldr	r3, [pc, #632]	; (8003610 <ESPRxDecoder+0xa2c>)
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	2b0d      	cmp	r3, #13
 800339a:	d10b      	bne.n	80033b4 <ESPRxDecoder+0x7d0>
				{
				     Uart_rx_buffer[9] = DecToASCIIFun(Rxwifi_data);
 800339c:	79fb      	ldrb	r3, [r7, #7]
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 fcca 	bl	8003d38 <DecToASCIIFun>
 80033a4:	4603      	mov	r3, r0
 80033a6:	461a      	mov	r2, r3
 80033a8:	4b9a      	ldr	r3, [pc, #616]	; (8003614 <ESPRxDecoder+0xa30>)
 80033aa:	725a      	strb	r2, [r3, #9]
				     Data_bufferptr=14;
 80033ac:	4b98      	ldr	r3, [pc, #608]	; (8003610 <ESPRxDecoder+0xa2c>)
 80033ae:	220e      	movs	r2, #14
 80033b0:	701a      	strb	r2, [r3, #0]
 80033b2:	e323      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==14)
 80033b4:	4b96      	ldr	r3, [pc, #600]	; (8003610 <ESPRxDecoder+0xa2c>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2b0e      	cmp	r3, #14
 80033ba:	d10b      	bne.n	80033d4 <ESPRxDecoder+0x7f0>
				{
				     Uart_rx_buffer[10] = DecToASCIIFun(Rxwifi_data);
 80033bc:	79fb      	ldrb	r3, [r7, #7]
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 fcba 	bl	8003d38 <DecToASCIIFun>
 80033c4:	4603      	mov	r3, r0
 80033c6:	461a      	mov	r2, r3
 80033c8:	4b92      	ldr	r3, [pc, #584]	; (8003614 <ESPRxDecoder+0xa30>)
 80033ca:	729a      	strb	r2, [r3, #10]
				     Data_bufferptr=15;
 80033cc:	4b90      	ldr	r3, [pc, #576]	; (8003610 <ESPRxDecoder+0xa2c>)
 80033ce:	220f      	movs	r2, #15
 80033d0:	701a      	strb	r2, [r3, #0]
 80033d2:	e313      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==15)
 80033d4:	4b8e      	ldr	r3, [pc, #568]	; (8003610 <ESPRxDecoder+0xa2c>)
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	2b0f      	cmp	r3, #15
 80033da:	d10b      	bne.n	80033f4 <ESPRxDecoder+0x810>
				{
					Uart_rx_buffer[11] = DecToASCIIFun(Rxwifi_data);
 80033dc:	79fb      	ldrb	r3, [r7, #7]
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 fcaa 	bl	8003d38 <DecToASCIIFun>
 80033e4:	4603      	mov	r3, r0
 80033e6:	461a      	mov	r2, r3
 80033e8:	4b8a      	ldr	r3, [pc, #552]	; (8003614 <ESPRxDecoder+0xa30>)
 80033ea:	72da      	strb	r2, [r3, #11]
					Data_bufferptr=16;
 80033ec:	4b88      	ldr	r3, [pc, #544]	; (8003610 <ESPRxDecoder+0xa2c>)
 80033ee:	2210      	movs	r2, #16
 80033f0:	701a      	strb	r2, [r3, #0]
 80033f2:	e303      	b.n	80039fc <ESPRxDecoder+0xe18>
				}

				else if(Data_bufferptr==16)
 80033f4:	4b86      	ldr	r3, [pc, #536]	; (8003610 <ESPRxDecoder+0xa2c>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	2b10      	cmp	r3, #16
 80033fa:	d10b      	bne.n	8003414 <ESPRxDecoder+0x830>
				 {
                    Uart_rx_buffer[12] = DecToASCIIFun(Rxwifi_data);
 80033fc:	79fb      	ldrb	r3, [r7, #7]
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 fc9a 	bl	8003d38 <DecToASCIIFun>
 8003404:	4603      	mov	r3, r0
 8003406:	461a      	mov	r2, r3
 8003408:	4b82      	ldr	r3, [pc, #520]	; (8003614 <ESPRxDecoder+0xa30>)
 800340a:	731a      	strb	r2, [r3, #12]
					Data_bufferptr=17;
 800340c:	4b80      	ldr	r3, [pc, #512]	; (8003610 <ESPRxDecoder+0xa2c>)
 800340e:	2211      	movs	r2, #17
 8003410:	701a      	strb	r2, [r3, #0]
 8003412:	e2f3      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==17)//,
 8003414:	4b7e      	ldr	r3, [pc, #504]	; (8003610 <ESPRxDecoder+0xa2c>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	2b11      	cmp	r3, #17
 800341a:	d103      	bne.n	8003424 <ESPRxDecoder+0x840>
				{
				     Data_bufferptr=18;
 800341c:	4b7c      	ldr	r3, [pc, #496]	; (8003610 <ESPRxDecoder+0xa2c>)
 800341e:	2212      	movs	r2, #18
 8003420:	701a      	strb	r2, [r3, #0]
 8003422:	e2eb      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==18)//no of meter
 8003424:	4b7a      	ldr	r3, [pc, #488]	; (8003610 <ESPRxDecoder+0xa2c>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	2b12      	cmp	r3, #18
 800342a:	d10e      	bne.n	800344a <ESPRxDecoder+0x866>
				{
				     Uart_rx_buffer[13] = DecToASCIIFun(Rxwifi_data);
 800342c:	79fb      	ldrb	r3, [r7, #7]
 800342e:	4618      	mov	r0, r3
 8003430:	f000 fc82 	bl	8003d38 <DecToASCIIFun>
 8003434:	4603      	mov	r3, r0
 8003436:	461a      	mov	r2, r3
 8003438:	4b76      	ldr	r3, [pc, #472]	; (8003614 <ESPRxDecoder+0xa30>)
 800343a:	735a      	strb	r2, [r3, #13]
				     //Data_bufferptr=19;
				     Data_bufferptr=0;
 800343c:	4b74      	ldr	r3, [pc, #464]	; (8003610 <ESPRxDecoder+0xa2c>)
 800343e:	2200      	movs	r2, #0
 8003440:	701a      	strb	r2, [r3, #0]
				     RxCompleteU2C1WIFI=1;
 8003442:	4b75      	ldr	r3, [pc, #468]	; (8003618 <ESPRxDecoder+0xa34>)
 8003444:	2201      	movs	r2, #1
 8003446:	701a      	strb	r2, [r3, #0]
 8003448:	e2d8      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==19)
 800344a:	4b71      	ldr	r3, [pc, #452]	; (8003610 <ESPRxDecoder+0xa2c>)
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	2b13      	cmp	r3, #19
 8003450:	d10b      	bne.n	800346a <ESPRxDecoder+0x886>
				{
				     Uart_rx_buffer[14] = DecToASCIIFun(Rxwifi_data);
 8003452:	79fb      	ldrb	r3, [r7, #7]
 8003454:	4618      	mov	r0, r3
 8003456:	f000 fc6f 	bl	8003d38 <DecToASCIIFun>
 800345a:	4603      	mov	r3, r0
 800345c:	461a      	mov	r2, r3
 800345e:	4b6d      	ldr	r3, [pc, #436]	; (8003614 <ESPRxDecoder+0xa30>)
 8003460:	739a      	strb	r2, [r3, #14]
				     Data_bufferptr=20;
 8003462:	4b6b      	ldr	r3, [pc, #428]	; (8003610 <ESPRxDecoder+0xa2c>)
 8003464:	2214      	movs	r2, #20
 8003466:	701a      	strb	r2, [r3, #0]
 8003468:	e2c8      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==20)//#(end of data)
 800346a:	4b69      	ldr	r3, [pc, #420]	; (8003610 <ESPRxDecoder+0xa2c>)
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	2b14      	cmp	r3, #20
 8003470:	d106      	bne.n	8003480 <ESPRxDecoder+0x89c>
				{
				     //Data_bufferptr=21;
				     Data_bufferptr=0;
 8003472:	4b67      	ldr	r3, [pc, #412]	; (8003610 <ESPRxDecoder+0xa2c>)
 8003474:	2200      	movs	r2, #0
 8003476:	701a      	strb	r2, [r3, #0]
				     RxCompleteU2C1WIFI=1;
 8003478:	4b67      	ldr	r3, [pc, #412]	; (8003618 <ESPRxDecoder+0xa34>)
 800347a:	2201      	movs	r2, #1
 800347c:	701a      	strb	r2, [r3, #0]
 800347e:	e2bd      	b.n	80039fc <ESPRxDecoder+0xe18>
				}

				else if(Data_bufferptr==21)       	//system Hr
 8003480:	4b63      	ldr	r3, [pc, #396]	; (8003610 <ESPRxDecoder+0xa2c>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	2b15      	cmp	r3, #21
 8003486:	d10b      	bne.n	80034a0 <ESPRxDecoder+0x8bc>
				 {
                    Uart_rx_buffer[16] = DecToASCIIFun(Rxwifi_data);
 8003488:	79fb      	ldrb	r3, [r7, #7]
 800348a:	4618      	mov	r0, r3
 800348c:	f000 fc54 	bl	8003d38 <DecToASCIIFun>
 8003490:	4603      	mov	r3, r0
 8003492:	461a      	mov	r2, r3
 8003494:	4b5f      	ldr	r3, [pc, #380]	; (8003614 <ESPRxDecoder+0xa30>)
 8003496:	741a      	strb	r2, [r3, #16]
					Data_bufferptr=22;
 8003498:	4b5d      	ldr	r3, [pc, #372]	; (8003610 <ESPRxDecoder+0xa2c>)
 800349a:	2216      	movs	r2, #22
 800349c:	701a      	strb	r2, [r3, #0]
 800349e:	e2ad      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==22)
 80034a0:	4b5b      	ldr	r3, [pc, #364]	; (8003610 <ESPRxDecoder+0xa2c>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b16      	cmp	r3, #22
 80034a6:	d10b      	bne.n	80034c0 <ESPRxDecoder+0x8dc>
				{
				     Uart_rx_buffer[17] = DecToASCIIFun(Rxwifi_data);
 80034a8:	79fb      	ldrb	r3, [r7, #7]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 fc44 	bl	8003d38 <DecToASCIIFun>
 80034b0:	4603      	mov	r3, r0
 80034b2:	461a      	mov	r2, r3
 80034b4:	4b57      	ldr	r3, [pc, #348]	; (8003614 <ESPRxDecoder+0xa30>)
 80034b6:	745a      	strb	r2, [r3, #17]
				     Data_bufferptr=23;
 80034b8:	4b55      	ldr	r3, [pc, #340]	; (8003610 <ESPRxDecoder+0xa2c>)
 80034ba:	2217      	movs	r2, #23
 80034bc:	701a      	strb	r2, [r3, #0]
 80034be:	e29d      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==23)      //,(to seperate data)
 80034c0:	4b53      	ldr	r3, [pc, #332]	; (8003610 <ESPRxDecoder+0xa2c>)
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	2b17      	cmp	r3, #23
 80034c6:	d103      	bne.n	80034d0 <ESPRxDecoder+0x8ec>
				{
				     Data_bufferptr=24;
 80034c8:	4b51      	ldr	r3, [pc, #324]	; (8003610 <ESPRxDecoder+0xa2c>)
 80034ca:	2218      	movs	r2, #24
 80034cc:	701a      	strb	r2, [r3, #0]
 80034ce:	e295      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==24)		 //System Min
 80034d0:	4b4f      	ldr	r3, [pc, #316]	; (8003610 <ESPRxDecoder+0xa2c>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	2b18      	cmp	r3, #24
 80034d6:	d10b      	bne.n	80034f0 <ESPRxDecoder+0x90c>
				{
				     Uart_rx_buffer[18] = DecToASCIIFun(Rxwifi_data);
 80034d8:	79fb      	ldrb	r3, [r7, #7]
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 fc2c 	bl	8003d38 <DecToASCIIFun>
 80034e0:	4603      	mov	r3, r0
 80034e2:	461a      	mov	r2, r3
 80034e4:	4b4b      	ldr	r3, [pc, #300]	; (8003614 <ESPRxDecoder+0xa30>)
 80034e6:	749a      	strb	r2, [r3, #18]
				     Data_bufferptr=25;
 80034e8:	4b49      	ldr	r3, [pc, #292]	; (8003610 <ESPRxDecoder+0xa2c>)
 80034ea:	2219      	movs	r2, #25
 80034ec:	701a      	strb	r2, [r3, #0]
 80034ee:	e285      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==25)
 80034f0:	4b47      	ldr	r3, [pc, #284]	; (8003610 <ESPRxDecoder+0xa2c>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	2b19      	cmp	r3, #25
 80034f6:	d10b      	bne.n	8003510 <ESPRxDecoder+0x92c>
				{
				     Uart_rx_buffer[19] = DecToASCIIFun(Rxwifi_data);
 80034f8:	79fb      	ldrb	r3, [r7, #7]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 fc1c 	bl	8003d38 <DecToASCIIFun>
 8003500:	4603      	mov	r3, r0
 8003502:	461a      	mov	r2, r3
 8003504:	4b43      	ldr	r3, [pc, #268]	; (8003614 <ESPRxDecoder+0xa30>)
 8003506:	74da      	strb	r2, [r3, #19]
				     Data_bufferptr=26;
 8003508:	4b41      	ldr	r3, [pc, #260]	; (8003610 <ESPRxDecoder+0xa2c>)
 800350a:	221a      	movs	r2, #26
 800350c:	701a      	strb	r2, [r3, #0]
 800350e:	e275      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==26)      //,(to seperate data)
 8003510:	4b3f      	ldr	r3, [pc, #252]	; (8003610 <ESPRxDecoder+0xa2c>)
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	2b1a      	cmp	r3, #26
 8003516:	d103      	bne.n	8003520 <ESPRxDecoder+0x93c>
				{
				     Data_bufferptr=27;
 8003518:	4b3d      	ldr	r3, [pc, #244]	; (8003610 <ESPRxDecoder+0xa2c>)
 800351a:	221b      	movs	r2, #27
 800351c:	701a      	strb	r2, [r3, #0]
 800351e:	e26d      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==27)      //Hys +
 8003520:	4b3b      	ldr	r3, [pc, #236]	; (8003610 <ESPRxDecoder+0xa2c>)
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	2b1b      	cmp	r3, #27
 8003526:	d10b      	bne.n	8003540 <ESPRxDecoder+0x95c>
				 {
                    Uart_rx_buffer[20] = DecToASCIIFun(Rxwifi_data);
 8003528:	79fb      	ldrb	r3, [r7, #7]
 800352a:	4618      	mov	r0, r3
 800352c:	f000 fc04 	bl	8003d38 <DecToASCIIFun>
 8003530:	4603      	mov	r3, r0
 8003532:	461a      	mov	r2, r3
 8003534:	4b37      	ldr	r3, [pc, #220]	; (8003614 <ESPRxDecoder+0xa30>)
 8003536:	751a      	strb	r2, [r3, #20]
					Data_bufferptr=28;
 8003538:	4b35      	ldr	r3, [pc, #212]	; (8003610 <ESPRxDecoder+0xa2c>)
 800353a:	221c      	movs	r2, #28
 800353c:	701a      	strb	r2, [r3, #0]
 800353e:	e25d      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==28)
 8003540:	4b33      	ldr	r3, [pc, #204]	; (8003610 <ESPRxDecoder+0xa2c>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	2b1c      	cmp	r3, #28
 8003546:	d10b      	bne.n	8003560 <ESPRxDecoder+0x97c>
				{
				     Uart_rx_buffer[21] = DecToASCIIFun(Rxwifi_data);
 8003548:	79fb      	ldrb	r3, [r7, #7]
 800354a:	4618      	mov	r0, r3
 800354c:	f000 fbf4 	bl	8003d38 <DecToASCIIFun>
 8003550:	4603      	mov	r3, r0
 8003552:	461a      	mov	r2, r3
 8003554:	4b2f      	ldr	r3, [pc, #188]	; (8003614 <ESPRxDecoder+0xa30>)
 8003556:	755a      	strb	r2, [r3, #21]
				     Data_bufferptr=29;
 8003558:	4b2d      	ldr	r3, [pc, #180]	; (8003610 <ESPRxDecoder+0xa2c>)
 800355a:	221d      	movs	r2, #29
 800355c:	701a      	strb	r2, [r3, #0]
 800355e:	e24d      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==29)	   //,(to seperate data)
 8003560:	4b2b      	ldr	r3, [pc, #172]	; (8003610 <ESPRxDecoder+0xa2c>)
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	2b1d      	cmp	r3, #29
 8003566:	d103      	bne.n	8003570 <ESPRxDecoder+0x98c>
				{
				     Data_bufferptr=30;
 8003568:	4b29      	ldr	r3, [pc, #164]	; (8003610 <ESPRxDecoder+0xa2c>)
 800356a:	221e      	movs	r2, #30
 800356c:	701a      	strb	r2, [r3, #0]
 800356e:	e245      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==30)	   //Hys -
 8003570:	4b27      	ldr	r3, [pc, #156]	; (8003610 <ESPRxDecoder+0xa2c>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	2b1e      	cmp	r3, #30
 8003576:	d10b      	bne.n	8003590 <ESPRxDecoder+0x9ac>
				{
				     Uart_rx_buffer[22] = DecToASCIIFun(Rxwifi_data);
 8003578:	79fb      	ldrb	r3, [r7, #7]
 800357a:	4618      	mov	r0, r3
 800357c:	f000 fbdc 	bl	8003d38 <DecToASCIIFun>
 8003580:	4603      	mov	r3, r0
 8003582:	461a      	mov	r2, r3
 8003584:	4b23      	ldr	r3, [pc, #140]	; (8003614 <ESPRxDecoder+0xa30>)
 8003586:	759a      	strb	r2, [r3, #22]
				     Data_bufferptr=31;
 8003588:	4b21      	ldr	r3, [pc, #132]	; (8003610 <ESPRxDecoder+0xa2c>)
 800358a:	221f      	movs	r2, #31
 800358c:	701a      	strb	r2, [r3, #0]
 800358e:	e235      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==31)
 8003590:	4b1f      	ldr	r3, [pc, #124]	; (8003610 <ESPRxDecoder+0xa2c>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b1f      	cmp	r3, #31
 8003596:	d10b      	bne.n	80035b0 <ESPRxDecoder+0x9cc>
				{
				     Uart_rx_buffer[23] = DecToASCIIFun(Rxwifi_data);
 8003598:	79fb      	ldrb	r3, [r7, #7]
 800359a:	4618      	mov	r0, r3
 800359c:	f000 fbcc 	bl	8003d38 <DecToASCIIFun>
 80035a0:	4603      	mov	r3, r0
 80035a2:	461a      	mov	r2, r3
 80035a4:	4b1b      	ldr	r3, [pc, #108]	; (8003614 <ESPRxDecoder+0xa30>)
 80035a6:	75da      	strb	r2, [r3, #23]
				     Data_bufferptr=32;
 80035a8:	4b19      	ldr	r3, [pc, #100]	; (8003610 <ESPRxDecoder+0xa2c>)
 80035aa:	2220      	movs	r2, #32
 80035ac:	701a      	strb	r2, [r3, #0]
 80035ae:	e225      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==32)      //,(to seperate data)
 80035b0:	4b17      	ldr	r3, [pc, #92]	; (8003610 <ESPRxDecoder+0xa2c>)
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	2b20      	cmp	r3, #32
 80035b6:	d103      	bne.n	80035c0 <ESPRxDecoder+0x9dc>
				{
				     Data_bufferptr=33;
 80035b8:	4b15      	ldr	r3, [pc, #84]	; (8003610 <ESPRxDecoder+0xa2c>)
 80035ba:	2221      	movs	r2, #33	; 0x21
 80035bc:	701a      	strb	r2, [r3, #0]
 80035be:	e21d      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==33)      // Production reset status
 80035c0:	4b13      	ldr	r3, [pc, #76]	; (8003610 <ESPRxDecoder+0xa2c>)
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	2b21      	cmp	r3, #33	; 0x21
 80035c6:	d10b      	bne.n	80035e0 <ESPRxDecoder+0x9fc>
				 {
                    Uart_rx_buffer[24] = DecToASCIIFun(Rxwifi_data);
 80035c8:	79fb      	ldrb	r3, [r7, #7]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 fbb4 	bl	8003d38 <DecToASCIIFun>
 80035d0:	4603      	mov	r3, r0
 80035d2:	461a      	mov	r2, r3
 80035d4:	4b0f      	ldr	r3, [pc, #60]	; (8003614 <ESPRxDecoder+0xa30>)
 80035d6:	761a      	strb	r2, [r3, #24]
					Data_bufferptr=34;
 80035d8:	4b0d      	ldr	r3, [pc, #52]	; (8003610 <ESPRxDecoder+0xa2c>)
 80035da:	2222      	movs	r2, #34	; 0x22
 80035dc:	701a      	strb	r2, [r3, #0]
 80035de:	e20d      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==34)
 80035e0:	4b0b      	ldr	r3, [pc, #44]	; (8003610 <ESPRxDecoder+0xa2c>)
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	2b22      	cmp	r3, #34	; 0x22
 80035e6:	d10b      	bne.n	8003600 <ESPRxDecoder+0xa1c>
				{
				     Uart_rx_buffer[25] = DecToASCIIFun(Rxwifi_data);
 80035e8:	79fb      	ldrb	r3, [r7, #7]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f000 fba4 	bl	8003d38 <DecToASCIIFun>
 80035f0:	4603      	mov	r3, r0
 80035f2:	461a      	mov	r2, r3
 80035f4:	4b07      	ldr	r3, [pc, #28]	; (8003614 <ESPRxDecoder+0xa30>)
 80035f6:	765a      	strb	r2, [r3, #25]
				     Data_bufferptr=35;
 80035f8:	4b05      	ldr	r3, [pc, #20]	; (8003610 <ESPRxDecoder+0xa2c>)
 80035fa:	2223      	movs	r2, #35	; 0x23
 80035fc:	701a      	strb	r2, [r3, #0]
 80035fe:	e1fd      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==35)		  //,(to seperate data)
 8003600:	4b03      	ldr	r3, [pc, #12]	; (8003610 <ESPRxDecoder+0xa2c>)
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	2b23      	cmp	r3, #35	; 0x23
 8003606:	d109      	bne.n	800361c <ESPRxDecoder+0xa38>
				{
				     Data_bufferptr=36;
 8003608:	4b01      	ldr	r3, [pc, #4]	; (8003610 <ESPRxDecoder+0xa2c>)
 800360a:	2224      	movs	r2, #36	; 0x24
 800360c:	701a      	strb	r2, [r3, #0]
 800360e:	e1f5      	b.n	80039fc <ESPRxDecoder+0xe18>
 8003610:	200002aa 	.word	0x200002aa
 8003614:	20000264 	.word	0x20000264
 8003618:	200002ae 	.word	0x200002ae
				}
				else if(Data_bufferptr==36)		  //Entry Status
 800361c:	4ba7      	ldr	r3, [pc, #668]	; (80038bc <ESPRxDecoder+0xcd8>)
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	2b24      	cmp	r3, #36	; 0x24
 8003622:	d10b      	bne.n	800363c <ESPRxDecoder+0xa58>
				{
				     Uart_rx_buffer[26] = DecToASCIIFun(Rxwifi_data);
 8003624:	79fb      	ldrb	r3, [r7, #7]
 8003626:	4618      	mov	r0, r3
 8003628:	f000 fb86 	bl	8003d38 <DecToASCIIFun>
 800362c:	4603      	mov	r3, r0
 800362e:	461a      	mov	r2, r3
 8003630:	4ba3      	ldr	r3, [pc, #652]	; (80038c0 <ESPRxDecoder+0xcdc>)
 8003632:	769a      	strb	r2, [r3, #26]
				     Data_bufferptr=37;
 8003634:	4ba1      	ldr	r3, [pc, #644]	; (80038bc <ESPRxDecoder+0xcd8>)
 8003636:	2225      	movs	r2, #37	; 0x25
 8003638:	701a      	strb	r2, [r3, #0]
 800363a:	e1df      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==37)
 800363c:	4b9f      	ldr	r3, [pc, #636]	; (80038bc <ESPRxDecoder+0xcd8>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	2b25      	cmp	r3, #37	; 0x25
 8003642:	d10e      	bne.n	8003662 <ESPRxDecoder+0xa7e>
				{
				     Uart_rx_buffer[27] = DecToASCIIFun(Rxwifi_data);
 8003644:	79fb      	ldrb	r3, [r7, #7]
 8003646:	4618      	mov	r0, r3
 8003648:	f000 fb76 	bl	8003d38 <DecToASCIIFun>
 800364c:	4603      	mov	r3, r0
 800364e:	461a      	mov	r2, r3
 8003650:	4b9b      	ldr	r3, [pc, #620]	; (80038c0 <ESPRxDecoder+0xcdc>)
 8003652:	76da      	strb	r2, [r3, #27]
					 Data_bufferptr=0;
 8003654:	4b99      	ldr	r3, [pc, #612]	; (80038bc <ESPRxDecoder+0xcd8>)
 8003656:	2200      	movs	r2, #0
 8003658:	701a      	strb	r2, [r3, #0]
					 RxCompleteU2C1WIFI=1;
 800365a:	4b9a      	ldr	r3, [pc, #616]	; (80038c4 <ESPRxDecoder+0xce0>)
 800365c:	2201      	movs	r2, #1
 800365e:	701a      	strb	r2, [r3, #0]
 8003660:	e1cc      	b.n	80039fc <ESPRxDecoder+0xe18>
				}			//Frame complete for LPDC

				else if(Data_bufferptr==36)
 8003662:	4b96      	ldr	r3, [pc, #600]	; (80038bc <ESPRxDecoder+0xcd8>)
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	2b24      	cmp	r3, #36	; 0x24
 8003668:	d10b      	bne.n	8003682 <ESPRxDecoder+0xa9e>
				 {
                    Uart_rx_buffer[28] = DecToASCIIFun(Rxwifi_data);
 800366a:	79fb      	ldrb	r3, [r7, #7]
 800366c:	4618      	mov	r0, r3
 800366e:	f000 fb63 	bl	8003d38 <DecToASCIIFun>
 8003672:	4603      	mov	r3, r0
 8003674:	461a      	mov	r2, r3
 8003676:	4b92      	ldr	r3, [pc, #584]	; (80038c0 <ESPRxDecoder+0xcdc>)
 8003678:	771a      	strb	r2, [r3, #28]
					Data_bufferptr=37;
 800367a:	4b90      	ldr	r3, [pc, #576]	; (80038bc <ESPRxDecoder+0xcd8>)
 800367c:	2225      	movs	r2, #37	; 0x25
 800367e:	701a      	strb	r2, [r3, #0]
 8003680:	e1bc      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==37)
 8003682:	4b8e      	ldr	r3, [pc, #568]	; (80038bc <ESPRxDecoder+0xcd8>)
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	2b25      	cmp	r3, #37	; 0x25
 8003688:	d10b      	bne.n	80036a2 <ESPRxDecoder+0xabe>
				{
				     Uart_rx_buffer[29] = DecToASCIIFun(Rxwifi_data);
 800368a:	79fb      	ldrb	r3, [r7, #7]
 800368c:	4618      	mov	r0, r3
 800368e:	f000 fb53 	bl	8003d38 <DecToASCIIFun>
 8003692:	4603      	mov	r3, r0
 8003694:	461a      	mov	r2, r3
 8003696:	4b8a      	ldr	r3, [pc, #552]	; (80038c0 <ESPRxDecoder+0xcdc>)
 8003698:	775a      	strb	r2, [r3, #29]
				     Data_bufferptr=38;
 800369a:	4b88      	ldr	r3, [pc, #544]	; (80038bc <ESPRxDecoder+0xcd8>)
 800369c:	2226      	movs	r2, #38	; 0x26
 800369e:	701a      	strb	r2, [r3, #0]
 80036a0:	e1ac      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==38)
 80036a2:	4b86      	ldr	r3, [pc, #536]	; (80038bc <ESPRxDecoder+0xcd8>)
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	2b26      	cmp	r3, #38	; 0x26
 80036a8:	d10b      	bne.n	80036c2 <ESPRxDecoder+0xade>
				{
				     Uart_rx_buffer[30] = DecToASCIIFun(Rxwifi_data);
 80036aa:	79fb      	ldrb	r3, [r7, #7]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f000 fb43 	bl	8003d38 <DecToASCIIFun>
 80036b2:	4603      	mov	r3, r0
 80036b4:	461a      	mov	r2, r3
 80036b6:	4b82      	ldr	r3, [pc, #520]	; (80038c0 <ESPRxDecoder+0xcdc>)
 80036b8:	779a      	strb	r2, [r3, #30]
				     Data_bufferptr=39;
 80036ba:	4b80      	ldr	r3, [pc, #512]	; (80038bc <ESPRxDecoder+0xcd8>)
 80036bc:	2227      	movs	r2, #39	; 0x27
 80036be:	701a      	strb	r2, [r3, #0]
 80036c0:	e19c      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==39)
 80036c2:	4b7e      	ldr	r3, [pc, #504]	; (80038bc <ESPRxDecoder+0xcd8>)
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	2b27      	cmp	r3, #39	; 0x27
 80036c8:	d10b      	bne.n	80036e2 <ESPRxDecoder+0xafe>
				{
				     Uart_rx_buffer[31] = DecToASCIIFun(Rxwifi_data);	  //Data 8
 80036ca:	79fb      	ldrb	r3, [r7, #7]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 fb33 	bl	8003d38 <DecToASCIIFun>
 80036d2:	4603      	mov	r3, r0
 80036d4:	461a      	mov	r2, r3
 80036d6:	4b7a      	ldr	r3, [pc, #488]	; (80038c0 <ESPRxDecoder+0xcdc>)
 80036d8:	77da      	strb	r2, [r3, #31]
				     Data_bufferptr=40;
 80036da:	4b78      	ldr	r3, [pc, #480]	; (80038bc <ESPRxDecoder+0xcd8>)
 80036dc:	2228      	movs	r2, #40	; 0x28
 80036de:	701a      	strb	r2, [r3, #0]
 80036e0:	e18c      	b.n	80039fc <ESPRxDecoder+0xe18>

				}
				else if(Data_bufferptr==40)      //,(to seperate data)
 80036e2:	4b76      	ldr	r3, [pc, #472]	; (80038bc <ESPRxDecoder+0xcd8>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	2b28      	cmp	r3, #40	; 0x28
 80036e8:	d103      	bne.n	80036f2 <ESPRxDecoder+0xb0e>
				{
				     Data_bufferptr=41;
 80036ea:	4b74      	ldr	r3, [pc, #464]	; (80038bc <ESPRxDecoder+0xcd8>)
 80036ec:	2229      	movs	r2, #41	; 0x29
 80036ee:	701a      	strb	r2, [r3, #0]
 80036f0:	e184      	b.n	80039fc <ESPRxDecoder+0xe18>
				}

				else if(Data_bufferptr==41)
 80036f2:	4b72      	ldr	r3, [pc, #456]	; (80038bc <ESPRxDecoder+0xcd8>)
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	2b29      	cmp	r3, #41	; 0x29
 80036f8:	d10c      	bne.n	8003714 <ESPRxDecoder+0xb30>
				 {
                    Uart_rx_buffer[32] = DecToASCIIFun(Rxwifi_data);
 80036fa:	79fb      	ldrb	r3, [r7, #7]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 fb1b 	bl	8003d38 <DecToASCIIFun>
 8003702:	4603      	mov	r3, r0
 8003704:	461a      	mov	r2, r3
 8003706:	4b6e      	ldr	r3, [pc, #440]	; (80038c0 <ESPRxDecoder+0xcdc>)
 8003708:	f883 2020 	strb.w	r2, [r3, #32]
					Data_bufferptr=42;
 800370c:	4b6b      	ldr	r3, [pc, #428]	; (80038bc <ESPRxDecoder+0xcd8>)
 800370e:	222a      	movs	r2, #42	; 0x2a
 8003710:	701a      	strb	r2, [r3, #0]
 8003712:	e173      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==42)
 8003714:	4b69      	ldr	r3, [pc, #420]	; (80038bc <ESPRxDecoder+0xcd8>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b2a      	cmp	r3, #42	; 0x2a
 800371a:	d10c      	bne.n	8003736 <ESPRxDecoder+0xb52>
				{
				     Uart_rx_buffer[33] = DecToASCIIFun(Rxwifi_data);
 800371c:	79fb      	ldrb	r3, [r7, #7]
 800371e:	4618      	mov	r0, r3
 8003720:	f000 fb0a 	bl	8003d38 <DecToASCIIFun>
 8003724:	4603      	mov	r3, r0
 8003726:	461a      	mov	r2, r3
 8003728:	4b65      	ldr	r3, [pc, #404]	; (80038c0 <ESPRxDecoder+0xcdc>)
 800372a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				     Data_bufferptr=43;
 800372e:	4b63      	ldr	r3, [pc, #396]	; (80038bc <ESPRxDecoder+0xcd8>)
 8003730:	222b      	movs	r2, #43	; 0x2b
 8003732:	701a      	strb	r2, [r3, #0]
 8003734:	e162      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==43)
 8003736:	4b61      	ldr	r3, [pc, #388]	; (80038bc <ESPRxDecoder+0xcd8>)
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	2b2b      	cmp	r3, #43	; 0x2b
 800373c:	d10c      	bne.n	8003758 <ESPRxDecoder+0xb74>
				{
				     Uart_rx_buffer[34] = DecToASCIIFun(Rxwifi_data);
 800373e:	79fb      	ldrb	r3, [r7, #7]
 8003740:	4618      	mov	r0, r3
 8003742:	f000 faf9 	bl	8003d38 <DecToASCIIFun>
 8003746:	4603      	mov	r3, r0
 8003748:	461a      	mov	r2, r3
 800374a:	4b5d      	ldr	r3, [pc, #372]	; (80038c0 <ESPRxDecoder+0xcdc>)
 800374c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				     Data_bufferptr=44;
 8003750:	4b5a      	ldr	r3, [pc, #360]	; (80038bc <ESPRxDecoder+0xcd8>)
 8003752:	222c      	movs	r2, #44	; 0x2c
 8003754:	701a      	strb	r2, [r3, #0]
 8003756:	e151      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==44)
 8003758:	4b58      	ldr	r3, [pc, #352]	; (80038bc <ESPRxDecoder+0xcd8>)
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	2b2c      	cmp	r3, #44	; 0x2c
 800375e:	d10c      	bne.n	800377a <ESPRxDecoder+0xb96>
				{
				     Uart_rx_buffer[35] = DecToASCIIFun(Rxwifi_data);	  //Data 9
 8003760:	79fb      	ldrb	r3, [r7, #7]
 8003762:	4618      	mov	r0, r3
 8003764:	f000 fae8 	bl	8003d38 <DecToASCIIFun>
 8003768:	4603      	mov	r3, r0
 800376a:	461a      	mov	r2, r3
 800376c:	4b54      	ldr	r3, [pc, #336]	; (80038c0 <ESPRxDecoder+0xcdc>)
 800376e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				     Data_bufferptr=45;
 8003772:	4b52      	ldr	r3, [pc, #328]	; (80038bc <ESPRxDecoder+0xcd8>)
 8003774:	222d      	movs	r2, #45	; 0x2d
 8003776:	701a      	strb	r2, [r3, #0]
 8003778:	e140      	b.n	80039fc <ESPRxDecoder+0xe18>
				     //PLCSandMazReleaseTime =Uart_rx_buffer[35]+(Uart_rx_buffer[34]*10)+(Uart_rx_buffer[33]*100)+(Uart_rx_buffer[32]*1000);
				}
				else if(Data_bufferptr==45)      //,(to seperate data)
 800377a:	4b50      	ldr	r3, [pc, #320]	; (80038bc <ESPRxDecoder+0xcd8>)
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b2d      	cmp	r3, #45	; 0x2d
 8003780:	d103      	bne.n	800378a <ESPRxDecoder+0xba6>
				{
				     Data_bufferptr=46;
 8003782:	4b4e      	ldr	r3, [pc, #312]	; (80038bc <ESPRxDecoder+0xcd8>)
 8003784:	222e      	movs	r2, #46	; 0x2e
 8003786:	701a      	strb	r2, [r3, #0]
 8003788:	e138      	b.n	80039fc <ESPRxDecoder+0xe18>
				}

			 	else if(Data_bufferptr==46)
 800378a:	4b4c      	ldr	r3, [pc, #304]	; (80038bc <ESPRxDecoder+0xcd8>)
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	2b2e      	cmp	r3, #46	; 0x2e
 8003790:	d10c      	bne.n	80037ac <ESPRxDecoder+0xbc8>
				 {
                    Uart_rx_buffer[36] = DecToASCIIFun(Rxwifi_data);
 8003792:	79fb      	ldrb	r3, [r7, #7]
 8003794:	4618      	mov	r0, r3
 8003796:	f000 facf 	bl	8003d38 <DecToASCIIFun>
 800379a:	4603      	mov	r3, r0
 800379c:	461a      	mov	r2, r3
 800379e:	4b48      	ldr	r3, [pc, #288]	; (80038c0 <ESPRxDecoder+0xcdc>)
 80037a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					Data_bufferptr=47;
 80037a4:	4b45      	ldr	r3, [pc, #276]	; (80038bc <ESPRxDecoder+0xcd8>)
 80037a6:	222f      	movs	r2, #47	; 0x2f
 80037a8:	701a      	strb	r2, [r3, #0]
 80037aa:	e127      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==47)
 80037ac:	4b43      	ldr	r3, [pc, #268]	; (80038bc <ESPRxDecoder+0xcd8>)
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	2b2f      	cmp	r3, #47	; 0x2f
 80037b2:	d10c      	bne.n	80037ce <ESPRxDecoder+0xbea>
				{
				     Uart_rx_buffer[37] = DecToASCIIFun(Rxwifi_data);
 80037b4:	79fb      	ldrb	r3, [r7, #7]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 fabe 	bl	8003d38 <DecToASCIIFun>
 80037bc:	4603      	mov	r3, r0
 80037be:	461a      	mov	r2, r3
 80037c0:	4b3f      	ldr	r3, [pc, #252]	; (80038c0 <ESPRxDecoder+0xcdc>)
 80037c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				     Data_bufferptr=48;
 80037c6:	4b3d      	ldr	r3, [pc, #244]	; (80038bc <ESPRxDecoder+0xcd8>)
 80037c8:	2230      	movs	r2, #48	; 0x30
 80037ca:	701a      	strb	r2, [r3, #0]
 80037cc:	e116      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==48)
 80037ce:	4b3b      	ldr	r3, [pc, #236]	; (80038bc <ESPRxDecoder+0xcd8>)
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	2b30      	cmp	r3, #48	; 0x30
 80037d4:	d10c      	bne.n	80037f0 <ESPRxDecoder+0xc0c>
				{
				     Uart_rx_buffer[38] = DecToASCIIFun(Rxwifi_data);
 80037d6:	79fb      	ldrb	r3, [r7, #7]
 80037d8:	4618      	mov	r0, r3
 80037da:	f000 faad 	bl	8003d38 <DecToASCIIFun>
 80037de:	4603      	mov	r3, r0
 80037e0:	461a      	mov	r2, r3
 80037e2:	4b37      	ldr	r3, [pc, #220]	; (80038c0 <ESPRxDecoder+0xcdc>)
 80037e4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				     Data_bufferptr=49;
 80037e8:	4b34      	ldr	r3, [pc, #208]	; (80038bc <ESPRxDecoder+0xcd8>)
 80037ea:	2231      	movs	r2, #49	; 0x31
 80037ec:	701a      	strb	r2, [r3, #0]
 80037ee:	e105      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==49)
 80037f0:	4b32      	ldr	r3, [pc, #200]	; (80038bc <ESPRxDecoder+0xcd8>)
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	2b31      	cmp	r3, #49	; 0x31
 80037f6:	d10c      	bne.n	8003812 <ESPRxDecoder+0xc2e>
				{
				     Uart_rx_buffer[39] = DecToASCIIFun(Rxwifi_data);	  //Data 10
 80037f8:	79fb      	ldrb	r3, [r7, #7]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 fa9c 	bl	8003d38 <DecToASCIIFun>
 8003800:	4603      	mov	r3, r0
 8003802:	461a      	mov	r2, r3
 8003804:	4b2e      	ldr	r3, [pc, #184]	; (80038c0 <ESPRxDecoder+0xcdc>)
 8003806:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				     Data_bufferptr=50;
 800380a:	4b2c      	ldr	r3, [pc, #176]	; (80038bc <ESPRxDecoder+0xcd8>)
 800380c:	2232      	movs	r2, #50	; 0x32
 800380e:	701a      	strb	r2, [r3, #0]
 8003810:	e0f4      	b.n	80039fc <ESPRxDecoder+0xe18>
				//     PLCFillMazTime =Uart_rx_buffer[39]+(Uart_rx_buffer[38]*10)+(Uart_rx_buffer[37]*100)+(Uart_rx_buffer[36]*1000);
				}
				else if(Data_bufferptr==50)      //,(to seperate data)
 8003812:	4b2a      	ldr	r3, [pc, #168]	; (80038bc <ESPRxDecoder+0xcd8>)
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	2b32      	cmp	r3, #50	; 0x32
 8003818:	d103      	bne.n	8003822 <ESPRxDecoder+0xc3e>
				{
				     Data_bufferptr=51;
 800381a:	4b28      	ldr	r3, [pc, #160]	; (80038bc <ESPRxDecoder+0xcd8>)
 800381c:	2233      	movs	r2, #51	; 0x33
 800381e:	701a      	strb	r2, [r3, #0]
 8003820:	e0ec      	b.n	80039fc <ESPRxDecoder+0xe18>
				}

			 	else if(Data_bufferptr==51)
 8003822:	4b26      	ldr	r3, [pc, #152]	; (80038bc <ESPRxDecoder+0xcd8>)
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	2b33      	cmp	r3, #51	; 0x33
 8003828:	d10c      	bne.n	8003844 <ESPRxDecoder+0xc60>
				 {
                    Uart_rx_buffer[40] = DecToASCIIFun(Rxwifi_data);
 800382a:	79fb      	ldrb	r3, [r7, #7]
 800382c:	4618      	mov	r0, r3
 800382e:	f000 fa83 	bl	8003d38 <DecToASCIIFun>
 8003832:	4603      	mov	r3, r0
 8003834:	461a      	mov	r2, r3
 8003836:	4b22      	ldr	r3, [pc, #136]	; (80038c0 <ESPRxDecoder+0xcdc>)
 8003838:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					Data_bufferptr=52;
 800383c:	4b1f      	ldr	r3, [pc, #124]	; (80038bc <ESPRxDecoder+0xcd8>)
 800383e:	2234      	movs	r2, #52	; 0x34
 8003840:	701a      	strb	r2, [r3, #0]
 8003842:	e0db      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==52)
 8003844:	4b1d      	ldr	r3, [pc, #116]	; (80038bc <ESPRxDecoder+0xcd8>)
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	2b34      	cmp	r3, #52	; 0x34
 800384a:	d10c      	bne.n	8003866 <ESPRxDecoder+0xc82>
				{
				     Uart_rx_buffer[41] = DecToASCIIFun(Rxwifi_data);
 800384c:	79fb      	ldrb	r3, [r7, #7]
 800384e:	4618      	mov	r0, r3
 8003850:	f000 fa72 	bl	8003d38 <DecToASCIIFun>
 8003854:	4603      	mov	r3, r0
 8003856:	461a      	mov	r2, r3
 8003858:	4b19      	ldr	r3, [pc, #100]	; (80038c0 <ESPRxDecoder+0xcdc>)
 800385a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
				     Data_bufferptr=53;
 800385e:	4b17      	ldr	r3, [pc, #92]	; (80038bc <ESPRxDecoder+0xcd8>)
 8003860:	2235      	movs	r2, #53	; 0x35
 8003862:	701a      	strb	r2, [r3, #0]
 8003864:	e0ca      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==53)
 8003866:	4b15      	ldr	r3, [pc, #84]	; (80038bc <ESPRxDecoder+0xcd8>)
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	2b35      	cmp	r3, #53	; 0x35
 800386c:	d10c      	bne.n	8003888 <ESPRxDecoder+0xca4>
				{
				     Uart_rx_buffer[42] = DecToASCIIFun(Rxwifi_data);
 800386e:	79fb      	ldrb	r3, [r7, #7]
 8003870:	4618      	mov	r0, r3
 8003872:	f000 fa61 	bl	8003d38 <DecToASCIIFun>
 8003876:	4603      	mov	r3, r0
 8003878:	461a      	mov	r2, r3
 800387a:	4b11      	ldr	r3, [pc, #68]	; (80038c0 <ESPRxDecoder+0xcdc>)
 800387c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				     Data_bufferptr=54;
 8003880:	4b0e      	ldr	r3, [pc, #56]	; (80038bc <ESPRxDecoder+0xcd8>)
 8003882:	2236      	movs	r2, #54	; 0x36
 8003884:	701a      	strb	r2, [r3, #0]
 8003886:	e0b9      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==54)
 8003888:	4b0c      	ldr	r3, [pc, #48]	; (80038bc <ESPRxDecoder+0xcd8>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	2b36      	cmp	r3, #54	; 0x36
 800388e:	d10c      	bne.n	80038aa <ESPRxDecoder+0xcc6>
				{
				     Uart_rx_buffer[43] = DecToASCIIFun(Rxwifi_data);	  //Data 11	 //?
 8003890:	79fb      	ldrb	r3, [r7, #7]
 8003892:	4618      	mov	r0, r3
 8003894:	f000 fa50 	bl	8003d38 <DecToASCIIFun>
 8003898:	4603      	mov	r3, r0
 800389a:	461a      	mov	r2, r3
 800389c:	4b08      	ldr	r3, [pc, #32]	; (80038c0 <ESPRxDecoder+0xcdc>)
 800389e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				     Data_bufferptr=55;
 80038a2:	4b06      	ldr	r3, [pc, #24]	; (80038bc <ESPRxDecoder+0xcd8>)
 80038a4:	2237      	movs	r2, #55	; 0x37
 80038a6:	701a      	strb	r2, [r3, #0]
 80038a8:	e0a8      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==55)      //,(to seperate data)
 80038aa:	4b04      	ldr	r3, [pc, #16]	; (80038bc <ESPRxDecoder+0xcd8>)
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	2b37      	cmp	r3, #55	; 0x37
 80038b0:	d10a      	bne.n	80038c8 <ESPRxDecoder+0xce4>
				{
				     Data_bufferptr=56;
 80038b2:	4b02      	ldr	r3, [pc, #8]	; (80038bc <ESPRxDecoder+0xcd8>)
 80038b4:	2238      	movs	r2, #56	; 0x38
 80038b6:	701a      	strb	r2, [r3, #0]
 80038b8:	e0a0      	b.n	80039fc <ESPRxDecoder+0xe18>
 80038ba:	bf00      	nop
 80038bc:	200002aa 	.word	0x200002aa
 80038c0:	20000264 	.word	0x20000264
 80038c4:	200002ae 	.word	0x200002ae
				}

				else if(Data_bufferptr==56)
 80038c8:	4b92      	ldr	r3, [pc, #584]	; (8003b14 <ESPRxDecoder+0xf30>)
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	2b38      	cmp	r3, #56	; 0x38
 80038ce:	d10c      	bne.n	80038ea <ESPRxDecoder+0xd06>
				 {
                    Uart_rx_buffer[44] = DecToASCIIFun(Rxwifi_data);
 80038d0:	79fb      	ldrb	r3, [r7, #7]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 fa30 	bl	8003d38 <DecToASCIIFun>
 80038d8:	4603      	mov	r3, r0
 80038da:	461a      	mov	r2, r3
 80038dc:	4b8e      	ldr	r3, [pc, #568]	; (8003b18 <ESPRxDecoder+0xf34>)
 80038de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
					Data_bufferptr=57;
 80038e2:	4b8c      	ldr	r3, [pc, #560]	; (8003b14 <ESPRxDecoder+0xf30>)
 80038e4:	2239      	movs	r2, #57	; 0x39
 80038e6:	701a      	strb	r2, [r3, #0]
 80038e8:	e088      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==57)
 80038ea:	4b8a      	ldr	r3, [pc, #552]	; (8003b14 <ESPRxDecoder+0xf30>)
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	2b39      	cmp	r3, #57	; 0x39
 80038f0:	d10c      	bne.n	800390c <ESPRxDecoder+0xd28>
				{
				     Uart_rx_buffer[45] = DecToASCIIFun(Rxwifi_data);
 80038f2:	79fb      	ldrb	r3, [r7, #7]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 fa1f 	bl	8003d38 <DecToASCIIFun>
 80038fa:	4603      	mov	r3, r0
 80038fc:	461a      	mov	r2, r3
 80038fe:	4b86      	ldr	r3, [pc, #536]	; (8003b18 <ESPRxDecoder+0xf34>)
 8003900:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				     Data_bufferptr=58;
 8003904:	4b83      	ldr	r3, [pc, #524]	; (8003b14 <ESPRxDecoder+0xf30>)
 8003906:	223a      	movs	r2, #58	; 0x3a
 8003908:	701a      	strb	r2, [r3, #0]
 800390a:	e077      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==58)
 800390c:	4b81      	ldr	r3, [pc, #516]	; (8003b14 <ESPRxDecoder+0xf30>)
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	2b3a      	cmp	r3, #58	; 0x3a
 8003912:	d10c      	bne.n	800392e <ESPRxDecoder+0xd4a>
				{
				     Uart_rx_buffer[46] = DecToASCIIFun(Rxwifi_data);
 8003914:	79fb      	ldrb	r3, [r7, #7]
 8003916:	4618      	mov	r0, r3
 8003918:	f000 fa0e 	bl	8003d38 <DecToASCIIFun>
 800391c:	4603      	mov	r3, r0
 800391e:	461a      	mov	r2, r3
 8003920:	4b7d      	ldr	r3, [pc, #500]	; (8003b18 <ESPRxDecoder+0xf34>)
 8003922:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				     Data_bufferptr=59;
 8003926:	4b7b      	ldr	r3, [pc, #492]	; (8003b14 <ESPRxDecoder+0xf30>)
 8003928:	223b      	movs	r2, #59	; 0x3b
 800392a:	701a      	strb	r2, [r3, #0]
 800392c:	e066      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==59)
 800392e:	4b79      	ldr	r3, [pc, #484]	; (8003b14 <ESPRxDecoder+0xf30>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	2b3b      	cmp	r3, #59	; 0x3b
 8003934:	d10c      	bne.n	8003950 <ESPRxDecoder+0xd6c>
				{
				     Uart_rx_buffer[47] = DecToASCIIFun(Rxwifi_data);	  //Data 12
 8003936:	79fb      	ldrb	r3, [r7, #7]
 8003938:	4618      	mov	r0, r3
 800393a:	f000 f9fd 	bl	8003d38 <DecToASCIIFun>
 800393e:	4603      	mov	r3, r0
 8003940:	461a      	mov	r2, r3
 8003942:	4b75      	ldr	r3, [pc, #468]	; (8003b18 <ESPRxDecoder+0xf34>)
 8003944:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				     Data_bufferptr=60;
 8003948:	4b72      	ldr	r3, [pc, #456]	; (8003b14 <ESPRxDecoder+0xf30>)
 800394a:	223c      	movs	r2, #60	; 0x3c
 800394c:	701a      	strb	r2, [r3, #0]
 800394e:	e055      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==60)      //,(to seperate data)
 8003950:	4b70      	ldr	r3, [pc, #448]	; (8003b14 <ESPRxDecoder+0xf30>)
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	2b3c      	cmp	r3, #60	; 0x3c
 8003956:	d103      	bne.n	8003960 <ESPRxDecoder+0xd7c>
				{
				     Data_bufferptr=61;
 8003958:	4b6e      	ldr	r3, [pc, #440]	; (8003b14 <ESPRxDecoder+0xf30>)
 800395a:	223d      	movs	r2, #61	; 0x3d
 800395c:	701a      	strb	r2, [r3, #0]
 800395e:	e04d      	b.n	80039fc <ESPRxDecoder+0xe18>
				}

				else if(Data_bufferptr==61)
 8003960:	4b6c      	ldr	r3, [pc, #432]	; (8003b14 <ESPRxDecoder+0xf30>)
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	2b3d      	cmp	r3, #61	; 0x3d
 8003966:	d10c      	bne.n	8003982 <ESPRxDecoder+0xd9e>
				 {
                    Uart_rx_buffer[48] = DecToASCIIFun(Rxwifi_data);
 8003968:	79fb      	ldrb	r3, [r7, #7]
 800396a:	4618      	mov	r0, r3
 800396c:	f000 f9e4 	bl	8003d38 <DecToASCIIFun>
 8003970:	4603      	mov	r3, r0
 8003972:	461a      	mov	r2, r3
 8003974:	4b68      	ldr	r3, [pc, #416]	; (8003b18 <ESPRxDecoder+0xf34>)
 8003976:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
					Data_bufferptr=62;
 800397a:	4b66      	ldr	r3, [pc, #408]	; (8003b14 <ESPRxDecoder+0xf30>)
 800397c:	223e      	movs	r2, #62	; 0x3e
 800397e:	701a      	strb	r2, [r3, #0]
 8003980:	e03c      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==62)
 8003982:	4b64      	ldr	r3, [pc, #400]	; (8003b14 <ESPRxDecoder+0xf30>)
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	2b3e      	cmp	r3, #62	; 0x3e
 8003988:	d10c      	bne.n	80039a4 <ESPRxDecoder+0xdc0>
				{
				     Uart_rx_buffer[49] = DecToASCIIFun(Rxwifi_data);
 800398a:	79fb      	ldrb	r3, [r7, #7]
 800398c:	4618      	mov	r0, r3
 800398e:	f000 f9d3 	bl	8003d38 <DecToASCIIFun>
 8003992:	4603      	mov	r3, r0
 8003994:	461a      	mov	r2, r3
 8003996:	4b60      	ldr	r3, [pc, #384]	; (8003b18 <ESPRxDecoder+0xf34>)
 8003998:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				     Data_bufferptr=63;
 800399c:	4b5d      	ldr	r3, [pc, #372]	; (8003b14 <ESPRxDecoder+0xf30>)
 800399e:	223f      	movs	r2, #63	; 0x3f
 80039a0:	701a      	strb	r2, [r3, #0]
 80039a2:	e02b      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==63)
 80039a4:	4b5b      	ldr	r3, [pc, #364]	; (8003b14 <ESPRxDecoder+0xf30>)
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	2b3f      	cmp	r3, #63	; 0x3f
 80039aa:	d10c      	bne.n	80039c6 <ESPRxDecoder+0xde2>
				{
				     Uart_rx_buffer[50] = DecToASCIIFun(Rxwifi_data);
 80039ac:	79fb      	ldrb	r3, [r7, #7]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 f9c2 	bl	8003d38 <DecToASCIIFun>
 80039b4:	4603      	mov	r3, r0
 80039b6:	461a      	mov	r2, r3
 80039b8:	4b57      	ldr	r3, [pc, #348]	; (8003b18 <ESPRxDecoder+0xf34>)
 80039ba:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				     Data_bufferptr=64;
 80039be:	4b55      	ldr	r3, [pc, #340]	; (8003b14 <ESPRxDecoder+0xf30>)
 80039c0:	2240      	movs	r2, #64	; 0x40
 80039c2:	701a      	strb	r2, [r3, #0]
 80039c4:	e01a      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==64)
 80039c6:	4b53      	ldr	r3, [pc, #332]	; (8003b14 <ESPRxDecoder+0xf30>)
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	2b40      	cmp	r3, #64	; 0x40
 80039cc:	d10f      	bne.n	80039ee <ESPRxDecoder+0xe0a>
				{
				     Uart_rx_buffer[51] = DecToASCIIFun(Rxwifi_data);	  //Data 13
 80039ce:	79fb      	ldrb	r3, [r7, #7]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 f9b1 	bl	8003d38 <DecToASCIIFun>
 80039d6:	4603      	mov	r3, r0
 80039d8:	461a      	mov	r2, r3
 80039da:	4b4f      	ldr	r3, [pc, #316]	; (8003b18 <ESPRxDecoder+0xf34>)
 80039dc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
				     Data_bufferptr=0;
 80039e0:	4b4c      	ldr	r3, [pc, #304]	; (8003b14 <ESPRxDecoder+0xf30>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	701a      	strb	r2, [r3, #0]
					 RxCompleteU2C1WIFI=1;
 80039e6:	4b4d      	ldr	r3, [pc, #308]	; (8003b1c <ESPRxDecoder+0xf38>)
 80039e8:	2201      	movs	r2, #1
 80039ea:	701a      	strb	r2, [r3, #0]
 80039ec:	e006      	b.n	80039fc <ESPRxDecoder+0xe18>
				}
				else if(Data_bufferptr==65)      //,(to seperate data)
 80039ee:	4b49      	ldr	r3, [pc, #292]	; (8003b14 <ESPRxDecoder+0xf30>)
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	2b41      	cmp	r3, #65	; 0x41
 80039f4:	d102      	bne.n	80039fc <ESPRxDecoder+0xe18>
				{
				     Data_bufferptr=0;
 80039f6:	4b47      	ldr	r3, [pc, #284]	; (8003b14 <ESPRxDecoder+0xf30>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	701a      	strb	r2, [r3, #0]
				}


		   if(Valid_DataWifi1)
 80039fc:	4b48      	ldr	r3, [pc, #288]	; (8003b20 <ESPRxDecoder+0xf3c>)
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f000 80b0 	beq.w	8003b66 <ESPRxDecoder+0xf82>
		   {
			 if((Rxwifi_data=='U')&&(bufferptr==0))
 8003a06:	79fb      	ldrb	r3, [r7, #7]
 8003a08:	2b55      	cmp	r3, #85	; 0x55
 8003a0a:	d107      	bne.n	8003a1c <ESPRxDecoder+0xe38>
 8003a0c:	4b45      	ldr	r3, [pc, #276]	; (8003b24 <ESPRxDecoder+0xf40>)
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d103      	bne.n	8003a1c <ESPRxDecoder+0xe38>
			 {
			 	bufferptr=1;
 8003a14:	4b43      	ldr	r3, [pc, #268]	; (8003b24 <ESPRxDecoder+0xf40>)
 8003a16:	2201      	movs	r2, #1
 8003a18:	701a      	strb	r2, [r3, #0]
 8003a1a:	e043      	b.n	8003aa4 <ESPRxDecoder+0xec0>
			 }
			 else if((Rxwifi_data=='n')&&(bufferptr==1))
 8003a1c:	79fb      	ldrb	r3, [r7, #7]
 8003a1e:	2b6e      	cmp	r3, #110	; 0x6e
 8003a20:	d107      	bne.n	8003a32 <ESPRxDecoder+0xe4e>
 8003a22:	4b40      	ldr	r3, [pc, #256]	; (8003b24 <ESPRxDecoder+0xf40>)
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d103      	bne.n	8003a32 <ESPRxDecoder+0xe4e>
			 {
			 	bufferptr=2;
 8003a2a:	4b3e      	ldr	r3, [pc, #248]	; (8003b24 <ESPRxDecoder+0xf40>)
 8003a2c:	2202      	movs	r2, #2
 8003a2e:	701a      	strb	r2, [r3, #0]
 8003a30:	e038      	b.n	8003aa4 <ESPRxDecoder+0xec0>
			 }
			 else if((Rxwifi_data=='l')&&(bufferptr==2))
 8003a32:	79fb      	ldrb	r3, [r7, #7]
 8003a34:	2b6c      	cmp	r3, #108	; 0x6c
 8003a36:	d107      	bne.n	8003a48 <ESPRxDecoder+0xe64>
 8003a38:	4b3a      	ldr	r3, [pc, #232]	; (8003b24 <ESPRxDecoder+0xf40>)
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d103      	bne.n	8003a48 <ESPRxDecoder+0xe64>
			 {
			    bufferptr=3;
 8003a40:	4b38      	ldr	r3, [pc, #224]	; (8003b24 <ESPRxDecoder+0xf40>)
 8003a42:	2203      	movs	r2, #3
 8003a44:	701a      	strb	r2, [r3, #0]
 8003a46:	e02d      	b.n	8003aa4 <ESPRxDecoder+0xec0>
			 }
			 else if((Rxwifi_data=='i')&&(bufferptr==3))
 8003a48:	79fb      	ldrb	r3, [r7, #7]
 8003a4a:	2b69      	cmp	r3, #105	; 0x69
 8003a4c:	d107      	bne.n	8003a5e <ESPRxDecoder+0xe7a>
 8003a4e:	4b35      	ldr	r3, [pc, #212]	; (8003b24 <ESPRxDecoder+0xf40>)
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	2b03      	cmp	r3, #3
 8003a54:	d103      	bne.n	8003a5e <ESPRxDecoder+0xe7a>
			 {
			    bufferptr=4;
 8003a56:	4b33      	ldr	r3, [pc, #204]	; (8003b24 <ESPRxDecoder+0xf40>)
 8003a58:	2204      	movs	r2, #4
 8003a5a:	701a      	strb	r2, [r3, #0]
 8003a5c:	e022      	b.n	8003aa4 <ESPRxDecoder+0xec0>
			 }
			 else if((Rxwifi_data=='n')&&(bufferptr==4))
 8003a5e:	79fb      	ldrb	r3, [r7, #7]
 8003a60:	2b6e      	cmp	r3, #110	; 0x6e
 8003a62:	d107      	bne.n	8003a74 <ESPRxDecoder+0xe90>
 8003a64:	4b2f      	ldr	r3, [pc, #188]	; (8003b24 <ESPRxDecoder+0xf40>)
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	2b04      	cmp	r3, #4
 8003a6a:	d103      	bne.n	8003a74 <ESPRxDecoder+0xe90>
			 {
			    bufferptr=5;
 8003a6c:	4b2d      	ldr	r3, [pc, #180]	; (8003b24 <ESPRxDecoder+0xf40>)
 8003a6e:	2205      	movs	r2, #5
 8003a70:	701a      	strb	r2, [r3, #0]
 8003a72:	e017      	b.n	8003aa4 <ESPRxDecoder+0xec0>
			 }
			 else if((Rxwifi_data=='k')&&(bufferptr==5))
 8003a74:	79fb      	ldrb	r3, [r7, #7]
 8003a76:	2b6b      	cmp	r3, #107	; 0x6b
 8003a78:	d114      	bne.n	8003aa4 <ESPRxDecoder+0xec0>
 8003a7a:	4b2a      	ldr	r3, [pc, #168]	; (8003b24 <ESPRxDecoder+0xf40>)
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	2b05      	cmp	r3, #5
 8003a80:	d110      	bne.n	8003aa4 <ESPRxDecoder+0xec0>
			 {
			    bufferptr=0;
 8003a82:	4b28      	ldr	r3, [pc, #160]	; (8003b24 <ESPRxDecoder+0xf40>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	71bb      	strb	r3, [r7, #6]
				wifi_command=103;
 8003a8c:	4b26      	ldr	r3, [pc, #152]	; (8003b28 <ESPRxDecoder+0xf44>)
 8003a8e:	2267      	movs	r2, #103	; 0x67
 8003a90:	701a      	strb	r2, [r3, #0]
				Error_Close=0;
 8003a92:	4b26      	ldr	r3, [pc, #152]	; (8003b2c <ESPRxDecoder+0xf48>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	701a      	strb	r2, [r3, #0]
				Valid_DataWifi1=0;
 8003a98:	4b21      	ldr	r3, [pc, #132]	; (8003b20 <ESPRxDecoder+0xf3c>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	701a      	strb	r2, [r3, #0]
				RxCompleteU2C1WIFI=1;			  /*receive complete*/
 8003a9e:	4b1f      	ldr	r3, [pc, #124]	; (8003b1c <ESPRxDecoder+0xf38>)
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	701a      	strb	r2, [r3, #0]
			 }
			 if((Rxwifi_data=='C')&&(bufferptr==0))
 8003aa4:	79fb      	ldrb	r3, [r7, #7]
 8003aa6:	2b43      	cmp	r3, #67	; 0x43
 8003aa8:	d107      	bne.n	8003aba <ESPRxDecoder+0xed6>
 8003aaa:	4b1e      	ldr	r3, [pc, #120]	; (8003b24 <ESPRxDecoder+0xf40>)
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d103      	bne.n	8003aba <ESPRxDecoder+0xed6>
			 {
			 	bufferptr=1;
 8003ab2:	4b1c      	ldr	r3, [pc, #112]	; (8003b24 <ESPRxDecoder+0xf40>)
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	701a      	strb	r2, [r3, #0]
 8003ab8:	e102      	b.n	8003cc0 <ESPRxDecoder+0x10dc>
			 }
			 else if((Rxwifi_data=='L')&&(bufferptr==1))
 8003aba:	79fb      	ldrb	r3, [r7, #7]
 8003abc:	2b4c      	cmp	r3, #76	; 0x4c
 8003abe:	d107      	bne.n	8003ad0 <ESPRxDecoder+0xeec>
 8003ac0:	4b18      	ldr	r3, [pc, #96]	; (8003b24 <ESPRxDecoder+0xf40>)
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d103      	bne.n	8003ad0 <ESPRxDecoder+0xeec>
			 {
			 	bufferptr=2;
 8003ac8:	4b16      	ldr	r3, [pc, #88]	; (8003b24 <ESPRxDecoder+0xf40>)
 8003aca:	2202      	movs	r2, #2
 8003acc:	701a      	strb	r2, [r3, #0]
 8003ace:	e0f7      	b.n	8003cc0 <ESPRxDecoder+0x10dc>
			 }
			 else if((Rxwifi_data=='O')&&(bufferptr==2))
 8003ad0:	79fb      	ldrb	r3, [r7, #7]
 8003ad2:	2b4f      	cmp	r3, #79	; 0x4f
 8003ad4:	d107      	bne.n	8003ae6 <ESPRxDecoder+0xf02>
 8003ad6:	4b13      	ldr	r3, [pc, #76]	; (8003b24 <ESPRxDecoder+0xf40>)
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d103      	bne.n	8003ae6 <ESPRxDecoder+0xf02>
			 {
			    bufferptr=3;
 8003ade:	4b11      	ldr	r3, [pc, #68]	; (8003b24 <ESPRxDecoder+0xf40>)
 8003ae0:	2203      	movs	r2, #3
 8003ae2:	701a      	strb	r2, [r3, #0]
 8003ae4:	e0ec      	b.n	8003cc0 <ESPRxDecoder+0x10dc>
			 }
			 else if((Rxwifi_data=='S')&&(bufferptr==3))
 8003ae6:	79fb      	ldrb	r3, [r7, #7]
 8003ae8:	2b53      	cmp	r3, #83	; 0x53
 8003aea:	d107      	bne.n	8003afc <ESPRxDecoder+0xf18>
 8003aec:	4b0d      	ldr	r3, [pc, #52]	; (8003b24 <ESPRxDecoder+0xf40>)
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	2b03      	cmp	r3, #3
 8003af2:	d103      	bne.n	8003afc <ESPRxDecoder+0xf18>
			 {
			    bufferptr=4;
 8003af4:	4b0b      	ldr	r3, [pc, #44]	; (8003b24 <ESPRxDecoder+0xf40>)
 8003af6:	2204      	movs	r2, #4
 8003af8:	701a      	strb	r2, [r3, #0]
 8003afa:	e0e1      	b.n	8003cc0 <ESPRxDecoder+0x10dc>
			 }
			 else if((Rxwifi_data=='E')&&(bufferptr==4))
 8003afc:	79fb      	ldrb	r3, [r7, #7]
 8003afe:	2b45      	cmp	r3, #69	; 0x45
 8003b00:	d116      	bne.n	8003b30 <ESPRxDecoder+0xf4c>
 8003b02:	4b08      	ldr	r3, [pc, #32]	; (8003b24 <ESPRxDecoder+0xf40>)
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d112      	bne.n	8003b30 <ESPRxDecoder+0xf4c>
			 {
			    bufferptr=5;
 8003b0a:	4b06      	ldr	r3, [pc, #24]	; (8003b24 <ESPRxDecoder+0xf40>)
 8003b0c:	2205      	movs	r2, #5
 8003b0e:	701a      	strb	r2, [r3, #0]
 8003b10:	e0d6      	b.n	8003cc0 <ESPRxDecoder+0x10dc>
 8003b12:	bf00      	nop
 8003b14:	200002aa 	.word	0x200002aa
 8003b18:	20000264 	.word	0x20000264
 8003b1c:	200002ae 	.word	0x200002ae
 8003b20:	200002af 	.word	0x200002af
 8003b24:	20000254 	.word	0x20000254
 8003b28:	2000008d 	.word	0x2000008d
 8003b2c:	200002ad 	.word	0x200002ad
			 }
			 else if((Rxwifi_data=='D')&&(bufferptr==5))
 8003b30:	79fb      	ldrb	r3, [r7, #7]
 8003b32:	2b44      	cmp	r3, #68	; 0x44
 8003b34:	f040 80ee 	bne.w	8003d14 <ESPRxDecoder+0x1130>
 8003b38:	4b7a      	ldr	r3, [pc, #488]	; (8003d24 <ESPRxDecoder+0x1140>)
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	2b05      	cmp	r3, #5
 8003b3e:	f040 80e9 	bne.w	8003d14 <ESPRxDecoder+0x1130>
			 {
			    bufferptr=0;
 8003b42:	4b78      	ldr	r3, [pc, #480]	; (8003d24 <ESPRxDecoder+0x1140>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	71bb      	strb	r3, [r7, #6]
				wifi_command=103;
 8003b4c:	4b76      	ldr	r3, [pc, #472]	; (8003d28 <ESPRxDecoder+0x1144>)
 8003b4e:	2267      	movs	r2, #103	; 0x67
 8003b50:	701a      	strb	r2, [r3, #0]
				Error_Close=0;
 8003b52:	4b76      	ldr	r3, [pc, #472]	; (8003d2c <ESPRxDecoder+0x1148>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	701a      	strb	r2, [r3, #0]
				Valid_DataWifi1=0;
 8003b58:	4b75      	ldr	r3, [pc, #468]	; (8003d30 <ESPRxDecoder+0x114c>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	701a      	strb	r2, [r3, #0]
				RxCompleteU2C1WIFI=1;				  /*receive complete*/
 8003b5e:	4b75      	ldr	r3, [pc, #468]	; (8003d34 <ESPRxDecoder+0x1150>)
 8003b60:	2201      	movs	r2, #1
 8003b62:	701a      	strb	r2, [r3, #0]
				else{wifi_command=103;}
				Valid_DataWifi1=0;
				RxCompleteU2C1WIFI=0;   /*Wrong receive*/
			 }
			}
		break;
 8003b64:	e0d6      	b.n	8003d14 <ESPRxDecoder+0x1130>
			  if((Rxwifi_data=='U')&&(bufferptr==0))
 8003b66:	79fb      	ldrb	r3, [r7, #7]
 8003b68:	2b55      	cmp	r3, #85	; 0x55
 8003b6a:	d107      	bne.n	8003b7c <ESPRxDecoder+0xf98>
 8003b6c:	4b6d      	ldr	r3, [pc, #436]	; (8003d24 <ESPRxDecoder+0x1140>)
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d103      	bne.n	8003b7c <ESPRxDecoder+0xf98>
			 	bufferptr=1;
 8003b74:	4b6b      	ldr	r3, [pc, #428]	; (8003d24 <ESPRxDecoder+0x1140>)
 8003b76:	2201      	movs	r2, #1
 8003b78:	701a      	strb	r2, [r3, #0]
 8003b7a:	e043      	b.n	8003c04 <ESPRxDecoder+0x1020>
			 else if((Rxwifi_data=='n')&&(bufferptr==1))
 8003b7c:	79fb      	ldrb	r3, [r7, #7]
 8003b7e:	2b6e      	cmp	r3, #110	; 0x6e
 8003b80:	d107      	bne.n	8003b92 <ESPRxDecoder+0xfae>
 8003b82:	4b68      	ldr	r3, [pc, #416]	; (8003d24 <ESPRxDecoder+0x1140>)
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d103      	bne.n	8003b92 <ESPRxDecoder+0xfae>
			 	bufferptr=2;
 8003b8a:	4b66      	ldr	r3, [pc, #408]	; (8003d24 <ESPRxDecoder+0x1140>)
 8003b8c:	2202      	movs	r2, #2
 8003b8e:	701a      	strb	r2, [r3, #0]
 8003b90:	e038      	b.n	8003c04 <ESPRxDecoder+0x1020>
			 else if((Rxwifi_data=='l')&&(bufferptr==2))
 8003b92:	79fb      	ldrb	r3, [r7, #7]
 8003b94:	2b6c      	cmp	r3, #108	; 0x6c
 8003b96:	d107      	bne.n	8003ba8 <ESPRxDecoder+0xfc4>
 8003b98:	4b62      	ldr	r3, [pc, #392]	; (8003d24 <ESPRxDecoder+0x1140>)
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d103      	bne.n	8003ba8 <ESPRxDecoder+0xfc4>
			    bufferptr=3;
 8003ba0:	4b60      	ldr	r3, [pc, #384]	; (8003d24 <ESPRxDecoder+0x1140>)
 8003ba2:	2203      	movs	r2, #3
 8003ba4:	701a      	strb	r2, [r3, #0]
 8003ba6:	e02d      	b.n	8003c04 <ESPRxDecoder+0x1020>
			 else if((Rxwifi_data=='i')&&(bufferptr==3))
 8003ba8:	79fb      	ldrb	r3, [r7, #7]
 8003baa:	2b69      	cmp	r3, #105	; 0x69
 8003bac:	d107      	bne.n	8003bbe <ESPRxDecoder+0xfda>
 8003bae:	4b5d      	ldr	r3, [pc, #372]	; (8003d24 <ESPRxDecoder+0x1140>)
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	2b03      	cmp	r3, #3
 8003bb4:	d103      	bne.n	8003bbe <ESPRxDecoder+0xfda>
			    bufferptr=4;
 8003bb6:	4b5b      	ldr	r3, [pc, #364]	; (8003d24 <ESPRxDecoder+0x1140>)
 8003bb8:	2204      	movs	r2, #4
 8003bba:	701a      	strb	r2, [r3, #0]
 8003bbc:	e022      	b.n	8003c04 <ESPRxDecoder+0x1020>
			 else if((Rxwifi_data=='n')&&(bufferptr==4))
 8003bbe:	79fb      	ldrb	r3, [r7, #7]
 8003bc0:	2b6e      	cmp	r3, #110	; 0x6e
 8003bc2:	d107      	bne.n	8003bd4 <ESPRxDecoder+0xff0>
 8003bc4:	4b57      	ldr	r3, [pc, #348]	; (8003d24 <ESPRxDecoder+0x1140>)
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	2b04      	cmp	r3, #4
 8003bca:	d103      	bne.n	8003bd4 <ESPRxDecoder+0xff0>
			    bufferptr=5;
 8003bcc:	4b55      	ldr	r3, [pc, #340]	; (8003d24 <ESPRxDecoder+0x1140>)
 8003bce:	2205      	movs	r2, #5
 8003bd0:	701a      	strb	r2, [r3, #0]
 8003bd2:	e017      	b.n	8003c04 <ESPRxDecoder+0x1020>
			 else if((Rxwifi_data=='k')&&(bufferptr==5))
 8003bd4:	79fb      	ldrb	r3, [r7, #7]
 8003bd6:	2b6b      	cmp	r3, #107	; 0x6b
 8003bd8:	d114      	bne.n	8003c04 <ESPRxDecoder+0x1020>
 8003bda:	4b52      	ldr	r3, [pc, #328]	; (8003d24 <ESPRxDecoder+0x1140>)
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	2b05      	cmp	r3, #5
 8003be0:	d110      	bne.n	8003c04 <ESPRxDecoder+0x1020>
			    bufferptr=0;
 8003be2:	4b50      	ldr	r3, [pc, #320]	; (8003d24 <ESPRxDecoder+0x1140>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8003be8:	2300      	movs	r3, #0
 8003bea:	71bb      	strb	r3, [r7, #6]
				wifi_command=103;
 8003bec:	4b4e      	ldr	r3, [pc, #312]	; (8003d28 <ESPRxDecoder+0x1144>)
 8003bee:	2267      	movs	r2, #103	; 0x67
 8003bf0:	701a      	strb	r2, [r3, #0]
				Error_Close=0;
 8003bf2:	4b4e      	ldr	r3, [pc, #312]	; (8003d2c <ESPRxDecoder+0x1148>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	701a      	strb	r2, [r3, #0]
				Valid_DataWifi1=0;
 8003bf8:	4b4d      	ldr	r3, [pc, #308]	; (8003d30 <ESPRxDecoder+0x114c>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	701a      	strb	r2, [r3, #0]
				RxCompleteU2C1WIFI=1;				    /*receive complete*/
 8003bfe:	4b4d      	ldr	r3, [pc, #308]	; (8003d34 <ESPRxDecoder+0x1150>)
 8003c00:	2201      	movs	r2, #1
 8003c02:	701a      	strb	r2, [r3, #0]
			   if((Rxwifi_data=='C')&&(bufferptr==0))
 8003c04:	79fb      	ldrb	r3, [r7, #7]
 8003c06:	2b43      	cmp	r3, #67	; 0x43
 8003c08:	d107      	bne.n	8003c1a <ESPRxDecoder+0x1036>
 8003c0a:	4b46      	ldr	r3, [pc, #280]	; (8003d24 <ESPRxDecoder+0x1140>)
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d103      	bne.n	8003c1a <ESPRxDecoder+0x1036>
			 	bufferptr=1;
 8003c12:	4b44      	ldr	r3, [pc, #272]	; (8003d24 <ESPRxDecoder+0x1140>)
 8003c14:	2201      	movs	r2, #1
 8003c16:	701a      	strb	r2, [r3, #0]
 8003c18:	e052      	b.n	8003cc0 <ESPRxDecoder+0x10dc>
			 else if((Rxwifi_data=='L')&&(bufferptr==1))
 8003c1a:	79fb      	ldrb	r3, [r7, #7]
 8003c1c:	2b4c      	cmp	r3, #76	; 0x4c
 8003c1e:	d107      	bne.n	8003c30 <ESPRxDecoder+0x104c>
 8003c20:	4b40      	ldr	r3, [pc, #256]	; (8003d24 <ESPRxDecoder+0x1140>)
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d103      	bne.n	8003c30 <ESPRxDecoder+0x104c>
			 	bufferptr=2;
 8003c28:	4b3e      	ldr	r3, [pc, #248]	; (8003d24 <ESPRxDecoder+0x1140>)
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	701a      	strb	r2, [r3, #0]
 8003c2e:	e047      	b.n	8003cc0 <ESPRxDecoder+0x10dc>
			 else if((Rxwifi_data=='O')&&(bufferptr==2))
 8003c30:	79fb      	ldrb	r3, [r7, #7]
 8003c32:	2b4f      	cmp	r3, #79	; 0x4f
 8003c34:	d107      	bne.n	8003c46 <ESPRxDecoder+0x1062>
 8003c36:	4b3b      	ldr	r3, [pc, #236]	; (8003d24 <ESPRxDecoder+0x1140>)
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d103      	bne.n	8003c46 <ESPRxDecoder+0x1062>
			    bufferptr=3;
 8003c3e:	4b39      	ldr	r3, [pc, #228]	; (8003d24 <ESPRxDecoder+0x1140>)
 8003c40:	2203      	movs	r2, #3
 8003c42:	701a      	strb	r2, [r3, #0]
 8003c44:	e03c      	b.n	8003cc0 <ESPRxDecoder+0x10dc>
			 else if((Rxwifi_data=='S')&&(bufferptr==3))
 8003c46:	79fb      	ldrb	r3, [r7, #7]
 8003c48:	2b53      	cmp	r3, #83	; 0x53
 8003c4a:	d107      	bne.n	8003c5c <ESPRxDecoder+0x1078>
 8003c4c:	4b35      	ldr	r3, [pc, #212]	; (8003d24 <ESPRxDecoder+0x1140>)
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	2b03      	cmp	r3, #3
 8003c52:	d103      	bne.n	8003c5c <ESPRxDecoder+0x1078>
			    bufferptr=4;
 8003c54:	4b33      	ldr	r3, [pc, #204]	; (8003d24 <ESPRxDecoder+0x1140>)
 8003c56:	2204      	movs	r2, #4
 8003c58:	701a      	strb	r2, [r3, #0]
 8003c5a:	e031      	b.n	8003cc0 <ESPRxDecoder+0x10dc>
			 else if((Rxwifi_data=='E')&&(bufferptr==4))
 8003c5c:	79fb      	ldrb	r3, [r7, #7]
 8003c5e:	2b45      	cmp	r3, #69	; 0x45
 8003c60:	d107      	bne.n	8003c72 <ESPRxDecoder+0x108e>
 8003c62:	4b30      	ldr	r3, [pc, #192]	; (8003d24 <ESPRxDecoder+0x1140>)
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	2b04      	cmp	r3, #4
 8003c68:	d103      	bne.n	8003c72 <ESPRxDecoder+0x108e>
			    bufferptr=5;
 8003c6a:	4b2e      	ldr	r3, [pc, #184]	; (8003d24 <ESPRxDecoder+0x1140>)
 8003c6c:	2205      	movs	r2, #5
 8003c6e:	701a      	strb	r2, [r3, #0]
 8003c70:	e026      	b.n	8003cc0 <ESPRxDecoder+0x10dc>
			 else if((Rxwifi_data=='D')&&(bufferptr==5))
 8003c72:	79fb      	ldrb	r3, [r7, #7]
 8003c74:	2b44      	cmp	r3, #68	; 0x44
 8003c76:	d14d      	bne.n	8003d14 <ESPRxDecoder+0x1130>
 8003c78:	4b2a      	ldr	r3, [pc, #168]	; (8003d24 <ESPRxDecoder+0x1140>)
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	2b05      	cmp	r3, #5
 8003c7e:	d149      	bne.n	8003d14 <ESPRxDecoder+0x1130>
			    bufferptr=0;
 8003c80:	4b28      	ldr	r3, [pc, #160]	; (8003d24 <ESPRxDecoder+0x1140>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8003c86:	2300      	movs	r3, #0
 8003c88:	71bb      	strb	r3, [r7, #6]
				if(++Error_Close>3){wifi_command=10;Error_Close=0;}
 8003c8a:	4b28      	ldr	r3, [pc, #160]	; (8003d2c <ESPRxDecoder+0x1148>)
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	3301      	adds	r3, #1
 8003c90:	b2da      	uxtb	r2, r3
 8003c92:	4b26      	ldr	r3, [pc, #152]	; (8003d2c <ESPRxDecoder+0x1148>)
 8003c94:	701a      	strb	r2, [r3, #0]
 8003c96:	4b25      	ldr	r3, [pc, #148]	; (8003d2c <ESPRxDecoder+0x1148>)
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	2b03      	cmp	r3, #3
 8003c9c:	d906      	bls.n	8003cac <ESPRxDecoder+0x10c8>
 8003c9e:	4b22      	ldr	r3, [pc, #136]	; (8003d28 <ESPRxDecoder+0x1144>)
 8003ca0:	220a      	movs	r2, #10
 8003ca2:	701a      	strb	r2, [r3, #0]
 8003ca4:	4b21      	ldr	r3, [pc, #132]	; (8003d2c <ESPRxDecoder+0x1148>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	701a      	strb	r2, [r3, #0]
 8003caa:	e002      	b.n	8003cb2 <ESPRxDecoder+0x10ce>
				else{wifi_command=103;}
 8003cac:	4b1e      	ldr	r3, [pc, #120]	; (8003d28 <ESPRxDecoder+0x1144>)
 8003cae:	2267      	movs	r2, #103	; 0x67
 8003cb0:	701a      	strb	r2, [r3, #0]
				Valid_DataWifi1=0;
 8003cb2:	4b1f      	ldr	r3, [pc, #124]	; (8003d30 <ESPRxDecoder+0x114c>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	701a      	strb	r2, [r3, #0]
				RxCompleteU2C1WIFI=0;   /*Wrong receive*/
 8003cb8:	4b1e      	ldr	r3, [pc, #120]	; (8003d34 <ESPRxDecoder+0x1150>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	701a      	strb	r2, [r3, #0]
		break;
 8003cbe:	e029      	b.n	8003d14 <ESPRxDecoder+0x1130>
 8003cc0:	e028      	b.n	8003d14 <ESPRxDecoder+0x1130>
		case 8:
			 if((Rxwifi_data=='O')&&(bufferptr==0))
 8003cc2:	79fb      	ldrb	r3, [r7, #7]
 8003cc4:	2b4f      	cmp	r3, #79	; 0x4f
 8003cc6:	d107      	bne.n	8003cd8 <ESPRxDecoder+0x10f4>
 8003cc8:	4b16      	ldr	r3, [pc, #88]	; (8003d24 <ESPRxDecoder+0x1140>)
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d103      	bne.n	8003cd8 <ESPRxDecoder+0x10f4>
			 {
			 	bufferptr=1;
 8003cd0:	4b14      	ldr	r3, [pc, #80]	; (8003d24 <ESPRxDecoder+0x1140>)
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	701a      	strb	r2, [r3, #0]
			 {
			 	bufferptr=0;
				Rxseqdecoder=0;
				wifi_command=20;
			 }
		break;
 8003cd6:	e01f      	b.n	8003d18 <ESPRxDecoder+0x1134>
			 else if((Rxwifi_data=='K')&&(bufferptr==1))
 8003cd8:	79fb      	ldrb	r3, [r7, #7]
 8003cda:	2b4b      	cmp	r3, #75	; 0x4b
 8003cdc:	d11c      	bne.n	8003d18 <ESPRxDecoder+0x1134>
 8003cde:	4b11      	ldr	r3, [pc, #68]	; (8003d24 <ESPRxDecoder+0x1140>)
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d118      	bne.n	8003d18 <ESPRxDecoder+0x1134>
			 	bufferptr=0;
 8003ce6:	4b0f      	ldr	r3, [pc, #60]	; (8003d24 <ESPRxDecoder+0x1140>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8003cec:	2300      	movs	r3, #0
 8003cee:	71bb      	strb	r3, [r7, #6]
				wifi_command=20;
 8003cf0:	4b0d      	ldr	r3, [pc, #52]	; (8003d28 <ESPRxDecoder+0x1144>)
 8003cf2:	2214      	movs	r2, #20
 8003cf4:	701a      	strb	r2, [r3, #0]
		break;
 8003cf6:	e00f      	b.n	8003d18 <ESPRxDecoder+0x1134>
	   	default:
		break;
 8003cf8:	bf00      	nop
 8003cfa:	e00e      	b.n	8003d1a <ESPRxDecoder+0x1136>
		break;
 8003cfc:	bf00      	nop
 8003cfe:	e00c      	b.n	8003d1a <ESPRxDecoder+0x1136>
		break;
 8003d00:	bf00      	nop
 8003d02:	e00a      	b.n	8003d1a <ESPRxDecoder+0x1136>
		break;
 8003d04:	bf00      	nop
 8003d06:	e008      	b.n	8003d1a <ESPRxDecoder+0x1136>
		break;
 8003d08:	bf00      	nop
 8003d0a:	e006      	b.n	8003d1a <ESPRxDecoder+0x1136>
		break;
 8003d0c:	bf00      	nop
 8003d0e:	e004      	b.n	8003d1a <ESPRxDecoder+0x1136>
		break;
 8003d10:	bf00      	nop
 8003d12:	e002      	b.n	8003d1a <ESPRxDecoder+0x1136>
		break;
 8003d14:	bf00      	nop
 8003d16:	e000      	b.n	8003d1a <ESPRxDecoder+0x1136>
		break;
 8003d18:	bf00      	nop
		}
}
 8003d1a:	bf00      	nop
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	20000254 	.word	0x20000254
 8003d28:	2000008d 	.word	0x2000008d
 8003d2c:	200002ad 	.word	0x200002ad
 8003d30:	200002af 	.word	0x200002af
 8003d34:	200002ae 	.word	0x200002ae

08003d38 <DecToASCIIFun>:

unsigned char DecToASCIIFun(unsigned char TempVar)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	4603      	mov	r3, r0
 8003d40:	71fb      	strb	r3, [r7, #7]
	unsigned char  ASCIIHex;
	switch(TempVar)
 8003d42:	79fb      	ldrb	r3, [r7, #7]
 8003d44:	3b30      	subs	r3, #48	; 0x30
 8003d46:	2b16      	cmp	r3, #22
 8003d48:	d860      	bhi.n	8003e0c <DecToASCIIFun+0xd4>
 8003d4a:	a201      	add	r2, pc, #4	; (adr r2, 8003d50 <DecToASCIIFun+0x18>)
 8003d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d50:	08003dad 	.word	0x08003dad
 8003d54:	08003db3 	.word	0x08003db3
 8003d58:	08003db9 	.word	0x08003db9
 8003d5c:	08003dbf 	.word	0x08003dbf
 8003d60:	08003dc5 	.word	0x08003dc5
 8003d64:	08003dcb 	.word	0x08003dcb
 8003d68:	08003dd1 	.word	0x08003dd1
 8003d6c:	08003dd7 	.word	0x08003dd7
 8003d70:	08003ddd 	.word	0x08003ddd
 8003d74:	08003de3 	.word	0x08003de3
 8003d78:	08003e0d 	.word	0x08003e0d
 8003d7c:	08003e0d 	.word	0x08003e0d
 8003d80:	08003e0d 	.word	0x08003e0d
 8003d84:	08003e0d 	.word	0x08003e0d
 8003d88:	08003e0d 	.word	0x08003e0d
 8003d8c:	08003e0d 	.word	0x08003e0d
 8003d90:	08003e0d 	.word	0x08003e0d
 8003d94:	08003de9 	.word	0x08003de9
 8003d98:	08003def 	.word	0x08003def
 8003d9c:	08003df5 	.word	0x08003df5
 8003da0:	08003dfb 	.word	0x08003dfb
 8003da4:	08003e01 	.word	0x08003e01
 8003da8:	08003e07 	.word	0x08003e07
	{
	case 48:
			ASCIIHex = 0x00;
 8003dac:	2300      	movs	r3, #0
 8003dae:	73fb      	strb	r3, [r7, #15]
			break;
 8003db0:	e02c      	b.n	8003e0c <DecToASCIIFun+0xd4>
	case 49:
			ASCIIHex = 0x01;
 8003db2:	2301      	movs	r3, #1
 8003db4:	73fb      	strb	r3, [r7, #15]
			break;
 8003db6:	e029      	b.n	8003e0c <DecToASCIIFun+0xd4>
	case 50:
			ASCIIHex = 0x02;
 8003db8:	2302      	movs	r3, #2
 8003dba:	73fb      	strb	r3, [r7, #15]
			break;
 8003dbc:	e026      	b.n	8003e0c <DecToASCIIFun+0xd4>
	case 51:
			ASCIIHex = 0x03;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	73fb      	strb	r3, [r7, #15]
			break;
 8003dc2:	e023      	b.n	8003e0c <DecToASCIIFun+0xd4>
	case 52:
			ASCIIHex = 0x04;
 8003dc4:	2304      	movs	r3, #4
 8003dc6:	73fb      	strb	r3, [r7, #15]
			break;
 8003dc8:	e020      	b.n	8003e0c <DecToASCIIFun+0xd4>
	case 53:
			ASCIIHex = 0x05;
 8003dca:	2305      	movs	r3, #5
 8003dcc:	73fb      	strb	r3, [r7, #15]
			break;
 8003dce:	e01d      	b.n	8003e0c <DecToASCIIFun+0xd4>
	case 54:
			ASCIIHex = 0x06;
 8003dd0:	2306      	movs	r3, #6
 8003dd2:	73fb      	strb	r3, [r7, #15]
			break;
 8003dd4:	e01a      	b.n	8003e0c <DecToASCIIFun+0xd4>
	case 55:
			ASCIIHex = 0x07;
 8003dd6:	2307      	movs	r3, #7
 8003dd8:	73fb      	strb	r3, [r7, #15]
			break;
 8003dda:	e017      	b.n	8003e0c <DecToASCIIFun+0xd4>
	case 56:
			ASCIIHex = 0x08;
 8003ddc:	2308      	movs	r3, #8
 8003dde:	73fb      	strb	r3, [r7, #15]
			break;
 8003de0:	e014      	b.n	8003e0c <DecToASCIIFun+0xd4>
	case 57:
			ASCIIHex = 0x09;
 8003de2:	2309      	movs	r3, #9
 8003de4:	73fb      	strb	r3, [r7, #15]
			break;
 8003de6:	e011      	b.n	8003e0c <DecToASCIIFun+0xd4>
	case 65:
			ASCIIHex = 0x0A;
 8003de8:	230a      	movs	r3, #10
 8003dea:	73fb      	strb	r3, [r7, #15]
			break;
 8003dec:	e00e      	b.n	8003e0c <DecToASCIIFun+0xd4>
	case 66:
			ASCIIHex = 0x0B;
 8003dee:	230b      	movs	r3, #11
 8003df0:	73fb      	strb	r3, [r7, #15]
			break;
 8003df2:	e00b      	b.n	8003e0c <DecToASCIIFun+0xd4>
	case 67:
			ASCIIHex = 0x0C;
 8003df4:	230c      	movs	r3, #12
 8003df6:	73fb      	strb	r3, [r7, #15]
			break;
 8003df8:	e008      	b.n	8003e0c <DecToASCIIFun+0xd4>
	case 68:
			ASCIIHex = 0x0D;
 8003dfa:	230d      	movs	r3, #13
 8003dfc:	73fb      	strb	r3, [r7, #15]
			break;
 8003dfe:	e005      	b.n	8003e0c <DecToASCIIFun+0xd4>
	case 69:
			ASCIIHex = 0x0E;
 8003e00:	230e      	movs	r3, #14
 8003e02:	73fb      	strb	r3, [r7, #15]
			break;
 8003e04:	e002      	b.n	8003e0c <DecToASCIIFun+0xd4>
	case 70:
			ASCIIHex = 0x0F;
 8003e06:	230f      	movs	r3, #15
 8003e08:	73fb      	strb	r3, [r7, #15]
			break;
 8003e0a:	bf00      	nop
	}
	return (ASCIIHex);
 8003e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3714      	adds	r7, #20
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop

08003e1c <HAL_UART_RxCpltCallback>:

extern uint8_t Rxseqdecoder;
extern void ESPRxDecoder(unsigned char Rxwifi_data,unsigned char Rxseqdecoder);

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
	if(huart == &hlpuart1)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a0a      	ldr	r2, [pc, #40]	; (8003e50 <HAL_UART_RxCpltCallback+0x34>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d10c      	bne.n	8003e46 <HAL_UART_RxCpltCallback+0x2a>
	{
		ESPRxDecoder(rxTempBuff[0],Rxseqdecoder);
 8003e2c:	4b09      	ldr	r3, [pc, #36]	; (8003e54 <HAL_UART_RxCpltCallback+0x38>)
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	4a09      	ldr	r2, [pc, #36]	; (8003e58 <HAL_UART_RxCpltCallback+0x3c>)
 8003e32:	7812      	ldrb	r2, [r2, #0]
 8003e34:	4611      	mov	r1, r2
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7fe fed4 	bl	8002be4 <ESPRxDecoder>

		HAL_UART_Receive_IT(&hlpuart1,rxTempBuff,1);
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	4905      	ldr	r1, [pc, #20]	; (8003e54 <HAL_UART_RxCpltCallback+0x38>)
 8003e40:	4803      	ldr	r0, [pc, #12]	; (8003e50 <HAL_UART_RxCpltCallback+0x34>)
 8003e42:	f009 fc7f 	bl	800d744 <HAL_UART_Receive_IT>
	}
}
 8003e46:	bf00      	nop
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	200003d4 	.word	0x200003d4
 8003e54:	2000070c 	.word	0x2000070c
 8003e58:	20000255 	.word	0x20000255

08003e5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e60:	f005 ff68 	bl	8009d34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e64:	f000 f876 	bl	8003f54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e68:	f000 fae4 	bl	8004434 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003e6c:	f000 f960 	bl	8004130 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8003e70:	f000 f8c2 	bl	8003ff8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8003e74:	f000 f92c 	bl	80040d0 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8003e78:	f000 fa6e 	bl	8004358 <MX_TIM6_Init>
  MX_SPI2_Init();
 8003e7c:	f000 f9d0 	bl	8004220 <MX_SPI2_Init>
  MX_TIM1_Init();
 8003e80:	f000 fa16 	bl	80042b0 <MX_TIM1_Init>
  MX_LPUART1_UART_Init();
 8003e84:	f000 f8f8 	bl	8004078 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 8003e88:	f000 f982 	bl	8004190 <MX_SPI1_Init>
  MX_TIM7_Init();
 8003e8c:	f000 fa9c 	bl	80043c8 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8003e90:	481e      	ldr	r0, [pc, #120]	; (8003f0c <main+0xb0>)
 8003e92:	f008 ffb5 	bl	800ce00 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8003e96:	481e      	ldr	r0, [pc, #120]	; (8003f10 <main+0xb4>)
 8003e98:	f008 ffb2 	bl	800ce00 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim1);
 8003e9c:	481d      	ldr	r0, [pc, #116]	; (8003f14 <main+0xb8>)
 8003e9e:	f008 ff63 	bl	800cd68 <HAL_TIM_Base_Start>
//  for(i=0;i<=250;i++)
//  {
//	  data[i]=i;
//  }

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ea8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003eac:	f006 fae4 	bl	800a478 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8003eb0:	2002      	movs	r0, #2
 8003eb2:	f005 ffb3 	bl	8009e1c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ebc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ec0:	f006 fada 	bl	800a478 <HAL_GPIO_WritePin>
  {
	  while(1);
  }
#endif
 // HAL_UART_Transmit_IT(&huart1,data,sizeof(data));
  HAL_UART_Receive_IT(&hlpuart1,rxTempBuff,1);
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	4914      	ldr	r1, [pc, #80]	; (8003f18 <main+0xbc>)
 8003ec8:	4814      	ldr	r0, [pc, #80]	; (8003f1c <main+0xc0>)
 8003eca:	f009 fc3b 	bl	800d744 <HAL_UART_Receive_IT>
  W25qxx_Init();
 8003ece:	f001 f80d 	bl	8004eec <W25qxx_Init>
  W25qxx_ReadByte(&check_w,1280);
 8003ed2:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8003ed6:	4812      	ldr	r0, [pc, #72]	; (8003f20 <main+0xc4>)
 8003ed8:	f001 f988 	bl	80051ec <W25qxx_ReadByte>
  check_w=check_w+1;
 8003edc:	4b10      	ldr	r3, [pc, #64]	; (8003f20 <main+0xc4>)
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	4b0e      	ldr	r3, [pc, #56]	; (8003f20 <main+0xc4>)
 8003ee6:	701a      	strb	r2, [r3, #0]
  W25qxx_EraseSector(0);
 8003ee8:	2000      	movs	r0, #0
 8003eea:	f001 f8d1 	bl	8005090 <W25qxx_EraseSector>
  W25qxx_WriteByte(check_w,1280);
 8003eee:	4b0c      	ldr	r3, [pc, #48]	; (8003f20 <main+0xc4>)
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f001 f922 	bl	8005140 <W25qxx_WriteByte>

  rtc_set_time(1,20,30);
 8003efc:	221e      	movs	r2, #30
 8003efe:	2114      	movs	r1, #20
 8003f00:	2001      	movs	r0, #1
 8003f02:	f000 febb 	bl	8004c7c <rtc_set_time>

  while (1)
  {
	  cppMain();
 8003f06:	f005 fed3 	bl	8009cb0 <cppMain>
 8003f0a:	e7fc      	b.n	8003f06 <main+0xaa>
 8003f0c:	20000674 	.word	0x20000674
 8003f10:	200006c0 	.word	0x200006c0
 8003f14:	20000628 	.word	0x20000628
 8003f18:	2000070c 	.word	0x2000070c
 8003f1c:	200003d4 	.word	0x200003d4
 8003f20:	20000711 	.word	0x20000711

08003f24 <HAL_TIM_PeriodElapsedCallback>:
  }
  /* USER CODE END 3 */
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
	if(htim == &htim7)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a07      	ldr	r2, [pc, #28]	; (8003f4c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d105      	bne.n	8003f40 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		//Flag1MS=1;
		++Flag1MS;
 8003f34:	4b06      	ldr	r3, [pc, #24]	; (8003f50 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	b2da      	uxtb	r2, r3
 8003f3c:	4b04      	ldr	r3, [pc, #16]	; (8003f50 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003f3e:	701a      	strb	r2, [r3, #0]
	}
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr
 8003f4c:	200006c0 	.word	0x200006c0
 8003f50:	20000712 	.word	0x20000712

08003f54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b096      	sub	sp, #88	; 0x58
 8003f58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f5a:	f107 0314 	add.w	r3, r7, #20
 8003f5e:	2244      	movs	r2, #68	; 0x44
 8003f60:	2100      	movs	r1, #0
 8003f62:	4618      	mov	r0, r3
 8003f64:	f00a ff18 	bl	800ed98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f68:	463b      	mov	r3, r7
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	605a      	str	r2, [r3, #4]
 8003f70:	609a      	str	r2, [r3, #8]
 8003f72:	60da      	str	r2, [r3, #12]
 8003f74:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003f76:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003f7a:	f007 f8b9 	bl	800b0f0 <HAL_PWREx_ControlVoltageScaling>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d001      	beq.n	8003f88 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003f84:	f000 fb48 	bl	8004618 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003f88:	2310      	movs	r3, #16
 8003f8a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003f90:	2300      	movs	r3, #0
 8003f92:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003f94:	2360      	movs	r3, #96	; 0x60
 8003f96:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f98:	2302      	movs	r3, #2
 8003f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 86;
 8003fa4:	2356      	movs	r3, #86	; 0x56
 8003fa6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003fa8:	2307      	movs	r3, #7
 8003faa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003fac:	2302      	movs	r3, #2
 8003fae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 8003fb0:	2308      	movs	r3, #8
 8003fb2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003fb4:	f107 0314 	add.w	r3, r7, #20
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f007 f8ef 	bl	800b19c <HAL_RCC_OscConfig>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d001      	beq.n	8003fc8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8003fc4:	f000 fb28 	bl	8004618 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003fc8:	230f      	movs	r3, #15
 8003fca:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003fdc:	463b      	mov	r3, r7
 8003fde:	2102      	movs	r1, #2
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f007 fcef 	bl	800b9c4 <HAL_RCC_ClockConfig>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003fec:	f000 fb14 	bl	8004618 <Error_Handler>
  }
}
 8003ff0:	bf00      	nop
 8003ff2:	3758      	adds	r7, #88	; 0x58
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003ffc:	4b1b      	ldr	r3, [pc, #108]	; (800406c <MX_I2C1_Init+0x74>)
 8003ffe:	4a1c      	ldr	r2, [pc, #112]	; (8004070 <MX_I2C1_Init+0x78>)
 8004000:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00A0A7FD;
 8004002:	4b1a      	ldr	r3, [pc, #104]	; (800406c <MX_I2C1_Init+0x74>)
 8004004:	4a1b      	ldr	r2, [pc, #108]	; (8004074 <MX_I2C1_Init+0x7c>)
 8004006:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004008:	4b18      	ldr	r3, [pc, #96]	; (800406c <MX_I2C1_Init+0x74>)
 800400a:	2200      	movs	r2, #0
 800400c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800400e:	4b17      	ldr	r3, [pc, #92]	; (800406c <MX_I2C1_Init+0x74>)
 8004010:	2201      	movs	r2, #1
 8004012:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004014:	4b15      	ldr	r3, [pc, #84]	; (800406c <MX_I2C1_Init+0x74>)
 8004016:	2200      	movs	r2, #0
 8004018:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800401a:	4b14      	ldr	r3, [pc, #80]	; (800406c <MX_I2C1_Init+0x74>)
 800401c:	2200      	movs	r2, #0
 800401e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004020:	4b12      	ldr	r3, [pc, #72]	; (800406c <MX_I2C1_Init+0x74>)
 8004022:	2200      	movs	r2, #0
 8004024:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004026:	4b11      	ldr	r3, [pc, #68]	; (800406c <MX_I2C1_Init+0x74>)
 8004028:	2200      	movs	r2, #0
 800402a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800402c:	4b0f      	ldr	r3, [pc, #60]	; (800406c <MX_I2C1_Init+0x74>)
 800402e:	2200      	movs	r2, #0
 8004030:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004032:	480e      	ldr	r0, [pc, #56]	; (800406c <MX_I2C1_Init+0x74>)
 8004034:	f006 fa52 	bl	800a4dc <HAL_I2C_Init>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800403e:	f000 faeb 	bl	8004618 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004042:	2100      	movs	r1, #0
 8004044:	4809      	ldr	r0, [pc, #36]	; (800406c <MX_I2C1_Init+0x74>)
 8004046:	f006 ffad 	bl	800afa4 <HAL_I2CEx_ConfigAnalogFilter>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004050:	f000 fae2 	bl	8004618 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004054:	2100      	movs	r1, #0
 8004056:	4805      	ldr	r0, [pc, #20]	; (800406c <MX_I2C1_Init+0x74>)
 8004058:	f006 ffef 	bl	800b03a <HAL_I2CEx_ConfigDigitalFilter>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004062:	f000 fad9 	bl	8004618 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004066:	bf00      	nop
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	20000380 	.word	0x20000380
 8004070:	40005400 	.word	0x40005400
 8004074:	00a0a7fd 	.word	0x00a0a7fd

08004078 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800407c:	4b12      	ldr	r3, [pc, #72]	; (80040c8 <MX_LPUART1_UART_Init+0x50>)
 800407e:	4a13      	ldr	r2, [pc, #76]	; (80040cc <MX_LPUART1_UART_Init+0x54>)
 8004080:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8004082:	4b11      	ldr	r3, [pc, #68]	; (80040c8 <MX_LPUART1_UART_Init+0x50>)
 8004084:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004088:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800408a:	4b0f      	ldr	r3, [pc, #60]	; (80040c8 <MX_LPUART1_UART_Init+0x50>)
 800408c:	2200      	movs	r2, #0
 800408e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8004090:	4b0d      	ldr	r3, [pc, #52]	; (80040c8 <MX_LPUART1_UART_Init+0x50>)
 8004092:	2200      	movs	r2, #0
 8004094:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8004096:	4b0c      	ldr	r3, [pc, #48]	; (80040c8 <MX_LPUART1_UART_Init+0x50>)
 8004098:	2200      	movs	r2, #0
 800409a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800409c:	4b0a      	ldr	r3, [pc, #40]	; (80040c8 <MX_LPUART1_UART_Init+0x50>)
 800409e:	220c      	movs	r2, #12
 80040a0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040a2:	4b09      	ldr	r3, [pc, #36]	; (80040c8 <MX_LPUART1_UART_Init+0x50>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80040a8:	4b07      	ldr	r3, [pc, #28]	; (80040c8 <MX_LPUART1_UART_Init+0x50>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80040ae:	4b06      	ldr	r3, [pc, #24]	; (80040c8 <MX_LPUART1_UART_Init+0x50>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80040b4:	4804      	ldr	r0, [pc, #16]	; (80040c8 <MX_LPUART1_UART_Init+0x50>)
 80040b6:	f009 fa89 	bl	800d5cc <HAL_UART_Init>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80040c0:	f000 faaa 	bl	8004618 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80040c4:	bf00      	nop
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	200003d4 	.word	0x200003d4
 80040cc:	40008000 	.word	0x40008000

080040d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80040d4:	4b14      	ldr	r3, [pc, #80]	; (8004128 <MX_USART1_UART_Init+0x58>)
 80040d6:	4a15      	ldr	r2, [pc, #84]	; (800412c <MX_USART1_UART_Init+0x5c>)
 80040d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80040da:	4b13      	ldr	r3, [pc, #76]	; (8004128 <MX_USART1_UART_Init+0x58>)
 80040dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80040e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80040e2:	4b11      	ldr	r3, [pc, #68]	; (8004128 <MX_USART1_UART_Init+0x58>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80040e8:	4b0f      	ldr	r3, [pc, #60]	; (8004128 <MX_USART1_UART_Init+0x58>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80040ee:	4b0e      	ldr	r3, [pc, #56]	; (8004128 <MX_USART1_UART_Init+0x58>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80040f4:	4b0c      	ldr	r3, [pc, #48]	; (8004128 <MX_USART1_UART_Init+0x58>)
 80040f6:	220c      	movs	r2, #12
 80040f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040fa:	4b0b      	ldr	r3, [pc, #44]	; (8004128 <MX_USART1_UART_Init+0x58>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004100:	4b09      	ldr	r3, [pc, #36]	; (8004128 <MX_USART1_UART_Init+0x58>)
 8004102:	2200      	movs	r2, #0
 8004104:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004106:	4b08      	ldr	r3, [pc, #32]	; (8004128 <MX_USART1_UART_Init+0x58>)
 8004108:	2200      	movs	r2, #0
 800410a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800410c:	4b06      	ldr	r3, [pc, #24]	; (8004128 <MX_USART1_UART_Init+0x58>)
 800410e:	2200      	movs	r2, #0
 8004110:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004112:	4805      	ldr	r0, [pc, #20]	; (8004128 <MX_USART1_UART_Init+0x58>)
 8004114:	f009 fa5a 	bl	800d5cc <HAL_UART_Init>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800411e:	f000 fa7b 	bl	8004618 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004122:	bf00      	nop
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	20000458 	.word	0x20000458
 800412c:	40013800 	.word	0x40013800

08004130 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004134:	4b14      	ldr	r3, [pc, #80]	; (8004188 <MX_USART2_UART_Init+0x58>)
 8004136:	4a15      	ldr	r2, [pc, #84]	; (800418c <MX_USART2_UART_Init+0x5c>)
 8004138:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800413a:	4b13      	ldr	r3, [pc, #76]	; (8004188 <MX_USART2_UART_Init+0x58>)
 800413c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004140:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004142:	4b11      	ldr	r3, [pc, #68]	; (8004188 <MX_USART2_UART_Init+0x58>)
 8004144:	2200      	movs	r2, #0
 8004146:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004148:	4b0f      	ldr	r3, [pc, #60]	; (8004188 <MX_USART2_UART_Init+0x58>)
 800414a:	2200      	movs	r2, #0
 800414c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800414e:	4b0e      	ldr	r3, [pc, #56]	; (8004188 <MX_USART2_UART_Init+0x58>)
 8004150:	2200      	movs	r2, #0
 8004152:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004154:	4b0c      	ldr	r3, [pc, #48]	; (8004188 <MX_USART2_UART_Init+0x58>)
 8004156:	220c      	movs	r2, #12
 8004158:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800415a:	4b0b      	ldr	r3, [pc, #44]	; (8004188 <MX_USART2_UART_Init+0x58>)
 800415c:	2200      	movs	r2, #0
 800415e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004160:	4b09      	ldr	r3, [pc, #36]	; (8004188 <MX_USART2_UART_Init+0x58>)
 8004162:	2200      	movs	r2, #0
 8004164:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004166:	4b08      	ldr	r3, [pc, #32]	; (8004188 <MX_USART2_UART_Init+0x58>)
 8004168:	2200      	movs	r2, #0
 800416a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800416c:	4b06      	ldr	r3, [pc, #24]	; (8004188 <MX_USART2_UART_Init+0x58>)
 800416e:	2200      	movs	r2, #0
 8004170:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004172:	4805      	ldr	r0, [pc, #20]	; (8004188 <MX_USART2_UART_Init+0x58>)
 8004174:	f009 fa2a 	bl	800d5cc <HAL_UART_Init>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800417e:	f000 fa4b 	bl	8004618 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004182:	bf00      	nop
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	200004dc 	.word	0x200004dc
 800418c:	40004400 	.word	0x40004400

08004190 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004194:	4b1f      	ldr	r3, [pc, #124]	; (8004214 <MX_SPI1_Init+0x84>)
 8004196:	4a20      	ldr	r2, [pc, #128]	; (8004218 <MX_SPI1_Init+0x88>)
 8004198:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800419a:	4b1e      	ldr	r3, [pc, #120]	; (8004214 <MX_SPI1_Init+0x84>)
 800419c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80041a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80041a2:	4b1c      	ldr	r3, [pc, #112]	; (8004214 <MX_SPI1_Init+0x84>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80041a8:	4b1a      	ldr	r3, [pc, #104]	; (8004214 <MX_SPI1_Init+0x84>)
 80041aa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80041ae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80041b0:	4b18      	ldr	r3, [pc, #96]	; (8004214 <MX_SPI1_Init+0x84>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80041b6:	4b17      	ldr	r3, [pc, #92]	; (8004214 <MX_SPI1_Init+0x84>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80041bc:	4b15      	ldr	r3, [pc, #84]	; (8004214 <MX_SPI1_Init+0x84>)
 80041be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80041c4:	4b13      	ldr	r3, [pc, #76]	; (8004214 <MX_SPI1_Init+0x84>)
 80041c6:	2210      	movs	r2, #16
 80041c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80041ca:	4b12      	ldr	r3, [pc, #72]	; (8004214 <MX_SPI1_Init+0x84>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80041d0:	4b10      	ldr	r3, [pc, #64]	; (8004214 <MX_SPI1_Init+0x84>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041d6:	4b0f      	ldr	r3, [pc, #60]	; (8004214 <MX_SPI1_Init+0x84>)
 80041d8:	2200      	movs	r2, #0
 80041da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80041dc:	4b0d      	ldr	r3, [pc, #52]	; (8004214 <MX_SPI1_Init+0x84>)
 80041de:	2207      	movs	r2, #7
 80041e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80041e2:	4b0c      	ldr	r3, [pc, #48]	; (8004214 <MX_SPI1_Init+0x84>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80041e8:	4b0a      	ldr	r3, [pc, #40]	; (8004214 <MX_SPI1_Init+0x84>)
 80041ea:	2208      	movs	r2, #8
 80041ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80041ee:	4809      	ldr	r0, [pc, #36]	; (8004214 <MX_SPI1_Init+0x84>)
 80041f0:	f008 f948 	bl	800c484 <HAL_SPI_Init>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80041fa:	f000 fa0d 	bl	8004618 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi2);
 80041fe:	4b07      	ldr	r3, [pc, #28]	; (800421c <MX_SPI1_Init+0x8c>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	4b05      	ldr	r3, [pc, #20]	; (800421c <MX_SPI1_Init+0x8c>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800420c:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 800420e:	bf00      	nop
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	20000560 	.word	0x20000560
 8004218:	40013000 	.word	0x40013000
 800421c:	200005c4 	.word	0x200005c4

08004220 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004224:	4b1f      	ldr	r3, [pc, #124]	; (80042a4 <MX_SPI2_Init+0x84>)
 8004226:	4a20      	ldr	r2, [pc, #128]	; (80042a8 <MX_SPI2_Init+0x88>)
 8004228:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800422a:	4b1e      	ldr	r3, [pc, #120]	; (80042a4 <MX_SPI2_Init+0x84>)
 800422c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004230:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004232:	4b1c      	ldr	r3, [pc, #112]	; (80042a4 <MX_SPI2_Init+0x84>)
 8004234:	2200      	movs	r2, #0
 8004236:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8004238:	4b1a      	ldr	r3, [pc, #104]	; (80042a4 <MX_SPI2_Init+0x84>)
 800423a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800423e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004240:	4b18      	ldr	r3, [pc, #96]	; (80042a4 <MX_SPI2_Init+0x84>)
 8004242:	2200      	movs	r2, #0
 8004244:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004246:	4b17      	ldr	r3, [pc, #92]	; (80042a4 <MX_SPI2_Init+0x84>)
 8004248:	2200      	movs	r2, #0
 800424a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800424c:	4b15      	ldr	r3, [pc, #84]	; (80042a4 <MX_SPI2_Init+0x84>)
 800424e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004252:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004254:	4b13      	ldr	r3, [pc, #76]	; (80042a4 <MX_SPI2_Init+0x84>)
 8004256:	2208      	movs	r2, #8
 8004258:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800425a:	4b12      	ldr	r3, [pc, #72]	; (80042a4 <MX_SPI2_Init+0x84>)
 800425c:	2200      	movs	r2, #0
 800425e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004260:	4b10      	ldr	r3, [pc, #64]	; (80042a4 <MX_SPI2_Init+0x84>)
 8004262:	2200      	movs	r2, #0
 8004264:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004266:	4b0f      	ldr	r3, [pc, #60]	; (80042a4 <MX_SPI2_Init+0x84>)
 8004268:	2200      	movs	r2, #0
 800426a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800426c:	4b0d      	ldr	r3, [pc, #52]	; (80042a4 <MX_SPI2_Init+0x84>)
 800426e:	2207      	movs	r2, #7
 8004270:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004272:	4b0c      	ldr	r3, [pc, #48]	; (80042a4 <MX_SPI2_Init+0x84>)
 8004274:	2200      	movs	r2, #0
 8004276:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004278:	4b0a      	ldr	r3, [pc, #40]	; (80042a4 <MX_SPI2_Init+0x84>)
 800427a:	2208      	movs	r2, #8
 800427c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800427e:	4809      	ldr	r0, [pc, #36]	; (80042a4 <MX_SPI2_Init+0x84>)
 8004280:	f008 f900 	bl	800c484 <HAL_SPI_Init>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800428a:	f000 f9c5 	bl	8004618 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 800428e:	4b07      	ldr	r3, [pc, #28]	; (80042ac <MX_SPI2_Init+0x8c>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	4b05      	ldr	r3, [pc, #20]	; (80042ac <MX_SPI2_Init+0x8c>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800429c:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI2_Init 2 */

}
 800429e:	bf00      	nop
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	200005c4 	.word	0x200005c4
 80042a8:	40003800 	.word	0x40003800
 80042ac:	20000560 	.word	0x20000560

080042b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b088      	sub	sp, #32
 80042b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80042b6:	f107 0310 	add.w	r3, r7, #16
 80042ba:	2200      	movs	r2, #0
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	605a      	str	r2, [r3, #4]
 80042c0:	609a      	str	r2, [r3, #8]
 80042c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042c4:	1d3b      	adds	r3, r7, #4
 80042c6:	2200      	movs	r2, #0
 80042c8:	601a      	str	r2, [r3, #0]
 80042ca:	605a      	str	r2, [r3, #4]
 80042cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80042ce:	4b20      	ldr	r3, [pc, #128]	; (8004350 <MX_TIM1_Init+0xa0>)
 80042d0:	4a20      	ldr	r2, [pc, #128]	; (8004354 <MX_TIM1_Init+0xa4>)
 80042d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80042d4:	4b1e      	ldr	r3, [pc, #120]	; (8004350 <MX_TIM1_Init+0xa0>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042da:	4b1d      	ldr	r3, [pc, #116]	; (8004350 <MX_TIM1_Init+0xa0>)
 80042dc:	2200      	movs	r2, #0
 80042de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80042e0:	4b1b      	ldr	r3, [pc, #108]	; (8004350 <MX_TIM1_Init+0xa0>)
 80042e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042e8:	4b19      	ldr	r3, [pc, #100]	; (8004350 <MX_TIM1_Init+0xa0>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80042ee:	4b18      	ldr	r3, [pc, #96]	; (8004350 <MX_TIM1_Init+0xa0>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042f4:	4b16      	ldr	r3, [pc, #88]	; (8004350 <MX_TIM1_Init+0xa0>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80042fa:	4815      	ldr	r0, [pc, #84]	; (8004350 <MX_TIM1_Init+0xa0>)
 80042fc:	f008 fcdc 	bl	800ccb8 <HAL_TIM_Base_Init>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8004306:	f000 f987 	bl	8004618 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800430a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800430e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004310:	f107 0310 	add.w	r3, r7, #16
 8004314:	4619      	mov	r1, r3
 8004316:	480e      	ldr	r0, [pc, #56]	; (8004350 <MX_TIM1_Init+0xa0>)
 8004318:	f008 fee5 	bl	800d0e6 <HAL_TIM_ConfigClockSource>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8004322:	f000 f979 	bl	8004618 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004326:	2300      	movs	r3, #0
 8004328:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800432a:	2300      	movs	r3, #0
 800432c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800432e:	2300      	movs	r3, #0
 8004330:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004332:	1d3b      	adds	r3, r7, #4
 8004334:	4619      	mov	r1, r3
 8004336:	4806      	ldr	r0, [pc, #24]	; (8004350 <MX_TIM1_Init+0xa0>)
 8004338:	f009 f8c4 	bl	800d4c4 <HAL_TIMEx_MasterConfigSynchronization>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8004342:	f000 f969 	bl	8004618 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004346:	bf00      	nop
 8004348:	3720      	adds	r7, #32
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	20000628 	.word	0x20000628
 8004354:	40012c00 	.word	0x40012c00

08004358 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800435e:	1d3b      	adds	r3, r7, #4
 8004360:	2200      	movs	r2, #0
 8004362:	601a      	str	r2, [r3, #0]
 8004364:	605a      	str	r2, [r3, #4]
 8004366:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004368:	4b15      	ldr	r3, [pc, #84]	; (80043c0 <MX_TIM6_Init+0x68>)
 800436a:	4a16      	ldr	r2, [pc, #88]	; (80043c4 <MX_TIM6_Init+0x6c>)
 800436c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 29999;
 800436e:	4b14      	ldr	r3, [pc, #80]	; (80043c0 <MX_TIM6_Init+0x68>)
 8004370:	f247 522f 	movw	r2, #29999	; 0x752f
 8004374:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004376:	4b12      	ldr	r3, [pc, #72]	; (80043c0 <MX_TIM6_Init+0x68>)
 8004378:	2200      	movs	r2, #0
 800437a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 800437c:	4b10      	ldr	r3, [pc, #64]	; (80043c0 <MX_TIM6_Init+0x68>)
 800437e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004382:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004384:	4b0e      	ldr	r3, [pc, #56]	; (80043c0 <MX_TIM6_Init+0x68>)
 8004386:	2200      	movs	r2, #0
 8004388:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800438a:	480d      	ldr	r0, [pc, #52]	; (80043c0 <MX_TIM6_Init+0x68>)
 800438c:	f008 fc94 	bl	800ccb8 <HAL_TIM_Base_Init>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8004396:	f000 f93f 	bl	8004618 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800439a:	2300      	movs	r3, #0
 800439c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800439e:	2300      	movs	r3, #0
 80043a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80043a2:	1d3b      	adds	r3, r7, #4
 80043a4:	4619      	mov	r1, r3
 80043a6:	4806      	ldr	r0, [pc, #24]	; (80043c0 <MX_TIM6_Init+0x68>)
 80043a8:	f009 f88c 	bl	800d4c4 <HAL_TIMEx_MasterConfigSynchronization>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80043b2:	f000 f931 	bl	8004618 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80043b6:	bf00      	nop
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	20000674 	.word	0x20000674
 80043c4:	40001000 	.word	0x40001000

080043c8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043ce:	1d3b      	adds	r3, r7, #4
 80043d0:	2200      	movs	r2, #0
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	605a      	str	r2, [r3, #4]
 80043d6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80043d8:	4b14      	ldr	r3, [pc, #80]	; (800442c <MX_TIM7_Init+0x64>)
 80043da:	4a15      	ldr	r2, [pc, #84]	; (8004430 <MX_TIM7_Init+0x68>)
 80043dc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 43-1;
 80043de:	4b13      	ldr	r3, [pc, #76]	; (800442c <MX_TIM7_Init+0x64>)
 80043e0:	222a      	movs	r2, #42	; 0x2a
 80043e2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043e4:	4b11      	ldr	r3, [pc, #68]	; (800442c <MX_TIM7_Init+0x64>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80043ea:	4b10      	ldr	r3, [pc, #64]	; (800442c <MX_TIM7_Init+0x64>)
 80043ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043f0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043f2:	4b0e      	ldr	r3, [pc, #56]	; (800442c <MX_TIM7_Init+0x64>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80043f8:	480c      	ldr	r0, [pc, #48]	; (800442c <MX_TIM7_Init+0x64>)
 80043fa:	f008 fc5d 	bl	800ccb8 <HAL_TIM_Base_Init>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d001      	beq.n	8004408 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8004404:	f000 f908 	bl	8004618 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004408:	2300      	movs	r3, #0
 800440a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800440c:	2300      	movs	r3, #0
 800440e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004410:	1d3b      	adds	r3, r7, #4
 8004412:	4619      	mov	r1, r3
 8004414:	4805      	ldr	r0, [pc, #20]	; (800442c <MX_TIM7_Init+0x64>)
 8004416:	f009 f855 	bl	800d4c4 <HAL_TIMEx_MasterConfigSynchronization>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d001      	beq.n	8004424 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8004420:	f000 f8fa 	bl	8004618 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004424:	bf00      	nop
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	200006c0 	.word	0x200006c0
 8004430:	40001400 	.word	0x40001400

08004434 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b08a      	sub	sp, #40	; 0x28
 8004438:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800443a:	f107 0314 	add.w	r3, r7, #20
 800443e:	2200      	movs	r2, #0
 8004440:	601a      	str	r2, [r3, #0]
 8004442:	605a      	str	r2, [r3, #4]
 8004444:	609a      	str	r2, [r3, #8]
 8004446:	60da      	str	r2, [r3, #12]
 8004448:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800444a:	4b6f      	ldr	r3, [pc, #444]	; (8004608 <MX_GPIO_Init+0x1d4>)
 800444c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800444e:	4a6e      	ldr	r2, [pc, #440]	; (8004608 <MX_GPIO_Init+0x1d4>)
 8004450:	f043 0304 	orr.w	r3, r3, #4
 8004454:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004456:	4b6c      	ldr	r3, [pc, #432]	; (8004608 <MX_GPIO_Init+0x1d4>)
 8004458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800445a:	f003 0304 	and.w	r3, r3, #4
 800445e:	613b      	str	r3, [r7, #16]
 8004460:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004462:	4b69      	ldr	r3, [pc, #420]	; (8004608 <MX_GPIO_Init+0x1d4>)
 8004464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004466:	4a68      	ldr	r2, [pc, #416]	; (8004608 <MX_GPIO_Init+0x1d4>)
 8004468:	f043 0301 	orr.w	r3, r3, #1
 800446c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800446e:	4b66      	ldr	r3, [pc, #408]	; (8004608 <MX_GPIO_Init+0x1d4>)
 8004470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	60fb      	str	r3, [r7, #12]
 8004478:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800447a:	4b63      	ldr	r3, [pc, #396]	; (8004608 <MX_GPIO_Init+0x1d4>)
 800447c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800447e:	4a62      	ldr	r2, [pc, #392]	; (8004608 <MX_GPIO_Init+0x1d4>)
 8004480:	f043 0302 	orr.w	r3, r3, #2
 8004484:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004486:	4b60      	ldr	r3, [pc, #384]	; (8004608 <MX_GPIO_Init+0x1d4>)
 8004488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	60bb      	str	r3, [r7, #8]
 8004490:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004492:	4b5d      	ldr	r3, [pc, #372]	; (8004608 <MX_GPIO_Init+0x1d4>)
 8004494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004496:	4a5c      	ldr	r2, [pc, #368]	; (8004608 <MX_GPIO_Init+0x1d4>)
 8004498:	f043 0308 	orr.w	r3, r3, #8
 800449c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800449e:	4b5a      	ldr	r3, [pc, #360]	; (8004608 <MX_GPIO_Init+0x1d4>)
 80044a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044a2:	f003 0308 	and.w	r3, r3, #8
 80044a6:	607b      	str	r3, [r7, #4]
 80044a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCDD6_Pin|LCDD5_Pin|LCDD4_Pin|LCDD3_Pin
 80044aa:	2200      	movs	r2, #0
 80044ac:	f64f 417f 	movw	r1, #64639	; 0xfc7f
 80044b0:	4856      	ldr	r0, [pc, #344]	; (800460c <MX_GPIO_Init+0x1d8>)
 80044b2:	f005 ffe1 	bl	800a478 <HAL_GPIO_WritePin>
                          |LCDD2_Pin|LCDD1_Pin|LCDD0_Pin|RELAY3_Pin
                          |RELAY4_Pin|W5500_INT_Pin|GLCDEN_Pin|GLCDCS2_Pin
                          |GLCDRW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RELAY2_Pin|LCDRS_Pin, GPIO_PIN_RESET);
 80044b6:	2200      	movs	r2, #0
 80044b8:	2112      	movs	r1, #18
 80044ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80044be:	f005 ffdb 	bl	800a478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _W25QXX_CS_PIN_Pin|WIFIRST_Pin|LCDD7_Pin, GPIO_PIN_RESET);
 80044c2:	2200      	movs	r2, #0
 80044c4:	2125      	movs	r1, #37	; 0x25
 80044c6:	4852      	ldr	r0, [pc, #328]	; (8004610 <MX_GPIO_Init+0x1dc>)
 80044c8:	f005 ffd6 	bl	800a478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_SET);
 80044cc:	2201      	movs	r2, #1
 80044ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80044d2:	484f      	ldr	r0, [pc, #316]	; (8004610 <MX_GPIO_Init+0x1dc>)
 80044d4:	f005 ffd0 	bl	800a478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500RST_GPIO_Port, W5500RST_Pin, GPIO_PIN_SET);
 80044d8:	2201      	movs	r2, #1
 80044da:	2180      	movs	r1, #128	; 0x80
 80044dc:	484b      	ldr	r0, [pc, #300]	; (800460c <MX_GPIO_Init+0x1d8>)
 80044de:	f005 ffcb 	bl	800a478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(InputMachine_GPIO_Port, InputMachine_Pin, GPIO_PIN_SET);
 80044e2:	2201      	movs	r2, #1
 80044e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80044e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80044ec:	f005 ffc4 	bl	800a478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_RESET);
 80044f0:	2200      	movs	r2, #0
 80044f2:	2104      	movs	r1, #4
 80044f4:	4847      	ldr	r0, [pc, #284]	; (8004614 <MX_GPIO_Init+0x1e0>)
 80044f6:	f005 ffbf 	bl	800a478 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCDD6_Pin LCDD5_Pin LCDD4_Pin LCDD3_Pin
                           LCDD2_Pin LCDD1_Pin LCDD0_Pin RELAY3_Pin
                           RELAY4_Pin W5500_INT_Pin W5500RST_Pin */
  GPIO_InitStruct.Pin = LCDD6_Pin|LCDD5_Pin|LCDD4_Pin|LCDD3_Pin
 80044fa:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 80044fe:	617b      	str	r3, [r7, #20]
                          |LCDD2_Pin|LCDD1_Pin|LCDD0_Pin|RELAY3_Pin
                          |RELAY4_Pin|W5500_INT_Pin|W5500RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004500:	2301      	movs	r3, #1
 8004502:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004504:	2300      	movs	r3, #0
 8004506:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004508:	2300      	movs	r3, #0
 800450a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800450c:	f107 0314 	add.w	r3, r7, #20
 8004510:	4619      	mov	r1, r3
 8004512:	483e      	ldr	r0, [pc, #248]	; (800460c <MX_GPIO_Init+0x1d8>)
 8004514:	f005 fe36 	bl	800a184 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY2_Pin InputMachine_Pin */
  GPIO_InitStruct.Pin = RELAY2_Pin|InputMachine_Pin;
 8004518:	f241 0302 	movw	r3, #4098	; 0x1002
 800451c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800451e:	2301      	movs	r3, #1
 8004520:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004522:	2300      	movs	r3, #0
 8004524:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004526:	2300      	movs	r3, #0
 8004528:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800452a:	f107 0314 	add.w	r3, r7, #20
 800452e:	4619      	mov	r1, r3
 8004530:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004534:	f005 fe26 	bl	800a184 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCDRS_Pin */
  GPIO_InitStruct.Pin = LCDRS_Pin;
 8004538:	2310      	movs	r3, #16
 800453a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800453c:	2301      	movs	r3, #1
 800453e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004540:	2301      	movs	r3, #1
 8004542:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004544:	2300      	movs	r3, #0
 8004546:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCDRS_GPIO_Port, &GPIO_InitStruct);
 8004548:	f107 0314 	add.w	r3, r7, #20
 800454c:	4619      	mov	r1, r3
 800454e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004552:	f005 fe17 	bl	800a184 <HAL_GPIO_Init>

  /*Configure GPIO pins : _W25QXX_CS_PIN_Pin WIFIRST_Pin LCDD7_Pin */
  GPIO_InitStruct.Pin = _W25QXX_CS_PIN_Pin|WIFIRST_Pin|LCDD7_Pin;
 8004556:	2325      	movs	r3, #37	; 0x25
 8004558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800455a:	2301      	movs	r3, #1
 800455c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800455e:	2300      	movs	r3, #0
 8004560:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004562:	2300      	movs	r3, #0
 8004564:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004566:	f107 0314 	add.w	r3, r7, #20
 800456a:	4619      	mov	r1, r3
 800456c:	4828      	ldr	r0, [pc, #160]	; (8004610 <MX_GPIO_Init+0x1dc>)
 800456e:	f005 fe09 	bl	800a184 <HAL_GPIO_Init>

  /*Configure GPIO pin : W5500_CS_Pin */
  GPIO_InitStruct.Pin = W5500_CS_Pin;
 8004572:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004578:	2301      	movs	r3, #1
 800457a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800457c:	2300      	movs	r3, #0
 800457e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004580:	2302      	movs	r3, #2
 8004582:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(W5500_CS_GPIO_Port, &GPIO_InitStruct);
 8004584:	f107 0314 	add.w	r3, r7, #20
 8004588:	4619      	mov	r1, r3
 800458a:	4821      	ldr	r0, [pc, #132]	; (8004610 <MX_GPIO_Init+0x1dc>)
 800458c:	f005 fdfa 	bl	800a184 <HAL_GPIO_Init>

  /*Configure GPIO pins : InputMachine1_Pin InputMachine2_Pin */
  GPIO_InitStruct.Pin = InputMachine1_Pin|InputMachine2_Pin;
 8004590:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004596:	2300      	movs	r3, #0
 8004598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800459a:	2300      	movs	r3, #0
 800459c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800459e:	f107 0314 	add.w	r3, r7, #20
 80045a2:	4619      	mov	r1, r3
 80045a4:	4819      	ldr	r0, [pc, #100]	; (800460c <MX_GPIO_Init+0x1d8>)
 80045a6:	f005 fded 	bl	800a184 <HAL_GPIO_Init>

  /*Configure GPIO pins : InputMachine3_Pin InputMachine4_Pin InputMachine5_Pin InputMachine6_Pin */
  GPIO_InitStruct.Pin = InputMachine3_Pin|InputMachine4_Pin|InputMachine5_Pin|InputMachine6_Pin;
 80045aa:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80045ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80045b0:	2300      	movs	r3, #0
 80045b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045b4:	2300      	movs	r3, #0
 80045b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045b8:	f107 0314 	add.w	r3, r7, #20
 80045bc:	4619      	mov	r1, r3
 80045be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80045c2:	f005 fddf 	bl	800a184 <HAL_GPIO_Init>

  /*Configure GPIO pins : GLCDEN_Pin GLCDCS2_Pin GLCDRW_Pin */
  GPIO_InitStruct.Pin = GLCDEN_Pin|GLCDCS2_Pin|GLCDRW_Pin;
 80045c6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80045ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045cc:	2301      	movs	r3, #1
 80045ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045d0:	2301      	movs	r3, #1
 80045d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045d4:	2300      	movs	r3, #0
 80045d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045d8:	f107 0314 	add.w	r3, r7, #20
 80045dc:	4619      	mov	r1, r3
 80045de:	480b      	ldr	r0, [pc, #44]	; (800460c <MX_GPIO_Init+0x1d8>)
 80045e0:	f005 fdd0 	bl	800a184 <HAL_GPIO_Init>

  /*Configure GPIO pin : GLCDCS1_Pin */
  GPIO_InitStruct.Pin = GLCDCS1_Pin;
 80045e4:	2304      	movs	r3, #4
 80045e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045e8:	2301      	movs	r3, #1
 80045ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045ec:	2301      	movs	r3, #1
 80045ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045f0:	2300      	movs	r3, #0
 80045f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GLCDCS1_GPIO_Port, &GPIO_InitStruct);
 80045f4:	f107 0314 	add.w	r3, r7, #20
 80045f8:	4619      	mov	r1, r3
 80045fa:	4806      	ldr	r0, [pc, #24]	; (8004614 <MX_GPIO_Init+0x1e0>)
 80045fc:	f005 fdc2 	bl	800a184 <HAL_GPIO_Init>

}
 8004600:	bf00      	nop
 8004602:	3728      	adds	r7, #40	; 0x28
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	40021000 	.word	0x40021000
 800460c:	48000800 	.word	0x48000800
 8004610:	48000400 	.word	0x48000400
 8004614:	48000c00 	.word	0x48000c00

08004618 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004618:	b480      	push	{r7}
 800461a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800461c:	b672      	cpsid	i
}
 800461e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004620:	e7fe      	b.n	8004620 <Error_Handler+0x8>
	...

08004624 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800462a:	4b0f      	ldr	r3, [pc, #60]	; (8004668 <HAL_MspInit+0x44>)
 800462c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800462e:	4a0e      	ldr	r2, [pc, #56]	; (8004668 <HAL_MspInit+0x44>)
 8004630:	f043 0301 	orr.w	r3, r3, #1
 8004634:	6613      	str	r3, [r2, #96]	; 0x60
 8004636:	4b0c      	ldr	r3, [pc, #48]	; (8004668 <HAL_MspInit+0x44>)
 8004638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	607b      	str	r3, [r7, #4]
 8004640:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004642:	4b09      	ldr	r3, [pc, #36]	; (8004668 <HAL_MspInit+0x44>)
 8004644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004646:	4a08      	ldr	r2, [pc, #32]	; (8004668 <HAL_MspInit+0x44>)
 8004648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800464c:	6593      	str	r3, [r2, #88]	; 0x58
 800464e:	4b06      	ldr	r3, [pc, #24]	; (8004668 <HAL_MspInit+0x44>)
 8004650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004656:	603b      	str	r3, [r7, #0]
 8004658:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800465a:	bf00      	nop
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	40021000 	.word	0x40021000

0800466c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b0a2      	sub	sp, #136	; 0x88
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004674:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004678:	2200      	movs	r2, #0
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	605a      	str	r2, [r3, #4]
 800467e:	609a      	str	r2, [r3, #8]
 8004680:	60da      	str	r2, [r3, #12]
 8004682:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004684:	f107 0314 	add.w	r3, r7, #20
 8004688:	2260      	movs	r2, #96	; 0x60
 800468a:	2100      	movs	r1, #0
 800468c:	4618      	mov	r0, r3
 800468e:	f00a fb83 	bl	800ed98 <memset>
  if(hi2c->Instance==I2C1)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a20      	ldr	r2, [pc, #128]	; (8004718 <HAL_I2C_MspInit+0xac>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d138      	bne.n	800470e <HAL_I2C_MspInit+0xa2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800469c:	2340      	movs	r3, #64	; 0x40
 800469e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80046a0:	2300      	movs	r3, #0
 80046a2:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80046a4:	f107 0314 	add.w	r3, r7, #20
 80046a8:	4618      	mov	r0, r3
 80046aa:	f007 fbaf 	bl	800be0c <HAL_RCCEx_PeriphCLKConfig>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d001      	beq.n	80046b8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80046b4:	f7ff ffb0 	bl	8004618 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046b8:	4b18      	ldr	r3, [pc, #96]	; (800471c <HAL_I2C_MspInit+0xb0>)
 80046ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046bc:	4a17      	ldr	r2, [pc, #92]	; (800471c <HAL_I2C_MspInit+0xb0>)
 80046be:	f043 0302 	orr.w	r3, r3, #2
 80046c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046c4:	4b15      	ldr	r3, [pc, #84]	; (800471c <HAL_I2C_MspInit+0xb0>)
 80046c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	613b      	str	r3, [r7, #16]
 80046ce:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80046d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80046d4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80046d6:	2312      	movs	r3, #18
 80046d8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046da:	2300      	movs	r3, #0
 80046dc:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046de:	2303      	movs	r3, #3
 80046e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80046e4:	2304      	movs	r3, #4
 80046e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046ea:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80046ee:	4619      	mov	r1, r3
 80046f0:	480b      	ldr	r0, [pc, #44]	; (8004720 <HAL_I2C_MspInit+0xb4>)
 80046f2:	f005 fd47 	bl	800a184 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80046f6:	4b09      	ldr	r3, [pc, #36]	; (800471c <HAL_I2C_MspInit+0xb0>)
 80046f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046fa:	4a08      	ldr	r2, [pc, #32]	; (800471c <HAL_I2C_MspInit+0xb0>)
 80046fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004700:	6593      	str	r3, [r2, #88]	; 0x58
 8004702:	4b06      	ldr	r3, [pc, #24]	; (800471c <HAL_I2C_MspInit+0xb0>)
 8004704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004706:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800470e:	bf00      	nop
 8004710:	3788      	adds	r7, #136	; 0x88
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	40005400 	.word	0x40005400
 800471c:	40021000 	.word	0x40021000
 8004720:	48000400 	.word	0x48000400

08004724 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b0a6      	sub	sp, #152	; 0x98
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800472c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004730:	2200      	movs	r2, #0
 8004732:	601a      	str	r2, [r3, #0]
 8004734:	605a      	str	r2, [r3, #4]
 8004736:	609a      	str	r2, [r3, #8]
 8004738:	60da      	str	r2, [r3, #12]
 800473a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800473c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004740:	2260      	movs	r2, #96	; 0x60
 8004742:	2100      	movs	r1, #0
 8004744:	4618      	mov	r0, r3
 8004746:	f00a fb27 	bl	800ed98 <memset>
  if(huart->Instance==LPUART1)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a6b      	ldr	r2, [pc, #428]	; (80048fc <HAL_UART_MspInit+0x1d8>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d144      	bne.n	80047de <HAL_UART_MspInit+0xba>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8004754:	2320      	movs	r3, #32
 8004756:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8004758:	2300      	movs	r3, #0
 800475a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800475c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004760:	4618      	mov	r0, r3
 8004762:	f007 fb53 	bl	800be0c <HAL_RCCEx_PeriphCLKConfig>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d001      	beq.n	8004770 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800476c:	f7ff ff54 	bl	8004618 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8004770:	4b63      	ldr	r3, [pc, #396]	; (8004900 <HAL_UART_MspInit+0x1dc>)
 8004772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004774:	4a62      	ldr	r2, [pc, #392]	; (8004900 <HAL_UART_MspInit+0x1dc>)
 8004776:	f043 0301 	orr.w	r3, r3, #1
 800477a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800477c:	4b60      	ldr	r3, [pc, #384]	; (8004900 <HAL_UART_MspInit+0x1dc>)
 800477e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004780:	f003 0301 	and.w	r3, r3, #1
 8004784:	623b      	str	r3, [r7, #32]
 8004786:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004788:	4b5d      	ldr	r3, [pc, #372]	; (8004900 <HAL_UART_MspInit+0x1dc>)
 800478a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800478c:	4a5c      	ldr	r2, [pc, #368]	; (8004900 <HAL_UART_MspInit+0x1dc>)
 800478e:	f043 0302 	orr.w	r3, r3, #2
 8004792:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004794:	4b5a      	ldr	r3, [pc, #360]	; (8004900 <HAL_UART_MspInit+0x1dc>)
 8004796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004798:	f003 0302 	and.w	r3, r3, #2
 800479c:	61fb      	str	r3, [r7, #28]
 800479e:	69fb      	ldr	r3, [r7, #28]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80047a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80047a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047a8:	2302      	movs	r3, #2
 80047aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ae:	2300      	movs	r3, #0
 80047b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047b4:	2303      	movs	r3, #3
 80047b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80047ba:	2308      	movs	r3, #8
 80047bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047c0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80047c4:	4619      	mov	r1, r3
 80047c6:	484f      	ldr	r0, [pc, #316]	; (8004904 <HAL_UART_MspInit+0x1e0>)
 80047c8:	f005 fcdc 	bl	800a184 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80047cc:	2200      	movs	r2, #0
 80047ce:	2100      	movs	r1, #0
 80047d0:	2046      	movs	r0, #70	; 0x46
 80047d2:	f005 fc22 	bl	800a01a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80047d6:	2046      	movs	r0, #70	; 0x46
 80047d8:	f005 fc3b 	bl	800a052 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80047dc:	e089      	b.n	80048f2 <HAL_UART_MspInit+0x1ce>
  else if(huart->Instance==USART1)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a49      	ldr	r2, [pc, #292]	; (8004908 <HAL_UART_MspInit+0x1e4>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d143      	bne.n	8004870 <HAL_UART_MspInit+0x14c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80047e8:	2301      	movs	r3, #1
 80047ea:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80047ec:	2300      	movs	r3, #0
 80047ee:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80047f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047f4:	4618      	mov	r0, r3
 80047f6:	f007 fb09 	bl	800be0c <HAL_RCCEx_PeriphCLKConfig>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d001      	beq.n	8004804 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8004800:	f7ff ff0a 	bl	8004618 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004804:	4b3e      	ldr	r3, [pc, #248]	; (8004900 <HAL_UART_MspInit+0x1dc>)
 8004806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004808:	4a3d      	ldr	r2, [pc, #244]	; (8004900 <HAL_UART_MspInit+0x1dc>)
 800480a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800480e:	6613      	str	r3, [r2, #96]	; 0x60
 8004810:	4b3b      	ldr	r3, [pc, #236]	; (8004900 <HAL_UART_MspInit+0x1dc>)
 8004812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004814:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004818:	61bb      	str	r3, [r7, #24]
 800481a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800481c:	4b38      	ldr	r3, [pc, #224]	; (8004900 <HAL_UART_MspInit+0x1dc>)
 800481e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004820:	4a37      	ldr	r2, [pc, #220]	; (8004900 <HAL_UART_MspInit+0x1dc>)
 8004822:	f043 0302 	orr.w	r3, r3, #2
 8004826:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004828:	4b35      	ldr	r3, [pc, #212]	; (8004900 <HAL_UART_MspInit+0x1dc>)
 800482a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	617b      	str	r3, [r7, #20]
 8004832:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004834:	23c0      	movs	r3, #192	; 0xc0
 8004836:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800483a:	2302      	movs	r3, #2
 800483c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004840:	2300      	movs	r3, #0
 8004842:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004846:	2303      	movs	r3, #3
 8004848:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800484c:	2307      	movs	r3, #7
 800484e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004852:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004856:	4619      	mov	r1, r3
 8004858:	482a      	ldr	r0, [pc, #168]	; (8004904 <HAL_UART_MspInit+0x1e0>)
 800485a:	f005 fc93 	bl	800a184 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800485e:	2200      	movs	r2, #0
 8004860:	2100      	movs	r1, #0
 8004862:	2025      	movs	r0, #37	; 0x25
 8004864:	f005 fbd9 	bl	800a01a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004868:	2025      	movs	r0, #37	; 0x25
 800486a:	f005 fbf2 	bl	800a052 <HAL_NVIC_EnableIRQ>
}
 800486e:	e040      	b.n	80048f2 <HAL_UART_MspInit+0x1ce>
  else if(huart->Instance==USART2)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a25      	ldr	r2, [pc, #148]	; (800490c <HAL_UART_MspInit+0x1e8>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d13b      	bne.n	80048f2 <HAL_UART_MspInit+0x1ce>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800487a:	2302      	movs	r3, #2
 800487c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800487e:	2300      	movs	r3, #0
 8004880:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004882:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004886:	4618      	mov	r0, r3
 8004888:	f007 fac0 	bl	800be0c <HAL_RCCEx_PeriphCLKConfig>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <HAL_UART_MspInit+0x172>
      Error_Handler();
 8004892:	f7ff fec1 	bl	8004618 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004896:	4b1a      	ldr	r3, [pc, #104]	; (8004900 <HAL_UART_MspInit+0x1dc>)
 8004898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800489a:	4a19      	ldr	r2, [pc, #100]	; (8004900 <HAL_UART_MspInit+0x1dc>)
 800489c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048a0:	6593      	str	r3, [r2, #88]	; 0x58
 80048a2:	4b17      	ldr	r3, [pc, #92]	; (8004900 <HAL_UART_MspInit+0x1dc>)
 80048a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048aa:	613b      	str	r3, [r7, #16]
 80048ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048ae:	4b14      	ldr	r3, [pc, #80]	; (8004900 <HAL_UART_MspInit+0x1dc>)
 80048b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048b2:	4a13      	ldr	r2, [pc, #76]	; (8004900 <HAL_UART_MspInit+0x1dc>)
 80048b4:	f043 0301 	orr.w	r3, r3, #1
 80048b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048ba:	4b11      	ldr	r3, [pc, #68]	; (8004900 <HAL_UART_MspInit+0x1dc>)
 80048bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	60fb      	str	r3, [r7, #12]
 80048c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80048c6:	230c      	movs	r3, #12
 80048c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048cc:	2302      	movs	r3, #2
 80048ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048d2:	2300      	movs	r3, #0
 80048d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048d8:	2303      	movs	r3, #3
 80048da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80048de:	2307      	movs	r3, #7
 80048e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048e4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80048e8:	4619      	mov	r1, r3
 80048ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80048ee:	f005 fc49 	bl	800a184 <HAL_GPIO_Init>
}
 80048f2:	bf00      	nop
 80048f4:	3798      	adds	r7, #152	; 0x98
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	40008000 	.word	0x40008000
 8004900:	40021000 	.word	0x40021000
 8004904:	48000400 	.word	0x48000400
 8004908:	40013800 	.word	0x40013800
 800490c:	40004400 	.word	0x40004400

08004910 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b08c      	sub	sp, #48	; 0x30
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004918:	f107 031c 	add.w	r3, r7, #28
 800491c:	2200      	movs	r2, #0
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	605a      	str	r2, [r3, #4]
 8004922:	609a      	str	r2, [r3, #8]
 8004924:	60da      	str	r2, [r3, #12]
 8004926:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a2f      	ldr	r2, [pc, #188]	; (80049ec <HAL_SPI_MspInit+0xdc>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d129      	bne.n	8004986 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004932:	4b2f      	ldr	r3, [pc, #188]	; (80049f0 <HAL_SPI_MspInit+0xe0>)
 8004934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004936:	4a2e      	ldr	r2, [pc, #184]	; (80049f0 <HAL_SPI_MspInit+0xe0>)
 8004938:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800493c:	6613      	str	r3, [r2, #96]	; 0x60
 800493e:	4b2c      	ldr	r3, [pc, #176]	; (80049f0 <HAL_SPI_MspInit+0xe0>)
 8004940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004942:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004946:	61bb      	str	r3, [r7, #24]
 8004948:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800494a:	4b29      	ldr	r3, [pc, #164]	; (80049f0 <HAL_SPI_MspInit+0xe0>)
 800494c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800494e:	4a28      	ldr	r2, [pc, #160]	; (80049f0 <HAL_SPI_MspInit+0xe0>)
 8004950:	f043 0301 	orr.w	r3, r3, #1
 8004954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004956:	4b26      	ldr	r3, [pc, #152]	; (80049f0 <HAL_SPI_MspInit+0xe0>)
 8004958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	617b      	str	r3, [r7, #20]
 8004960:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004962:	23e0      	movs	r3, #224	; 0xe0
 8004964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004966:	2302      	movs	r3, #2
 8004968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800496a:	2300      	movs	r3, #0
 800496c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800496e:	2303      	movs	r3, #3
 8004970:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004972:	2305      	movs	r3, #5
 8004974:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004976:	f107 031c 	add.w	r3, r7, #28
 800497a:	4619      	mov	r1, r3
 800497c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004980:	f005 fc00 	bl	800a184 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004984:	e02d      	b.n	80049e2 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI2)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a1a      	ldr	r2, [pc, #104]	; (80049f4 <HAL_SPI_MspInit+0xe4>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d128      	bne.n	80049e2 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004990:	4b17      	ldr	r3, [pc, #92]	; (80049f0 <HAL_SPI_MspInit+0xe0>)
 8004992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004994:	4a16      	ldr	r2, [pc, #88]	; (80049f0 <HAL_SPI_MspInit+0xe0>)
 8004996:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800499a:	6593      	str	r3, [r2, #88]	; 0x58
 800499c:	4b14      	ldr	r3, [pc, #80]	; (80049f0 <HAL_SPI_MspInit+0xe0>)
 800499e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049a4:	613b      	str	r3, [r7, #16]
 80049a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049a8:	4b11      	ldr	r3, [pc, #68]	; (80049f0 <HAL_SPI_MspInit+0xe0>)
 80049aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ac:	4a10      	ldr	r2, [pc, #64]	; (80049f0 <HAL_SPI_MspInit+0xe0>)
 80049ae:	f043 0302 	orr.w	r3, r3, #2
 80049b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049b4:	4b0e      	ldr	r3, [pc, #56]	; (80049f0 <HAL_SPI_MspInit+0xe0>)
 80049b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	60fb      	str	r3, [r7, #12]
 80049be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80049c0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80049c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049c6:	2302      	movs	r3, #2
 80049c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ca:	2300      	movs	r3, #0
 80049cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049ce:	2303      	movs	r3, #3
 80049d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80049d2:	2305      	movs	r3, #5
 80049d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049d6:	f107 031c 	add.w	r3, r7, #28
 80049da:	4619      	mov	r1, r3
 80049dc:	4806      	ldr	r0, [pc, #24]	; (80049f8 <HAL_SPI_MspInit+0xe8>)
 80049de:	f005 fbd1 	bl	800a184 <HAL_GPIO_Init>
}
 80049e2:	bf00      	nop
 80049e4:	3730      	adds	r7, #48	; 0x30
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	40013000 	.word	0x40013000
 80049f0:	40021000 	.word	0x40021000
 80049f4:	40003800 	.word	0x40003800
 80049f8:	48000400 	.word	0x48000400

080049fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a23      	ldr	r2, [pc, #140]	; (8004a98 <HAL_TIM_Base_MspInit+0x9c>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d10c      	bne.n	8004a28 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004a0e:	4b23      	ldr	r3, [pc, #140]	; (8004a9c <HAL_TIM_Base_MspInit+0xa0>)
 8004a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a12:	4a22      	ldr	r2, [pc, #136]	; (8004a9c <HAL_TIM_Base_MspInit+0xa0>)
 8004a14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004a18:	6613      	str	r3, [r2, #96]	; 0x60
 8004a1a:	4b20      	ldr	r3, [pc, #128]	; (8004a9c <HAL_TIM_Base_MspInit+0xa0>)
 8004a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a22:	617b      	str	r3, [r7, #20]
 8004a24:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8004a26:	e032      	b.n	8004a8e <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM6)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a1c      	ldr	r2, [pc, #112]	; (8004aa0 <HAL_TIM_Base_MspInit+0xa4>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d114      	bne.n	8004a5c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004a32:	4b1a      	ldr	r3, [pc, #104]	; (8004a9c <HAL_TIM_Base_MspInit+0xa0>)
 8004a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a36:	4a19      	ldr	r2, [pc, #100]	; (8004a9c <HAL_TIM_Base_MspInit+0xa0>)
 8004a38:	f043 0310 	orr.w	r3, r3, #16
 8004a3c:	6593      	str	r3, [r2, #88]	; 0x58
 8004a3e:	4b17      	ldr	r3, [pc, #92]	; (8004a9c <HAL_TIM_Base_MspInit+0xa0>)
 8004a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a42:	f003 0310 	and.w	r3, r3, #16
 8004a46:	613b      	str	r3, [r7, #16]
 8004a48:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	2036      	movs	r0, #54	; 0x36
 8004a50:	f005 fae3 	bl	800a01a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004a54:	2036      	movs	r0, #54	; 0x36
 8004a56:	f005 fafc 	bl	800a052 <HAL_NVIC_EnableIRQ>
}
 8004a5a:	e018      	b.n	8004a8e <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM7)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a10      	ldr	r2, [pc, #64]	; (8004aa4 <HAL_TIM_Base_MspInit+0xa8>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d113      	bne.n	8004a8e <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004a66:	4b0d      	ldr	r3, [pc, #52]	; (8004a9c <HAL_TIM_Base_MspInit+0xa0>)
 8004a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a6a:	4a0c      	ldr	r2, [pc, #48]	; (8004a9c <HAL_TIM_Base_MspInit+0xa0>)
 8004a6c:	f043 0320 	orr.w	r3, r3, #32
 8004a70:	6593      	str	r3, [r2, #88]	; 0x58
 8004a72:	4b0a      	ldr	r3, [pc, #40]	; (8004a9c <HAL_TIM_Base_MspInit+0xa0>)
 8004a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a76:	f003 0320 	and.w	r3, r3, #32
 8004a7a:	60fb      	str	r3, [r7, #12]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004a7e:	2200      	movs	r2, #0
 8004a80:	2100      	movs	r1, #0
 8004a82:	2037      	movs	r0, #55	; 0x37
 8004a84:	f005 fac9 	bl	800a01a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004a88:	2037      	movs	r0, #55	; 0x37
 8004a8a:	f005 fae2 	bl	800a052 <HAL_NVIC_EnableIRQ>
}
 8004a8e:	bf00      	nop
 8004a90:	3718      	adds	r7, #24
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	40012c00 	.word	0x40012c00
 8004a9c:	40021000 	.word	0x40021000
 8004aa0:	40001000 	.word	0x40001000
 8004aa4:	40001400 	.word	0x40001400

08004aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004aac:	e7fe      	b.n	8004aac <NMI_Handler+0x4>

08004aae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ab2:	e7fe      	b.n	8004ab2 <HardFault_Handler+0x4>

08004ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ab8:	e7fe      	b.n	8004ab8 <MemManage_Handler+0x4>

08004aba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004aba:	b480      	push	{r7}
 8004abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004abe:	e7fe      	b.n	8004abe <BusFault_Handler+0x4>

08004ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ac4:	e7fe      	b.n	8004ac4 <UsageFault_Handler+0x4>

08004ac6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004aca:	bf00      	nop
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004ad8:	bf00      	nop
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr

08004ae2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004ae6:	bf00      	nop
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004af4:	f005 f972 	bl	8009ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004af8:	bf00      	nop
 8004afa:	bd80      	pop	{r7, pc}

08004afc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004b00:	4802      	ldr	r0, [pc, #8]	; (8004b0c <USART1_IRQHandler+0x10>)
 8004b02:	f008 fe75 	bl	800d7f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004b06:	bf00      	nop
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	20000458 	.word	0x20000458

08004b10 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOA, RELAY2_Pin);
 8004b14:	2102      	movs	r1, #2
 8004b16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b1a:	f005 fcc5 	bl	800a4a8 <HAL_GPIO_TogglePin>
	Wifirefreshflag_Lpcs=1;
 8004b1e:	4b07      	ldr	r3, [pc, #28]	; (8004b3c <TIM6_DAC_IRQHandler+0x2c>)
 8004b20:	2201      	movs	r2, #1
 8004b22:	701a      	strb	r2, [r3, #0]
	GLCDRefreshFlag = 1;
 8004b24:	4b06      	ldr	r3, [pc, #24]	; (8004b40 <TIM6_DAC_IRQHandler+0x30>)
 8004b26:	2201      	movs	r2, #1
 8004b28:	701a      	strb	r2, [r3, #0]
	Flag1Second =1;
 8004b2a:	4b06      	ldr	r3, [pc, #24]	; (8004b44 <TIM6_DAC_IRQHandler+0x34>)
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004b30:	4805      	ldr	r0, [pc, #20]	; (8004b48 <TIM6_DAC_IRQHandler+0x38>)
 8004b32:	f008 f9b9 	bl	800cea8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004b36:	bf00      	nop
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	2000008c 	.word	0x2000008c
 8004b40:	2000073c 	.word	0x2000073c
 8004b44:	20000713 	.word	0x20000713
 8004b48:	20000674 	.word	0x20000674

08004b4c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004b50:	4802      	ldr	r0, [pc, #8]	; (8004b5c <TIM7_IRQHandler+0x10>)
 8004b52:	f008 f9a9 	bl	800cea8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004b56:	bf00      	nop
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	200006c0 	.word	0x200006c0

08004b60 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8004b64:	4802      	ldr	r0, [pc, #8]	; (8004b70 <LPUART1_IRQHandler+0x10>)
 8004b66:	f008 fe43 	bl	800d7f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8004b6a:	bf00      	nop
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	200003d4 	.word	0x200003d4

08004b74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004b74:	b480      	push	{r7}
 8004b76:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004b78:	4b06      	ldr	r3, [pc, #24]	; (8004b94 <SystemInit+0x20>)
 8004b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b7e:	4a05      	ldr	r2, [pc, #20]	; (8004b94 <SystemInit+0x20>)
 8004b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004b88:	bf00      	nop
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	e000ed00 	.word	0xe000ed00

08004b98 <bcd2bin>:
#include "ds1307.h"

extern I2C_HandleTypeDef hi2c1;


uint8_t bcd2bin(uint8_t data){
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	71fb      	strb	r3, [r7, #7]
 return ((data>>4)*10)+(data&0x0F);
 8004ba2:	79fb      	ldrb	r3, [r7, #7]
 8004ba4:	091b      	lsrs	r3, r3, #4
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	461a      	mov	r2, r3
 8004baa:	0092      	lsls	r2, r2, #2
 8004bac:	4413      	add	r3, r2
 8004bae:	005b      	lsls	r3, r3, #1
 8004bb0:	b2da      	uxtb	r2, r3
 8004bb2:	79fb      	ldrb	r3, [r7, #7]
 8004bb4:	f003 030f 	and.w	r3, r3, #15
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	4413      	add	r3, r2
 8004bbc:	b2db      	uxtb	r3, r3
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	370c      	adds	r7, #12
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
	...

08004bcc <bin2bcd>:

uint8_t bin2bcd(uint8_t data){
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	71fb      	strb	r3, [r7, #7]
	return ((data/10)<<4)|(data%10);
 8004bd6:	79fb      	ldrb	r3, [r7, #7]
 8004bd8:	4a0d      	ldr	r2, [pc, #52]	; (8004c10 <bin2bcd+0x44>)
 8004bda:	fba2 2303 	umull	r2, r3, r2, r3
 8004bde:	08db      	lsrs	r3, r3, #3
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	011b      	lsls	r3, r3, #4
 8004be4:	b258      	sxtb	r0, r3
 8004be6:	79fa      	ldrb	r2, [r7, #7]
 8004be8:	4b09      	ldr	r3, [pc, #36]	; (8004c10 <bin2bcd+0x44>)
 8004bea:	fba3 1302 	umull	r1, r3, r3, r2
 8004bee:	08d9      	lsrs	r1, r3, #3
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	440b      	add	r3, r1
 8004bf6:	005b      	lsls	r3, r3, #1
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	b25b      	sxtb	r3, r3
 8004bfe:	4303      	orrs	r3, r0
 8004c00:	b25b      	sxtb	r3, r3
 8004c02:	b2db      	uxtb	r3, r3
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	cccccccd 	.word	0xcccccccd

08004c14 <rtc_get_time>:

	rtc_write(0x07,rs);
}

void rtc_get_time(uint8_t *hour,uint8_t *min,uint8_t *sec)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b08a      	sub	sp, #40	; 0x28
 8004c18:	af04      	add	r7, sp, #16
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
	uint8_t data[3];
	if(HAL_I2C_Mem_Read(&hi2c1,addr_ds1307,0x00,I2C_MEMADD_SIZE_8BIT,data,3,1000)!=HAL_OK){
 8004c20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c24:	9302      	str	r3, [sp, #8]
 8004c26:	2303      	movs	r3, #3
 8004c28:	9301      	str	r3, [sp, #4]
 8004c2a:	f107 0314 	add.w	r3, r7, #20
 8004c2e:	9300      	str	r3, [sp, #0]
 8004c30:	2301      	movs	r3, #1
 8004c32:	2200      	movs	r2, #0
 8004c34:	f64f 71d0 	movw	r1, #65488	; 0xffd0
 8004c38:	480f      	ldr	r0, [pc, #60]	; (8004c78 <rtc_get_time+0x64>)
 8004c3a:	f005 fdf3 	bl	800a824 <HAL_I2C_Mem_Read>
		//_Error_Handler(__FILE__,__LINE__);
	}

	*sec=bcd2bin(data[0]);
 8004c3e:	7d3b      	ldrb	r3, [r7, #20]
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7ff ffa9 	bl	8004b98 <bcd2bin>
 8004c46:	4603      	mov	r3, r0
 8004c48:	461a      	mov	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	701a      	strb	r2, [r3, #0]
	*min=bcd2bin(data[1]);
 8004c4e:	7d7b      	ldrb	r3, [r7, #21]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7ff ffa1 	bl	8004b98 <bcd2bin>
 8004c56:	4603      	mov	r3, r0
 8004c58:	461a      	mov	r2, r3
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	701a      	strb	r2, [r3, #0]
	*hour=bcd2bin(data[2]);
 8004c5e:	7dbb      	ldrb	r3, [r7, #22]
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7ff ff99 	bl	8004b98 <bcd2bin>
 8004c66:	4603      	mov	r3, r0
 8004c68:	461a      	mov	r2, r3
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	701a      	strb	r2, [r3, #0]
}
 8004c6e:	bf00      	nop
 8004c70:	3718      	adds	r7, #24
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	20000380 	.word	0x20000380

08004c7c <rtc_set_time>:

void rtc_set_time(uint8_t hour,uint8_t min,uint8_t sec)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b088      	sub	sp, #32
 8004c80:	af04      	add	r7, sp, #16
 8004c82:	4603      	mov	r3, r0
 8004c84:	71fb      	strb	r3, [r7, #7]
 8004c86:	460b      	mov	r3, r1
 8004c88:	71bb      	strb	r3, [r7, #6]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	717b      	strb	r3, [r7, #5]
	uint8_t data[3]={bin2bcd(sec),bin2bcd(min),bin2bcd(hour)};
 8004c8e:	797b      	ldrb	r3, [r7, #5]
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7ff ff9b 	bl	8004bcc <bin2bcd>
 8004c96:	4603      	mov	r3, r0
 8004c98:	733b      	strb	r3, [r7, #12]
 8004c9a:	79bb      	ldrb	r3, [r7, #6]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7ff ff95 	bl	8004bcc <bin2bcd>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	737b      	strb	r3, [r7, #13]
 8004ca6:	79fb      	ldrb	r3, [r7, #7]
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7ff ff8f 	bl	8004bcc <bin2bcd>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	73bb      	strb	r3, [r7, #14]
	if(HAL_I2C_Mem_Write(&hi2c1,addr_ds1307,0x00,I2C_MEMADD_SIZE_8BIT,data,3,1000)!=HAL_OK){
 8004cb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004cb6:	9302      	str	r3, [sp, #8]
 8004cb8:	2303      	movs	r3, #3
 8004cba:	9301      	str	r3, [sp, #4]
 8004cbc:	f107 030c 	add.w	r3, r7, #12
 8004cc0:	9300      	str	r3, [sp, #0]
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f64f 71d0 	movw	r1, #65488	; 0xffd0
 8004cca:	4803      	ldr	r0, [pc, #12]	; (8004cd8 <rtc_set_time+0x5c>)
 8004ccc:	f005 fc96 	bl	800a5fc <HAL_I2C_Mem_Write>
	//	_Error_Handler(__FILE__,__LINE__);
	}
}
 8004cd0:	bf00      	nop
 8004cd2:	3710      	adds	r7, #16
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	20000380 	.word	0x20000380

08004cdc <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b086      	sub	sp, #24
 8004ce0:	af02      	add	r7, sp, #8
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8004ce6:	f107 020f 	add.w	r2, r7, #15
 8004cea:	1df9      	adds	r1, r7, #7
 8004cec:	2364      	movs	r3, #100	; 0x64
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	4804      	ldr	r0, [pc, #16]	; (8004d04 <W25qxx_Spi+0x28>)
 8004cf4:	f007 fc69 	bl	800c5ca <HAL_SPI_TransmitReceive>
	return ret;
 8004cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	20000560 	.word	0x20000560

08004d08 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	60fb      	str	r3, [r7, #12]
 8004d12:	2300      	movs	r3, #0
 8004d14:	60bb      	str	r3, [r7, #8]
 8004d16:	2300      	movs	r3, #0
 8004d18:	607b      	str	r3, [r7, #4]
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004d1e:	2200      	movs	r2, #0
 8004d20:	2101      	movs	r1, #1
 8004d22:	4813      	ldr	r0, [pc, #76]	; (8004d70 <W25qxx_ReadID+0x68>)
 8004d24:	f005 fba8 	bl	800a478 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8004d28:	209f      	movs	r0, #159	; 0x9f
 8004d2a:	f7ff ffd7 	bl	8004cdc <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004d2e:	20a5      	movs	r0, #165	; 0xa5
 8004d30:	f7ff ffd4 	bl	8004cdc <W25qxx_Spi>
 8004d34:	4603      	mov	r3, r0
 8004d36:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004d38:	20a5      	movs	r0, #165	; 0xa5
 8004d3a:	f7ff ffcf 	bl	8004cdc <W25qxx_Spi>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004d42:	20a5      	movs	r0, #165	; 0xa5
 8004d44:	f7ff ffca 	bl	8004cdc <W25qxx_Spi>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	2101      	movs	r1, #1
 8004d50:	4807      	ldr	r0, [pc, #28]	; (8004d70 <W25qxx_ReadID+0x68>)
 8004d52:	f005 fb91 	bl	800a478 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	041a      	lsls	r2, r3, #16
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	021b      	lsls	r3, r3, #8
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	683a      	ldr	r2, [r7, #0]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	60fb      	str	r3, [r7, #12]
	return Temp;
 8004d66:	68fb      	ldr	r3, [r7, #12]
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3710      	adds	r7, #16
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	48000400 	.word	0x48000400

08004d74 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8004d74:	b590      	push	{r4, r7, lr}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	2101      	movs	r1, #1
 8004d7e:	4816      	ldr	r0, [pc, #88]	; (8004dd8 <W25qxx_ReadUniqID+0x64>)
 8004d80:	f005 fb7a 	bl	800a478 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8004d84:	204b      	movs	r0, #75	; 0x4b
 8004d86:	f7ff ffa9 	bl	8004cdc <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	71fb      	strb	r3, [r7, #7]
 8004d8e:	e005      	b.n	8004d9c <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004d90:	20a5      	movs	r0, #165	; 0xa5
 8004d92:	f7ff ffa3 	bl	8004cdc <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8004d96:	79fb      	ldrb	r3, [r7, #7]
 8004d98:	3301      	adds	r3, #1
 8004d9a:	71fb      	strb	r3, [r7, #7]
 8004d9c:	79fb      	ldrb	r3, [r7, #7]
 8004d9e:	2b03      	cmp	r3, #3
 8004da0:	d9f6      	bls.n	8004d90 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 8004da2:	2300      	movs	r3, #0
 8004da4:	71bb      	strb	r3, [r7, #6]
 8004da6:	e00b      	b.n	8004dc0 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004da8:	79bc      	ldrb	r4, [r7, #6]
 8004daa:	20a5      	movs	r0, #165	; 0xa5
 8004dac:	f7ff ff96 	bl	8004cdc <W25qxx_Spi>
 8004db0:	4603      	mov	r3, r0
 8004db2:	461a      	mov	r2, r3
 8004db4:	4b09      	ldr	r3, [pc, #36]	; (8004ddc <W25qxx_ReadUniqID+0x68>)
 8004db6:	4423      	add	r3, r4
 8004db8:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8004dba:	79bb      	ldrb	r3, [r7, #6]
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	71bb      	strb	r3, [r7, #6]
 8004dc0:	79bb      	ldrb	r3, [r7, #6]
 8004dc2:	2b07      	cmp	r3, #7
 8004dc4:	d9f0      	bls.n	8004da8 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	2101      	movs	r1, #1
 8004dca:	4803      	ldr	r0, [pc, #12]	; (8004dd8 <W25qxx_ReadUniqID+0x64>)
 8004dcc:	f005 fb54 	bl	800a478 <HAL_GPIO_WritePin>
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd90      	pop	{r4, r7, pc}
 8004dd8:	48000400 	.word	0x48000400
 8004ddc:	20000714 	.word	0x20000714

08004de0 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004de4:	2200      	movs	r2, #0
 8004de6:	2101      	movs	r1, #1
 8004de8:	4807      	ldr	r0, [pc, #28]	; (8004e08 <W25qxx_WriteEnable+0x28>)
 8004dea:	f005 fb45 	bl	800a478 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8004dee:	2006      	movs	r0, #6
 8004df0:	f7ff ff74 	bl	8004cdc <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004df4:	2201      	movs	r2, #1
 8004df6:	2101      	movs	r1, #1
 8004df8:	4803      	ldr	r0, [pc, #12]	; (8004e08 <W25qxx_WriteEnable+0x28>)
 8004dfa:	f005 fb3d 	bl	800a478 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8004dfe:	2001      	movs	r0, #1
 8004e00:	f005 f80c 	bl	8009e1c <HAL_Delay>
}
 8004e04:	bf00      	nop
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	48000400 	.word	0x48000400

08004e0c <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	4603      	mov	r3, r0
 8004e14:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8004e16:	2300      	movs	r3, #0
 8004e18:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	2101      	movs	r1, #1
 8004e1e:	481c      	ldr	r0, [pc, #112]	; (8004e90 <W25qxx_ReadStatusRegister+0x84>)
 8004e20:	f005 fb2a 	bl	800a478 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8004e24:	79fb      	ldrb	r3, [r7, #7]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d10c      	bne.n	8004e44 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8004e2a:	2005      	movs	r0, #5
 8004e2c:	f7ff ff56 	bl	8004cdc <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004e30:	20a5      	movs	r0, #165	; 0xa5
 8004e32:	f7ff ff53 	bl	8004cdc <W25qxx_Spi>
 8004e36:	4603      	mov	r3, r0
 8004e38:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8004e3a:	4a16      	ldr	r2, [pc, #88]	; (8004e94 <W25qxx_ReadStatusRegister+0x88>)
 8004e3c:	7bfb      	ldrb	r3, [r7, #15]
 8004e3e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8004e42:	e01b      	b.n	8004e7c <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8004e44:	79fb      	ldrb	r3, [r7, #7]
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d10c      	bne.n	8004e64 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8004e4a:	2035      	movs	r0, #53	; 0x35
 8004e4c:	f7ff ff46 	bl	8004cdc <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004e50:	20a5      	movs	r0, #165	; 0xa5
 8004e52:	f7ff ff43 	bl	8004cdc <W25qxx_Spi>
 8004e56:	4603      	mov	r3, r0
 8004e58:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8004e5a:	4a0e      	ldr	r2, [pc, #56]	; (8004e94 <W25qxx_ReadStatusRegister+0x88>)
 8004e5c:	7bfb      	ldrb	r3, [r7, #15]
 8004e5e:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8004e62:	e00b      	b.n	8004e7c <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8004e64:	2015      	movs	r0, #21
 8004e66:	f7ff ff39 	bl	8004cdc <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004e6a:	20a5      	movs	r0, #165	; 0xa5
 8004e6c:	f7ff ff36 	bl	8004cdc <W25qxx_Spi>
 8004e70:	4603      	mov	r3, r0
 8004e72:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8004e74:	4a07      	ldr	r2, [pc, #28]	; (8004e94 <W25qxx_ReadStatusRegister+0x88>)
 8004e76:	7bfb      	ldrb	r3, [r7, #15]
 8004e78:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	2101      	movs	r1, #1
 8004e80:	4803      	ldr	r0, [pc, #12]	; (8004e90 <W25qxx_ReadStatusRegister+0x84>)
 8004e82:	f005 faf9 	bl	800a478 <HAL_GPIO_WritePin>
	return status;
 8004e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3710      	adds	r7, #16
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	48000400 	.word	0x48000400
 8004e94:	20000714 	.word	0x20000714

08004e98 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8004e9c:	2001      	movs	r0, #1
 8004e9e:	f004 ffbd 	bl	8009e1c <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	2101      	movs	r1, #1
 8004ea6:	480f      	ldr	r0, [pc, #60]	; (8004ee4 <W25qxx_WaitForWriteEnd+0x4c>)
 8004ea8:	f005 fae6 	bl	800a478 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8004eac:	2005      	movs	r0, #5
 8004eae:	f7ff ff15 	bl	8004cdc <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004eb2:	20a5      	movs	r0, #165	; 0xa5
 8004eb4:	f7ff ff12 	bl	8004cdc <W25qxx_Spi>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	461a      	mov	r2, r3
 8004ebc:	4b0a      	ldr	r3, [pc, #40]	; (8004ee8 <W25qxx_WaitForWriteEnd+0x50>)
 8004ebe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8004ec2:	2001      	movs	r0, #1
 8004ec4:	f004 ffaa 	bl	8009e1c <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8004ec8:	4b07      	ldr	r3, [pc, #28]	; (8004ee8 <W25qxx_WaitForWriteEnd+0x50>)
 8004eca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1ed      	bne.n	8004eb2 <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	2101      	movs	r1, #1
 8004eda:	4802      	ldr	r0, [pc, #8]	; (8004ee4 <W25qxx_WaitForWriteEnd+0x4c>)
 8004edc:	f005 facc 	bl	800a478 <HAL_GPIO_WritePin>
}
 8004ee0:	bf00      	nop
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	48000400 	.word	0x48000400
 8004ee8:	20000714 	.word	0x20000714

08004eec <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8004ef2:	4b65      	ldr	r3, [pc, #404]	; (8005088 <W25qxx_Init+0x19c>)
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8004efa:	e002      	b.n	8004f02 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8004efc:	2001      	movs	r0, #1
 8004efe:	f004 ff8d 	bl	8009e1c <HAL_Delay>
	while (HAL_GetTick() < 100)
 8004f02:	f004 ff7f 	bl	8009e04 <HAL_GetTick>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b63      	cmp	r3, #99	; 0x63
 8004f0a:	d9f7      	bls.n	8004efc <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	2101      	movs	r1, #1
 8004f10:	485e      	ldr	r0, [pc, #376]	; (800508c <W25qxx_Init+0x1a0>)
 8004f12:	f005 fab1 	bl	800a478 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8004f16:	2064      	movs	r0, #100	; 0x64
 8004f18:	f004 ff80 	bl	8009e1c <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 8004f1c:	f7ff fef4 	bl	8004d08 <W25qxx_ReadID>
 8004f20:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	3b11      	subs	r3, #17
 8004f28:	2b0f      	cmp	r3, #15
 8004f2a:	d86c      	bhi.n	8005006 <W25qxx_Init+0x11a>
 8004f2c:	a201      	add	r2, pc, #4	; (adr r2, 8004f34 <W25qxx_Init+0x48>)
 8004f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f32:	bf00      	nop
 8004f34:	08004ff9 	.word	0x08004ff9
 8004f38:	08004feb 	.word	0x08004feb
 8004f3c:	08004fdd 	.word	0x08004fdd
 8004f40:	08004fcf 	.word	0x08004fcf
 8004f44:	08004fc1 	.word	0x08004fc1
 8004f48:	08004fb3 	.word	0x08004fb3
 8004f4c:	08004fa5 	.word	0x08004fa5
 8004f50:	08004f95 	.word	0x08004f95
 8004f54:	08004f85 	.word	0x08004f85
 8004f58:	08005007 	.word	0x08005007
 8004f5c:	08005007 	.word	0x08005007
 8004f60:	08005007 	.word	0x08005007
 8004f64:	08005007 	.word	0x08005007
 8004f68:	08005007 	.word	0x08005007
 8004f6c:	08005007 	.word	0x08005007
 8004f70:	08004f75 	.word	0x08004f75
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8004f74:	4b44      	ldr	r3, [pc, #272]	; (8005088 <W25qxx_Init+0x19c>)
 8004f76:	220a      	movs	r2, #10
 8004f78:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8004f7a:	4b43      	ldr	r3, [pc, #268]	; (8005088 <W25qxx_Init+0x19c>)
 8004f7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f80:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 8004f82:	e046      	b.n	8005012 <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8004f84:	4b40      	ldr	r3, [pc, #256]	; (8005088 <W25qxx_Init+0x19c>)
 8004f86:	2209      	movs	r2, #9
 8004f88:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8004f8a:	4b3f      	ldr	r3, [pc, #252]	; (8005088 <W25qxx_Init+0x19c>)
 8004f8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f90:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 8004f92:	e03e      	b.n	8005012 <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8004f94:	4b3c      	ldr	r3, [pc, #240]	; (8005088 <W25qxx_Init+0x19c>)
 8004f96:	2208      	movs	r2, #8
 8004f98:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8004f9a:	4b3b      	ldr	r3, [pc, #236]	; (8005088 <W25qxx_Init+0x19c>)
 8004f9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004fa0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 8004fa2:	e036      	b.n	8005012 <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8004fa4:	4b38      	ldr	r3, [pc, #224]	; (8005088 <W25qxx_Init+0x19c>)
 8004fa6:	2207      	movs	r2, #7
 8004fa8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8004faa:	4b37      	ldr	r3, [pc, #220]	; (8005088 <W25qxx_Init+0x19c>)
 8004fac:	2280      	movs	r2, #128	; 0x80
 8004fae:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 8004fb0:	e02f      	b.n	8005012 <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8004fb2:	4b35      	ldr	r3, [pc, #212]	; (8005088 <W25qxx_Init+0x19c>)
 8004fb4:	2206      	movs	r2, #6
 8004fb6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8004fb8:	4b33      	ldr	r3, [pc, #204]	; (8005088 <W25qxx_Init+0x19c>)
 8004fba:	2240      	movs	r2, #64	; 0x40
 8004fbc:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 8004fbe:	e028      	b.n	8005012 <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8004fc0:	4b31      	ldr	r3, [pc, #196]	; (8005088 <W25qxx_Init+0x19c>)
 8004fc2:	2205      	movs	r2, #5
 8004fc4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8004fc6:	4b30      	ldr	r3, [pc, #192]	; (8005088 <W25qxx_Init+0x19c>)
 8004fc8:	2220      	movs	r2, #32
 8004fca:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 8004fcc:	e021      	b.n	8005012 <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8004fce:	4b2e      	ldr	r3, [pc, #184]	; (8005088 <W25qxx_Init+0x19c>)
 8004fd0:	2204      	movs	r2, #4
 8004fd2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8004fd4:	4b2c      	ldr	r3, [pc, #176]	; (8005088 <W25qxx_Init+0x19c>)
 8004fd6:	2210      	movs	r2, #16
 8004fd8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 8004fda:	e01a      	b.n	8005012 <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8004fdc:	4b2a      	ldr	r3, [pc, #168]	; (8005088 <W25qxx_Init+0x19c>)
 8004fde:	2203      	movs	r2, #3
 8004fe0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8004fe2:	4b29      	ldr	r3, [pc, #164]	; (8005088 <W25qxx_Init+0x19c>)
 8004fe4:	2208      	movs	r2, #8
 8004fe6:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 8004fe8:	e013      	b.n	8005012 <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8004fea:	4b27      	ldr	r3, [pc, #156]	; (8005088 <W25qxx_Init+0x19c>)
 8004fec:	2202      	movs	r2, #2
 8004fee:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8004ff0:	4b25      	ldr	r3, [pc, #148]	; (8005088 <W25qxx_Init+0x19c>)
 8004ff2:	2204      	movs	r2, #4
 8004ff4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 8004ff6:	e00c      	b.n	8005012 <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8004ff8:	4b23      	ldr	r3, [pc, #140]	; (8005088 <W25qxx_Init+0x19c>)
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8004ffe:	4b22      	ldr	r3, [pc, #136]	; (8005088 <W25qxx_Init+0x19c>)
 8005000:	2202      	movs	r2, #2
 8005002:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 8005004:	e005      	b.n	8005012 <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 8005006:	4b20      	ldr	r3, [pc, #128]	; (8005088 <W25qxx_Init+0x19c>)
 8005008:	2200      	movs	r2, #0
 800500a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 800500e:	2300      	movs	r3, #0
 8005010:	e036      	b.n	8005080 <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 8005012:	4b1d      	ldr	r3, [pc, #116]	; (8005088 <W25qxx_Init+0x19c>)
 8005014:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005018:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 800501a:	4b1b      	ldr	r3, [pc, #108]	; (8005088 <W25qxx_Init+0x19c>)
 800501c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005020:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8005022:	4b19      	ldr	r3, [pc, #100]	; (8005088 <W25qxx_Init+0x19c>)
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	011b      	lsls	r3, r3, #4
 8005028:	4a17      	ldr	r2, [pc, #92]	; (8005088 <W25qxx_Init+0x19c>)
 800502a:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 800502c:	4b16      	ldr	r3, [pc, #88]	; (8005088 <W25qxx_Init+0x19c>)
 800502e:	695b      	ldr	r3, [r3, #20]
 8005030:	4a15      	ldr	r2, [pc, #84]	; (8005088 <W25qxx_Init+0x19c>)
 8005032:	6912      	ldr	r2, [r2, #16]
 8005034:	fb02 f303 	mul.w	r3, r2, r3
 8005038:	4a13      	ldr	r2, [pc, #76]	; (8005088 <W25qxx_Init+0x19c>)
 800503a:	8952      	ldrh	r2, [r2, #10]
 800503c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005040:	4a11      	ldr	r2, [pc, #68]	; (8005088 <W25qxx_Init+0x19c>)
 8005042:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8005044:	4b10      	ldr	r3, [pc, #64]	; (8005088 <W25qxx_Init+0x19c>)
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	011b      	lsls	r3, r3, #4
 800504a:	4a0f      	ldr	r2, [pc, #60]	; (8005088 <W25qxx_Init+0x19c>)
 800504c:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 800504e:	4b0e      	ldr	r3, [pc, #56]	; (8005088 <W25qxx_Init+0x19c>)
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	4a0d      	ldr	r2, [pc, #52]	; (8005088 <W25qxx_Init+0x19c>)
 8005054:	6912      	ldr	r2, [r2, #16]
 8005056:	fb02 f303 	mul.w	r3, r2, r3
 800505a:	0a9b      	lsrs	r3, r3, #10
 800505c:	4a0a      	ldr	r2, [pc, #40]	; (8005088 <W25qxx_Init+0x19c>)
 800505e:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8005060:	f7ff fe88 	bl	8004d74 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8005064:	2001      	movs	r0, #1
 8005066:	f7ff fed1 	bl	8004e0c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 800506a:	2002      	movs	r0, #2
 800506c:	f7ff fece 	bl	8004e0c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8005070:	2003      	movs	r0, #3
 8005072:	f7ff fecb 	bl	8004e0c <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 8005076:	4b04      	ldr	r3, [pc, #16]	; (8005088 <W25qxx_Init+0x19c>)
 8005078:	2200      	movs	r2, #0
 800507a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 800507e:	2301      	movs	r3, #1
}
 8005080:	4618      	mov	r0, r3
 8005082:	3708      	adds	r7, #8
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	20000714 	.word	0x20000714
 800508c:	48000400 	.word	0x48000400

08005090 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8005098:	e002      	b.n	80050a0 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 800509a:	2001      	movs	r0, #1
 800509c:	f004 febe 	bl	8009e1c <HAL_Delay>
	while (w25qxx.Lock == 1)
 80050a0:	4b25      	ldr	r3, [pc, #148]	; (8005138 <W25qxx_EraseSector+0xa8>)
 80050a2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d0f7      	beq.n	800509a <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 80050aa:	4b23      	ldr	r3, [pc, #140]	; (8005138 <W25qxx_EraseSector+0xa8>)
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
#endif
	W25qxx_WaitForWriteEnd();
 80050b2:	f7ff fef1 	bl	8004e98 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 80050b6:	4b20      	ldr	r3, [pc, #128]	; (8005138 <W25qxx_EraseSector+0xa8>)
 80050b8:	691a      	ldr	r2, [r3, #16]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	fb02 f303 	mul.w	r3, r2, r3
 80050c0:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 80050c2:	f7ff fe8d 	bl	8004de0 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80050c6:	2200      	movs	r2, #0
 80050c8:	2101      	movs	r1, #1
 80050ca:	481c      	ldr	r0, [pc, #112]	; (800513c <W25qxx_EraseSector+0xac>)
 80050cc:	f005 f9d4 	bl	800a478 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 80050d0:	4b19      	ldr	r3, [pc, #100]	; (8005138 <W25qxx_EraseSector+0xa8>)
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	2b08      	cmp	r3, #8
 80050d6:	d909      	bls.n	80050ec <W25qxx_EraseSector+0x5c>
	{
		W25qxx_Spi(0x21);
 80050d8:	2021      	movs	r0, #33	; 0x21
 80050da:	f7ff fdff 	bl	8004cdc <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	0e1b      	lsrs	r3, r3, #24
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7ff fdf9 	bl	8004cdc <W25qxx_Spi>
 80050ea:	e002      	b.n	80050f2 <W25qxx_EraseSector+0x62>
	}
	else
	{
		W25qxx_Spi(0x20);
 80050ec:	2020      	movs	r0, #32
 80050ee:	f7ff fdf5 	bl	8004cdc <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	0c1b      	lsrs	r3, r3, #16
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	4618      	mov	r0, r3
 80050fa:	f7ff fdef 	bl	8004cdc <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	0a1b      	lsrs	r3, r3, #8
 8005102:	b2db      	uxtb	r3, r3
 8005104:	4618      	mov	r0, r3
 8005106:	f7ff fde9 	bl	8004cdc <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	b2db      	uxtb	r3, r3
 800510e:	4618      	mov	r0, r3
 8005110:	f7ff fde4 	bl	8004cdc <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8005114:	2201      	movs	r2, #1
 8005116:	2101      	movs	r1, #1
 8005118:	4808      	ldr	r0, [pc, #32]	; (800513c <W25qxx_EraseSector+0xac>)
 800511a:	f005 f9ad 	bl	800a478 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 800511e:	f7ff febb 	bl	8004e98 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(1);
 8005122:	2001      	movs	r0, #1
 8005124:	f004 fe7a 	bl	8009e1c <HAL_Delay>
	w25qxx.Lock = 0;
 8005128:	4b03      	ldr	r3, [pc, #12]	; (8005138 <W25qxx_EraseSector+0xa8>)
 800512a:	2200      	movs	r2, #0
 800512c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8005130:	bf00      	nop
 8005132:	3708      	adds	r7, #8
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	20000714 	.word	0x20000714
 800513c:	48000400 	.word	0x48000400

08005140 <W25qxx_WriteByte>:
	w25qxx.Lock = 0;
	return false;
}
//###################################################################################################################
void W25qxx_WriteByte(uint8_t pBuffer, uint32_t WriteAddr_inBytes)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	4603      	mov	r3, r0
 8005148:	6039      	str	r1, [r7, #0]
 800514a:	71fb      	strb	r3, [r7, #7]
	while (w25qxx.Lock == 1)
 800514c:	e002      	b.n	8005154 <W25qxx_WriteByte+0x14>
		W25qxx_Delay(1);
 800514e:	2001      	movs	r0, #1
 8005150:	f004 fe64 	bl	8009e1c <HAL_Delay>
	while (w25qxx.Lock == 1)
 8005154:	4b23      	ldr	r3, [pc, #140]	; (80051e4 <W25qxx_WriteByte+0xa4>)
 8005156:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800515a:	2b01      	cmp	r3, #1
 800515c:	d0f7      	beq.n	800514e <W25qxx_WriteByte+0xe>
	w25qxx.Lock = 1;
 800515e:	4b21      	ldr	r3, [pc, #132]	; (80051e4 <W25qxx_WriteByte+0xa4>)
 8005160:	2201      	movs	r2, #1
 8005162:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx WriteByte 0x%02X at address %d begin...", pBuffer, WriteAddr_inBytes);
#endif
	W25qxx_WaitForWriteEnd();
 8005166:	f7ff fe97 	bl	8004e98 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 800516a:	f7ff fe39 	bl	8004de0 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800516e:	2200      	movs	r2, #0
 8005170:	2101      	movs	r1, #1
 8005172:	481d      	ldr	r0, [pc, #116]	; (80051e8 <W25qxx_WriteByte+0xa8>)
 8005174:	f005 f980 	bl	800a478 <HAL_GPIO_WritePin>

	if (w25qxx.ID >= W25Q256)
 8005178:	4b1a      	ldr	r3, [pc, #104]	; (80051e4 <W25qxx_WriteByte+0xa4>)
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	2b08      	cmp	r3, #8
 800517e:	d909      	bls.n	8005194 <W25qxx_WriteByte+0x54>
	{
		W25qxx_Spi(0x12);
 8005180:	2012      	movs	r0, #18
 8005182:	f7ff fdab 	bl	8004cdc <W25qxx_Spi>
		W25qxx_Spi((WriteAddr_inBytes & 0xFF000000) >> 24);
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	0e1b      	lsrs	r3, r3, #24
 800518a:	b2db      	uxtb	r3, r3
 800518c:	4618      	mov	r0, r3
 800518e:	f7ff fda5 	bl	8004cdc <W25qxx_Spi>
 8005192:	e002      	b.n	800519a <W25qxx_WriteByte+0x5a>
	}
	else
	{
		W25qxx_Spi(0x02);
 8005194:	2002      	movs	r0, #2
 8005196:	f7ff fda1 	bl	8004cdc <W25qxx_Spi>
	}
	W25qxx_Spi((WriteAddr_inBytes & 0xFF0000) >> 16);
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	0c1b      	lsrs	r3, r3, #16
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	4618      	mov	r0, r3
 80051a2:	f7ff fd9b 	bl	8004cdc <W25qxx_Spi>
	W25qxx_Spi((WriteAddr_inBytes & 0xFF00) >> 8);
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	0a1b      	lsrs	r3, r3, #8
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7ff fd95 	bl	8004cdc <W25qxx_Spi>
	W25qxx_Spi(WriteAddr_inBytes & 0xFF);
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7ff fd90 	bl	8004cdc <W25qxx_Spi>
	W25qxx_Spi(pBuffer);
 80051bc:	79fb      	ldrb	r3, [r7, #7]
 80051be:	4618      	mov	r0, r3
 80051c0:	f7ff fd8c 	bl	8004cdc <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80051c4:	2201      	movs	r2, #1
 80051c6:	2101      	movs	r1, #1
 80051c8:	4807      	ldr	r0, [pc, #28]	; (80051e8 <W25qxx_WriteByte+0xa8>)
 80051ca:	f005 f955 	bl	800a478 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 80051ce:	f7ff fe63 	bl	8004e98 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WriteByte done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	w25qxx.Lock = 0;
 80051d2:	4b04      	ldr	r3, [pc, #16]	; (80051e4 <W25qxx_WriteByte+0xa4>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80051da:	bf00      	nop
 80051dc:	3708      	adds	r7, #8
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	20000714 	.word	0x20000714
 80051e8:	48000400 	.word	0x48000400

080051ec <W25qxx_ReadByte>:
	W25qxx_Delay(100);
#endif
}
//###################################################################################################################
void W25qxx_ReadByte(uint8_t *pBuffer, uint32_t Bytes_Address)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
	while (w25qxx.Lock == 1)
 80051f6:	e002      	b.n	80051fe <W25qxx_ReadByte+0x12>
		W25qxx_Delay(1);
 80051f8:	2001      	movs	r0, #1
 80051fa:	f004 fe0f 	bl	8009e1c <HAL_Delay>
	while (w25qxx.Lock == 1)
 80051fe:	4b23      	ldr	r3, [pc, #140]	; (800528c <W25qxx_ReadByte+0xa0>)
 8005200:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005204:	2b01      	cmp	r3, #1
 8005206:	d0f7      	beq.n	80051f8 <W25qxx_ReadByte+0xc>
	w25qxx.Lock = 1;
 8005208:	4b20      	ldr	r3, [pc, #128]	; (800528c <W25qxx_ReadByte+0xa0>)
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx ReadByte at address %d begin...\r\n", Bytes_Address);
#endif
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8005210:	2200      	movs	r2, #0
 8005212:	2101      	movs	r1, #1
 8005214:	481e      	ldr	r0, [pc, #120]	; (8005290 <W25qxx_ReadByte+0xa4>)
 8005216:	f005 f92f 	bl	800a478 <HAL_GPIO_WritePin>

	if (w25qxx.ID >= W25Q256)
 800521a:	4b1c      	ldr	r3, [pc, #112]	; (800528c <W25qxx_ReadByte+0xa0>)
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	2b08      	cmp	r3, #8
 8005220:	d909      	bls.n	8005236 <W25qxx_ReadByte+0x4a>
	{
		W25qxx_Spi(0x0C);
 8005222:	200c      	movs	r0, #12
 8005224:	f7ff fd5a 	bl	8004cdc <W25qxx_Spi>
		W25qxx_Spi((Bytes_Address & 0xFF000000) >> 24);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	0e1b      	lsrs	r3, r3, #24
 800522c:	b2db      	uxtb	r3, r3
 800522e:	4618      	mov	r0, r3
 8005230:	f7ff fd54 	bl	8004cdc <W25qxx_Spi>
 8005234:	e002      	b.n	800523c <W25qxx_ReadByte+0x50>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8005236:	200b      	movs	r0, #11
 8005238:	f7ff fd50 	bl	8004cdc <W25qxx_Spi>
	}
	W25qxx_Spi((Bytes_Address & 0xFF0000) >> 16);
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	0c1b      	lsrs	r3, r3, #16
 8005240:	b2db      	uxtb	r3, r3
 8005242:	4618      	mov	r0, r3
 8005244:	f7ff fd4a 	bl	8004cdc <W25qxx_Spi>
	W25qxx_Spi((Bytes_Address & 0xFF00) >> 8);
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	0a1b      	lsrs	r3, r3, #8
 800524c:	b2db      	uxtb	r3, r3
 800524e:	4618      	mov	r0, r3
 8005250:	f7ff fd44 	bl	8004cdc <W25qxx_Spi>
	W25qxx_Spi(Bytes_Address & 0xFF);
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	b2db      	uxtb	r3, r3
 8005258:	4618      	mov	r0, r3
 800525a:	f7ff fd3f 	bl	8004cdc <W25qxx_Spi>
	W25qxx_Spi(0);
 800525e:	2000      	movs	r0, #0
 8005260:	f7ff fd3c 	bl	8004cdc <W25qxx_Spi>
	*pBuffer = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005264:	20a5      	movs	r0, #165	; 0xa5
 8005266:	f7ff fd39 	bl	8004cdc <W25qxx_Spi>
 800526a:	4603      	mov	r3, r0
 800526c:	461a      	mov	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8005272:	2201      	movs	r2, #1
 8005274:	2101      	movs	r1, #1
 8005276:	4806      	ldr	r0, [pc, #24]	; (8005290 <W25qxx_ReadByte+0xa4>)
 8005278:	f005 f8fe 	bl	800a478 <HAL_GPIO_WritePin>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadByte 0x%02X done after %d ms\r\n", *pBuffer, HAL_GetTick() - StartTime);
#endif
	w25qxx.Lock = 0;
 800527c:	4b03      	ldr	r3, [pc, #12]	; (800528c <W25qxx_ReadByte+0xa0>)
 800527e:	2200      	movs	r2, #0
 8005280:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8005284:	bf00      	nop
 8005286:	3708      	adds	r7, #8
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	20000714 	.word	0x20000714
 8005290:	48000400 	.word	0x48000400

08005294 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005294:	f8df d034 	ldr.w	sp, [pc, #52]	; 80052cc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005298:	f7ff fc6c 	bl	8004b74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800529c:	480c      	ldr	r0, [pc, #48]	; (80052d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800529e:	490d      	ldr	r1, [pc, #52]	; (80052d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80052a0:	4a0d      	ldr	r2, [pc, #52]	; (80052d8 <LoopForever+0xe>)
  movs r3, #0
 80052a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80052a4:	e002      	b.n	80052ac <LoopCopyDataInit>

080052a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80052a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80052a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80052aa:	3304      	adds	r3, #4

080052ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80052ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80052ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80052b0:	d3f9      	bcc.n	80052a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80052b2:	4a0a      	ldr	r2, [pc, #40]	; (80052dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80052b4:	4c0a      	ldr	r4, [pc, #40]	; (80052e0 <LoopForever+0x16>)
  movs r3, #0
 80052b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80052b8:	e001      	b.n	80052be <LoopFillZerobss>

080052ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80052ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80052bc:	3204      	adds	r2, #4

080052be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80052be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80052c0:	d3fb      	bcc.n	80052ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80052c2:	f009 fd2f 	bl	800ed24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80052c6:	f7fe fdc9 	bl	8003e5c <main>

080052ca <LoopForever>:

LoopForever:
    b LoopForever
 80052ca:	e7fe      	b.n	80052ca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80052cc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80052d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80052d4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80052d8:	0800f144 	.word	0x0800f144
  ldr r2, =_sbss
 80052dc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80052e0:	20000858 	.word	0x20000858

080052e4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80052e4:	e7fe      	b.n	80052e4 <ADC1_IRQHandler>
	...

080052e8 <_ZN6commonC1Ev>:
 *      Author: MKS
 */

#include "common.h"

common::common() {
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	4a04      	ldr	r2, [pc, #16]	; (8005304 <_ZN6commonC1Ev+0x1c>)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4618      	mov	r0, r3
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr
 8005304:	0800f0e4 	.word	0x0800f0e4

08005308 <_ZN6commonD1Ev>:

common::~common() {
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	4a04      	ldr	r2, [pc, #16]	; (8005324 <_ZN6commonD1Ev+0x1c>)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4618      	mov	r0, r3
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr
 8005324:	0800f0e4 	.word	0x0800f0e4

08005328 <_ZN6commonD0Ev>:
common::~common() {
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
}
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f7ff ffe9 	bl	8005308 <_ZN6commonD1Ev>
 8005336:	2104      	movs	r1, #4
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f009 fcee 	bl	800ed1a <_ZdlPvj>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4618      	mov	r0, r3
 8005342:	3708      	adds	r7, #8
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <_ZN14DisplayRoutineC1Ev>:
uint8_t GLCDRefreshFlag;
uint8_t GLCDNumericArray[4];
extern uint8_t wifi_command;
extern uint8_t sec_t;

DisplayRoutine::DisplayRoutine() {
 8005348:	b5b0      	push	{r4, r5, r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	4a0b      	ldr	r2, [pc, #44]	; (8005380 <_ZN14DisplayRoutineC1Ev+0x38>)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	601a      	str	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	3304      	adds	r3, #4
 800535a:	4618      	mov	r0, r3
 800535c:	f000 f94c 	bl	80055f8 <_ZN4GLCDC1Ev>
 8005360:	687d      	ldr	r5, [r7, #4]
 8005362:	4b08      	ldr	r3, [pc, #32]	; (8005384 <_ZN14DisplayRoutineC1Ev+0x3c>)
 8005364:	f605 2408 	addw	r4, r5, #2568	; 0xa08
 8005368:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800536a:	c407      	stmia	r4!, {r0, r1, r2}
 800536c:	8023      	strh	r3, [r4, #0]
 800536e:	2300      	movs	r3, #0
 8005370:	f885 3a16 	strb.w	r3, [r5, #2582]	; 0xa16
	// TODO Auto-generated constructor stub

}
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4618      	mov	r0, r3
 8005378:	3708      	adds	r7, #8
 800537a:	46bd      	mov	sp, r7
 800537c:	bdb0      	pop	{r4, r5, r7, pc}
 800537e:	bf00      	nop
 8005380:	0800f0f4 	.word	0x0800f0f4
 8005384:	0800ee74 	.word	0x0800ee74

08005388 <_ZN14DisplayRoutineD1Ev>:

DisplayRoutine::~DisplayRoutine() {
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	4a06      	ldr	r2, [pc, #24]	; (80053ac <_ZN14DisplayRoutineD1Ev+0x24>)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	601a      	str	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	3304      	adds	r3, #4
 800539a:	4618      	mov	r0, r3
 800539c:	f004 f8a8 	bl	80094f0 <_ZN4GLCDD1Ev>
	// TODO Auto-generated destructor stub
}
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4618      	mov	r0, r3
 80053a4:	3708      	adds	r7, #8
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	0800f0f4 	.word	0x0800f0f4

080053b0 <_ZN14DisplayRoutineD0Ev>:
DisplayRoutine::~DisplayRoutine() {
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
}
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f7ff ffe5 	bl	8005388 <_ZN14DisplayRoutineD1Ev>
 80053be:	f640 2118 	movw	r1, #2584	; 0xa18
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f009 fca9 	bl	800ed1a <_ZdlPvj>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4618      	mov	r0, r3
 80053cc:	3708      	adds	r7, #8
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
	...

080053d4 <_ZN14DisplayRoutine3runEv>:

void DisplayRoutine::run()
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
	m_gLCDDrive.m_lcdputs1(0,1,check);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	1d18      	adds	r0, r3, #4
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 80053e6:	2201      	movs	r2, #1
 80053e8:	2100      	movs	r1, #0
 80053ea:	f004 fb41 	bl	8009a70 <_ZN4GLCD10m_lcdputs1EhhPh>
	GLCDNumericArray[0] =(unsigned char)(((wifi_command%10000)/1000)+0x30);
 80053ee:	4b5f      	ldr	r3, [pc, #380]	; (800556c <_ZN14DisplayRoutine3runEv+0x198>)
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	461a      	mov	r2, r3
 80053f4:	4b5e      	ldr	r3, [pc, #376]	; (8005570 <_ZN14DisplayRoutine3runEv+0x19c>)
 80053f6:	fb83 1302 	smull	r1, r3, r3, r2
 80053fa:	1319      	asrs	r1, r3, #12
 80053fc:	17d3      	asrs	r3, r2, #31
 80053fe:	1acb      	subs	r3, r1, r3
 8005400:	f242 7110 	movw	r1, #10000	; 0x2710
 8005404:	fb01 f303 	mul.w	r3, r1, r3
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	4a5a      	ldr	r2, [pc, #360]	; (8005574 <_ZN14DisplayRoutine3runEv+0x1a0>)
 800540c:	fb82 1203 	smull	r1, r2, r2, r3
 8005410:	1192      	asrs	r2, r2, #6
 8005412:	17db      	asrs	r3, r3, #31
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	b2db      	uxtb	r3, r3
 8005418:	3330      	adds	r3, #48	; 0x30
 800541a:	b2da      	uxtb	r2, r3
 800541c:	4b56      	ldr	r3, [pc, #344]	; (8005578 <_ZN14DisplayRoutine3runEv+0x1a4>)
 800541e:	701a      	strb	r2, [r3, #0]
	GLCDNumericArray[1] =(unsigned char)(((wifi_command%1000)/100)+0x30);
 8005420:	4b52      	ldr	r3, [pc, #328]	; (800556c <_ZN14DisplayRoutine3runEv+0x198>)
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	461a      	mov	r2, r3
 8005426:	4b53      	ldr	r3, [pc, #332]	; (8005574 <_ZN14DisplayRoutine3runEv+0x1a0>)
 8005428:	fb83 1302 	smull	r1, r3, r3, r2
 800542c:	1199      	asrs	r1, r3, #6
 800542e:	17d3      	asrs	r3, r2, #31
 8005430:	1acb      	subs	r3, r1, r3
 8005432:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005436:	fb01 f303 	mul.w	r3, r1, r3
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	4a4f      	ldr	r2, [pc, #316]	; (800557c <_ZN14DisplayRoutine3runEv+0x1a8>)
 800543e:	fb82 1203 	smull	r1, r2, r2, r3
 8005442:	1152      	asrs	r2, r2, #5
 8005444:	17db      	asrs	r3, r3, #31
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	b2db      	uxtb	r3, r3
 800544a:	3330      	adds	r3, #48	; 0x30
 800544c:	b2da      	uxtb	r2, r3
 800544e:	4b4a      	ldr	r3, [pc, #296]	; (8005578 <_ZN14DisplayRoutine3runEv+0x1a4>)
 8005450:	705a      	strb	r2, [r3, #1]
	GLCDNumericArray[2] =(unsigned char)(((wifi_command%100)/10)+0x30);
 8005452:	4b46      	ldr	r3, [pc, #280]	; (800556c <_ZN14DisplayRoutine3runEv+0x198>)
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	4a49      	ldr	r2, [pc, #292]	; (800557c <_ZN14DisplayRoutine3runEv+0x1a8>)
 8005458:	fba2 1203 	umull	r1, r2, r2, r3
 800545c:	0952      	lsrs	r2, r2, #5
 800545e:	2164      	movs	r1, #100	; 0x64
 8005460:	fb01 f202 	mul.w	r2, r1, r2
 8005464:	1a9b      	subs	r3, r3, r2
 8005466:	b2db      	uxtb	r3, r3
 8005468:	4a45      	ldr	r2, [pc, #276]	; (8005580 <_ZN14DisplayRoutine3runEv+0x1ac>)
 800546a:	fba2 2303 	umull	r2, r3, r2, r3
 800546e:	08db      	lsrs	r3, r3, #3
 8005470:	b2db      	uxtb	r3, r3
 8005472:	3330      	adds	r3, #48	; 0x30
 8005474:	b2da      	uxtb	r2, r3
 8005476:	4b40      	ldr	r3, [pc, #256]	; (8005578 <_ZN14DisplayRoutine3runEv+0x1a4>)
 8005478:	709a      	strb	r2, [r3, #2]
	GLCDNumericArray[3] =(unsigned char)((wifi_command%10)+0x30);
 800547a:	4b3c      	ldr	r3, [pc, #240]	; (800556c <_ZN14DisplayRoutine3runEv+0x198>)
 800547c:	781a      	ldrb	r2, [r3, #0]
 800547e:	4b40      	ldr	r3, [pc, #256]	; (8005580 <_ZN14DisplayRoutine3runEv+0x1ac>)
 8005480:	fba3 1302 	umull	r1, r3, r3, r2
 8005484:	08d9      	lsrs	r1, r3, #3
 8005486:	460b      	mov	r3, r1
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	440b      	add	r3, r1
 800548c:	005b      	lsls	r3, r3, #1
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	b2db      	uxtb	r3, r3
 8005492:	3330      	adds	r3, #48	; 0x30
 8005494:	b2da      	uxtb	r2, r3
 8005496:	4b38      	ldr	r3, [pc, #224]	; (8005578 <_ZN14DisplayRoutine3runEv+0x1a4>)
 8005498:	70da      	strb	r2, [r3, #3]
	m_gLCDDrive.m_lcdputs1(0,3,GLCDNumericArray);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	1d18      	adds	r0, r3, #4
 800549e:	4b36      	ldr	r3, [pc, #216]	; (8005578 <_ZN14DisplayRoutine3runEv+0x1a4>)
 80054a0:	2203      	movs	r2, #3
 80054a2:	2100      	movs	r1, #0
 80054a4:	f004 fae4 	bl	8009a70 <_ZN4GLCD10m_lcdputs1EhhPh>
	GLCDNumericArray[0] =(unsigned char)(((sec_t%10000)/1000)+0x30);
 80054a8:	4b36      	ldr	r3, [pc, #216]	; (8005584 <_ZN14DisplayRoutine3runEv+0x1b0>)
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	461a      	mov	r2, r3
 80054ae:	4b30      	ldr	r3, [pc, #192]	; (8005570 <_ZN14DisplayRoutine3runEv+0x19c>)
 80054b0:	fb83 1302 	smull	r1, r3, r3, r2
 80054b4:	1319      	asrs	r1, r3, #12
 80054b6:	17d3      	asrs	r3, r2, #31
 80054b8:	1acb      	subs	r3, r1, r3
 80054ba:	f242 7110 	movw	r1, #10000	; 0x2710
 80054be:	fb01 f303 	mul.w	r3, r1, r3
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	4a2b      	ldr	r2, [pc, #172]	; (8005574 <_ZN14DisplayRoutine3runEv+0x1a0>)
 80054c6:	fb82 1203 	smull	r1, r2, r2, r3
 80054ca:	1192      	asrs	r2, r2, #6
 80054cc:	17db      	asrs	r3, r3, #31
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	3330      	adds	r3, #48	; 0x30
 80054d4:	b2da      	uxtb	r2, r3
 80054d6:	4b28      	ldr	r3, [pc, #160]	; (8005578 <_ZN14DisplayRoutine3runEv+0x1a4>)
 80054d8:	701a      	strb	r2, [r3, #0]
	GLCDNumericArray[1] =(unsigned char)(((sec_t%1000)/100)+0x30);
 80054da:	4b2a      	ldr	r3, [pc, #168]	; (8005584 <_ZN14DisplayRoutine3runEv+0x1b0>)
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	461a      	mov	r2, r3
 80054e0:	4b24      	ldr	r3, [pc, #144]	; (8005574 <_ZN14DisplayRoutine3runEv+0x1a0>)
 80054e2:	fb83 1302 	smull	r1, r3, r3, r2
 80054e6:	1199      	asrs	r1, r3, #6
 80054e8:	17d3      	asrs	r3, r2, #31
 80054ea:	1acb      	subs	r3, r1, r3
 80054ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80054f0:	fb01 f303 	mul.w	r3, r1, r3
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	4a21      	ldr	r2, [pc, #132]	; (800557c <_ZN14DisplayRoutine3runEv+0x1a8>)
 80054f8:	fb82 1203 	smull	r1, r2, r2, r3
 80054fc:	1152      	asrs	r2, r2, #5
 80054fe:	17db      	asrs	r3, r3, #31
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	b2db      	uxtb	r3, r3
 8005504:	3330      	adds	r3, #48	; 0x30
 8005506:	b2da      	uxtb	r2, r3
 8005508:	4b1b      	ldr	r3, [pc, #108]	; (8005578 <_ZN14DisplayRoutine3runEv+0x1a4>)
 800550a:	705a      	strb	r2, [r3, #1]
	GLCDNumericArray[2] =(unsigned char)(((sec_t%100)/10)+0x30);
 800550c:	4b1d      	ldr	r3, [pc, #116]	; (8005584 <_ZN14DisplayRoutine3runEv+0x1b0>)
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	4a1a      	ldr	r2, [pc, #104]	; (800557c <_ZN14DisplayRoutine3runEv+0x1a8>)
 8005512:	fba2 1203 	umull	r1, r2, r2, r3
 8005516:	0952      	lsrs	r2, r2, #5
 8005518:	2164      	movs	r1, #100	; 0x64
 800551a:	fb01 f202 	mul.w	r2, r1, r2
 800551e:	1a9b      	subs	r3, r3, r2
 8005520:	b2db      	uxtb	r3, r3
 8005522:	4a17      	ldr	r2, [pc, #92]	; (8005580 <_ZN14DisplayRoutine3runEv+0x1ac>)
 8005524:	fba2 2303 	umull	r2, r3, r2, r3
 8005528:	08db      	lsrs	r3, r3, #3
 800552a:	b2db      	uxtb	r3, r3
 800552c:	3330      	adds	r3, #48	; 0x30
 800552e:	b2da      	uxtb	r2, r3
 8005530:	4b11      	ldr	r3, [pc, #68]	; (8005578 <_ZN14DisplayRoutine3runEv+0x1a4>)
 8005532:	709a      	strb	r2, [r3, #2]
	GLCDNumericArray[3] =(unsigned char)((sec_t%10)+0x30);
 8005534:	4b13      	ldr	r3, [pc, #76]	; (8005584 <_ZN14DisplayRoutine3runEv+0x1b0>)
 8005536:	781a      	ldrb	r2, [r3, #0]
 8005538:	4b11      	ldr	r3, [pc, #68]	; (8005580 <_ZN14DisplayRoutine3runEv+0x1ac>)
 800553a:	fba3 1302 	umull	r1, r3, r3, r2
 800553e:	08d9      	lsrs	r1, r3, #3
 8005540:	460b      	mov	r3, r1
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	440b      	add	r3, r1
 8005546:	005b      	lsls	r3, r3, #1
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	b2db      	uxtb	r3, r3
 800554c:	3330      	adds	r3, #48	; 0x30
 800554e:	b2da      	uxtb	r2, r3
 8005550:	4b09      	ldr	r3, [pc, #36]	; (8005578 <_ZN14DisplayRoutine3runEv+0x1a4>)
 8005552:	70da      	strb	r2, [r3, #3]
	m_gLCDDrive.m_lcdputs1(60,3,GLCDNumericArray);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	1d18      	adds	r0, r3, #4
 8005558:	4b07      	ldr	r3, [pc, #28]	; (8005578 <_ZN14DisplayRoutine3runEv+0x1a4>)
 800555a:	2203      	movs	r2, #3
 800555c:	213c      	movs	r1, #60	; 0x3c
 800555e:	f004 fa87 	bl	8009a70 <_ZN4GLCD10m_lcdputs1EhhPh>
}
 8005562:	bf00      	nop
 8005564:	3708      	adds	r7, #8
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	2000008d 	.word	0x2000008d
 8005570:	68db8bad 	.word	0x68db8bad
 8005574:	10624dd3 	.word	0x10624dd3
 8005578:	20000740 	.word	0x20000740
 800557c:	51eb851f 	.word	0x51eb851f
 8005580:	cccccccd 	.word	0xcccccccd
 8005584:	2000084a 	.word	0x2000084a

08005588 <_ZN14DisplayRoutine4InitEv>:

void DisplayRoutine::Init()
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
	m_gLCDDrive.m_displayon();
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	3304      	adds	r3, #4
 8005594:	4618      	mov	r0, r3
 8005596:	f004 f88d 	bl	80096b4 <_ZN4GLCD11m_displayonEv>
	m_gLCDDrive.m_setstartline(0);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	3304      	adds	r3, #4
 800559e:	2100      	movs	r1, #0
 80055a0:	4618      	mov	r0, r3
 80055a2:	f004 f989 	bl	80098b8 <_ZN4GLCD14m_setstartlineEh>
	m_gLCDDrive.m_clrlcd();
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	3304      	adds	r3, #4
 80055aa:	4618      	mov	r0, r3
 80055ac:	f004 fa95 	bl	8009ada <_ZN4GLCD8m_clrlcdEv>


}
 80055b0:	bf00      	nop
 80055b2:	3708      	adds	r7, #8
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <_ZN6common26ReadtheValueAssignPinstateEhh>:

class common {
public:
	common();
	virtual ~common();
	GPIO_PinState ReadtheValueAssignPinstate(uint8_t position, uint8_t value)
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	460b      	mov	r3, r1
 80055c2:	70fb      	strb	r3, [r7, #3]
 80055c4:	4613      	mov	r3, r2
 80055c6:	70bb      	strb	r3, [r7, #2]
	{
		GPIO_PinState pinstate;
		position = 1 << position;
 80055c8:	78fb      	ldrb	r3, [r7, #3]
 80055ca:	2201      	movs	r2, #1
 80055cc:	fa02 f303 	lsl.w	r3, r2, r3
 80055d0:	70fb      	strb	r3, [r7, #3]
		if(position & value){
 80055d2:	78fa      	ldrb	r2, [r7, #3]
 80055d4:	78bb      	ldrb	r3, [r7, #2]
 80055d6:	4013      	ands	r3, r2
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d002      	beq.n	80055e4 <_ZN6common26ReadtheValueAssignPinstateEhh+0x2c>
			pinstate = GPIO_PIN_SET;
 80055de:	2301      	movs	r3, #1
 80055e0:	73fb      	strb	r3, [r7, #15]
 80055e2:	e001      	b.n	80055e8 <_ZN6common26ReadtheValueAssignPinstateEhh+0x30>
		}
		else
		{
			pinstate = GPIO_PIN_RESET;
 80055e4:	2300      	movs	r3, #0
 80055e6:	73fb      	strb	r3, [r7, #15]
		}
		return(pinstate);
 80055e8:	7bfb      	ldrb	r3, [r7, #15]
	}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
	...

080055f8 <_ZN4GLCDC1Ev>:

#include "GLCD.h"
#include "main.h"
#define GLCDDELAY 10
extern TIM_HandleTypeDef htim1;
GLCD::GLCD() {
 80055f8:	b5b0      	push	{r4, r5, r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4618      	mov	r0, r3
 8005604:	f7ff fe70 	bl	80052e8 <_ZN6commonC1Ev>
 8005608:	4ac8      	ldr	r2, [pc, #800]	; (800592c <_ZN4GLCDC1Ev+0x334>)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	601a      	str	r2, [r3, #0]
 800560e:	687d      	ldr	r5, [r7, #4]
 8005610:	4bc7      	ldr	r3, [pc, #796]	; (8005930 <_ZN4GLCDC1Ev+0x338>)
 8005612:	1d2c      	adds	r4, r5, #4
 8005614:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005616:	c407      	stmia	r4!, {r0, r1, r2}
 8005618:	8023      	strh	r3, [r4, #0]
 800561a:	2300      	movs	r3, #0
 800561c:	74ab      	strb	r3, [r5, #18]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	615a      	str	r2, [r3, #20]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	619a      	str	r2, [r3, #24]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	775a      	strb	r2, [r3, #29]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	331e      	adds	r3, #30
 8005634:	f640 0208 	movw	r2, #2056	; 0x808
 8005638:	2100      	movs	r1, #0
 800563a:	4618      	mov	r0, r3
 800563c:	f009 fbac 	bl	800ed98 <memset>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	227e      	movs	r2, #126	; 0x7e
 8005644:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2281      	movs	r2, #129	; 0x81
 800564c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2295      	movs	r2, #149	; 0x95
 8005654:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	22b1      	movs	r2, #177	; 0xb1
 800565c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	22b1      	movs	r2, #177	; 0xb1
 8005664:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2295      	movs	r2, #149	; 0x95
 800566c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2281      	movs	r2, #129	; 0x81
 8005674:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	227e      	movs	r2, #126	; 0x7e
 800567c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	227e      	movs	r2, #126	; 0x7e
 8005684:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	22ff      	movs	r2, #255	; 0xff
 800568c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	22eb      	movs	r2, #235	; 0xeb
 8005694:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	22cf      	movs	r2, #207	; 0xcf
 800569c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	22cf      	movs	r2, #207	; 0xcf
 80056a4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	22eb      	movs	r2, #235	; 0xeb
 80056ac:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	22ff      	movs	r2, #255	; 0xff
 80056b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	227e      	movs	r2, #126	; 0x7e
 80056bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	220e      	movs	r2, #14
 80056c4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	221f      	movs	r2, #31
 80056cc:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	223f      	movs	r2, #63	; 0x3f
 80056d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	227e      	movs	r2, #126	; 0x7e
 80056dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	223f      	movs	r2, #63	; 0x3f
 80056e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	221f      	movs	r2, #31
 80056ec:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	220e      	movs	r2, #14
 80056f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2208      	movs	r2, #8
 80056fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	221c      	movs	r2, #28
 8005704:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	223e      	movs	r2, #62	; 0x3e
 800570c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	227f      	movs	r2, #127	; 0x7f
 8005714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	223e      	movs	r2, #62	; 0x3e
 800571c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	221c      	movs	r2, #28
 8005724:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2208      	movs	r2, #8
 800572c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2218      	movs	r2, #24
 8005734:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	22ba      	movs	r2, #186	; 0xba
 800573c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	22ff      	movs	r2, #255	; 0xff
 8005744:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	22ff      	movs	r2, #255	; 0xff
 800574c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	22ff      	movs	r2, #255	; 0xff
 8005754:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	22ba      	movs	r2, #186	; 0xba
 800575c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2218      	movs	r2, #24
 8005764:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2210      	movs	r2, #16
 800576c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	22b8      	movs	r2, #184	; 0xb8
 8005774:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	22fc      	movs	r2, #252	; 0xfc
 800577c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	22ff      	movs	r2, #255	; 0xff
 8005784:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	22fc      	movs	r2, #252	; 0xfc
 800578c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	22b8      	movs	r2, #184	; 0xb8
 8005794:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2210      	movs	r2, #16
 800579c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2218      	movs	r2, #24
 80057a4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	223c      	movs	r2, #60	; 0x3c
 80057ac:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	223c      	movs	r2, #60	; 0x3c
 80057b4:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2218      	movs	r2, #24
 80057bc:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	22ff      	movs	r2, #255	; 0xff
 80057c4:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	22ff      	movs	r2, #255	; 0xff
 80057cc:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	22e7      	movs	r2, #231	; 0xe7
 80057d4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	22c3      	movs	r2, #195	; 0xc3
 80057dc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	22c3      	movs	r2, #195	; 0xc3
 80057e4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	22e7      	movs	r2, #231	; 0xe7
 80057ec:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	22ff      	movs	r2, #255	; 0xff
 80057f4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	22ff      	movs	r2, #255	; 0xff
 80057fc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	223c      	movs	r2, #60	; 0x3c
 8005804:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2266      	movs	r2, #102	; 0x66
 800580c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2242      	movs	r2, #66	; 0x42
 8005814:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2242      	movs	r2, #66	; 0x42
 800581c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2266      	movs	r2, #102	; 0x66
 8005824:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	223c      	movs	r2, #60	; 0x3c
 800582c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	22ff      	movs	r2, #255	; 0xff
 8005834:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	22c3      	movs	r2, #195	; 0xc3
 800583c:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2299      	movs	r2, #153	; 0x99
 8005844:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	22bd      	movs	r2, #189	; 0xbd
 800584c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	22bd      	movs	r2, #189	; 0xbd
 8005854:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2299      	movs	r2, #153	; 0x99
 800585c:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	22c3      	movs	r2, #195	; 0xc3
 8005864:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	22ff      	movs	r2, #255	; 0xff
 800586c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2270      	movs	r2, #112	; 0x70
 8005874:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	22f8      	movs	r2, #248	; 0xf8
 800587c:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2288      	movs	r2, #136	; 0x88
 8005884:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2288      	movs	r2, #136	; 0x88
 800588c:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	22fd      	movs	r2, #253	; 0xfd
 8005894:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	227f      	movs	r2, #127	; 0x7f
 800589c:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2207      	movs	r2, #7
 80058a4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	220f      	movs	r2, #15
 80058ac:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	224e      	movs	r2, #78	; 0x4e
 80058b4:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	225f      	movs	r2, #95	; 0x5f
 80058bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	22f1      	movs	r2, #241	; 0xf1
 80058c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	22f1      	movs	r2, #241	; 0xf1
 80058cc:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	225f      	movs	r2, #95	; 0x5f
 80058d4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	224e      	movs	r2, #78	; 0x4e
 80058dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	22c0      	movs	r2, #192	; 0xc0
 80058e4:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	22e0      	movs	r2, #224	; 0xe0
 80058ec:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	22ff      	movs	r2, #255	; 0xff
 80058f4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	227f      	movs	r2, #127	; 0x7f
 80058fc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2205      	movs	r2, #5
 8005904:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2205      	movs	r2, #5
 800590c:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2207      	movs	r2, #7
 8005914:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2207      	movs	r2, #7
 800591c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	22c0      	movs	r2, #192	; 0xc0
 8005924:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
 8005928:	e004      	b.n	8005934 <_ZN4GLCDC1Ev+0x33c>
 800592a:	bf00      	nop
 800592c:	0800f104 	.word	0x0800f104
 8005930:	0800ee84 	.word	0x0800ee84
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	22ff      	movs	r2, #255	; 0xff
 8005938:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	227f      	movs	r2, #127	; 0x7f
 8005940:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2205      	movs	r2, #5
 8005948:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2205      	movs	r2, #5
 8005950:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2265      	movs	r2, #101	; 0x65
 8005958:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	227f      	movs	r2, #127	; 0x7f
 8005960:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	223f      	movs	r2, #63	; 0x3f
 8005968:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2299      	movs	r2, #153	; 0x99
 8005970:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	225a      	movs	r2, #90	; 0x5a
 8005978:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	223c      	movs	r2, #60	; 0x3c
 8005980:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	22e7      	movs	r2, #231	; 0xe7
 8005988:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	22e7      	movs	r2, #231	; 0xe7
 8005990:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	223c      	movs	r2, #60	; 0x3c
 8005998:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	225a      	movs	r2, #90	; 0x5a
 80059a0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2299      	movs	r2, #153	; 0x99
 80059a8:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	227f      	movs	r2, #127	; 0x7f
 80059b0:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	223e      	movs	r2, #62	; 0x3e
 80059b8:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	223e      	movs	r2, #62	; 0x3e
 80059c0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	221c      	movs	r2, #28
 80059c8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	221c      	movs	r2, #28
 80059d0:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2208      	movs	r2, #8
 80059d8:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2208      	movs	r2, #8
 80059e0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2208      	movs	r2, #8
 80059e8:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2208      	movs	r2, #8
 80059f0:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	221c      	movs	r2, #28
 80059f8:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	221c      	movs	r2, #28
 8005a00:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	223e      	movs	r2, #62	; 0x3e
 8005a08:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	223e      	movs	r2, #62	; 0x3e
 8005a10:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	227f      	movs	r2, #127	; 0x7f
 8005a18:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2224      	movs	r2, #36	; 0x24
 8005a20:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2266      	movs	r2, #102	; 0x66
 8005a28:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	22ff      	movs	r2, #255	; 0xff
 8005a30:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	22ff      	movs	r2, #255	; 0xff
 8005a38:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2266      	movs	r2, #102	; 0x66
 8005a40:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2224      	movs	r2, #36	; 0x24
 8005a48:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	225f      	movs	r2, #95	; 0x5f
 8005a50:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	225f      	movs	r2, #95	; 0x5f
 8005a58:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	225f      	movs	r2, #95	; 0x5f
 8005a60:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	225f      	movs	r2, #95	; 0x5f
 8005a68:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2206      	movs	r2, #6
 8005a70:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	220f      	movs	r2, #15
 8005a78:	f883 20bf 	strb.w	r2, [r3, #191]	; 0xbf
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2209      	movs	r2, #9
 8005a80:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	227f      	movs	r2, #127	; 0x7f
 8005a88:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	227f      	movs	r2, #127	; 0x7f
 8005a90:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	227f      	movs	r2, #127	; 0x7f
 8005aa0:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	227f      	movs	r2, #127	; 0x7f
 8005aa8:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2240      	movs	r2, #64	; 0x40
 8005ab0:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	22da      	movs	r2, #218	; 0xda
 8005ab8:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	22bf      	movs	r2, #191	; 0xbf
 8005ac0:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	22a5      	movs	r2, #165	; 0xa5
 8005ac8:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	22fd      	movs	r2, #253	; 0xfd
 8005ad0:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2259      	movs	r2, #89	; 0x59
 8005ad8:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2203      	movs	r2, #3
 8005ae0:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2202      	movs	r2, #2
 8005ae8:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2270      	movs	r2, #112	; 0x70
 8005af0:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2270      	movs	r2, #112	; 0x70
 8005af8:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2270      	movs	r2, #112	; 0x70
 8005b00:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2270      	movs	r2, #112	; 0x70
 8005b08:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2270      	movs	r2, #112	; 0x70
 8005b10:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2270      	movs	r2, #112	; 0x70
 8005b18:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2280      	movs	r2, #128	; 0x80
 8005b20:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2294      	movs	r2, #148	; 0x94
 8005b28:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	22b6      	movs	r2, #182	; 0xb6
 8005b30:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	22ff      	movs	r2, #255	; 0xff
 8005b38:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	22ff      	movs	r2, #255	; 0xff
 8005b40:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	22b6      	movs	r2, #182	; 0xb6
 8005b48:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2294      	movs	r2, #148	; 0x94
 8005b50:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2280      	movs	r2, #128	; 0x80
 8005b58:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2204      	movs	r2, #4
 8005b60:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2206      	movs	r2, #6
 8005b68:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	227f      	movs	r2, #127	; 0x7f
 8005b70:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	227f      	movs	r2, #127	; 0x7f
 8005b78:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2206      	movs	r2, #6
 8005b80:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2204      	movs	r2, #4
 8005b88:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2210      	movs	r2, #16
 8005b90:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2230      	movs	r2, #48	; 0x30
 8005b98:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	227f      	movs	r2, #127	; 0x7f
 8005ba0:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	227f      	movs	r2, #127	; 0x7f
 8005ba8:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2230      	movs	r2, #48	; 0x30
 8005bb0:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2210      	movs	r2, #16
 8005bb8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2208      	movs	r2, #8
 8005bc0:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2208      	movs	r2, #8
 8005bc8:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2208      	movs	r2, #8
 8005bd0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	222a      	movs	r2, #42	; 0x2a
 8005bd8:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	223e      	movs	r2, #62	; 0x3e
 8005be0:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	221c      	movs	r2, #28
 8005be8:	f883 20f3 	strb.w	r2, [r3, #243]	; 0xf3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2208      	movs	r2, #8
 8005bf0:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2208      	movs	r2, #8
 8005bf8:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	221c      	movs	r2, #28
 8005c00:	f883 20f7 	strb.w	r2, [r3, #247]	; 0xf7
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	223e      	movs	r2, #62	; 0x3e
 8005c08:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	222a      	movs	r2, #42	; 0x2a
 8005c10:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2208      	movs	r2, #8
 8005c18:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2208      	movs	r2, #8
 8005c20:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2208      	movs	r2, #8
 8005c28:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	223c      	movs	r2, #60	; 0x3c
 8005c30:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	223c      	movs	r2, #60	; 0x3c
 8005c38:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2220      	movs	r2, #32
 8005c40:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2220      	movs	r2, #32
 8005c48:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2220      	movs	r2, #32
 8005c50:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2220      	movs	r2, #32
 8005c58:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2220      	movs	r2, #32
 8005c60:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2208      	movs	r2, #8
 8005c68:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	221c      	movs	r2, #28
 8005c70:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	223e      	movs	r2, #62	; 0x3e
 8005c78:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2208      	movs	r2, #8
 8005c80:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2208      	movs	r2, #8
 8005c88:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	223e      	movs	r2, #62	; 0x3e
 8005c90:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	221c      	movs	r2, #28
 8005c98:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2208      	movs	r2, #8
 8005ca0:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2230      	movs	r2, #48	; 0x30
 8005ca8:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2238      	movs	r2, #56	; 0x38
 8005cb0:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	223c      	movs	r2, #60	; 0x3c
 8005cb8:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	223e      	movs	r2, #62	; 0x3e
 8005cc0:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	223e      	movs	r2, #62	; 0x3e
 8005cc8:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	223c      	movs	r2, #60	; 0x3c
 8005cd0:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2238      	movs	r2, #56	; 0x38
 8005cd8:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2230      	movs	r2, #48	; 0x30
 8005ce0:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2206      	movs	r2, #6
 8005ce8:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	220e      	movs	r2, #14
 8005cf0:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	221e      	movs	r2, #30
 8005cf8:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	223e      	movs	r2, #62	; 0x3e
 8005d00:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	223e      	movs	r2, #62	; 0x3e
 8005d08:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	221e      	movs	r2, #30
 8005d10:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	220e      	movs	r2, #14
 8005d18:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2206      	movs	r2, #6
 8005d20:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2206      	movs	r2, #6
 8005d28:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	225f      	movs	r2, #95	; 0x5f
 8005d30:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	225f      	movs	r2, #95	; 0x5f
 8005d38:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2206      	movs	r2, #6
 8005d40:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2207      	movs	r2, #7
 8005d48:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2207      	movs	r2, #7
 8005d50:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2207      	movs	r2, #7
 8005d58:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2207      	movs	r2, #7
 8005d60:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2214      	movs	r2, #20
 8005d68:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	227f      	movs	r2, #127	; 0x7f
 8005d70:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	227f      	movs	r2, #127	; 0x7f
 8005d78:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2214      	movs	r2, #20
 8005d80:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	227f      	movs	r2, #127	; 0x7f
 8005d88:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	227f      	movs	r2, #127	; 0x7f
 8005d90:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2214      	movs	r2, #20
 8005d98:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2224      	movs	r2, #36	; 0x24
 8005da0:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	222e      	movs	r2, #46	; 0x2e
 8005da8:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	226b      	movs	r2, #107	; 0x6b
 8005db0:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	226b      	movs	r2, #107	; 0x6b
 8005db8:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	223a      	movs	r2, #58	; 0x3a
 8005dc0:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2212      	movs	r2, #18
 8005dc8:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2246      	movs	r2, #70	; 0x46
 8005dd0:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2266      	movs	r2, #102	; 0x66
 8005dd8:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2230      	movs	r2, #48	; 0x30
 8005de0:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2218      	movs	r2, #24
 8005de8:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	220c      	movs	r2, #12
 8005df0:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2266      	movs	r2, #102	; 0x66
 8005df8:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2262      	movs	r2, #98	; 0x62
 8005e00:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2230      	movs	r2, #48	; 0x30
 8005e08:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	227a      	movs	r2, #122	; 0x7a
 8005e10:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	224f      	movs	r2, #79	; 0x4f
 8005e18:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	225d      	movs	r2, #93	; 0x5d
 8005e20:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2237      	movs	r2, #55	; 0x37
 8005e28:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	227a      	movs	r2, #122	; 0x7a
 8005e30:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2248      	movs	r2, #72	; 0x48
 8005e38:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2204      	movs	r2, #4
 8005e40:	f883 2156 	strb.w	r2, [r3, #342]	; 0x156
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2207      	movs	r2, #7
 8005e48:	f883 2157 	strb.w	r2, [r3, #343]	; 0x157
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2203      	movs	r2, #3
 8005e50:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	221c      	movs	r2, #28
 8005e58:	f883 215f 	strb.w	r2, [r3, #351]	; 0x15f
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	223e      	movs	r2, #62	; 0x3e
 8005e60:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2263      	movs	r2, #99	; 0x63
 8005e68:	f883 2161 	strb.w	r2, [r3, #353]	; 0x161
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2241      	movs	r2, #65	; 0x41
 8005e70:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2241      	movs	r2, #65	; 0x41
 8005e78:	f883 2167 	strb.w	r2, [r3, #359]	; 0x167
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2263      	movs	r2, #99	; 0x63
 8005e80:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	223e      	movs	r2, #62	; 0x3e
 8005e88:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	221c      	movs	r2, #28
 8005e90:	f883 216a 	strb.w	r2, [r3, #362]	; 0x16a
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2208      	movs	r2, #8
 8005e98:	f883 216e 	strb.w	r2, [r3, #366]	; 0x16e
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	222a      	movs	r2, #42	; 0x2a
 8005ea0:	f883 216f 	strb.w	r2, [r3, #367]	; 0x16f
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	223e      	movs	r2, #62	; 0x3e
 8005ea8:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	221c      	movs	r2, #28
 8005eb0:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	221c      	movs	r2, #28
 8005eb8:	f883 2172 	strb.w	r2, [r3, #370]	; 0x172
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	223e      	movs	r2, #62	; 0x3e
 8005ec0:	f883 2173 	strb.w	r2, [r3, #371]	; 0x173
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	222a      	movs	r2, #42	; 0x2a
 8005ec8:	f883 2174 	strb.w	r2, [r3, #372]	; 0x174
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2208      	movs	r2, #8
 8005ed0:	f883 2175 	strb.w	r2, [r3, #373]	; 0x175
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2208      	movs	r2, #8
 8005ed8:	f883 2176 	strb.w	r2, [r3, #374]	; 0x176
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2208      	movs	r2, #8
 8005ee0:	f883 2177 	strb.w	r2, [r3, #375]	; 0x177
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	223e      	movs	r2, #62	; 0x3e
 8005ee8:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	223e      	movs	r2, #62	; 0x3e
 8005ef0:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2208      	movs	r2, #8
 8005ef8:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2208      	movs	r2, #8
 8005f00:	f883 217b 	strb.w	r2, [r3, #379]	; 0x17b
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2280      	movs	r2, #128	; 0x80
 8005f08:	f883 217f 	strb.w	r2, [r3, #383]	; 0x17f
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	22e0      	movs	r2, #224	; 0xe0
 8005f10:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2260      	movs	r2, #96	; 0x60
 8005f18:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2208      	movs	r2, #8
 8005f20:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2208      	movs	r2, #8
 8005f28:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2208      	movs	r2, #8
 8005f30:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2208      	movs	r2, #8
 8005f38:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2208      	movs	r2, #8
 8005f40:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2208      	movs	r2, #8
 8005f48:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2260      	movs	r2, #96	; 0x60
 8005f50:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2260      	movs	r2, #96	; 0x60
 8005f58:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2260      	movs	r2, #96	; 0x60
 8005f60:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2230      	movs	r2, #48	; 0x30
 8005f68:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2218      	movs	r2, #24
 8005f70:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	220c      	movs	r2, #12
 8005f78:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2206      	movs	r2, #6
 8005f80:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2203      	movs	r2, #3
 8005f88:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	223e      	movs	r2, #62	; 0x3e
 8005f98:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	227f      	movs	r2, #127	; 0x7f
 8005fa0:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2271      	movs	r2, #113	; 0x71
 8005fa8:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2259      	movs	r2, #89	; 0x59
 8005fb0:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	224d      	movs	r2, #77	; 0x4d
 8005fb8:	f883 21a2 	strb.w	r2, [r3, #418]	; 0x1a2
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	227f      	movs	r2, #127	; 0x7f
 8005fc0:	f883 21a3 	strb.w	r2, [r3, #419]	; 0x1a3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	223e      	movs	r2, #62	; 0x3e
 8005fc8:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2240      	movs	r2, #64	; 0x40
 8005fd0:	f883 21a6 	strb.w	r2, [r3, #422]	; 0x1a6
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2242      	movs	r2, #66	; 0x42
 8005fd8:	f883 21a7 	strb.w	r2, [r3, #423]	; 0x1a7
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	227f      	movs	r2, #127	; 0x7f
 8005fe0:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	227f      	movs	r2, #127	; 0x7f
 8005fe8:	f883 21a9 	strb.w	r2, [r3, #425]	; 0x1a9
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2240      	movs	r2, #64	; 0x40
 8005ff0:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2240      	movs	r2, #64	; 0x40
 8005ff8:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2262      	movs	r2, #98	; 0x62
 8006000:	f883 21ae 	strb.w	r2, [r3, #430]	; 0x1ae
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2273      	movs	r2, #115	; 0x73
 8006008:	f883 21af 	strb.w	r2, [r3, #431]	; 0x1af
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2259      	movs	r2, #89	; 0x59
 8006010:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2249      	movs	r2, #73	; 0x49
 8006018:	f883 21b1 	strb.w	r2, [r3, #433]	; 0x1b1
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	226f      	movs	r2, #111	; 0x6f
 8006020:	f883 21b2 	strb.w	r2, [r3, #434]	; 0x1b2
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2266      	movs	r2, #102	; 0x66
 8006028:	f883 21b3 	strb.w	r2, [r3, #435]	; 0x1b3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2222      	movs	r2, #34	; 0x22
 8006030:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2263      	movs	r2, #99	; 0x63
 8006038:	f883 21b7 	strb.w	r2, [r3, #439]	; 0x1b7
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2249      	movs	r2, #73	; 0x49
 8006040:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2249      	movs	r2, #73	; 0x49
 8006048:	f883 21b9 	strb.w	r2, [r3, #441]	; 0x1b9
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	227f      	movs	r2, #127	; 0x7f
 8006050:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2236      	movs	r2, #54	; 0x36
 8006058:	f883 21bb 	strb.w	r2, [r3, #443]	; 0x1bb
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2218      	movs	r2, #24
 8006060:	f883 21be 	strb.w	r2, [r3, #446]	; 0x1be
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	221c      	movs	r2, #28
 8006068:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2216      	movs	r2, #22
 8006070:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2253      	movs	r2, #83	; 0x53
 8006078:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	227f      	movs	r2, #127	; 0x7f
 8006080:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	227f      	movs	r2, #127	; 0x7f
 8006088:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2250      	movs	r2, #80	; 0x50
 8006090:	f883 21c4 	strb.w	r2, [r3, #452]	; 0x1c4
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2227      	movs	r2, #39	; 0x27
 8006098:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2267      	movs	r2, #103	; 0x67
 80060a0:	f883 21c7 	strb.w	r2, [r3, #455]	; 0x1c7
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2245      	movs	r2, #69	; 0x45
 80060a8:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2245      	movs	r2, #69	; 0x45
 80060b0:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	227d      	movs	r2, #125	; 0x7d
 80060b8:	f883 21ca 	strb.w	r2, [r3, #458]	; 0x1ca
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2239      	movs	r2, #57	; 0x39
 80060c0:	f883 21cb 	strb.w	r2, [r3, #459]	; 0x1cb
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	223c      	movs	r2, #60	; 0x3c
 80060c8:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	227e      	movs	r2, #126	; 0x7e
 80060d0:	f883 21cf 	strb.w	r2, [r3, #463]	; 0x1cf
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	224b      	movs	r2, #75	; 0x4b
 80060d8:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2249      	movs	r2, #73	; 0x49
 80060e0:	f883 21d1 	strb.w	r2, [r3, #465]	; 0x1d1
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2279      	movs	r2, #121	; 0x79
 80060e8:	f883 21d2 	strb.w	r2, [r3, #466]	; 0x1d2
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2230      	movs	r2, #48	; 0x30
 80060f0:	f883 21d3 	strb.w	r2, [r3, #467]	; 0x1d3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2203      	movs	r2, #3
 80060f8:	f883 21d6 	strb.w	r2, [r3, #470]	; 0x1d6
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2203      	movs	r2, #3
 8006100:	f883 21d7 	strb.w	r2, [r3, #471]	; 0x1d7
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2271      	movs	r2, #113	; 0x71
 8006108:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2279      	movs	r2, #121	; 0x79
 8006110:	f883 21d9 	strb.w	r2, [r3, #473]	; 0x1d9
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	220f      	movs	r2, #15
 8006118:	f883 21da 	strb.w	r2, [r3, #474]	; 0x1da
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2207      	movs	r2, #7
 8006120:	f883 21db 	strb.w	r2, [r3, #475]	; 0x1db
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2236      	movs	r2, #54	; 0x36
 8006128:	f883 21de 	strb.w	r2, [r3, #478]	; 0x1de
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	227f      	movs	r2, #127	; 0x7f
 8006130:	f883 21df 	strb.w	r2, [r3, #479]	; 0x1df
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2249      	movs	r2, #73	; 0x49
 8006138:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2249      	movs	r2, #73	; 0x49
 8006140:	f883 21e1 	strb.w	r2, [r3, #481]	; 0x1e1
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	227f      	movs	r2, #127	; 0x7f
 8006148:	f883 21e2 	strb.w	r2, [r3, #482]	; 0x1e2
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2236      	movs	r2, #54	; 0x36
 8006150:	f883 21e3 	strb.w	r2, [r3, #483]	; 0x1e3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2206      	movs	r2, #6
 8006158:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	224f      	movs	r2, #79	; 0x4f
 8006160:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2249      	movs	r2, #73	; 0x49
 8006168:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2269      	movs	r2, #105	; 0x69
 8006170:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	223f      	movs	r2, #63	; 0x3f
 8006178:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	221e      	movs	r2, #30
 8006180:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2266      	movs	r2, #102	; 0x66
 8006188:	f883 21f0 	strb.w	r2, [r3, #496]	; 0x1f0
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2266      	movs	r2, #102	; 0x66
 8006190:	f883 21f1 	strb.w	r2, [r3, #497]	; 0x1f1
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2280      	movs	r2, #128	; 0x80
 8006198:	f883 21f7 	strb.w	r2, [r3, #503]	; 0x1f7
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	22e6      	movs	r2, #230	; 0xe6
 80061a0:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2266      	movs	r2, #102	; 0x66
 80061a8:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2208      	movs	r2, #8
 80061b0:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	221c      	movs	r2, #28
 80061b8:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2236      	movs	r2, #54	; 0x36
 80061c0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2263      	movs	r2, #99	; 0x63
 80061c8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2241      	movs	r2, #65	; 0x41
 80061d0:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2224      	movs	r2, #36	; 0x24
 80061d8:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2224      	movs	r2, #36	; 0x24
 80061e0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2224      	movs	r2, #36	; 0x24
 80061e8:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2224      	movs	r2, #36	; 0x24
 80061f0:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2224      	movs	r2, #36	; 0x24
 80061f8:	f883 220a 	strb.w	r2, [r3, #522]	; 0x20a
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2224      	movs	r2, #36	; 0x24
 8006200:	f883 220b 	strb.w	r2, [r3, #523]	; 0x20b
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2241      	movs	r2, #65	; 0x41
 8006208:	f883 220f 	strb.w	r2, [r3, #527]	; 0x20f
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2263      	movs	r2, #99	; 0x63
 8006210:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2236      	movs	r2, #54	; 0x36
 8006218:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	221c      	movs	r2, #28
 8006220:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2208      	movs	r2, #8
 8006228:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2202      	movs	r2, #2
 8006230:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2203      	movs	r2, #3
 8006238:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2251      	movs	r2, #81	; 0x51
 8006240:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2259      	movs	r2, #89	; 0x59
 8006248:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	220f      	movs	r2, #15
 8006250:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2206      	movs	r2, #6
 8006258:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	223e      	movs	r2, #62	; 0x3e
 8006260:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	227f      	movs	r2, #127	; 0x7f
 8006268:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2241      	movs	r2, #65	; 0x41
 8006270:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	225d      	movs	r2, #93	; 0x5d
 8006278:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	225d      	movs	r2, #93	; 0x5d
 8006280:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	221f      	movs	r2, #31
 8006288:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	221e      	movs	r2, #30
 8006290:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	227c      	movs	r2, #124	; 0x7c
 8006298:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	227e      	movs	r2, #126	; 0x7e
 80062a0:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2213      	movs	r2, #19
 80062a8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2213      	movs	r2, #19
 80062b0:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	227e      	movs	r2, #126	; 0x7e
 80062b8:	f883 222a 	strb.w	r2, [r3, #554]	; 0x22a
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	227c      	movs	r2, #124	; 0x7c
 80062c0:	f883 222b 	strb.w	r2, [r3, #555]	; 0x22b
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2241      	movs	r2, #65	; 0x41
 80062c8:	f883 222e 	strb.w	r2, [r3, #558]	; 0x22e
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	227f      	movs	r2, #127	; 0x7f
 80062d0:	f883 222f 	strb.w	r2, [r3, #559]	; 0x22f
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	227f      	movs	r2, #127	; 0x7f
 80062d8:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2249      	movs	r2, #73	; 0x49
 80062e0:	f883 2231 	strb.w	r2, [r3, #561]	; 0x231
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2249      	movs	r2, #73	; 0x49
 80062e8:	f883 2232 	strb.w	r2, [r3, #562]	; 0x232
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	227f      	movs	r2, #127	; 0x7f
 80062f0:	f883 2233 	strb.w	r2, [r3, #563]	; 0x233
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2236      	movs	r2, #54	; 0x36
 80062f8:	f883 2234 	strb.w	r2, [r3, #564]	; 0x234
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	221c      	movs	r2, #28
 8006300:	f883 2236 	strb.w	r2, [r3, #566]	; 0x236
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	223e      	movs	r2, #62	; 0x3e
 8006308:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2263      	movs	r2, #99	; 0x63
 8006310:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2241      	movs	r2, #65	; 0x41
 8006318:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2241      	movs	r2, #65	; 0x41
 8006320:	f883 223a 	strb.w	r2, [r3, #570]	; 0x23a
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2263      	movs	r2, #99	; 0x63
 8006328:	f883 223b 	strb.w	r2, [r3, #571]	; 0x23b
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2222      	movs	r2, #34	; 0x22
 8006330:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2241      	movs	r2, #65	; 0x41
 8006338:	f883 223e 	strb.w	r2, [r3, #574]	; 0x23e
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	227f      	movs	r2, #127	; 0x7f
 8006340:	f883 223f 	strb.w	r2, [r3, #575]	; 0x23f
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	227f      	movs	r2, #127	; 0x7f
 8006348:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2241      	movs	r2, #65	; 0x41
 8006350:	f883 2241 	strb.w	r2, [r3, #577]	; 0x241
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2263      	movs	r2, #99	; 0x63
 8006358:	f883 2242 	strb.w	r2, [r3, #578]	; 0x242
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	223e      	movs	r2, #62	; 0x3e
 8006360:	f883 2243 	strb.w	r2, [r3, #579]	; 0x243
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	221c      	movs	r2, #28
 8006368:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2241      	movs	r2, #65	; 0x41
 8006370:	f883 2246 	strb.w	r2, [r3, #582]	; 0x246
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	227f      	movs	r2, #127	; 0x7f
 8006378:	f883 2247 	strb.w	r2, [r3, #583]	; 0x247
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	227f      	movs	r2, #127	; 0x7f
 8006380:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2249      	movs	r2, #73	; 0x49
 8006388:	f883 2249 	strb.w	r2, [r3, #585]	; 0x249
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	225d      	movs	r2, #93	; 0x5d
 8006390:	f883 224a 	strb.w	r2, [r3, #586]	; 0x24a
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2241      	movs	r2, #65	; 0x41
 8006398:	f883 224b 	strb.w	r2, [r3, #587]	; 0x24b
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2263      	movs	r2, #99	; 0x63
 80063a0:	f883 224c 	strb.w	r2, [r3, #588]	; 0x24c
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2241      	movs	r2, #65	; 0x41
 80063a8:	f883 224e 	strb.w	r2, [r3, #590]	; 0x24e
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	227f      	movs	r2, #127	; 0x7f
 80063b0:	f883 224f 	strb.w	r2, [r3, #591]	; 0x24f
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	227f      	movs	r2, #127	; 0x7f
 80063b8:	f883 2250 	strb.w	r2, [r3, #592]	; 0x250
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2249      	movs	r2, #73	; 0x49
 80063c0:	f883 2251 	strb.w	r2, [r3, #593]	; 0x251
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	221d      	movs	r2, #29
 80063c8:	f883 2252 	strb.w	r2, [r3, #594]	; 0x252
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2253 	strb.w	r2, [r3, #595]	; 0x253
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2203      	movs	r2, #3
 80063d8:	f883 2254 	strb.w	r2, [r3, #596]	; 0x254
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	221c      	movs	r2, #28
 80063e0:	f883 2256 	strb.w	r2, [r3, #598]	; 0x256
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	223e      	movs	r2, #62	; 0x3e
 80063e8:	f883 2257 	strb.w	r2, [r3, #599]	; 0x257
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2263      	movs	r2, #99	; 0x63
 80063f0:	f883 2258 	strb.w	r2, [r3, #600]	; 0x258
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2241      	movs	r2, #65	; 0x41
 80063f8:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2251      	movs	r2, #81	; 0x51
 8006400:	f883 225a 	strb.w	r2, [r3, #602]	; 0x25a
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2273      	movs	r2, #115	; 0x73
 8006408:	f883 225b 	strb.w	r2, [r3, #603]	; 0x25b
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2272      	movs	r2, #114	; 0x72
 8006410:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	227f      	movs	r2, #127	; 0x7f
 8006418:	f883 225e 	strb.w	r2, [r3, #606]	; 0x25e
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	227f      	movs	r2, #127	; 0x7f
 8006420:	f883 225f 	strb.w	r2, [r3, #607]	; 0x25f
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2208      	movs	r2, #8
 8006428:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2208      	movs	r2, #8
 8006430:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	227f      	movs	r2, #127	; 0x7f
 8006438:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	227f      	movs	r2, #127	; 0x7f
 8006440:	f883 2263 	strb.w	r2, [r3, #611]	; 0x263
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2241      	movs	r2, #65	; 0x41
 8006448:	f883 2267 	strb.w	r2, [r3, #615]	; 0x267
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	227f      	movs	r2, #127	; 0x7f
 8006450:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	227f      	movs	r2, #127	; 0x7f
 8006458:	f883 2269 	strb.w	r2, [r3, #617]	; 0x269
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2241      	movs	r2, #65	; 0x41
 8006460:	f883 226a 	strb.w	r2, [r3, #618]	; 0x26a
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2230      	movs	r2, #48	; 0x30
 8006468:	f883 226e 	strb.w	r2, [r3, #622]	; 0x26e
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2270      	movs	r2, #112	; 0x70
 8006470:	f883 226f 	strb.w	r2, [r3, #623]	; 0x26f
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2240      	movs	r2, #64	; 0x40
 8006478:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2241      	movs	r2, #65	; 0x41
 8006480:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	227f      	movs	r2, #127	; 0x7f
 8006488:	f883 2272 	strb.w	r2, [r3, #626]	; 0x272
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	223f      	movs	r2, #63	; 0x3f
 8006490:	f883 2273 	strb.w	r2, [r3, #627]	; 0x273
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2241      	movs	r2, #65	; 0x41
 80064a0:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	227f      	movs	r2, #127	; 0x7f
 80064a8:	f883 2277 	strb.w	r2, [r3, #631]	; 0x277
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	227f      	movs	r2, #127	; 0x7f
 80064b0:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2208      	movs	r2, #8
 80064b8:	f883 2279 	strb.w	r2, [r3, #633]	; 0x279
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	221c      	movs	r2, #28
 80064c0:	f883 227a 	strb.w	r2, [r3, #634]	; 0x27a
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2277      	movs	r2, #119	; 0x77
 80064c8:	f883 227b 	strb.w	r2, [r3, #635]	; 0x27b
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2263      	movs	r2, #99	; 0x63
 80064d0:	f883 227c 	strb.w	r2, [r3, #636]	; 0x27c
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2241      	movs	r2, #65	; 0x41
 80064d8:	f883 227e 	strb.w	r2, [r3, #638]	; 0x27e
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	227f      	movs	r2, #127	; 0x7f
 80064e0:	f883 227f 	strb.w	r2, [r3, #639]	; 0x27f
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	227f      	movs	r2, #127	; 0x7f
 80064e8:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2241      	movs	r2, #65	; 0x41
 80064f0:	f883 2281 	strb.w	r2, [r3, #641]	; 0x281
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2240      	movs	r2, #64	; 0x40
 80064f8:	f883 2282 	strb.w	r2, [r3, #642]	; 0x282
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2260      	movs	r2, #96	; 0x60
 8006500:	f883 2283 	strb.w	r2, [r3, #643]	; 0x283
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2270      	movs	r2, #112	; 0x70
 8006508:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	227f      	movs	r2, #127	; 0x7f
 8006510:	f883 2286 	strb.w	r2, [r3, #646]	; 0x286
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	227f      	movs	r2, #127	; 0x7f
 8006518:	f883 2287 	strb.w	r2, [r3, #647]	; 0x287
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	220e      	movs	r2, #14
 8006520:	f883 2288 	strb.w	r2, [r3, #648]	; 0x288
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	221c      	movs	r2, #28
 8006528:	f883 2289 	strb.w	r2, [r3, #649]	; 0x289
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	220e      	movs	r2, #14
 8006530:	f883 228a 	strb.w	r2, [r3, #650]	; 0x28a
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	227f      	movs	r2, #127	; 0x7f
 8006538:	f883 228b 	strb.w	r2, [r3, #651]	; 0x28b
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	227f      	movs	r2, #127	; 0x7f
 8006540:	f883 228c 	strb.w	r2, [r3, #652]	; 0x28c
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	227f      	movs	r2, #127	; 0x7f
 8006548:	f883 228e 	strb.w	r2, [r3, #654]	; 0x28e
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	227f      	movs	r2, #127	; 0x7f
 8006550:	f883 228f 	strb.w	r2, [r3, #655]	; 0x28f
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2206      	movs	r2, #6
 8006558:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	220c      	movs	r2, #12
 8006560:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2218      	movs	r2, #24
 8006568:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	227f      	movs	r2, #127	; 0x7f
 8006570:	f883 2293 	strb.w	r2, [r3, #659]	; 0x293
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	227f      	movs	r2, #127	; 0x7f
 8006578:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	221c      	movs	r2, #28
 8006580:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	223e      	movs	r2, #62	; 0x3e
 8006588:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2263      	movs	r2, #99	; 0x63
 8006590:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2241      	movs	r2, #65	; 0x41
 8006598:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2263      	movs	r2, #99	; 0x63
 80065a0:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	223e      	movs	r2, #62	; 0x3e
 80065a8:	f883 229b 	strb.w	r2, [r3, #667]	; 0x29b
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	221c      	movs	r2, #28
 80065b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2241      	movs	r2, #65	; 0x41
 80065b8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	227f      	movs	r2, #127	; 0x7f
 80065c0:	f883 229f 	strb.w	r2, [r3, #671]	; 0x29f
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	227f      	movs	r2, #127	; 0x7f
 80065c8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2249      	movs	r2, #73	; 0x49
 80065d0:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2209      	movs	r2, #9
 80065d8:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	220f      	movs	r2, #15
 80065e0:	f883 22a3 	strb.w	r2, [r3, #675]	; 0x2a3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2206      	movs	r2, #6
 80065e8:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	221e      	movs	r2, #30
 80065f0:	f883 22a6 	strb.w	r2, [r3, #678]	; 0x2a6
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	223f      	movs	r2, #63	; 0x3f
 80065f8:	f883 22a7 	strb.w	r2, [r3, #679]	; 0x2a7
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2221      	movs	r2, #33	; 0x21
 8006600:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2271      	movs	r2, #113	; 0x71
 8006608:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	227f      	movs	r2, #127	; 0x7f
 8006610:	f883 22aa 	strb.w	r2, [r3, #682]	; 0x2aa
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	225e      	movs	r2, #94	; 0x5e
 8006618:	f883 22ab 	strb.w	r2, [r3, #683]	; 0x2ab
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2241      	movs	r2, #65	; 0x41
 8006620:	f883 22ae 	strb.w	r2, [r3, #686]	; 0x2ae
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	227f      	movs	r2, #127	; 0x7f
 8006628:	f883 22af 	strb.w	r2, [r3, #687]	; 0x2af
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	227f      	movs	r2, #127	; 0x7f
 8006630:	f883 22b0 	strb.w	r2, [r3, #688]	; 0x2b0
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2209      	movs	r2, #9
 8006638:	f883 22b1 	strb.w	r2, [r3, #689]	; 0x2b1
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2219      	movs	r2, #25
 8006640:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	227f      	movs	r2, #127	; 0x7f
 8006648:	f883 22b3 	strb.w	r2, [r3, #691]	; 0x2b3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2266      	movs	r2, #102	; 0x66
 8006650:	f883 22b4 	strb.w	r2, [r3, #692]	; 0x2b4
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2226      	movs	r2, #38	; 0x26
 8006658:	f883 22b6 	strb.w	r2, [r3, #694]	; 0x2b6
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	226f      	movs	r2, #111	; 0x6f
 8006660:	f883 22b7 	strb.w	r2, [r3, #695]	; 0x2b7
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	224d      	movs	r2, #77	; 0x4d
 8006668:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2259      	movs	r2, #89	; 0x59
 8006670:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2273      	movs	r2, #115	; 0x73
 8006678:	f883 22ba 	strb.w	r2, [r3, #698]	; 0x2ba
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2232      	movs	r2, #50	; 0x32
 8006680:	f883 22bb 	strb.w	r2, [r3, #699]	; 0x2bb
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2203      	movs	r2, #3
 8006688:	f883 22be 	strb.w	r2, [r3, #702]	; 0x2be
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2241      	movs	r2, #65	; 0x41
 8006690:	f883 22bf 	strb.w	r2, [r3, #703]	; 0x2bf
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	227f      	movs	r2, #127	; 0x7f
 8006698:	f883 22c0 	strb.w	r2, [r3, #704]	; 0x2c0
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	227f      	movs	r2, #127	; 0x7f
 80066a0:	f883 22c1 	strb.w	r2, [r3, #705]	; 0x2c1
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2241      	movs	r2, #65	; 0x41
 80066a8:	f883 22c2 	strb.w	r2, [r3, #706]	; 0x2c2
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2203      	movs	r2, #3
 80066b0:	f883 22c3 	strb.w	r2, [r3, #707]	; 0x2c3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	227f      	movs	r2, #127	; 0x7f
 80066b8:	f883 22c6 	strb.w	r2, [r3, #710]	; 0x2c6
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	227f      	movs	r2, #127	; 0x7f
 80066c0:	f883 22c7 	strb.w	r2, [r3, #711]	; 0x2c7
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2240      	movs	r2, #64	; 0x40
 80066c8:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2240      	movs	r2, #64	; 0x40
 80066d0:	f883 22c9 	strb.w	r2, [r3, #713]	; 0x2c9
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	227f      	movs	r2, #127	; 0x7f
 80066d8:	f883 22ca 	strb.w	r2, [r3, #714]	; 0x2ca
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	227f      	movs	r2, #127	; 0x7f
 80066e0:	f883 22cb 	strb.w	r2, [r3, #715]	; 0x2cb
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	221f      	movs	r2, #31
 80066e8:	f883 22ce 	strb.w	r2, [r3, #718]	; 0x2ce
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	223f      	movs	r2, #63	; 0x3f
 80066f0:	f883 22cf 	strb.w	r2, [r3, #719]	; 0x2cf
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2260      	movs	r2, #96	; 0x60
 80066f8:	f883 22d0 	strb.w	r2, [r3, #720]	; 0x2d0
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2260      	movs	r2, #96	; 0x60
 8006700:	f883 22d1 	strb.w	r2, [r3, #721]	; 0x2d1
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	223f      	movs	r2, #63	; 0x3f
 8006708:	f883 22d2 	strb.w	r2, [r3, #722]	; 0x2d2
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	221f      	movs	r2, #31
 8006710:	f883 22d3 	strb.w	r2, [r3, #723]	; 0x2d3
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	227f      	movs	r2, #127	; 0x7f
 8006718:	f883 22d6 	strb.w	r2, [r3, #726]	; 0x2d6
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	227f      	movs	r2, #127	; 0x7f
 8006720:	f883 22d7 	strb.w	r2, [r3, #727]	; 0x2d7
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2230      	movs	r2, #48	; 0x30
 8006728:	f883 22d8 	strb.w	r2, [r3, #728]	; 0x2d8
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2218      	movs	r2, #24
 8006730:	f883 22d9 	strb.w	r2, [r3, #729]	; 0x2d9
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2230      	movs	r2, #48	; 0x30
 8006738:	f883 22da 	strb.w	r2, [r3, #730]	; 0x2da
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	227f      	movs	r2, #127	; 0x7f
 8006740:	f883 22db 	strb.w	r2, [r3, #731]	; 0x2db
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	227f      	movs	r2, #127	; 0x7f
 8006748:	f883 22dc 	strb.w	r2, [r3, #732]	; 0x2dc
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2243      	movs	r2, #67	; 0x43
 8006750:	f883 22de 	strb.w	r2, [r3, #734]	; 0x2de
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2267      	movs	r2, #103	; 0x67
 8006758:	f883 22df 	strb.w	r2, [r3, #735]	; 0x2df
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	223c      	movs	r2, #60	; 0x3c
 8006760:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2218      	movs	r2, #24
 8006768:	f883 22e1 	strb.w	r2, [r3, #737]	; 0x2e1
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	223c      	movs	r2, #60	; 0x3c
 8006770:	f883 22e2 	strb.w	r2, [r3, #738]	; 0x2e2
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2267      	movs	r2, #103	; 0x67
 8006778:	f883 22e3 	strb.w	r2, [r3, #739]	; 0x2e3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2243      	movs	r2, #67	; 0x43
 8006780:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2207      	movs	r2, #7
 8006788:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	224f      	movs	r2, #79	; 0x4f
 8006790:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2278      	movs	r2, #120	; 0x78
 8006798:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2278      	movs	r2, #120	; 0x78
 80067a0:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	224f      	movs	r2, #79	; 0x4f
 80067a8:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2207      	movs	r2, #7
 80067b0:	f883 22eb 	strb.w	r2, [r3, #747]	; 0x2eb
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2247      	movs	r2, #71	; 0x47
 80067b8:	f883 22ee 	strb.w	r2, [r3, #750]	; 0x2ee
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2263      	movs	r2, #99	; 0x63
 80067c0:	f883 22ef 	strb.w	r2, [r3, #751]	; 0x2ef
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2271      	movs	r2, #113	; 0x71
 80067c8:	f883 22f0 	strb.w	r2, [r3, #752]	; 0x2f0
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2259      	movs	r2, #89	; 0x59
 80067d0:	f883 22f1 	strb.w	r2, [r3, #753]	; 0x2f1
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	224d      	movs	r2, #77	; 0x4d
 80067d8:	f883 22f2 	strb.w	r2, [r3, #754]	; 0x2f2
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2267      	movs	r2, #103	; 0x67
 80067e0:	f883 22f3 	strb.w	r2, [r3, #755]	; 0x2f3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2273      	movs	r2, #115	; 0x73
 80067e8:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	227f      	movs	r2, #127	; 0x7f
 80067f0:	f883 22f7 	strb.w	r2, [r3, #759]	; 0x2f7
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	227f      	movs	r2, #127	; 0x7f
 80067f8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2241      	movs	r2, #65	; 0x41
 8006800:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2241      	movs	r2, #65	; 0x41
 8006808:	f883 22fa 	strb.w	r2, [r3, #762]	; 0x2fa
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 22fe 	strb.w	r2, [r3, #766]	; 0x2fe
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2203      	movs	r2, #3
 8006818:	f883 22ff 	strb.w	r2, [r3, #767]	; 0x2ff
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2206      	movs	r2, #6
 8006820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	220c      	movs	r2, #12
 8006828:	f883 2301 	strb.w	r2, [r3, #769]	; 0x301
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2218      	movs	r2, #24
 8006830:	f883 2302 	strb.w	r2, [r3, #770]	; 0x302
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2230      	movs	r2, #48	; 0x30
 8006838:	f883 2303 	strb.w	r2, [r3, #771]	; 0x303
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2260      	movs	r2, #96	; 0x60
 8006840:	f883 2304 	strb.w	r2, [r3, #772]	; 0x304
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2241      	movs	r2, #65	; 0x41
 8006848:	f883 2307 	strb.w	r2, [r3, #775]	; 0x307
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2241      	movs	r2, #65	; 0x41
 8006850:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	227f      	movs	r2, #127	; 0x7f
 8006858:	f883 2309 	strb.w	r2, [r3, #777]	; 0x309
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	227f      	movs	r2, #127	; 0x7f
 8006860:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2208      	movs	r2, #8
 8006868:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	220c      	movs	r2, #12
 8006870:	f883 230f 	strb.w	r2, [r3, #783]	; 0x30f
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2206      	movs	r2, #6
 8006878:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2203      	movs	r2, #3
 8006880:	f883 2311 	strb.w	r2, [r3, #785]	; 0x311
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2206      	movs	r2, #6
 8006888:	f883 2312 	strb.w	r2, [r3, #786]	; 0x312
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	220c      	movs	r2, #12
 8006890:	f883 2313 	strb.w	r2, [r3, #787]	; 0x313
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2208      	movs	r2, #8
 8006898:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2280      	movs	r2, #128	; 0x80
 80068a0:	f883 2316 	strb.w	r2, [r3, #790]	; 0x316
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2280      	movs	r2, #128	; 0x80
 80068a8:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2280      	movs	r2, #128	; 0x80
 80068b0:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2280      	movs	r2, #128	; 0x80
 80068b8:	f883 2319 	strb.w	r2, [r3, #793]	; 0x319
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2280      	movs	r2, #128	; 0x80
 80068c0:	f883 231a 	strb.w	r2, [r3, #794]	; 0x31a
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2280      	movs	r2, #128	; 0x80
 80068c8:	f883 231b 	strb.w	r2, [r3, #795]	; 0x31b
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2280      	movs	r2, #128	; 0x80
 80068d0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2280      	movs	r2, #128	; 0x80
 80068d8:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2203      	movs	r2, #3
 80068e0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2207      	movs	r2, #7
 80068e8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2204      	movs	r2, #4
 80068f0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2220      	movs	r2, #32
 80068f8:	f883 2326 	strb.w	r2, [r3, #806]	; 0x326
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2274      	movs	r2, #116	; 0x74
 8006900:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2254      	movs	r2, #84	; 0x54
 8006908:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2254      	movs	r2, #84	; 0x54
 8006910:	f883 2329 	strb.w	r2, [r3, #809]	; 0x329
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	223c      	movs	r2, #60	; 0x3c
 8006918:	f883 232a 	strb.w	r2, [r3, #810]	; 0x32a
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2278      	movs	r2, #120	; 0x78
 8006920:	f883 232b 	strb.w	r2, [r3, #811]	; 0x32b
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2240      	movs	r2, #64	; 0x40
 8006928:	f883 232c 	strb.w	r2, [r3, #812]	; 0x32c
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2241      	movs	r2, #65	; 0x41
 8006930:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	227f      	movs	r2, #127	; 0x7f
 8006938:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	223f      	movs	r2, #63	; 0x3f
 8006940:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2248      	movs	r2, #72	; 0x48
 8006948:	f883 2331 	strb.w	r2, [r3, #817]	; 0x331
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2248      	movs	r2, #72	; 0x48
 8006950:	f883 2332 	strb.w	r2, [r3, #818]	; 0x332
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2278      	movs	r2, #120	; 0x78
 8006958:	f883 2333 	strb.w	r2, [r3, #819]	; 0x333
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2230      	movs	r2, #48	; 0x30
 8006960:	f883 2334 	strb.w	r2, [r3, #820]	; 0x334
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2238      	movs	r2, #56	; 0x38
 8006968:	f883 2336 	strb.w	r2, [r3, #822]	; 0x336
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	227c      	movs	r2, #124	; 0x7c
 8006970:	f883 2337 	strb.w	r2, [r3, #823]	; 0x337
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2244      	movs	r2, #68	; 0x44
 8006978:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2244      	movs	r2, #68	; 0x44
 8006980:	f883 2339 	strb.w	r2, [r3, #825]	; 0x339
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	226c      	movs	r2, #108	; 0x6c
 8006988:	f883 233a 	strb.w	r2, [r3, #826]	; 0x33a
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2228      	movs	r2, #40	; 0x28
 8006990:	f883 233b 	strb.w	r2, [r3, #827]	; 0x33b
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2230      	movs	r2, #48	; 0x30
 8006998:	f883 233e 	strb.w	r2, [r3, #830]	; 0x33e
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2278      	movs	r2, #120	; 0x78
 80069a0:	f883 233f 	strb.w	r2, [r3, #831]	; 0x33f
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2248      	movs	r2, #72	; 0x48
 80069a8:	f883 2340 	strb.w	r2, [r3, #832]	; 0x340
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2249      	movs	r2, #73	; 0x49
 80069b0:	f883 2341 	strb.w	r2, [r3, #833]	; 0x341
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	223f      	movs	r2, #63	; 0x3f
 80069b8:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	227f      	movs	r2, #127	; 0x7f
 80069c0:	f883 2343 	strb.w	r2, [r3, #835]	; 0x343
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2240      	movs	r2, #64	; 0x40
 80069c8:	f883 2344 	strb.w	r2, [r3, #836]	; 0x344
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2238      	movs	r2, #56	; 0x38
 80069d0:	f883 2346 	strb.w	r2, [r3, #838]	; 0x346
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	227c      	movs	r2, #124	; 0x7c
 80069d8:	f883 2347 	strb.w	r2, [r3, #839]	; 0x347
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2254      	movs	r2, #84	; 0x54
 80069e0:	f883 2348 	strb.w	r2, [r3, #840]	; 0x348
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2254      	movs	r2, #84	; 0x54
 80069e8:	f883 2349 	strb.w	r2, [r3, #841]	; 0x349
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	225c      	movs	r2, #92	; 0x5c
 80069f0:	f883 234a 	strb.w	r2, [r3, #842]	; 0x34a
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2218      	movs	r2, #24
 80069f8:	f883 234b 	strb.w	r2, [r3, #843]	; 0x34b
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2248      	movs	r2, #72	; 0x48
 8006a00:	f883 234e 	strb.w	r2, [r3, #846]	; 0x34e
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	227e      	movs	r2, #126	; 0x7e
 8006a08:	f883 234f 	strb.w	r2, [r3, #847]	; 0x34f
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	227f      	movs	r2, #127	; 0x7f
 8006a10:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2249      	movs	r2, #73	; 0x49
 8006a18:	f883 2351 	strb.w	r2, [r3, #849]	; 0x351
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2203      	movs	r2, #3
 8006a20:	f883 2352 	strb.w	r2, [r3, #850]	; 0x352
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2202      	movs	r2, #2
 8006a28:	f883 2353 	strb.w	r2, [r3, #851]	; 0x353
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2298      	movs	r2, #152	; 0x98
 8006a30:	f883 2356 	strb.w	r2, [r3, #854]	; 0x356
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	22bc      	movs	r2, #188	; 0xbc
 8006a38:	f883 2357 	strb.w	r2, [r3, #855]	; 0x357
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	22a4      	movs	r2, #164	; 0xa4
 8006a40:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	22a4      	movs	r2, #164	; 0xa4
 8006a48:	f883 2359 	strb.w	r2, [r3, #857]	; 0x359
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	22f8      	movs	r2, #248	; 0xf8
 8006a50:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	227c      	movs	r2, #124	; 0x7c
 8006a58:	f883 235b 	strb.w	r2, [r3, #859]	; 0x35b
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2204      	movs	r2, #4
 8006a60:	f883 235c 	strb.w	r2, [r3, #860]	; 0x35c
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2241      	movs	r2, #65	; 0x41
 8006a68:	f883 235e 	strb.w	r2, [r3, #862]	; 0x35e
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	227f      	movs	r2, #127	; 0x7f
 8006a70:	f883 235f 	strb.w	r2, [r3, #863]	; 0x35f
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	227f      	movs	r2, #127	; 0x7f
 8006a78:	f883 2360 	strb.w	r2, [r3, #864]	; 0x360
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2208      	movs	r2, #8
 8006a80:	f883 2361 	strb.w	r2, [r3, #865]	; 0x361
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2204      	movs	r2, #4
 8006a88:	f883 2362 	strb.w	r2, [r3, #866]	; 0x362
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	227c      	movs	r2, #124	; 0x7c
 8006a90:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2278      	movs	r2, #120	; 0x78
 8006a98:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2244      	movs	r2, #68	; 0x44
 8006aa0:	f883 2367 	strb.w	r2, [r3, #871]	; 0x367
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	227d      	movs	r2, #125	; 0x7d
 8006aa8:	f883 2368 	strb.w	r2, [r3, #872]	; 0x368
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	227d      	movs	r2, #125	; 0x7d
 8006ab0:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2240      	movs	r2, #64	; 0x40
 8006ab8:	f883 236a 	strb.w	r2, [r3, #874]	; 0x36a
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2260      	movs	r2, #96	; 0x60
 8006ac0:	f883 236e 	strb.w	r2, [r3, #878]	; 0x36e
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	22e0      	movs	r2, #224	; 0xe0
 8006ac8:	f883 236f 	strb.w	r2, [r3, #879]	; 0x36f
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2280      	movs	r2, #128	; 0x80
 8006ad0:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2280      	movs	r2, #128	; 0x80
 8006ad8:	f883 2371 	strb.w	r2, [r3, #881]	; 0x371
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	22fd      	movs	r2, #253	; 0xfd
 8006ae0:	f883 2372 	strb.w	r2, [r3, #882]	; 0x372
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	227d      	movs	r2, #125	; 0x7d
 8006ae8:	f883 2373 	strb.w	r2, [r3, #883]	; 0x373
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2241      	movs	r2, #65	; 0x41
 8006af0:	f883 2376 	strb.w	r2, [r3, #886]	; 0x376
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	227f      	movs	r2, #127	; 0x7f
 8006af8:	f883 2377 	strb.w	r2, [r3, #887]	; 0x377
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	227f      	movs	r2, #127	; 0x7f
 8006b00:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2210      	movs	r2, #16
 8006b08:	f883 2379 	strb.w	r2, [r3, #889]	; 0x379
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2238      	movs	r2, #56	; 0x38
 8006b10:	f883 237a 	strb.w	r2, [r3, #890]	; 0x37a
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	226c      	movs	r2, #108	; 0x6c
 8006b18:	f883 237b 	strb.w	r2, [r3, #891]	; 0x37b
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2244      	movs	r2, #68	; 0x44
 8006b20:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2241      	movs	r2, #65	; 0x41
 8006b28:	f883 237f 	strb.w	r2, [r3, #895]	; 0x37f
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	227f      	movs	r2, #127	; 0x7f
 8006b30:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	227f      	movs	r2, #127	; 0x7f
 8006b38:	f883 2381 	strb.w	r2, [r3, #897]	; 0x381
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2240      	movs	r2, #64	; 0x40
 8006b40:	f883 2382 	strb.w	r2, [r3, #898]	; 0x382
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	227c      	movs	r2, #124	; 0x7c
 8006b48:	f883 2386 	strb.w	r2, [r3, #902]	; 0x386
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	227c      	movs	r2, #124	; 0x7c
 8006b50:	f883 2387 	strb.w	r2, [r3, #903]	; 0x387
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2218      	movs	r2, #24
 8006b58:	f883 2388 	strb.w	r2, [r3, #904]	; 0x388
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2238      	movs	r2, #56	; 0x38
 8006b60:	f883 2389 	strb.w	r2, [r3, #905]	; 0x389
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	221c      	movs	r2, #28
 8006b68:	f883 238a 	strb.w	r2, [r3, #906]	; 0x38a
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	227c      	movs	r2, #124	; 0x7c
 8006b70:	f883 238b 	strb.w	r2, [r3, #907]	; 0x38b
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2278      	movs	r2, #120	; 0x78
 8006b78:	f883 238c 	strb.w	r2, [r3, #908]	; 0x38c
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	227c      	movs	r2, #124	; 0x7c
 8006b80:	f883 238e 	strb.w	r2, [r3, #910]	; 0x38e
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	227c      	movs	r2, #124	; 0x7c
 8006b88:	f883 238f 	strb.w	r2, [r3, #911]	; 0x38f
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2204      	movs	r2, #4
 8006b90:	f883 2390 	strb.w	r2, [r3, #912]	; 0x390
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2204      	movs	r2, #4
 8006b98:	f883 2391 	strb.w	r2, [r3, #913]	; 0x391
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	227c      	movs	r2, #124	; 0x7c
 8006ba0:	f883 2392 	strb.w	r2, [r3, #914]	; 0x392
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2278      	movs	r2, #120	; 0x78
 8006ba8:	f883 2393 	strb.w	r2, [r3, #915]	; 0x393
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2238      	movs	r2, #56	; 0x38
 8006bb0:	f883 2396 	strb.w	r2, [r3, #918]	; 0x396
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	227c      	movs	r2, #124	; 0x7c
 8006bb8:	f883 2397 	strb.w	r2, [r3, #919]	; 0x397
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2244      	movs	r2, #68	; 0x44
 8006bc0:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2244      	movs	r2, #68	; 0x44
 8006bc8:	f883 2399 	strb.w	r2, [r3, #921]	; 0x399
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	227c      	movs	r2, #124	; 0x7c
 8006bd0:	f883 239a 	strb.w	r2, [r3, #922]	; 0x39a
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2238      	movs	r2, #56	; 0x38
 8006bd8:	f883 239b 	strb.w	r2, [r3, #923]	; 0x39b
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2284      	movs	r2, #132	; 0x84
 8006be0:	f883 239e 	strb.w	r2, [r3, #926]	; 0x39e
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	22fc      	movs	r2, #252	; 0xfc
 8006be8:	f883 239f 	strb.w	r2, [r3, #927]	; 0x39f
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	22f8      	movs	r2, #248	; 0xf8
 8006bf0:	f883 23a0 	strb.w	r2, [r3, #928]	; 0x3a0
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	22a4      	movs	r2, #164	; 0xa4
 8006bf8:	f883 23a1 	strb.w	r2, [r3, #929]	; 0x3a1
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2224      	movs	r2, #36	; 0x24
 8006c00:	f883 23a2 	strb.w	r2, [r3, #930]	; 0x3a2
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	223c      	movs	r2, #60	; 0x3c
 8006c08:	f883 23a3 	strb.w	r2, [r3, #931]	; 0x3a3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2218      	movs	r2, #24
 8006c10:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2218      	movs	r2, #24
 8006c18:	f883 23a6 	strb.w	r2, [r3, #934]	; 0x3a6
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	223c      	movs	r2, #60	; 0x3c
 8006c20:	f883 23a7 	strb.w	r2, [r3, #935]	; 0x3a7
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2224      	movs	r2, #36	; 0x24
 8006c28:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	22a4      	movs	r2, #164	; 0xa4
 8006c30:	f883 23a9 	strb.w	r2, [r3, #937]	; 0x3a9
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	22f8      	movs	r2, #248	; 0xf8
 8006c38:	f883 23aa 	strb.w	r2, [r3, #938]	; 0x3aa
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	22fc      	movs	r2, #252	; 0xfc
 8006c40:	f883 23ab 	strb.w	r2, [r3, #939]	; 0x3ab
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2284      	movs	r2, #132	; 0x84
 8006c48:	f883 23ac 	strb.w	r2, [r3, #940]	; 0x3ac
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2244      	movs	r2, #68	; 0x44
 8006c50:	f883 23ae 	strb.w	r2, [r3, #942]	; 0x3ae
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	227c      	movs	r2, #124	; 0x7c
 8006c58:	f883 23af 	strb.w	r2, [r3, #943]	; 0x3af
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2278      	movs	r2, #120	; 0x78
 8006c60:	f883 23b0 	strb.w	r2, [r3, #944]	; 0x3b0
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	224c      	movs	r2, #76	; 0x4c
 8006c68:	f883 23b1 	strb.w	r2, [r3, #945]	; 0x3b1
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2204      	movs	r2, #4
 8006c70:	f883 23b2 	strb.w	r2, [r3, #946]	; 0x3b2
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	221c      	movs	r2, #28
 8006c78:	f883 23b3 	strb.w	r2, [r3, #947]	; 0x3b3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2218      	movs	r2, #24
 8006c80:	f883 23b4 	strb.w	r2, [r3, #948]	; 0x3b4
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2248      	movs	r2, #72	; 0x48
 8006c88:	f883 23b6 	strb.w	r2, [r3, #950]	; 0x3b6
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	225c      	movs	r2, #92	; 0x5c
 8006c90:	f883 23b7 	strb.w	r2, [r3, #951]	; 0x3b7
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2254      	movs	r2, #84	; 0x54
 8006c98:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2254      	movs	r2, #84	; 0x54
 8006ca0:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2274      	movs	r2, #116	; 0x74
 8006ca8:	f883 23ba 	strb.w	r2, [r3, #954]	; 0x3ba
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2224      	movs	r2, #36	; 0x24
 8006cb0:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2204      	movs	r2, #4
 8006cb8:	f883 23bf 	strb.w	r2, [r3, #959]	; 0x3bf
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	223e      	movs	r2, #62	; 0x3e
 8006cc0:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	227f      	movs	r2, #127	; 0x7f
 8006cc8:	f883 23c1 	strb.w	r2, [r3, #961]	; 0x3c1
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2244      	movs	r2, #68	; 0x44
 8006cd0:	f883 23c2 	strb.w	r2, [r3, #962]	; 0x3c2
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2224      	movs	r2, #36	; 0x24
 8006cd8:	f883 23c3 	strb.w	r2, [r3, #963]	; 0x3c3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	223c      	movs	r2, #60	; 0x3c
 8006ce0:	f883 23c6 	strb.w	r2, [r3, #966]	; 0x3c6
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	227c      	movs	r2, #124	; 0x7c
 8006ce8:	f883 23c7 	strb.w	r2, [r3, #967]	; 0x3c7
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2240      	movs	r2, #64	; 0x40
 8006cf0:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2240      	movs	r2, #64	; 0x40
 8006cf8:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	223c      	movs	r2, #60	; 0x3c
 8006d00:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	227c      	movs	r2, #124	; 0x7c
 8006d08:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2240      	movs	r2, #64	; 0x40
 8006d10:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	221c      	movs	r2, #28
 8006d18:	f883 23ce 	strb.w	r2, [r3, #974]	; 0x3ce
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	223c      	movs	r2, #60	; 0x3c
 8006d20:	f883 23cf 	strb.w	r2, [r3, #975]	; 0x3cf
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2260      	movs	r2, #96	; 0x60
 8006d28:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2260      	movs	r2, #96	; 0x60
 8006d30:	f883 23d1 	strb.w	r2, [r3, #977]	; 0x3d1
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	223c      	movs	r2, #60	; 0x3c
 8006d38:	f883 23d2 	strb.w	r2, [r3, #978]	; 0x3d2
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	221c      	movs	r2, #28
 8006d40:	f883 23d3 	strb.w	r2, [r3, #979]	; 0x3d3
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	223c      	movs	r2, #60	; 0x3c
 8006d48:	f883 23d6 	strb.w	r2, [r3, #982]	; 0x3d6
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	227c      	movs	r2, #124	; 0x7c
 8006d50:	f883 23d7 	strb.w	r2, [r3, #983]	; 0x3d7
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2270      	movs	r2, #112	; 0x70
 8006d58:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2238      	movs	r2, #56	; 0x38
 8006d60:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2270      	movs	r2, #112	; 0x70
 8006d68:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	227c      	movs	r2, #124	; 0x7c
 8006d70:	f883 23db 	strb.w	r2, [r3, #987]	; 0x3db
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	223c      	movs	r2, #60	; 0x3c
 8006d78:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2244      	movs	r2, #68	; 0x44
 8006d80:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	226c      	movs	r2, #108	; 0x6c
 8006d88:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2238      	movs	r2, #56	; 0x38
 8006d90:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2210      	movs	r2, #16
 8006d98:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2238      	movs	r2, #56	; 0x38
 8006da0:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	226c      	movs	r2, #108	; 0x6c
 8006da8:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2244      	movs	r2, #68	; 0x44
 8006db0:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	229c      	movs	r2, #156	; 0x9c
 8006db8:	f883 23e6 	strb.w	r2, [r3, #998]	; 0x3e6
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	22bc      	movs	r2, #188	; 0xbc
 8006dc0:	f883 23e7 	strb.w	r2, [r3, #999]	; 0x3e7
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	22a0      	movs	r2, #160	; 0xa0
 8006dc8:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	22a0      	movs	r2, #160	; 0xa0
 8006dd0:	f883 23e9 	strb.w	r2, [r3, #1001]	; 0x3e9
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	22fc      	movs	r2, #252	; 0xfc
 8006dd8:	f883 23ea 	strb.w	r2, [r3, #1002]	; 0x3ea
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	227c      	movs	r2, #124	; 0x7c
 8006de0:	f883 23eb 	strb.w	r2, [r3, #1003]	; 0x3eb
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	224c      	movs	r2, #76	; 0x4c
 8006de8:	f883 23ee 	strb.w	r2, [r3, #1006]	; 0x3ee
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2264      	movs	r2, #100	; 0x64
 8006df0:	f883 23ef 	strb.w	r2, [r3, #1007]	; 0x3ef
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2274      	movs	r2, #116	; 0x74
 8006df8:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	225c      	movs	r2, #92	; 0x5c
 8006e00:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	224c      	movs	r2, #76	; 0x4c
 8006e08:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2264      	movs	r2, #100	; 0x64
 8006e10:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2208      	movs	r2, #8
 8006e18:	f883 23f6 	strb.w	r2, [r3, #1014]	; 0x3f6
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2208      	movs	r2, #8
 8006e20:	f883 23f7 	strb.w	r2, [r3, #1015]	; 0x3f7
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	223e      	movs	r2, #62	; 0x3e
 8006e28:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2277      	movs	r2, #119	; 0x77
 8006e30:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2241      	movs	r2, #65	; 0x41
 8006e38:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2241      	movs	r2, #65	; 0x41
 8006e40:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2277      	movs	r2, #119	; 0x77
 8006e48:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2277      	movs	r2, #119	; 0x77
 8006e50:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2241      	movs	r2, #65	; 0x41
 8006e58:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2241      	movs	r2, #65	; 0x41
 8006e60:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2277      	movs	r2, #119	; 0x77
 8006e68:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	223e      	movs	r2, #62	; 0x3e
 8006e70:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2208      	movs	r2, #8
 8006e78:	f883 240a 	strb.w	r2, [r3, #1034]	; 0x40a
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2208      	movs	r2, #8
 8006e80:	f883 240b 	strb.w	r2, [r3, #1035]	; 0x40b
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2202      	movs	r2, #2
 8006e88:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2203      	movs	r2, #3
 8006e90:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2201      	movs	r2, #1
 8006e98:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2203      	movs	r2, #3
 8006ea0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2202      	movs	r2, #2
 8006ea8:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2203      	movs	r2, #3
 8006eb0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2270      	movs	r2, #112	; 0x70
 8006ec0:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2278      	movs	r2, #120	; 0x78
 8006ec8:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	224c      	movs	r2, #76	; 0x4c
 8006ed0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2246      	movs	r2, #70	; 0x46
 8006ed8:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	224c      	movs	r2, #76	; 0x4c
 8006ee0:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2278      	movs	r2, #120	; 0x78
 8006ee8:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2270      	movs	r2, #112	; 0x70
 8006ef0:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	220e      	movs	r2, #14
 8006ef8:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	229f      	movs	r2, #159	; 0x9f
 8006f00:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2291      	movs	r2, #145	; 0x91
 8006f08:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	22b1      	movs	r2, #177	; 0xb1
 8006f10:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	22fb      	movs	r2, #251	; 0xfb
 8006f18:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	224a      	movs	r2, #74	; 0x4a
 8006f20:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	223a      	movs	r2, #58	; 0x3a
 8006f28:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	227a      	movs	r2, #122	; 0x7a
 8006f30:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2240      	movs	r2, #64	; 0x40
 8006f38:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2240      	movs	r2, #64	; 0x40
 8006f40:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	227a      	movs	r2, #122	; 0x7a
 8006f48:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	227a      	movs	r2, #122	; 0x7a
 8006f50:	f883 242b 	strb.w	r2, [r3, #1067]	; 0x42b
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2240      	movs	r2, #64	; 0x40
 8006f58:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2238      	movs	r2, #56	; 0x38
 8006f60:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	227c      	movs	r2, #124	; 0x7c
 8006f68:	f883 242f 	strb.w	r2, [r3, #1071]	; 0x42f
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2254      	movs	r2, #84	; 0x54
 8006f70:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2255      	movs	r2, #85	; 0x55
 8006f78:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	225d      	movs	r2, #93	; 0x5d
 8006f80:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2219      	movs	r2, #25
 8006f88:	f883 2433 	strb.w	r2, [r3, #1075]	; 0x433
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2202      	movs	r2, #2
 8006f90:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2223      	movs	r2, #35	; 0x23
 8006f98:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2275      	movs	r2, #117	; 0x75
 8006fa0:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2255      	movs	r2, #85	; 0x55
 8006fa8:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2255      	movs	r2, #85	; 0x55
 8006fb0:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	227d      	movs	r2, #125	; 0x7d
 8006fb8:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	227b      	movs	r2, #123	; 0x7b
 8006fc0:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2242      	movs	r2, #66	; 0x42
 8006fc8:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2221      	movs	r2, #33	; 0x21
 8006fd0:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2275      	movs	r2, #117	; 0x75
 8006fd8:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2254      	movs	r2, #84	; 0x54
 8006fe0:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2254      	movs	r2, #84	; 0x54
 8006fe8:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	227d      	movs	r2, #125	; 0x7d
 8006ff0:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2279      	movs	r2, #121	; 0x79
 8006ff8:	f883 2443 	strb.w	r2, [r3, #1091]	; 0x443
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2240      	movs	r2, #64	; 0x40
 8007000:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2221      	movs	r2, #33	; 0x21
 8007008:	f883 2446 	strb.w	r2, [r3, #1094]	; 0x446
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2275      	movs	r2, #117	; 0x75
 8007010:	f883 2447 	strb.w	r2, [r3, #1095]	; 0x447
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2255      	movs	r2, #85	; 0x55
 8007018:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2254      	movs	r2, #84	; 0x54
 8007020:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	227c      	movs	r2, #124	; 0x7c
 8007028:	f883 244a 	strb.w	r2, [r3, #1098]	; 0x44a
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2278      	movs	r2, #120	; 0x78
 8007030:	f883 244b 	strb.w	r2, [r3, #1099]	; 0x44b
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2240      	movs	r2, #64	; 0x40
 8007038:	f883 244c 	strb.w	r2, [r3, #1100]	; 0x44c
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2220      	movs	r2, #32
 8007040:	f883 244e 	strb.w	r2, [r3, #1102]	; 0x44e
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2274      	movs	r2, #116	; 0x74
 8007048:	f883 244f 	strb.w	r2, [r3, #1103]	; 0x44f
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2257      	movs	r2, #87	; 0x57
 8007050:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2257      	movs	r2, #87	; 0x57
 8007058:	f883 2451 	strb.w	r2, [r3, #1105]	; 0x451
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	227c      	movs	r2, #124	; 0x7c
 8007060:	f883 2452 	strb.w	r2, [r3, #1106]	; 0x452
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2278      	movs	r2, #120	; 0x78
 8007068:	f883 2453 	strb.w	r2, [r3, #1107]	; 0x453
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2240      	movs	r2, #64	; 0x40
 8007070:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2218      	movs	r2, #24
 8007078:	f883 2456 	strb.w	r2, [r3, #1110]	; 0x456
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	223c      	movs	r2, #60	; 0x3c
 8007080:	f883 2457 	strb.w	r2, [r3, #1111]	; 0x457
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	22a4      	movs	r2, #164	; 0xa4
 8007088:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	22a4      	movs	r2, #164	; 0xa4
 8007090:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	22e4      	movs	r2, #228	; 0xe4
 8007098:	f883 245a 	strb.w	r2, [r3, #1114]	; 0x45a
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2240      	movs	r2, #64	; 0x40
 80070a0:	f883 245b 	strb.w	r2, [r3, #1115]	; 0x45b
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2202      	movs	r2, #2
 80070a8:	f883 245e 	strb.w	r2, [r3, #1118]	; 0x45e
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	223b      	movs	r2, #59	; 0x3b
 80070b0:	f883 245f 	strb.w	r2, [r3, #1119]	; 0x45f
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	227d      	movs	r2, #125	; 0x7d
 80070b8:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2255      	movs	r2, #85	; 0x55
 80070c0:	f883 2461 	strb.w	r2, [r3, #1121]	; 0x461
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2255      	movs	r2, #85	; 0x55
 80070c8:	f883 2462 	strb.w	r2, [r3, #1122]	; 0x462
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	225d      	movs	r2, #93	; 0x5d
 80070d0:	f883 2463 	strb.w	r2, [r3, #1123]	; 0x463
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	221b      	movs	r2, #27
 80070d8:	f883 2464 	strb.w	r2, [r3, #1124]	; 0x464
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2202      	movs	r2, #2
 80070e0:	f883 2465 	strb.w	r2, [r3, #1125]	; 0x465
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2239      	movs	r2, #57	; 0x39
 80070e8:	f883 2466 	strb.w	r2, [r3, #1126]	; 0x466
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	227d      	movs	r2, #125	; 0x7d
 80070f0:	f883 2467 	strb.w	r2, [r3, #1127]	; 0x467
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2254      	movs	r2, #84	; 0x54
 80070f8:	f883 2468 	strb.w	r2, [r3, #1128]	; 0x468
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2254      	movs	r2, #84	; 0x54
 8007100:	f883 2469 	strb.w	r2, [r3, #1129]	; 0x469
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	225d      	movs	r2, #93	; 0x5d
 8007108:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2219      	movs	r2, #25
 8007110:	f883 246b 	strb.w	r2, [r3, #1131]	; 0x46b
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2239      	movs	r2, #57	; 0x39
 8007118:	f883 246e 	strb.w	r2, [r3, #1134]	; 0x46e
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	227d      	movs	r2, #125	; 0x7d
 8007120:	f883 246f 	strb.w	r2, [r3, #1135]	; 0x46f
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2255      	movs	r2, #85	; 0x55
 8007128:	f883 2470 	strb.w	r2, [r3, #1136]	; 0x470
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2254      	movs	r2, #84	; 0x54
 8007130:	f883 2471 	strb.w	r2, [r3, #1137]	; 0x471
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	225c      	movs	r2, #92	; 0x5c
 8007138:	f883 2472 	strb.w	r2, [r3, #1138]	; 0x472
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2218      	movs	r2, #24
 8007140:	f883 2473 	strb.w	r2, [r3, #1139]	; 0x473
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 2476 	strb.w	r2, [r3, #1142]	; 0x476
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2245      	movs	r2, #69	; 0x45
 8007150:	f883 2477 	strb.w	r2, [r3, #1143]	; 0x477
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	227c      	movs	r2, #124	; 0x7c
 8007158:	f883 2478 	strb.w	r2, [r3, #1144]	; 0x478
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	227c      	movs	r2, #124	; 0x7c
 8007160:	f883 2479 	strb.w	r2, [r3, #1145]	; 0x479
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2241      	movs	r2, #65	; 0x41
 8007168:	f883 247a 	strb.w	r2, [r3, #1146]	; 0x47a
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 247b 	strb.w	r2, [r3, #1147]	; 0x47b
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2202      	movs	r2, #2
 8007178:	f883 247e 	strb.w	r2, [r3, #1150]	; 0x47e
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2203      	movs	r2, #3
 8007180:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2245      	movs	r2, #69	; 0x45
 8007188:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	227d      	movs	r2, #125	; 0x7d
 8007190:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	227d      	movs	r2, #125	; 0x7d
 8007198:	f883 2482 	strb.w	r2, [r3, #1154]	; 0x482
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2243      	movs	r2, #67	; 0x43
 80071a0:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2202      	movs	r2, #2
 80071a8:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 2486 	strb.w	r2, [r3, #1158]	; 0x486
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2245      	movs	r2, #69	; 0x45
 80071b8:	f883 2487 	strb.w	r2, [r3, #1159]	; 0x487
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	227d      	movs	r2, #125	; 0x7d
 80071c0:	f883 2488 	strb.w	r2, [r3, #1160]	; 0x488
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	227c      	movs	r2, #124	; 0x7c
 80071c8:	f883 2489 	strb.w	r2, [r3, #1161]	; 0x489
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2240      	movs	r2, #64	; 0x40
 80071d0:	f883 248a 	strb.w	r2, [r3, #1162]	; 0x48a
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2279      	movs	r2, #121	; 0x79
 80071d8:	f883 248e 	strb.w	r2, [r3, #1166]	; 0x48e
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	227d      	movs	r2, #125	; 0x7d
 80071e0:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2216      	movs	r2, #22
 80071e8:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2212      	movs	r2, #18
 80071f0:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2216      	movs	r2, #22
 80071f8:	f883 2492 	strb.w	r2, [r3, #1170]	; 0x492
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	227d      	movs	r2, #125	; 0x7d
 8007200:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2279      	movs	r2, #121	; 0x79
 8007208:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2270      	movs	r2, #112	; 0x70
 8007210:	f883 2496 	strb.w	r2, [r3, #1174]	; 0x496
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2278      	movs	r2, #120	; 0x78
 8007218:	f883 2497 	strb.w	r2, [r3, #1175]	; 0x497
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	222b      	movs	r2, #43	; 0x2b
 8007220:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	222b      	movs	r2, #43	; 0x2b
 8007228:	f883 2499 	strb.w	r2, [r3, #1177]	; 0x499
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2278      	movs	r2, #120	; 0x78
 8007230:	f883 249a 	strb.w	r2, [r3, #1178]	; 0x49a
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2270      	movs	r2, #112	; 0x70
 8007238:	f883 249b 	strb.w	r2, [r3, #1179]	; 0x49b
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2244      	movs	r2, #68	; 0x44
 8007240:	f883 249e 	strb.w	r2, [r3, #1182]	; 0x49e
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	227c      	movs	r2, #124	; 0x7c
 8007248:	f883 249f 	strb.w	r2, [r3, #1183]	; 0x49f
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	227c      	movs	r2, #124	; 0x7c
 8007250:	f883 24a0 	strb.w	r2, [r3, #1184]	; 0x4a0
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2255      	movs	r2, #85	; 0x55
 8007258:	f883 24a1 	strb.w	r2, [r3, #1185]	; 0x4a1
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2255      	movs	r2, #85	; 0x55
 8007260:	f883 24a2 	strb.w	r2, [r3, #1186]	; 0x4a2
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2245      	movs	r2, #69	; 0x45
 8007268:	f883 24a3 	strb.w	r2, [r3, #1187]	; 0x4a3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2220      	movs	r2, #32
 8007270:	f883 24a6 	strb.w	r2, [r3, #1190]	; 0x4a6
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2274      	movs	r2, #116	; 0x74
 8007278:	f883 24a7 	strb.w	r2, [r3, #1191]	; 0x4a7
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2254      	movs	r2, #84	; 0x54
 8007280:	f883 24a8 	strb.w	r2, [r3, #1192]	; 0x4a8
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2254      	movs	r2, #84	; 0x54
 8007288:	f883 24a9 	strb.w	r2, [r3, #1193]	; 0x4a9
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	227c      	movs	r2, #124	; 0x7c
 8007290:	f883 24aa 	strb.w	r2, [r3, #1194]	; 0x4aa
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	227c      	movs	r2, #124	; 0x7c
 8007298:	f883 24ab 	strb.w	r2, [r3, #1195]	; 0x4ab
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2254      	movs	r2, #84	; 0x54
 80072a0:	f883 24ac 	strb.w	r2, [r3, #1196]	; 0x4ac
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2254      	movs	r2, #84	; 0x54
 80072a8:	f883 24ad 	strb.w	r2, [r3, #1197]	; 0x4ad
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	227c      	movs	r2, #124	; 0x7c
 80072b0:	f883 24ae 	strb.w	r2, [r3, #1198]	; 0x4ae
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	227e      	movs	r2, #126	; 0x7e
 80072b8:	f883 24af 	strb.w	r2, [r3, #1199]	; 0x4af
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	220b      	movs	r2, #11
 80072c0:	f883 24b0 	strb.w	r2, [r3, #1200]	; 0x4b0
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2209      	movs	r2, #9
 80072c8:	f883 24b1 	strb.w	r2, [r3, #1201]	; 0x4b1
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	227f      	movs	r2, #127	; 0x7f
 80072d0:	f883 24b2 	strb.w	r2, [r3, #1202]	; 0x4b2
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	227f      	movs	r2, #127	; 0x7f
 80072d8:	f883 24b3 	strb.w	r2, [r3, #1203]	; 0x4b3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2249      	movs	r2, #73	; 0x49
 80072e0:	f883 24b4 	strb.w	r2, [r3, #1204]	; 0x4b4
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2232      	movs	r2, #50	; 0x32
 80072e8:	f883 24b6 	strb.w	r2, [r3, #1206]	; 0x4b6
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	227b      	movs	r2, #123	; 0x7b
 80072f0:	f883 24b7 	strb.w	r2, [r3, #1207]	; 0x4b7
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2249      	movs	r2, #73	; 0x49
 80072f8:	f883 24b8 	strb.w	r2, [r3, #1208]	; 0x4b8
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2249      	movs	r2, #73	; 0x49
 8007300:	f883 24b9 	strb.w	r2, [r3, #1209]	; 0x4b9
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	227b      	movs	r2, #123	; 0x7b
 8007308:	f883 24ba 	strb.w	r2, [r3, #1210]	; 0x4ba
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2232      	movs	r2, #50	; 0x32
 8007310:	f883 24bb 	strb.w	r2, [r3, #1211]	; 0x4bb
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2232      	movs	r2, #50	; 0x32
 8007318:	f883 24be 	strb.w	r2, [r3, #1214]	; 0x4be
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	227a      	movs	r2, #122	; 0x7a
 8007320:	f883 24bf 	strb.w	r2, [r3, #1215]	; 0x4bf
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2248      	movs	r2, #72	; 0x48
 8007328:	f883 24c0 	strb.w	r2, [r3, #1216]	; 0x4c0
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2248      	movs	r2, #72	; 0x48
 8007330:	f883 24c1 	strb.w	r2, [r3, #1217]	; 0x4c1
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	227a      	movs	r2, #122	; 0x7a
 8007338:	f883 24c2 	strb.w	r2, [r3, #1218]	; 0x4c2
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2232      	movs	r2, #50	; 0x32
 8007340:	f883 24c3 	strb.w	r2, [r3, #1219]	; 0x4c3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2232      	movs	r2, #50	; 0x32
 8007348:	f883 24c6 	strb.w	r2, [r3, #1222]	; 0x4c6
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	227a      	movs	r2, #122	; 0x7a
 8007350:	f883 24c7 	strb.w	r2, [r3, #1223]	; 0x4c7
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	224a      	movs	r2, #74	; 0x4a
 8007358:	f883 24c8 	strb.w	r2, [r3, #1224]	; 0x4c8
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2248      	movs	r2, #72	; 0x48
 8007360:	f883 24c9 	strb.w	r2, [r3, #1225]	; 0x4c9
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2278      	movs	r2, #120	; 0x78
 8007368:	f883 24ca 	strb.w	r2, [r3, #1226]	; 0x4ca
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2230      	movs	r2, #48	; 0x30
 8007370:	f883 24cb 	strb.w	r2, [r3, #1227]	; 0x4cb
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	223a      	movs	r2, #58	; 0x3a
 8007378:	f883 24ce 	strb.w	r2, [r3, #1230]	; 0x4ce
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	227b      	movs	r2, #123	; 0x7b
 8007380:	f883 24cf 	strb.w	r2, [r3, #1231]	; 0x4cf
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2241      	movs	r2, #65	; 0x41
 8007388:	f883 24d0 	strb.w	r2, [r3, #1232]	; 0x4d0
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2241      	movs	r2, #65	; 0x41
 8007390:	f883 24d1 	strb.w	r2, [r3, #1233]	; 0x4d1
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	227b      	movs	r2, #123	; 0x7b
 8007398:	f883 24d2 	strb.w	r2, [r3, #1234]	; 0x4d2
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	227a      	movs	r2, #122	; 0x7a
 80073a0:	f883 24d3 	strb.w	r2, [r3, #1235]	; 0x4d3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2240      	movs	r2, #64	; 0x40
 80073a8:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	223a      	movs	r2, #58	; 0x3a
 80073b0:	f883 24d6 	strb.w	r2, [r3, #1238]	; 0x4d6
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	227a      	movs	r2, #122	; 0x7a
 80073b8:	f883 24d7 	strb.w	r2, [r3, #1239]	; 0x4d7
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2242      	movs	r2, #66	; 0x42
 80073c0:	f883 24d8 	strb.w	r2, [r3, #1240]	; 0x4d8
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2240      	movs	r2, #64	; 0x40
 80073c8:	f883 24d9 	strb.w	r2, [r3, #1241]	; 0x4d9
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2278      	movs	r2, #120	; 0x78
 80073d0:	f883 24da 	strb.w	r2, [r3, #1242]	; 0x4da
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2278      	movs	r2, #120	; 0x78
 80073d8:	f883 24db 	strb.w	r2, [r3, #1243]	; 0x4db
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2240      	movs	r2, #64	; 0x40
 80073e0:	f883 24dc 	strb.w	r2, [r3, #1244]	; 0x4dc
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	229a      	movs	r2, #154	; 0x9a
 80073e8:	f883 24de 	strb.w	r2, [r3, #1246]	; 0x4de
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	22ba      	movs	r2, #186	; 0xba
 80073f0:	f883 24df 	strb.w	r2, [r3, #1247]	; 0x4df
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	22a0      	movs	r2, #160	; 0xa0
 80073f8:	f883 24e0 	strb.w	r2, [r3, #1248]	; 0x4e0
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	22a0      	movs	r2, #160	; 0xa0
 8007400:	f883 24e1 	strb.w	r2, [r3, #1249]	; 0x4e1
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	22fa      	movs	r2, #250	; 0xfa
 8007408:	f883 24e2 	strb.w	r2, [r3, #1250]	; 0x4e2
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	227a      	movs	r2, #122	; 0x7a
 8007410:	f883 24e3 	strb.w	r2, [r3, #1251]	; 0x4e3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 24e6 	strb.w	r2, [r3, #1254]	; 0x4e6
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2219      	movs	r2, #25
 8007420:	f883 24e7 	strb.w	r2, [r3, #1255]	; 0x4e7
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	223c      	movs	r2, #60	; 0x3c
 8007428:	f883 24e8 	strb.w	r2, [r3, #1256]	; 0x4e8
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2266      	movs	r2, #102	; 0x66
 8007430:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2266      	movs	r2, #102	; 0x66
 8007438:	f883 24ea 	strb.w	r2, [r3, #1258]	; 0x4ea
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	223c      	movs	r2, #60	; 0x3c
 8007440:	f883 24eb 	strb.w	r2, [r3, #1259]	; 0x4eb
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2219      	movs	r2, #25
 8007448:	f883 24ec 	strb.w	r2, [r3, #1260]	; 0x4ec
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 24ed 	strb.w	r2, [r3, #1261]	; 0x4ed
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	223d      	movs	r2, #61	; 0x3d
 8007458:	f883 24ee 	strb.w	r2, [r3, #1262]	; 0x4ee
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	227d      	movs	r2, #125	; 0x7d
 8007460:	f883 24ef 	strb.w	r2, [r3, #1263]	; 0x4ef
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2240      	movs	r2, #64	; 0x40
 8007468:	f883 24f0 	strb.w	r2, [r3, #1264]	; 0x4f0
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2240      	movs	r2, #64	; 0x40
 8007470:	f883 24f1 	strb.w	r2, [r3, #1265]	; 0x4f1
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	227d      	movs	r2, #125	; 0x7d
 8007478:	f883 24f2 	strb.w	r2, [r3, #1266]	; 0x4f2
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	223d      	movs	r2, #61	; 0x3d
 8007480:	f883 24f3 	strb.w	r2, [r3, #1267]	; 0x4f3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2218      	movs	r2, #24
 8007488:	f883 24f6 	strb.w	r2, [r3, #1270]	; 0x4f6
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	223c      	movs	r2, #60	; 0x3c
 8007490:	f883 24f7 	strb.w	r2, [r3, #1271]	; 0x4f7
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2224      	movs	r2, #36	; 0x24
 8007498:	f883 24f8 	strb.w	r2, [r3, #1272]	; 0x4f8
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	22e7      	movs	r2, #231	; 0xe7
 80074a0:	f883 24f9 	strb.w	r2, [r3, #1273]	; 0x4f9
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	22e7      	movs	r2, #231	; 0xe7
 80074a8:	f883 24fa 	strb.w	r2, [r3, #1274]	; 0x4fa
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2224      	movs	r2, #36	; 0x24
 80074b0:	f883 24fb 	strb.w	r2, [r3, #1275]	; 0x4fb
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2224      	movs	r2, #36	; 0x24
 80074b8:	f883 24fc 	strb.w	r2, [r3, #1276]	; 0x4fc
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2268      	movs	r2, #104	; 0x68
 80074c0:	f883 24fe 	strb.w	r2, [r3, #1278]	; 0x4fe
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	227e      	movs	r2, #126	; 0x7e
 80074c8:	f883 24ff 	strb.w	r2, [r3, #1279]	; 0x4ff
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	227f      	movs	r2, #127	; 0x7f
 80074d0:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2249      	movs	r2, #73	; 0x49
 80074d8:	f883 2501 	strb.w	r2, [r3, #1281]	; 0x501
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2243      	movs	r2, #67	; 0x43
 80074e0:	f883 2502 	strb.w	r2, [r3, #1282]	; 0x502
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2266      	movs	r2, #102	; 0x66
 80074e8:	f883 2503 	strb.w	r2, [r3, #1283]	; 0x503
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2220      	movs	r2, #32
 80074f0:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	222b      	movs	r2, #43	; 0x2b
 80074f8:	f883 2506 	strb.w	r2, [r3, #1286]	; 0x506
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	222f      	movs	r2, #47	; 0x2f
 8007500:	f883 2507 	strb.w	r2, [r3, #1287]	; 0x507
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	22fc      	movs	r2, #252	; 0xfc
 8007508:	f883 2508 	strb.w	r2, [r3, #1288]	; 0x508
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	22fc      	movs	r2, #252	; 0xfc
 8007510:	f883 2509 	strb.w	r2, [r3, #1289]	; 0x509
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	222f      	movs	r2, #47	; 0x2f
 8007518:	f883 250a 	strb.w	r2, [r3, #1290]	; 0x50a
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	222b      	movs	r2, #43	; 0x2b
 8007520:	f883 250b 	strb.w	r2, [r3, #1291]	; 0x50b
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	22ff      	movs	r2, #255	; 0xff
 8007528:	f883 250e 	strb.w	r2, [r3, #1294]	; 0x50e
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	22ff      	movs	r2, #255	; 0xff
 8007530:	f883 250f 	strb.w	r2, [r3, #1295]	; 0x50f
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2209      	movs	r2, #9
 8007538:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2209      	movs	r2, #9
 8007540:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	222f      	movs	r2, #47	; 0x2f
 8007548:	f883 2512 	strb.w	r2, [r3, #1298]	; 0x512
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	22f6      	movs	r2, #246	; 0xf6
 8007550:	f883 2513 	strb.w	r2, [r3, #1299]	; 0x513
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	22f8      	movs	r2, #248	; 0xf8
 8007558:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	22a0      	movs	r2, #160	; 0xa0
 8007560:	f883 2515 	strb.w	r2, [r3, #1301]	; 0x515
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2240      	movs	r2, #64	; 0x40
 8007568:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	22c0      	movs	r2, #192	; 0xc0
 8007570:	f883 2517 	strb.w	r2, [r3, #1303]	; 0x517
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2288      	movs	r2, #136	; 0x88
 8007578:	f883 2518 	strb.w	r2, [r3, #1304]	; 0x518
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	22fe      	movs	r2, #254	; 0xfe
 8007580:	f883 2519 	strb.w	r2, [r3, #1305]	; 0x519
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	227f      	movs	r2, #127	; 0x7f
 8007588:	f883 251a 	strb.w	r2, [r3, #1306]	; 0x51a
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2209      	movs	r2, #9
 8007590:	f883 251b 	strb.w	r2, [r3, #1307]	; 0x51b
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2203      	movs	r2, #3
 8007598:	f883 251c 	strb.w	r2, [r3, #1308]	; 0x51c
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2202      	movs	r2, #2
 80075a0:	f883 251d 	strb.w	r2, [r3, #1309]	; 0x51d
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2220      	movs	r2, #32
 80075a8:	f883 251e 	strb.w	r2, [r3, #1310]	; 0x51e
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2274      	movs	r2, #116	; 0x74
 80075b0:	f883 251f 	strb.w	r2, [r3, #1311]	; 0x51f
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2254      	movs	r2, #84	; 0x54
 80075b8:	f883 2520 	strb.w	r2, [r3, #1312]	; 0x520
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2255      	movs	r2, #85	; 0x55
 80075c0:	f883 2521 	strb.w	r2, [r3, #1313]	; 0x521
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	227d      	movs	r2, #125	; 0x7d
 80075c8:	f883 2522 	strb.w	r2, [r3, #1314]	; 0x522
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2279      	movs	r2, #121	; 0x79
 80075d0:	f883 2523 	strb.w	r2, [r3, #1315]	; 0x523
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2240      	movs	r2, #64	; 0x40
 80075d8:	f883 2524 	strb.w	r2, [r3, #1316]	; 0x524
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2244      	movs	r2, #68	; 0x44
 80075e0:	f883 2527 	strb.w	r2, [r3, #1319]	; 0x527
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	227d      	movs	r2, #125	; 0x7d
 80075e8:	f883 2528 	strb.w	r2, [r3, #1320]	; 0x528
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	227d      	movs	r2, #125	; 0x7d
 80075f0:	f883 2529 	strb.w	r2, [r3, #1321]	; 0x529
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2241      	movs	r2, #65	; 0x41
 80075f8:	f883 252a 	strb.w	r2, [r3, #1322]	; 0x52a
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2230      	movs	r2, #48	; 0x30
 8007600:	f883 252e 	strb.w	r2, [r3, #1326]	; 0x52e
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2278      	movs	r2, #120	; 0x78
 8007608:	f883 252f 	strb.w	r2, [r3, #1327]	; 0x52f
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2248      	movs	r2, #72	; 0x48
 8007610:	f883 2530 	strb.w	r2, [r3, #1328]	; 0x530
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	224a      	movs	r2, #74	; 0x4a
 8007618:	f883 2531 	strb.w	r2, [r3, #1329]	; 0x531
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	227a      	movs	r2, #122	; 0x7a
 8007620:	f883 2532 	strb.w	r2, [r3, #1330]	; 0x532
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2232      	movs	r2, #50	; 0x32
 8007628:	f883 2533 	strb.w	r2, [r3, #1331]	; 0x533
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2238      	movs	r2, #56	; 0x38
 8007630:	f883 2536 	strb.w	r2, [r3, #1334]	; 0x536
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2278      	movs	r2, #120	; 0x78
 8007638:	f883 2537 	strb.w	r2, [r3, #1335]	; 0x537
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2240      	movs	r2, #64	; 0x40
 8007640:	f883 2538 	strb.w	r2, [r3, #1336]	; 0x538
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2242      	movs	r2, #66	; 0x42
 8007648:	f883 2539 	strb.w	r2, [r3, #1337]	; 0x539
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	227a      	movs	r2, #122	; 0x7a
 8007650:	f883 253a 	strb.w	r2, [r3, #1338]	; 0x53a
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	227a      	movs	r2, #122	; 0x7a
 8007658:	f883 253b 	strb.w	r2, [r3, #1339]	; 0x53b
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2240      	movs	r2, #64	; 0x40
 8007660:	f883 253c 	strb.w	r2, [r3, #1340]	; 0x53c
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	227a      	movs	r2, #122	; 0x7a
 8007668:	f883 253e 	strb.w	r2, [r3, #1342]	; 0x53e
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	227a      	movs	r2, #122	; 0x7a
 8007670:	f883 253f 	strb.w	r2, [r3, #1343]	; 0x53f
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	220a      	movs	r2, #10
 8007678:	f883 2540 	strb.w	r2, [r3, #1344]	; 0x540
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	220a      	movs	r2, #10
 8007680:	f883 2541 	strb.w	r2, [r3, #1345]	; 0x541
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	227a      	movs	r2, #122	; 0x7a
 8007688:	f883 2542 	strb.w	r2, [r3, #1346]	; 0x542
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2270      	movs	r2, #112	; 0x70
 8007690:	f883 2543 	strb.w	r2, [r3, #1347]	; 0x543
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	227d      	movs	r2, #125	; 0x7d
 8007698:	f883 2546 	strb.w	r2, [r3, #1350]	; 0x546
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	227d      	movs	r2, #125	; 0x7d
 80076a0:	f883 2547 	strb.w	r2, [r3, #1351]	; 0x547
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2219      	movs	r2, #25
 80076a8:	f883 2548 	strb.w	r2, [r3, #1352]	; 0x548
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2231      	movs	r2, #49	; 0x31
 80076b0:	f883 2549 	strb.w	r2, [r3, #1353]	; 0x549
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	227d      	movs	r2, #125	; 0x7d
 80076b8:	f883 254a 	strb.w	r2, [r3, #1354]	; 0x54a
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	227d      	movs	r2, #125	; 0x7d
 80076c0:	f883 254b 	strb.w	r2, [r3, #1355]	; 0x54b
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2226      	movs	r2, #38	; 0x26
 80076c8:	f883 254f 	strb.w	r2, [r3, #1359]	; 0x54f
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	222f      	movs	r2, #47	; 0x2f
 80076d0:	f883 2550 	strb.w	r2, [r3, #1360]	; 0x550
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2229      	movs	r2, #41	; 0x29
 80076d8:	f883 2551 	strb.w	r2, [r3, #1361]	; 0x551
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	222f      	movs	r2, #47	; 0x2f
 80076e0:	f883 2552 	strb.w	r2, [r3, #1362]	; 0x552
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	222f      	movs	r2, #47	; 0x2f
 80076e8:	f883 2553 	strb.w	r2, [r3, #1363]	; 0x553
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2228      	movs	r2, #40	; 0x28
 80076f0:	f883 2554 	strb.w	r2, [r3, #1364]	; 0x554
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2226      	movs	r2, #38	; 0x26
 80076f8:	f883 2557 	strb.w	r2, [r3, #1367]	; 0x557
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	222f      	movs	r2, #47	; 0x2f
 8007700:	f883 2558 	strb.w	r2, [r3, #1368]	; 0x558
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2229      	movs	r2, #41	; 0x29
 8007708:	f883 2559 	strb.w	r2, [r3, #1369]	; 0x559
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	222f      	movs	r2, #47	; 0x2f
 8007710:	f883 255a 	strb.w	r2, [r3, #1370]	; 0x55a
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2226      	movs	r2, #38	; 0x26
 8007718:	f883 255b 	strb.w	r2, [r3, #1371]	; 0x55b
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2230      	movs	r2, #48	; 0x30
 8007720:	f883 255e 	strb.w	r2, [r3, #1374]	; 0x55e
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2278      	movs	r2, #120	; 0x78
 8007728:	f883 255f 	strb.w	r2, [r3, #1375]	; 0x55f
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	224d      	movs	r2, #77	; 0x4d
 8007730:	f883 2560 	strb.w	r2, [r3, #1376]	; 0x560
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2245      	movs	r2, #69	; 0x45
 8007738:	f883 2561 	strb.w	r2, [r3, #1377]	; 0x561
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2260      	movs	r2, #96	; 0x60
 8007740:	f883 2562 	strb.w	r2, [r3, #1378]	; 0x562
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2220      	movs	r2, #32
 8007748:	f883 2563 	strb.w	r2, [r3, #1379]	; 0x563
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2238      	movs	r2, #56	; 0x38
 8007750:	f883 2566 	strb.w	r2, [r3, #1382]	; 0x566
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2238      	movs	r2, #56	; 0x38
 8007758:	f883 2567 	strb.w	r2, [r3, #1383]	; 0x567
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2208      	movs	r2, #8
 8007760:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2208      	movs	r2, #8
 8007768:	f883 2569 	strb.w	r2, [r3, #1385]	; 0x569
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2208      	movs	r2, #8
 8007770:	f883 256a 	strb.w	r2, [r3, #1386]	; 0x56a
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2208      	movs	r2, #8
 8007778:	f883 256b 	strb.w	r2, [r3, #1387]	; 0x56b
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2208      	movs	r2, #8
 8007780:	f883 256e 	strb.w	r2, [r3, #1390]	; 0x56e
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2208      	movs	r2, #8
 8007788:	f883 256f 	strb.w	r2, [r3, #1391]	; 0x56f
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2208      	movs	r2, #8
 8007790:	f883 2570 	strb.w	r2, [r3, #1392]	; 0x570
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2208      	movs	r2, #8
 8007798:	f883 2571 	strb.w	r2, [r3, #1393]	; 0x571
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2238      	movs	r2, #56	; 0x38
 80077a0:	f883 2572 	strb.w	r2, [r3, #1394]	; 0x572
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2238      	movs	r2, #56	; 0x38
 80077a8:	f883 2573 	strb.w	r2, [r3, #1395]	; 0x573
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	224f      	movs	r2, #79	; 0x4f
 80077b0:	f883 2576 	strb.w	r2, [r3, #1398]	; 0x576
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	226f      	movs	r2, #111	; 0x6f
 80077b8:	f883 2577 	strb.w	r2, [r3, #1399]	; 0x577
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2230      	movs	r2, #48	; 0x30
 80077c0:	f883 2578 	strb.w	r2, [r3, #1400]	; 0x578
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2218      	movs	r2, #24
 80077c8:	f883 2579 	strb.w	r2, [r3, #1401]	; 0x579
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	22cc      	movs	r2, #204	; 0xcc
 80077d0:	f883 257a 	strb.w	r2, [r3, #1402]	; 0x57a
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	22ee      	movs	r2, #238	; 0xee
 80077d8:	f883 257b 	strb.w	r2, [r3, #1403]	; 0x57b
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	22bb      	movs	r2, #187	; 0xbb
 80077e0:	f883 257c 	strb.w	r2, [r3, #1404]	; 0x57c
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2291      	movs	r2, #145	; 0x91
 80077e8:	f883 257d 	strb.w	r2, [r3, #1405]	; 0x57d
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	224f      	movs	r2, #79	; 0x4f
 80077f0:	f883 257e 	strb.w	r2, [r3, #1406]	; 0x57e
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	226f      	movs	r2, #111	; 0x6f
 80077f8:	f883 257f 	strb.w	r2, [r3, #1407]	; 0x57f
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2230      	movs	r2, #48	; 0x30
 8007800:	f883 2580 	strb.w	r2, [r3, #1408]	; 0x580
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2218      	movs	r2, #24
 8007808:	f883 2581 	strb.w	r2, [r3, #1409]	; 0x581
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	226c      	movs	r2, #108	; 0x6c
 8007810:	f883 2582 	strb.w	r2, [r3, #1410]	; 0x582
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2276      	movs	r2, #118	; 0x76
 8007818:	f883 2583 	strb.w	r2, [r3, #1411]	; 0x583
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	22fb      	movs	r2, #251	; 0xfb
 8007820:	f883 2584 	strb.w	r2, [r3, #1412]	; 0x584
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	22f9      	movs	r2, #249	; 0xf9
 8007828:	f883 2585 	strb.w	r2, [r3, #1413]	; 0x585
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	227b      	movs	r2, #123	; 0x7b
 8007830:	f883 2589 	strb.w	r2, [r3, #1417]	; 0x589
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	227b      	movs	r2, #123	; 0x7b
 8007838:	f883 258a 	strb.w	r2, [r3, #1418]	; 0x58a
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2208      	movs	r2, #8
 8007840:	f883 258e 	strb.w	r2, [r3, #1422]	; 0x58e
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	221c      	movs	r2, #28
 8007848:	f883 258f 	strb.w	r2, [r3, #1423]	; 0x58f
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2236      	movs	r2, #54	; 0x36
 8007850:	f883 2590 	strb.w	r2, [r3, #1424]	; 0x590
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2222      	movs	r2, #34	; 0x22
 8007858:	f883 2591 	strb.w	r2, [r3, #1425]	; 0x591
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2208      	movs	r2, #8
 8007860:	f883 2592 	strb.w	r2, [r3, #1426]	; 0x592
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	221c      	movs	r2, #28
 8007868:	f883 2593 	strb.w	r2, [r3, #1427]	; 0x593
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2236      	movs	r2, #54	; 0x36
 8007870:	f883 2594 	strb.w	r2, [r3, #1428]	; 0x594
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2222      	movs	r2, #34	; 0x22
 8007878:	f883 2595 	strb.w	r2, [r3, #1429]	; 0x595
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2222      	movs	r2, #34	; 0x22
 8007880:	f883 2596 	strb.w	r2, [r3, #1430]	; 0x596
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2236      	movs	r2, #54	; 0x36
 8007888:	f883 2597 	strb.w	r2, [r3, #1431]	; 0x597
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	221c      	movs	r2, #28
 8007890:	f883 2598 	strb.w	r2, [r3, #1432]	; 0x598
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2208      	movs	r2, #8
 8007898:	f883 2599 	strb.w	r2, [r3, #1433]	; 0x599
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2222      	movs	r2, #34	; 0x22
 80078a0:	f883 259a 	strb.w	r2, [r3, #1434]	; 0x59a
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2236      	movs	r2, #54	; 0x36
 80078a8:	f883 259b 	strb.w	r2, [r3, #1435]	; 0x59b
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	221c      	movs	r2, #28
 80078b0:	f883 259c 	strb.w	r2, [r3, #1436]	; 0x59c
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2208      	movs	r2, #8
 80078b8:	f883 259d 	strb.w	r2, [r3, #1437]	; 0x59d
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	22aa      	movs	r2, #170	; 0xaa
 80078c0:	f883 259e 	strb.w	r2, [r3, #1438]	; 0x59e
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2255      	movs	r2, #85	; 0x55
 80078c8:	f883 25a0 	strb.w	r2, [r3, #1440]	; 0x5a0
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	22aa      	movs	r2, #170	; 0xaa
 80078d0:	f883 25a2 	strb.w	r2, [r3, #1442]	; 0x5a2
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2255      	movs	r2, #85	; 0x55
 80078d8:	f883 25a4 	strb.w	r2, [r3, #1444]	; 0x5a4
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	22aa      	movs	r2, #170	; 0xaa
 80078e0:	f883 25a6 	strb.w	r2, [r3, #1446]	; 0x5a6
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2255      	movs	r2, #85	; 0x55
 80078e8:	f883 25a7 	strb.w	r2, [r3, #1447]	; 0x5a7
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	22aa      	movs	r2, #170	; 0xaa
 80078f0:	f883 25a8 	strb.w	r2, [r3, #1448]	; 0x5a8
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2255      	movs	r2, #85	; 0x55
 80078f8:	f883 25a9 	strb.w	r2, [r3, #1449]	; 0x5a9
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	22aa      	movs	r2, #170	; 0xaa
 8007900:	f883 25aa 	strb.w	r2, [r3, #1450]	; 0x5aa
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2255      	movs	r2, #85	; 0x55
 8007908:	f883 25ab 	strb.w	r2, [r3, #1451]	; 0x5ab
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	22aa      	movs	r2, #170	; 0xaa
 8007910:	f883 25ac 	strb.w	r2, [r3, #1452]	; 0x5ac
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2255      	movs	r2, #85	; 0x55
 8007918:	f883 25ad 	strb.w	r2, [r3, #1453]	; 0x5ad
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	22dd      	movs	r2, #221	; 0xdd
 8007920:	f883 25ae 	strb.w	r2, [r3, #1454]	; 0x5ae
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	22ff      	movs	r2, #255	; 0xff
 8007928:	f883 25af 	strb.w	r2, [r3, #1455]	; 0x5af
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	22aa      	movs	r2, #170	; 0xaa
 8007930:	f883 25b0 	strb.w	r2, [r3, #1456]	; 0x5b0
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2277      	movs	r2, #119	; 0x77
 8007938:	f883 25b1 	strb.w	r2, [r3, #1457]	; 0x5b1
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	22dd      	movs	r2, #221	; 0xdd
 8007940:	f883 25b2 	strb.w	r2, [r3, #1458]	; 0x5b2
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	22aa      	movs	r2, #170	; 0xaa
 8007948:	f883 25b3 	strb.w	r2, [r3, #1459]	; 0x5b3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	22ff      	movs	r2, #255	; 0xff
 8007950:	f883 25b4 	strb.w	r2, [r3, #1460]	; 0x5b4
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2277      	movs	r2, #119	; 0x77
 8007958:	f883 25b5 	strb.w	r2, [r3, #1461]	; 0x5b5
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	22ff      	movs	r2, #255	; 0xff
 8007960:	f883 25b9 	strb.w	r2, [r3, #1465]	; 0x5b9
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	22ff      	movs	r2, #255	; 0xff
 8007968:	f883 25ba 	strb.w	r2, [r3, #1466]	; 0x5ba
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2210      	movs	r2, #16
 8007970:	f883 25be 	strb.w	r2, [r3, #1470]	; 0x5be
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2210      	movs	r2, #16
 8007978:	f883 25bf 	strb.w	r2, [r3, #1471]	; 0x5bf
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2210      	movs	r2, #16
 8007980:	f883 25c0 	strb.w	r2, [r3, #1472]	; 0x5c0
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	22ff      	movs	r2, #255	; 0xff
 8007988:	f883 25c1 	strb.w	r2, [r3, #1473]	; 0x5c1
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	22ff      	movs	r2, #255	; 0xff
 8007990:	f883 25c2 	strb.w	r2, [r3, #1474]	; 0x5c2
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2214      	movs	r2, #20
 8007998:	f883 25c6 	strb.w	r2, [r3, #1478]	; 0x5c6
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2214      	movs	r2, #20
 80079a0:	f883 25c7 	strb.w	r2, [r3, #1479]	; 0x5c7
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2214      	movs	r2, #20
 80079a8:	f883 25c8 	strb.w	r2, [r3, #1480]	; 0x5c8
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	22ff      	movs	r2, #255	; 0xff
 80079b0:	f883 25c9 	strb.w	r2, [r3, #1481]	; 0x5c9
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	22ff      	movs	r2, #255	; 0xff
 80079b8:	f883 25ca 	strb.w	r2, [r3, #1482]	; 0x5ca
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2210      	movs	r2, #16
 80079c0:	f883 25ce 	strb.w	r2, [r3, #1486]	; 0x5ce
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2210      	movs	r2, #16
 80079c8:	f883 25cf 	strb.w	r2, [r3, #1487]	; 0x5cf
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	22ff      	movs	r2, #255	; 0xff
 80079d0:	f883 25d0 	strb.w	r2, [r3, #1488]	; 0x5d0
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	22ff      	movs	r2, #255	; 0xff
 80079d8:	f883 25d1 	strb.w	r2, [r3, #1489]	; 0x5d1
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	22ff      	movs	r2, #255	; 0xff
 80079e0:	f883 25d3 	strb.w	r2, [r3, #1491]	; 0x5d3
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	22ff      	movs	r2, #255	; 0xff
 80079e8:	f883 25d4 	strb.w	r2, [r3, #1492]	; 0x5d4
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2210      	movs	r2, #16
 80079f0:	f883 25d6 	strb.w	r2, [r3, #1494]	; 0x5d6
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2210      	movs	r2, #16
 80079f8:	f883 25d7 	strb.w	r2, [r3, #1495]	; 0x5d7
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	22f0      	movs	r2, #240	; 0xf0
 8007a00:	f883 25d8 	strb.w	r2, [r3, #1496]	; 0x5d8
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	22f0      	movs	r2, #240	; 0xf0
 8007a08:	f883 25d9 	strb.w	r2, [r3, #1497]	; 0x5d9
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2210      	movs	r2, #16
 8007a10:	f883 25da 	strb.w	r2, [r3, #1498]	; 0x5da
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	22f0      	movs	r2, #240	; 0xf0
 8007a18:	f883 25db 	strb.w	r2, [r3, #1499]	; 0x5db
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	22f0      	movs	r2, #240	; 0xf0
 8007a20:	f883 25dc 	strb.w	r2, [r3, #1500]	; 0x5dc
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2214      	movs	r2, #20
 8007a28:	f883 25de 	strb.w	r2, [r3, #1502]	; 0x5de
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2214      	movs	r2, #20
 8007a30:	f883 25df 	strb.w	r2, [r3, #1503]	; 0x5df
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2214      	movs	r2, #20
 8007a38:	f883 25e0 	strb.w	r2, [r3, #1504]	; 0x5e0
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	22fc      	movs	r2, #252	; 0xfc
 8007a40:	f883 25e1 	strb.w	r2, [r3, #1505]	; 0x5e1
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	22fc      	movs	r2, #252	; 0xfc
 8007a48:	f883 25e2 	strb.w	r2, [r3, #1506]	; 0x5e2
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2214      	movs	r2, #20
 8007a50:	f883 25e6 	strb.w	r2, [r3, #1510]	; 0x5e6
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2214      	movs	r2, #20
 8007a58:	f883 25e7 	strb.w	r2, [r3, #1511]	; 0x5e7
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	22f7      	movs	r2, #247	; 0xf7
 8007a60:	f883 25e8 	strb.w	r2, [r3, #1512]	; 0x5e8
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	22f7      	movs	r2, #247	; 0xf7
 8007a68:	f883 25e9 	strb.w	r2, [r3, #1513]	; 0x5e9
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	22ff      	movs	r2, #255	; 0xff
 8007a70:	f883 25eb 	strb.w	r2, [r3, #1515]	; 0x5eb
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	22ff      	movs	r2, #255	; 0xff
 8007a78:	f883 25ec 	strb.w	r2, [r3, #1516]	; 0x5ec
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	22ff      	movs	r2, #255	; 0xff
 8007a80:	f883 25f0 	strb.w	r2, [r3, #1520]	; 0x5f0
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	22ff      	movs	r2, #255	; 0xff
 8007a88:	f883 25f1 	strb.w	r2, [r3, #1521]	; 0x5f1
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	22ff      	movs	r2, #255	; 0xff
 8007a90:	f883 25f3 	strb.w	r2, [r3, #1523]	; 0x5f3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	22ff      	movs	r2, #255	; 0xff
 8007a98:	f883 25f4 	strb.w	r2, [r3, #1524]	; 0x5f4
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2214      	movs	r2, #20
 8007aa0:	f883 25f6 	strb.w	r2, [r3, #1526]	; 0x5f6
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2214      	movs	r2, #20
 8007aa8:	f883 25f7 	strb.w	r2, [r3, #1527]	; 0x5f7
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	22f4      	movs	r2, #244	; 0xf4
 8007ab0:	f883 25f8 	strb.w	r2, [r3, #1528]	; 0x5f8
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	22f4      	movs	r2, #244	; 0xf4
 8007ab8:	f883 25f9 	strb.w	r2, [r3, #1529]	; 0x5f9
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2204      	movs	r2, #4
 8007ac0:	f883 25fa 	strb.w	r2, [r3, #1530]	; 0x5fa
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	22fc      	movs	r2, #252	; 0xfc
 8007ac8:	f883 25fb 	strb.w	r2, [r3, #1531]	; 0x5fb
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	22fc      	movs	r2, #252	; 0xfc
 8007ad0:	f883 25fc 	strb.w	r2, [r3, #1532]	; 0x5fc
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2214      	movs	r2, #20
 8007ad8:	f883 25fe 	strb.w	r2, [r3, #1534]	; 0x5fe
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2214      	movs	r2, #20
 8007ae0:	f883 25ff 	strb.w	r2, [r3, #1535]	; 0x5ff
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2217      	movs	r2, #23
 8007ae8:	f883 2600 	strb.w	r2, [r3, #1536]	; 0x600
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2217      	movs	r2, #23
 8007af0:	f883 2601 	strb.w	r2, [r3, #1537]	; 0x601
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2210      	movs	r2, #16
 8007af8:	f883 2602 	strb.w	r2, [r3, #1538]	; 0x602
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	221f      	movs	r2, #31
 8007b00:	f883 2603 	strb.w	r2, [r3, #1539]	; 0x603
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	221f      	movs	r2, #31
 8007b08:	f883 2604 	strb.w	r2, [r3, #1540]	; 0x604
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2210      	movs	r2, #16
 8007b10:	f883 2606 	strb.w	r2, [r3, #1542]	; 0x606
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2210      	movs	r2, #16
 8007b18:	f883 2607 	strb.w	r2, [r3, #1543]	; 0x607
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	221f      	movs	r2, #31
 8007b20:	f883 2608 	strb.w	r2, [r3, #1544]	; 0x608
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	221f      	movs	r2, #31
 8007b28:	f883 2609 	strb.w	r2, [r3, #1545]	; 0x609
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2210      	movs	r2, #16
 8007b30:	f883 260a 	strb.w	r2, [r3, #1546]	; 0x60a
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	221f      	movs	r2, #31
 8007b38:	f883 260b 	strb.w	r2, [r3, #1547]	; 0x60b
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	221f      	movs	r2, #31
 8007b40:	f883 260c 	strb.w	r2, [r3, #1548]	; 0x60c
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2214      	movs	r2, #20
 8007b48:	f883 260e 	strb.w	r2, [r3, #1550]	; 0x60e
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2214      	movs	r2, #20
 8007b50:	f883 260f 	strb.w	r2, [r3, #1551]	; 0x60f
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2214      	movs	r2, #20
 8007b58:	f883 2610 	strb.w	r2, [r3, #1552]	; 0x610
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	221f      	movs	r2, #31
 8007b60:	f883 2611 	strb.w	r2, [r3, #1553]	; 0x611
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	221f      	movs	r2, #31
 8007b68:	f883 2612 	strb.w	r2, [r3, #1554]	; 0x612
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2210      	movs	r2, #16
 8007b70:	f883 2616 	strb.w	r2, [r3, #1558]	; 0x616
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2210      	movs	r2, #16
 8007b78:	f883 2617 	strb.w	r2, [r3, #1559]	; 0x617
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2210      	movs	r2, #16
 8007b80:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	22f0      	movs	r2, #240	; 0xf0
 8007b88:	f883 2619 	strb.w	r2, [r3, #1561]	; 0x619
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	22f0      	movs	r2, #240	; 0xf0
 8007b90:	f883 261a 	strb.w	r2, [r3, #1562]	; 0x61a
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	221f      	movs	r2, #31
 8007b98:	f883 2621 	strb.w	r2, [r3, #1569]	; 0x621
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	221f      	movs	r2, #31
 8007ba0:	f883 2622 	strb.w	r2, [r3, #1570]	; 0x622
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2210      	movs	r2, #16
 8007ba8:	f883 2623 	strb.w	r2, [r3, #1571]	; 0x623
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2210      	movs	r2, #16
 8007bb0:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2210      	movs	r2, #16
 8007bb8:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2210      	movs	r2, #16
 8007bc0:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2210      	movs	r2, #16
 8007bc8:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2210      	movs	r2, #16
 8007bd0:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	221f      	movs	r2, #31
 8007bd8:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	221f      	movs	r2, #31
 8007be0:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2210      	movs	r2, #16
 8007be8:	f883 262b 	strb.w	r2, [r3, #1579]	; 0x62b
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2210      	movs	r2, #16
 8007bf0:	f883 262c 	strb.w	r2, [r3, #1580]	; 0x62c
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2210      	movs	r2, #16
 8007bf8:	f883 262d 	strb.w	r2, [r3, #1581]	; 0x62d
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2210      	movs	r2, #16
 8007c00:	f883 262e 	strb.w	r2, [r3, #1582]	; 0x62e
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2210      	movs	r2, #16
 8007c08:	f883 262f 	strb.w	r2, [r3, #1583]	; 0x62f
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2210      	movs	r2, #16
 8007c10:	f883 2630 	strb.w	r2, [r3, #1584]	; 0x630
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	22f0      	movs	r2, #240	; 0xf0
 8007c18:	f883 2631 	strb.w	r2, [r3, #1585]	; 0x631
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	22f0      	movs	r2, #240	; 0xf0
 8007c20:	f883 2632 	strb.w	r2, [r3, #1586]	; 0x632
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2210      	movs	r2, #16
 8007c28:	f883 2633 	strb.w	r2, [r3, #1587]	; 0x633
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2210      	movs	r2, #16
 8007c30:	f883 2634 	strb.w	r2, [r3, #1588]	; 0x634
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2210      	movs	r2, #16
 8007c38:	f883 2635 	strb.w	r2, [r3, #1589]	; 0x635
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	22ff      	movs	r2, #255	; 0xff
 8007c40:	f883 2639 	strb.w	r2, [r3, #1593]	; 0x639
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	22ff      	movs	r2, #255	; 0xff
 8007c48:	f883 263a 	strb.w	r2, [r3, #1594]	; 0x63a
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2210      	movs	r2, #16
 8007c50:	f883 263b 	strb.w	r2, [r3, #1595]	; 0x63b
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2210      	movs	r2, #16
 8007c58:	f883 263c 	strb.w	r2, [r3, #1596]	; 0x63c
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2210      	movs	r2, #16
 8007c60:	f883 263d 	strb.w	r2, [r3, #1597]	; 0x63d
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2210      	movs	r2, #16
 8007c68:	f883 263e 	strb.w	r2, [r3, #1598]	; 0x63e
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2210      	movs	r2, #16
 8007c70:	f883 263f 	strb.w	r2, [r3, #1599]	; 0x63f
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2210      	movs	r2, #16
 8007c78:	f883 2640 	strb.w	r2, [r3, #1600]	; 0x640
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2210      	movs	r2, #16
 8007c80:	f883 2641 	strb.w	r2, [r3, #1601]	; 0x641
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2210      	movs	r2, #16
 8007c88:	f883 2642 	strb.w	r2, [r3, #1602]	; 0x642
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2210      	movs	r2, #16
 8007c90:	f883 2643 	strb.w	r2, [r3, #1603]	; 0x643
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2210      	movs	r2, #16
 8007c98:	f883 2644 	strb.w	r2, [r3, #1604]	; 0x644
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2210      	movs	r2, #16
 8007ca0:	f883 2645 	strb.w	r2, [r3, #1605]	; 0x645
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2210      	movs	r2, #16
 8007ca8:	f883 2646 	strb.w	r2, [r3, #1606]	; 0x646
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2210      	movs	r2, #16
 8007cb0:	f883 2647 	strb.w	r2, [r3, #1607]	; 0x647
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2210      	movs	r2, #16
 8007cb8:	f883 2648 	strb.w	r2, [r3, #1608]	; 0x648
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	22ff      	movs	r2, #255	; 0xff
 8007cc0:	f883 2649 	strb.w	r2, [r3, #1609]	; 0x649
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	22ff      	movs	r2, #255	; 0xff
 8007cc8:	f883 264a 	strb.w	r2, [r3, #1610]	; 0x64a
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2210      	movs	r2, #16
 8007cd0:	f883 264b 	strb.w	r2, [r3, #1611]	; 0x64b
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2210      	movs	r2, #16
 8007cd8:	f883 264c 	strb.w	r2, [r3, #1612]	; 0x64c
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2210      	movs	r2, #16
 8007ce0:	f883 264d 	strb.w	r2, [r3, #1613]	; 0x64d
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	22ff      	movs	r2, #255	; 0xff
 8007ce8:	f883 2651 	strb.w	r2, [r3, #1617]	; 0x651
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	22ff      	movs	r2, #255	; 0xff
 8007cf0:	f883 2652 	strb.w	r2, [r3, #1618]	; 0x652
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2214      	movs	r2, #20
 8007cf8:	f883 2653 	strb.w	r2, [r3, #1619]	; 0x653
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2214      	movs	r2, #20
 8007d00:	f883 2654 	strb.w	r2, [r3, #1620]	; 0x654
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2214      	movs	r2, #20
 8007d08:	f883 2655 	strb.w	r2, [r3, #1621]	; 0x655
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	22ff      	movs	r2, #255	; 0xff
 8007d10:	f883 2658 	strb.w	r2, [r3, #1624]	; 0x658
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	22ff      	movs	r2, #255	; 0xff
 8007d18:	f883 2659 	strb.w	r2, [r3, #1625]	; 0x659
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	22ff      	movs	r2, #255	; 0xff
 8007d20:	f883 265b 	strb.w	r2, [r3, #1627]	; 0x65b
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	22ff      	movs	r2, #255	; 0xff
 8007d28:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2210      	movs	r2, #16
 8007d30:	f883 265d 	strb.w	r2, [r3, #1629]	; 0x65d
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	221f      	movs	r2, #31
 8007d38:	f883 2660 	strb.w	r2, [r3, #1632]	; 0x660
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	221f      	movs	r2, #31
 8007d40:	f883 2661 	strb.w	r2, [r3, #1633]	; 0x661
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2210      	movs	r2, #16
 8007d48:	f883 2662 	strb.w	r2, [r3, #1634]	; 0x662
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2217      	movs	r2, #23
 8007d50:	f883 2663 	strb.w	r2, [r3, #1635]	; 0x663
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2217      	movs	r2, #23
 8007d58:	f883 2664 	strb.w	r2, [r3, #1636]	; 0x664
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2214      	movs	r2, #20
 8007d60:	f883 2665 	strb.w	r2, [r3, #1637]	; 0x665
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	22fc      	movs	r2, #252	; 0xfc
 8007d68:	f883 2668 	strb.w	r2, [r3, #1640]	; 0x668
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	22fc      	movs	r2, #252	; 0xfc
 8007d70:	f883 2669 	strb.w	r2, [r3, #1641]	; 0x669
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2204      	movs	r2, #4
 8007d78:	f883 266a 	strb.w	r2, [r3, #1642]	; 0x66a
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	22f4      	movs	r2, #244	; 0xf4
 8007d80:	f883 266b 	strb.w	r2, [r3, #1643]	; 0x66b
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	22f4      	movs	r2, #244	; 0xf4
 8007d88:	f883 266c 	strb.w	r2, [r3, #1644]	; 0x66c
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2214      	movs	r2, #20
 8007d90:	f883 266d 	strb.w	r2, [r3, #1645]	; 0x66d
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2214      	movs	r2, #20
 8007d98:	f883 266e 	strb.w	r2, [r3, #1646]	; 0x66e
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2214      	movs	r2, #20
 8007da0:	f883 266f 	strb.w	r2, [r3, #1647]	; 0x66f
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2217      	movs	r2, #23
 8007da8:	f883 2670 	strb.w	r2, [r3, #1648]	; 0x670
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2217      	movs	r2, #23
 8007db0:	f883 2671 	strb.w	r2, [r3, #1649]	; 0x671
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2210      	movs	r2, #16
 8007db8:	f883 2672 	strb.w	r2, [r3, #1650]	; 0x672
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2217      	movs	r2, #23
 8007dc0:	f883 2673 	strb.w	r2, [r3, #1651]	; 0x673
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2217      	movs	r2, #23
 8007dc8:	f883 2674 	strb.w	r2, [r3, #1652]	; 0x674
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2214      	movs	r2, #20
 8007dd0:	f883 2675 	strb.w	r2, [r3, #1653]	; 0x675
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2214      	movs	r2, #20
 8007dd8:	f883 2676 	strb.w	r2, [r3, #1654]	; 0x676
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2214      	movs	r2, #20
 8007de0:	f883 2677 	strb.w	r2, [r3, #1655]	; 0x677
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	22f4      	movs	r2, #244	; 0xf4
 8007de8:	f883 2678 	strb.w	r2, [r3, #1656]	; 0x678
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	22f4      	movs	r2, #244	; 0xf4
 8007df0:	f883 2679 	strb.w	r2, [r3, #1657]	; 0x679
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2204      	movs	r2, #4
 8007df8:	f883 267a 	strb.w	r2, [r3, #1658]	; 0x67a
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	22f4      	movs	r2, #244	; 0xf4
 8007e00:	f883 267b 	strb.w	r2, [r3, #1659]	; 0x67b
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	22f4      	movs	r2, #244	; 0xf4
 8007e08:	f883 267c 	strb.w	r2, [r3, #1660]	; 0x67c
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2214      	movs	r2, #20
 8007e10:	f883 267d 	strb.w	r2, [r3, #1661]	; 0x67d
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	22ff      	movs	r2, #255	; 0xff
 8007e18:	f883 2680 	strb.w	r2, [r3, #1664]	; 0x680
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	22ff      	movs	r2, #255	; 0xff
 8007e20:	f883 2681 	strb.w	r2, [r3, #1665]	; 0x681
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	22f7      	movs	r2, #247	; 0xf7
 8007e28:	f883 2683 	strb.w	r2, [r3, #1667]	; 0x683
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	22f7      	movs	r2, #247	; 0xf7
 8007e30:	f883 2684 	strb.w	r2, [r3, #1668]	; 0x684
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2214      	movs	r2, #20
 8007e38:	f883 2685 	strb.w	r2, [r3, #1669]	; 0x685
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2214      	movs	r2, #20
 8007e40:	f883 2686 	strb.w	r2, [r3, #1670]	; 0x686
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2214      	movs	r2, #20
 8007e48:	f883 2687 	strb.w	r2, [r3, #1671]	; 0x687
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2214      	movs	r2, #20
 8007e50:	f883 2688 	strb.w	r2, [r3, #1672]	; 0x688
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2214      	movs	r2, #20
 8007e58:	f883 2689 	strb.w	r2, [r3, #1673]	; 0x689
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2214      	movs	r2, #20
 8007e60:	f883 268a 	strb.w	r2, [r3, #1674]	; 0x68a
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2214      	movs	r2, #20
 8007e68:	f883 268b 	strb.w	r2, [r3, #1675]	; 0x68b
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2214      	movs	r2, #20
 8007e70:	f883 268c 	strb.w	r2, [r3, #1676]	; 0x68c
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2214      	movs	r2, #20
 8007e78:	f883 268d 	strb.w	r2, [r3, #1677]	; 0x68d
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2214      	movs	r2, #20
 8007e80:	f883 268e 	strb.w	r2, [r3, #1678]	; 0x68e
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2214      	movs	r2, #20
 8007e88:	f883 268f 	strb.w	r2, [r3, #1679]	; 0x68f
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	22f7      	movs	r2, #247	; 0xf7
 8007e90:	f883 2690 	strb.w	r2, [r3, #1680]	; 0x690
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	22f7      	movs	r2, #247	; 0xf7
 8007e98:	f883 2691 	strb.w	r2, [r3, #1681]	; 0x691
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	22f7      	movs	r2, #247	; 0xf7
 8007ea0:	f883 2693 	strb.w	r2, [r3, #1683]	; 0x693
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	22f7      	movs	r2, #247	; 0xf7
 8007ea8:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2214      	movs	r2, #20
 8007eb0:	f883 2695 	strb.w	r2, [r3, #1685]	; 0x695
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2214      	movs	r2, #20
 8007eb8:	f883 2696 	strb.w	r2, [r3, #1686]	; 0x696
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2214      	movs	r2, #20
 8007ec0:	f883 2697 	strb.w	r2, [r3, #1687]	; 0x697
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2214      	movs	r2, #20
 8007ec8:	f883 2698 	strb.w	r2, [r3, #1688]	; 0x698
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2217      	movs	r2, #23
 8007ed0:	f883 2699 	strb.w	r2, [r3, #1689]	; 0x699
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2217      	movs	r2, #23
 8007ed8:	f883 269a 	strb.w	r2, [r3, #1690]	; 0x69a
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2214      	movs	r2, #20
 8007ee0:	f883 269b 	strb.w	r2, [r3, #1691]	; 0x69b
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2214      	movs	r2, #20
 8007ee8:	f883 269c 	strb.w	r2, [r3, #1692]	; 0x69c
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2214      	movs	r2, #20
 8007ef0:	f883 269d 	strb.w	r2, [r3, #1693]	; 0x69d
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2210      	movs	r2, #16
 8007ef8:	f883 269e 	strb.w	r2, [r3, #1694]	; 0x69e
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2210      	movs	r2, #16
 8007f00:	f883 269f 	strb.w	r2, [r3, #1695]	; 0x69f
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	221f      	movs	r2, #31
 8007f08:	f883 26a0 	strb.w	r2, [r3, #1696]	; 0x6a0
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	221f      	movs	r2, #31
 8007f10:	f883 26a1 	strb.w	r2, [r3, #1697]	; 0x6a1
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2210      	movs	r2, #16
 8007f18:	f883 26a2 	strb.w	r2, [r3, #1698]	; 0x6a2
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	221f      	movs	r2, #31
 8007f20:	f883 26a3 	strb.w	r2, [r3, #1699]	; 0x6a3
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	221f      	movs	r2, #31
 8007f28:	f883 26a4 	strb.w	r2, [r3, #1700]	; 0x6a4
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2210      	movs	r2, #16
 8007f30:	f883 26a5 	strb.w	r2, [r3, #1701]	; 0x6a5
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2214      	movs	r2, #20
 8007f38:	f883 26a6 	strb.w	r2, [r3, #1702]	; 0x6a6
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2214      	movs	r2, #20
 8007f40:	f883 26a7 	strb.w	r2, [r3, #1703]	; 0x6a7
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2214      	movs	r2, #20
 8007f48:	f883 26a8 	strb.w	r2, [r3, #1704]	; 0x6a8
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	22f4      	movs	r2, #244	; 0xf4
 8007f50:	f883 26a9 	strb.w	r2, [r3, #1705]	; 0x6a9
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	22f4      	movs	r2, #244	; 0xf4
 8007f58:	f883 26aa 	strb.w	r2, [r3, #1706]	; 0x6aa
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2214      	movs	r2, #20
 8007f60:	f883 26ab 	strb.w	r2, [r3, #1707]	; 0x6ab
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2214      	movs	r2, #20
 8007f68:	f883 26ac 	strb.w	r2, [r3, #1708]	; 0x6ac
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2214      	movs	r2, #20
 8007f70:	f883 26ad 	strb.w	r2, [r3, #1709]	; 0x6ad
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2210      	movs	r2, #16
 8007f78:	f883 26ae 	strb.w	r2, [r3, #1710]	; 0x6ae
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2210      	movs	r2, #16
 8007f80:	f883 26af 	strb.w	r2, [r3, #1711]	; 0x6af
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	22f0      	movs	r2, #240	; 0xf0
 8007f88:	f883 26b0 	strb.w	r2, [r3, #1712]	; 0x6b0
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	22f0      	movs	r2, #240	; 0xf0
 8007f90:	f883 26b1 	strb.w	r2, [r3, #1713]	; 0x6b1
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2210      	movs	r2, #16
 8007f98:	f883 26b2 	strb.w	r2, [r3, #1714]	; 0x6b2
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	22f0      	movs	r2, #240	; 0xf0
 8007fa0:	f883 26b3 	strb.w	r2, [r3, #1715]	; 0x6b3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	22f0      	movs	r2, #240	; 0xf0
 8007fa8:	f883 26b4 	strb.w	r2, [r3, #1716]	; 0x6b4
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2210      	movs	r2, #16
 8007fb0:	f883 26b5 	strb.w	r2, [r3, #1717]	; 0x6b5
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	221f      	movs	r2, #31
 8007fb8:	f883 26b8 	strb.w	r2, [r3, #1720]	; 0x6b8
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	221f      	movs	r2, #31
 8007fc0:	f883 26b9 	strb.w	r2, [r3, #1721]	; 0x6b9
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2210      	movs	r2, #16
 8007fc8:	f883 26ba 	strb.w	r2, [r3, #1722]	; 0x6ba
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	221f      	movs	r2, #31
 8007fd0:	f883 26bb 	strb.w	r2, [r3, #1723]	; 0x6bb
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	221f      	movs	r2, #31
 8007fd8:	f883 26bc 	strb.w	r2, [r3, #1724]	; 0x6bc
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2210      	movs	r2, #16
 8007fe0:	f883 26bd 	strb.w	r2, [r3, #1725]	; 0x6bd
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	221f      	movs	r2, #31
 8007fe8:	f883 26c1 	strb.w	r2, [r3, #1729]	; 0x6c1
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	221f      	movs	r2, #31
 8007ff0:	f883 26c2 	strb.w	r2, [r3, #1730]	; 0x6c2
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2214      	movs	r2, #20
 8007ff8:	f883 26c3 	strb.w	r2, [r3, #1731]	; 0x6c3
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2214      	movs	r2, #20
 8008000:	f883 26c4 	strb.w	r2, [r3, #1732]	; 0x6c4
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2214      	movs	r2, #20
 8008008:	f883 26c5 	strb.w	r2, [r3, #1733]	; 0x6c5
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	22fc      	movs	r2, #252	; 0xfc
 8008010:	f883 26c9 	strb.w	r2, [r3, #1737]	; 0x6c9
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	22fc      	movs	r2, #252	; 0xfc
 8008018:	f883 26ca 	strb.w	r2, [r3, #1738]	; 0x6ca
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2214      	movs	r2, #20
 8008020:	f883 26cb 	strb.w	r2, [r3, #1739]	; 0x6cb
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2214      	movs	r2, #20
 8008028:	f883 26cc 	strb.w	r2, [r3, #1740]	; 0x6cc
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2214      	movs	r2, #20
 8008030:	f883 26cd 	strb.w	r2, [r3, #1741]	; 0x6cd
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	22f0      	movs	r2, #240	; 0xf0
 8008038:	f883 26d0 	strb.w	r2, [r3, #1744]	; 0x6d0
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	22f0      	movs	r2, #240	; 0xf0
 8008040:	f883 26d1 	strb.w	r2, [r3, #1745]	; 0x6d1
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2210      	movs	r2, #16
 8008048:	f883 26d2 	strb.w	r2, [r3, #1746]	; 0x6d2
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	22f0      	movs	r2, #240	; 0xf0
 8008050:	f883 26d3 	strb.w	r2, [r3, #1747]	; 0x6d3
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	22f0      	movs	r2, #240	; 0xf0
 8008058:	f883 26d4 	strb.w	r2, [r3, #1748]	; 0x6d4
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2210      	movs	r2, #16
 8008060:	f883 26d5 	strb.w	r2, [r3, #1749]	; 0x6d5
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2210      	movs	r2, #16
 8008068:	f883 26d6 	strb.w	r2, [r3, #1750]	; 0x6d6
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2210      	movs	r2, #16
 8008070:	f883 26d7 	strb.w	r2, [r3, #1751]	; 0x6d7
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	22ff      	movs	r2, #255	; 0xff
 8008078:	f883 26d8 	strb.w	r2, [r3, #1752]	; 0x6d8
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	22ff      	movs	r2, #255	; 0xff
 8008080:	f883 26d9 	strb.w	r2, [r3, #1753]	; 0x6d9
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2210      	movs	r2, #16
 8008088:	f883 26da 	strb.w	r2, [r3, #1754]	; 0x6da
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	22ff      	movs	r2, #255	; 0xff
 8008090:	f883 26db 	strb.w	r2, [r3, #1755]	; 0x6db
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	22ff      	movs	r2, #255	; 0xff
 8008098:	f883 26dc 	strb.w	r2, [r3, #1756]	; 0x6dc
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2210      	movs	r2, #16
 80080a0:	f883 26dd 	strb.w	r2, [r3, #1757]	; 0x6dd
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2214      	movs	r2, #20
 80080a8:	f883 26de 	strb.w	r2, [r3, #1758]	; 0x6de
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2214      	movs	r2, #20
 80080b0:	f883 26df 	strb.w	r2, [r3, #1759]	; 0x6df
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2214      	movs	r2, #20
 80080b8:	f883 26e0 	strb.w	r2, [r3, #1760]	; 0x6e0
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	22ff      	movs	r2, #255	; 0xff
 80080c0:	f883 26e1 	strb.w	r2, [r3, #1761]	; 0x6e1
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	22ff      	movs	r2, #255	; 0xff
 80080c8:	f883 26e2 	strb.w	r2, [r3, #1762]	; 0x6e2
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2214      	movs	r2, #20
 80080d0:	f883 26e3 	strb.w	r2, [r3, #1763]	; 0x6e3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2214      	movs	r2, #20
 80080d8:	f883 26e4 	strb.w	r2, [r3, #1764]	; 0x6e4
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2214      	movs	r2, #20
 80080e0:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2210      	movs	r2, #16
 80080e8:	f883 26e6 	strb.w	r2, [r3, #1766]	; 0x6e6
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2210      	movs	r2, #16
 80080f0:	f883 26e7 	strb.w	r2, [r3, #1767]	; 0x6e7
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2210      	movs	r2, #16
 80080f8:	f883 26e8 	strb.w	r2, [r3, #1768]	; 0x6e8
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	221f      	movs	r2, #31
 8008100:	f883 26e9 	strb.w	r2, [r3, #1769]	; 0x6e9
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	221f      	movs	r2, #31
 8008108:	f883 26ea 	strb.w	r2, [r3, #1770]	; 0x6ea
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	22f0      	movs	r2, #240	; 0xf0
 8008110:	f883 26f1 	strb.w	r2, [r3, #1777]	; 0x6f1
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	22f0      	movs	r2, #240	; 0xf0
 8008118:	f883 26f2 	strb.w	r2, [r3, #1778]	; 0x6f2
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2210      	movs	r2, #16
 8008120:	f883 26f3 	strb.w	r2, [r3, #1779]	; 0x6f3
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2210      	movs	r2, #16
 8008128:	f883 26f4 	strb.w	r2, [r3, #1780]	; 0x6f4
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2210      	movs	r2, #16
 8008130:	f883 26f5 	strb.w	r2, [r3, #1781]	; 0x6f5
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	22ff      	movs	r2, #255	; 0xff
 8008138:	f883 26f6 	strb.w	r2, [r3, #1782]	; 0x6f6
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	22ff      	movs	r2, #255	; 0xff
 8008140:	f883 26f7 	strb.w	r2, [r3, #1783]	; 0x6f7
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	22ff      	movs	r2, #255	; 0xff
 8008148:	f883 26f8 	strb.w	r2, [r3, #1784]	; 0x6f8
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	22ff      	movs	r2, #255	; 0xff
 8008150:	f883 26f9 	strb.w	r2, [r3, #1785]	; 0x6f9
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	22ff      	movs	r2, #255	; 0xff
 8008158:	f883 26fa 	strb.w	r2, [r3, #1786]	; 0x6fa
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	22ff      	movs	r2, #255	; 0xff
 8008160:	f883 26fb 	strb.w	r2, [r3, #1787]	; 0x6fb
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	22ff      	movs	r2, #255	; 0xff
 8008168:	f883 26fc 	strb.w	r2, [r3, #1788]	; 0x6fc
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	22ff      	movs	r2, #255	; 0xff
 8008170:	f883 26fd 	strb.w	r2, [r3, #1789]	; 0x6fd
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	22f0      	movs	r2, #240	; 0xf0
 8008178:	f883 26fe 	strb.w	r2, [r3, #1790]	; 0x6fe
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	22f0      	movs	r2, #240	; 0xf0
 8008180:	f883 26ff 	strb.w	r2, [r3, #1791]	; 0x6ff
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	22f0      	movs	r2, #240	; 0xf0
 8008188:	f883 2700 	strb.w	r2, [r3, #1792]	; 0x700
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	22f0      	movs	r2, #240	; 0xf0
 8008190:	f883 2701 	strb.w	r2, [r3, #1793]	; 0x701
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	22f0      	movs	r2, #240	; 0xf0
 8008198:	f883 2702 	strb.w	r2, [r3, #1794]	; 0x702
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	22f0      	movs	r2, #240	; 0xf0
 80081a0:	f883 2703 	strb.w	r2, [r3, #1795]	; 0x703
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	22f0      	movs	r2, #240	; 0xf0
 80081a8:	f883 2704 	strb.w	r2, [r3, #1796]	; 0x704
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	22f0      	movs	r2, #240	; 0xf0
 80081b0:	f883 2705 	strb.w	r2, [r3, #1797]	; 0x705
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	22ff      	movs	r2, #255	; 0xff
 80081b8:	f883 2706 	strb.w	r2, [r3, #1798]	; 0x706
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	22ff      	movs	r2, #255	; 0xff
 80081c0:	f883 2707 	strb.w	r2, [r3, #1799]	; 0x707
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	22ff      	movs	r2, #255	; 0xff
 80081c8:	f883 2708 	strb.w	r2, [r3, #1800]	; 0x708
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	22ff      	movs	r2, #255	; 0xff
 80081d0:	f883 2709 	strb.w	r2, [r3, #1801]	; 0x709
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	22ff      	movs	r2, #255	; 0xff
 80081d8:	f883 2712 	strb.w	r2, [r3, #1810]	; 0x712
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	22ff      	movs	r2, #255	; 0xff
 80081e0:	f883 2713 	strb.w	r2, [r3, #1811]	; 0x713
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	22ff      	movs	r2, #255	; 0xff
 80081e8:	f883 2714 	strb.w	r2, [r3, #1812]	; 0x714
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	22ff      	movs	r2, #255	; 0xff
 80081f0:	f883 2715 	strb.w	r2, [r3, #1813]	; 0x715
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	220f      	movs	r2, #15
 80081f8:	f883 2716 	strb.w	r2, [r3, #1814]	; 0x716
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	220f      	movs	r2, #15
 8008200:	f883 2717 	strb.w	r2, [r3, #1815]	; 0x717
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	220f      	movs	r2, #15
 8008208:	f883 2718 	strb.w	r2, [r3, #1816]	; 0x718
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	220f      	movs	r2, #15
 8008210:	f883 2719 	strb.w	r2, [r3, #1817]	; 0x719
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	220f      	movs	r2, #15
 8008218:	f883 271a 	strb.w	r2, [r3, #1818]	; 0x71a
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	220f      	movs	r2, #15
 8008220:	f883 271b 	strb.w	r2, [r3, #1819]	; 0x71b
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	220f      	movs	r2, #15
 8008228:	f883 271c 	strb.w	r2, [r3, #1820]	; 0x71c
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	220f      	movs	r2, #15
 8008230:	f883 271d 	strb.w	r2, [r3, #1821]	; 0x71d
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2238      	movs	r2, #56	; 0x38
 8008238:	f883 271e 	strb.w	r2, [r3, #1822]	; 0x71e
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	227c      	movs	r2, #124	; 0x7c
 8008240:	f883 271f 	strb.w	r2, [r3, #1823]	; 0x71f
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2244      	movs	r2, #68	; 0x44
 8008248:	f883 2720 	strb.w	r2, [r3, #1824]	; 0x720
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	226c      	movs	r2, #108	; 0x6c
 8008250:	f883 2721 	strb.w	r2, [r3, #1825]	; 0x721
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2238      	movs	r2, #56	; 0x38
 8008258:	f883 2722 	strb.w	r2, [r3, #1826]	; 0x722
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	226c      	movs	r2, #108	; 0x6c
 8008260:	f883 2723 	strb.w	r2, [r3, #1827]	; 0x723
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2244      	movs	r2, #68	; 0x44
 8008268:	f883 2724 	strb.w	r2, [r3, #1828]	; 0x724
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	22fc      	movs	r2, #252	; 0xfc
 8008270:	f883 2726 	strb.w	r2, [r3, #1830]	; 0x726
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	22fe      	movs	r2, #254	; 0xfe
 8008278:	f883 2727 	strb.w	r2, [r3, #1831]	; 0x727
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	222a      	movs	r2, #42	; 0x2a
 8008280:	f883 2728 	strb.w	r2, [r3, #1832]	; 0x728
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	222a      	movs	r2, #42	; 0x2a
 8008288:	f883 2729 	strb.w	r2, [r3, #1833]	; 0x729
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	223e      	movs	r2, #62	; 0x3e
 8008290:	f883 272a 	strb.w	r2, [r3, #1834]	; 0x72a
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2214      	movs	r2, #20
 8008298:	f883 272b 	strb.w	r2, [r3, #1835]	; 0x72b
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	227e      	movs	r2, #126	; 0x7e
 80082a0:	f883 272e 	strb.w	r2, [r3, #1838]	; 0x72e
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	227e      	movs	r2, #126	; 0x7e
 80082a8:	f883 272f 	strb.w	r2, [r3, #1839]	; 0x72f
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2202      	movs	r2, #2
 80082b0:	f883 2730 	strb.w	r2, [r3, #1840]	; 0x730
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2202      	movs	r2, #2
 80082b8:	f883 2731 	strb.w	r2, [r3, #1841]	; 0x731
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2206      	movs	r2, #6
 80082c0:	f883 2732 	strb.w	r2, [r3, #1842]	; 0x732
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2206      	movs	r2, #6
 80082c8:	f883 2733 	strb.w	r2, [r3, #1843]	; 0x733
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2202      	movs	r2, #2
 80082d0:	f883 2736 	strb.w	r2, [r3, #1846]	; 0x736
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	227e      	movs	r2, #126	; 0x7e
 80082d8:	f883 2737 	strb.w	r2, [r3, #1847]	; 0x737
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	227e      	movs	r2, #126	; 0x7e
 80082e0:	f883 2738 	strb.w	r2, [r3, #1848]	; 0x738
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2202      	movs	r2, #2
 80082e8:	f883 2739 	strb.w	r2, [r3, #1849]	; 0x739
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	227e      	movs	r2, #126	; 0x7e
 80082f0:	f883 273a 	strb.w	r2, [r3, #1850]	; 0x73a
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	227e      	movs	r2, #126	; 0x7e
 80082f8:	f883 273b 	strb.w	r2, [r3, #1851]	; 0x73b
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2202      	movs	r2, #2
 8008300:	f883 273c 	strb.w	r2, [r3, #1852]	; 0x73c
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2263      	movs	r2, #99	; 0x63
 8008308:	f883 273e 	strb.w	r2, [r3, #1854]	; 0x73e
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2277      	movs	r2, #119	; 0x77
 8008310:	f883 273f 	strb.w	r2, [r3, #1855]	; 0x73f
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	225d      	movs	r2, #93	; 0x5d
 8008318:	f883 2740 	strb.w	r2, [r3, #1856]	; 0x740
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2249      	movs	r2, #73	; 0x49
 8008320:	f883 2741 	strb.w	r2, [r3, #1857]	; 0x741
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2263      	movs	r2, #99	; 0x63
 8008328:	f883 2742 	strb.w	r2, [r3, #1858]	; 0x742
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2263      	movs	r2, #99	; 0x63
 8008330:	f883 2743 	strb.w	r2, [r3, #1859]	; 0x743
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2238      	movs	r2, #56	; 0x38
 8008338:	f883 2746 	strb.w	r2, [r3, #1862]	; 0x746
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	227c      	movs	r2, #124	; 0x7c
 8008340:	f883 2747 	strb.w	r2, [r3, #1863]	; 0x747
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2244      	movs	r2, #68	; 0x44
 8008348:	f883 2748 	strb.w	r2, [r3, #1864]	; 0x748
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	227c      	movs	r2, #124	; 0x7c
 8008350:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	223c      	movs	r2, #60	; 0x3c
 8008358:	f883 274a 	strb.w	r2, [r3, #1866]	; 0x74a
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2204      	movs	r2, #4
 8008360:	f883 274b 	strb.w	r2, [r3, #1867]	; 0x74b
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2204      	movs	r2, #4
 8008368:	f883 274c 	strb.w	r2, [r3, #1868]	; 0x74c
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2280      	movs	r2, #128	; 0x80
 8008370:	f883 274e 	strb.w	r2, [r3, #1870]	; 0x74e
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	22fe      	movs	r2, #254	; 0xfe
 8008378:	f883 274f 	strb.w	r2, [r3, #1871]	; 0x74f
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	227e      	movs	r2, #126	; 0x7e
 8008380:	f883 2750 	strb.w	r2, [r3, #1872]	; 0x750
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2220      	movs	r2, #32
 8008388:	f883 2751 	strb.w	r2, [r3, #1873]	; 0x751
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2220      	movs	r2, #32
 8008390:	f883 2752 	strb.w	r2, [r3, #1874]	; 0x752
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	223e      	movs	r2, #62	; 0x3e
 8008398:	f883 2753 	strb.w	r2, [r3, #1875]	; 0x753
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	221e      	movs	r2, #30
 80083a0:	f883 2754 	strb.w	r2, [r3, #1876]	; 0x754
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2204      	movs	r2, #4
 80083a8:	f883 2756 	strb.w	r2, [r3, #1878]	; 0x756
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2206      	movs	r2, #6
 80083b0:	f883 2757 	strb.w	r2, [r3, #1879]	; 0x757
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2202      	movs	r2, #2
 80083b8:	f883 2758 	strb.w	r2, [r3, #1880]	; 0x758
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	227e      	movs	r2, #126	; 0x7e
 80083c0:	f883 2759 	strb.w	r2, [r3, #1881]	; 0x759
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	227c      	movs	r2, #124	; 0x7c
 80083c8:	f883 275a 	strb.w	r2, [r3, #1882]	; 0x75a
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2206      	movs	r2, #6
 80083d0:	f883 275b 	strb.w	r2, [r3, #1883]	; 0x75b
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2202      	movs	r2, #2
 80083d8:	f883 275c 	strb.w	r2, [r3, #1884]	; 0x75c
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2299      	movs	r2, #153	; 0x99
 80083e0:	f883 275e 	strb.w	r2, [r3, #1886]	; 0x75e
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	22bd      	movs	r2, #189	; 0xbd
 80083e8:	f883 275f 	strb.w	r2, [r3, #1887]	; 0x75f
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	22e7      	movs	r2, #231	; 0xe7
 80083f0:	f883 2760 	strb.w	r2, [r3, #1888]	; 0x760
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	22e7      	movs	r2, #231	; 0xe7
 80083f8:	f883 2761 	strb.w	r2, [r3, #1889]	; 0x761
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	22bd      	movs	r2, #189	; 0xbd
 8008400:	f883 2762 	strb.w	r2, [r3, #1890]	; 0x762
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2299      	movs	r2, #153	; 0x99
 8008408:	f883 2763 	strb.w	r2, [r3, #1891]	; 0x763
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	221c      	movs	r2, #28
 8008410:	f883 2766 	strb.w	r2, [r3, #1894]	; 0x766
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	223e      	movs	r2, #62	; 0x3e
 8008418:	f883 2767 	strb.w	r2, [r3, #1895]	; 0x767
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	226b      	movs	r2, #107	; 0x6b
 8008420:	f883 2768 	strb.w	r2, [r3, #1896]	; 0x768
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2249      	movs	r2, #73	; 0x49
 8008428:	f883 2769 	strb.w	r2, [r3, #1897]	; 0x769
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	226b      	movs	r2, #107	; 0x6b
 8008430:	f883 276a 	strb.w	r2, [r3, #1898]	; 0x76a
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	223e      	movs	r2, #62	; 0x3e
 8008438:	f883 276b 	strb.w	r2, [r3, #1899]	; 0x76b
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	221c      	movs	r2, #28
 8008440:	f883 276c 	strb.w	r2, [r3, #1900]	; 0x76c
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	224c      	movs	r2, #76	; 0x4c
 8008448:	f883 276e 	strb.w	r2, [r3, #1902]	; 0x76e
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	227e      	movs	r2, #126	; 0x7e
 8008450:	f883 276f 	strb.w	r2, [r3, #1903]	; 0x76f
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2273      	movs	r2, #115	; 0x73
 8008458:	f883 2770 	strb.w	r2, [r3, #1904]	; 0x770
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2201      	movs	r2, #1
 8008460:	f883 2771 	strb.w	r2, [r3, #1905]	; 0x771
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2273      	movs	r2, #115	; 0x73
 8008468:	f883 2772 	strb.w	r2, [r3, #1906]	; 0x772
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	227e      	movs	r2, #126	; 0x7e
 8008470:	f883 2773 	strb.w	r2, [r3, #1907]	; 0x773
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	224c      	movs	r2, #76	; 0x4c
 8008478:	f883 2774 	strb.w	r2, [r3, #1908]	; 0x774
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2230      	movs	r2, #48	; 0x30
 8008480:	f883 2776 	strb.w	r2, [r3, #1910]	; 0x776
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2278      	movs	r2, #120	; 0x78
 8008488:	f883 2777 	strb.w	r2, [r3, #1911]	; 0x777
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	224a      	movs	r2, #74	; 0x4a
 8008490:	f883 2778 	strb.w	r2, [r3, #1912]	; 0x778
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	224f      	movs	r2, #79	; 0x4f
 8008498:	f883 2779 	strb.w	r2, [r3, #1913]	; 0x779
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	227d      	movs	r2, #125	; 0x7d
 80084a0:	f883 277a 	strb.w	r2, [r3, #1914]	; 0x77a
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2239      	movs	r2, #57	; 0x39
 80084a8:	f883 277b 	strb.w	r2, [r3, #1915]	; 0x77b
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2218      	movs	r2, #24
 80084b0:	f883 277e 	strb.w	r2, [r3, #1918]	; 0x77e
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	223c      	movs	r2, #60	; 0x3c
 80084b8:	f883 277f 	strb.w	r2, [r3, #1919]	; 0x77f
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2224      	movs	r2, #36	; 0x24
 80084c0:	f883 2780 	strb.w	r2, [r3, #1920]	; 0x780
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	223c      	movs	r2, #60	; 0x3c
 80084c8:	f883 2781 	strb.w	r2, [r3, #1921]	; 0x781
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	223c      	movs	r2, #60	; 0x3c
 80084d0:	f883 2782 	strb.w	r2, [r3, #1922]	; 0x782
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2224      	movs	r2, #36	; 0x24
 80084d8:	f883 2783 	strb.w	r2, [r3, #1923]	; 0x783
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	223c      	movs	r2, #60	; 0x3c
 80084e0:	f883 2784 	strb.w	r2, [r3, #1924]	; 0x784
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2218      	movs	r2, #24
 80084e8:	f883 2785 	strb.w	r2, [r3, #1925]	; 0x785
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2298      	movs	r2, #152	; 0x98
 80084f0:	f883 2786 	strb.w	r2, [r3, #1926]	; 0x786
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	22fc      	movs	r2, #252	; 0xfc
 80084f8:	f883 2787 	strb.w	r2, [r3, #1927]	; 0x787
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2264      	movs	r2, #100	; 0x64
 8008500:	f883 2788 	strb.w	r2, [r3, #1928]	; 0x788
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	223c      	movs	r2, #60	; 0x3c
 8008508:	f883 2789 	strb.w	r2, [r3, #1929]	; 0x789
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	223e      	movs	r2, #62	; 0x3e
 8008510:	f883 278a 	strb.w	r2, [r3, #1930]	; 0x78a
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2227      	movs	r2, #39	; 0x27
 8008518:	f883 278b 	strb.w	r2, [r3, #1931]	; 0x78b
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	223d      	movs	r2, #61	; 0x3d
 8008520:	f883 278c 	strb.w	r2, [r3, #1932]	; 0x78c
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2218      	movs	r2, #24
 8008528:	f883 278d 	strb.w	r2, [r3, #1933]	; 0x78d
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	221c      	movs	r2, #28
 8008530:	f883 278e 	strb.w	r2, [r3, #1934]	; 0x78e
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	223e      	movs	r2, #62	; 0x3e
 8008538:	f883 278f 	strb.w	r2, [r3, #1935]	; 0x78f
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	226b      	movs	r2, #107	; 0x6b
 8008540:	f883 2790 	strb.w	r2, [r3, #1936]	; 0x790
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2249      	movs	r2, #73	; 0x49
 8008548:	f883 2791 	strb.w	r2, [r3, #1937]	; 0x791
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2249      	movs	r2, #73	; 0x49
 8008550:	f883 2792 	strb.w	r2, [r3, #1938]	; 0x792
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	227e      	movs	r2, #126	; 0x7e
 8008558:	f883 2796 	strb.w	r2, [r3, #1942]	; 0x796
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	227f      	movs	r2, #127	; 0x7f
 8008560:	f883 2797 	strb.w	r2, [r3, #1943]	; 0x797
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2201      	movs	r2, #1
 8008568:	f883 2798 	strb.w	r2, [r3, #1944]	; 0x798
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2201      	movs	r2, #1
 8008570:	f883 2799 	strb.w	r2, [r3, #1945]	; 0x799
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	227f      	movs	r2, #127	; 0x7f
 8008578:	f883 279a 	strb.w	r2, [r3, #1946]	; 0x79a
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	227e      	movs	r2, #126	; 0x7e
 8008580:	f883 279b 	strb.w	r2, [r3, #1947]	; 0x79b
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	222a      	movs	r2, #42	; 0x2a
 8008588:	f883 279e 	strb.w	r2, [r3, #1950]	; 0x79e
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	222a      	movs	r2, #42	; 0x2a
 8008590:	f883 279f 	strb.w	r2, [r3, #1951]	; 0x79f
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	222a      	movs	r2, #42	; 0x2a
 8008598:	f883 27a0 	strb.w	r2, [r3, #1952]	; 0x7a0
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	222a      	movs	r2, #42	; 0x2a
 80085a0:	f883 27a1 	strb.w	r2, [r3, #1953]	; 0x7a1
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	222a      	movs	r2, #42	; 0x2a
 80085a8:	f883 27a2 	strb.w	r2, [r3, #1954]	; 0x7a2
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	222a      	movs	r2, #42	; 0x2a
 80085b0:	f883 27a3 	strb.w	r2, [r3, #1955]	; 0x7a3
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2244      	movs	r2, #68	; 0x44
 80085b8:	f883 27a6 	strb.w	r2, [r3, #1958]	; 0x7a6
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2244      	movs	r2, #68	; 0x44
 80085c0:	f883 27a7 	strb.w	r2, [r3, #1959]	; 0x7a7
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	225f      	movs	r2, #95	; 0x5f
 80085c8:	f883 27a8 	strb.w	r2, [r3, #1960]	; 0x7a8
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	225f      	movs	r2, #95	; 0x5f
 80085d0:	f883 27a9 	strb.w	r2, [r3, #1961]	; 0x7a9
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2244      	movs	r2, #68	; 0x44
 80085d8:	f883 27aa 	strb.w	r2, [r3, #1962]	; 0x7aa
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2244      	movs	r2, #68	; 0x44
 80085e0:	f883 27ab 	strb.w	r2, [r3, #1963]	; 0x7ab
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2240      	movs	r2, #64	; 0x40
 80085e8:	f883 27ae 	strb.w	r2, [r3, #1966]	; 0x7ae
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2251      	movs	r2, #81	; 0x51
 80085f0:	f883 27af 	strb.w	r2, [r3, #1967]	; 0x7af
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	225b      	movs	r2, #91	; 0x5b
 80085f8:	f883 27b0 	strb.w	r2, [r3, #1968]	; 0x7b0
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	224e      	movs	r2, #78	; 0x4e
 8008600:	f883 27b1 	strb.w	r2, [r3, #1969]	; 0x7b1
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2244      	movs	r2, #68	; 0x44
 8008608:	f883 27b2 	strb.w	r2, [r3, #1970]	; 0x7b2
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2240      	movs	r2, #64	; 0x40
 8008610:	f883 27b3 	strb.w	r2, [r3, #1971]	; 0x7b3
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2240      	movs	r2, #64	; 0x40
 8008618:	f883 27b6 	strb.w	r2, [r3, #1974]	; 0x7b6
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2244      	movs	r2, #68	; 0x44
 8008620:	f883 27b7 	strb.w	r2, [r3, #1975]	; 0x7b7
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	224e      	movs	r2, #78	; 0x4e
 8008628:	f883 27b8 	strb.w	r2, [r3, #1976]	; 0x7b8
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	225b      	movs	r2, #91	; 0x5b
 8008630:	f883 27b9 	strb.w	r2, [r3, #1977]	; 0x7b9
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2251      	movs	r2, #81	; 0x51
 8008638:	f883 27ba 	strb.w	r2, [r3, #1978]	; 0x7ba
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2240      	movs	r2, #64	; 0x40
 8008640:	f883 27bb 	strb.w	r2, [r3, #1979]	; 0x7bb
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	22fe      	movs	r2, #254	; 0xfe
 8008648:	f883 27c1 	strb.w	r2, [r3, #1985]	; 0x7c1
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	22ff      	movs	r2, #255	; 0xff
 8008650:	f883 27c2 	strb.w	r2, [r3, #1986]	; 0x7c2
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2201      	movs	r2, #1
 8008658:	f883 27c3 	strb.w	r2, [r3, #1987]	; 0x7c3
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2207      	movs	r2, #7
 8008660:	f883 27c4 	strb.w	r2, [r3, #1988]	; 0x7c4
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2206      	movs	r2, #6
 8008668:	f883 27c5 	strb.w	r2, [r3, #1989]	; 0x7c5
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2260      	movs	r2, #96	; 0x60
 8008670:	f883 27c6 	strb.w	r2, [r3, #1990]	; 0x7c6
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	22e0      	movs	r2, #224	; 0xe0
 8008678:	f883 27c7 	strb.w	r2, [r3, #1991]	; 0x7c7
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2280      	movs	r2, #128	; 0x80
 8008680:	f883 27c8 	strb.w	r2, [r3, #1992]	; 0x7c8
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	22ff      	movs	r2, #255	; 0xff
 8008688:	f883 27c9 	strb.w	r2, [r3, #1993]	; 0x7c9
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	227f      	movs	r2, #127	; 0x7f
 8008690:	f883 27ca 	strb.w	r2, [r3, #1994]	; 0x7ca
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2208      	movs	r2, #8
 8008698:	f883 27ce 	strb.w	r2, [r3, #1998]	; 0x7ce
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2208      	movs	r2, #8
 80086a0:	f883 27cf 	strb.w	r2, [r3, #1999]	; 0x7cf
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	226b      	movs	r2, #107	; 0x6b
 80086a8:	f883 27d0 	strb.w	r2, [r3, #2000]	; 0x7d0
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	226b      	movs	r2, #107	; 0x6b
 80086b0:	f883 27d1 	strb.w	r2, [r3, #2001]	; 0x7d1
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2208      	movs	r2, #8
 80086b8:	f883 27d2 	strb.w	r2, [r3, #2002]	; 0x7d2
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2208      	movs	r2, #8
 80086c0:	f883 27d3 	strb.w	r2, [r3, #2003]	; 0x7d3
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2224      	movs	r2, #36	; 0x24
 80086c8:	f883 27d6 	strb.w	r2, [r3, #2006]	; 0x7d6
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2236      	movs	r2, #54	; 0x36
 80086d0:	f883 27d7 	strb.w	r2, [r3, #2007]	; 0x7d7
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2212      	movs	r2, #18
 80086d8:	f883 27d8 	strb.w	r2, [r3, #2008]	; 0x7d8
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2236      	movs	r2, #54	; 0x36
 80086e0:	f883 27d9 	strb.w	r2, [r3, #2009]	; 0x7d9
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2224      	movs	r2, #36	; 0x24
 80086e8:	f883 27da 	strb.w	r2, [r3, #2010]	; 0x7da
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2236      	movs	r2, #54	; 0x36
 80086f0:	f883 27db 	strb.w	r2, [r3, #2011]	; 0x7db
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2212      	movs	r2, #18
 80086f8:	f883 27dc 	strb.w	r2, [r3, #2012]	; 0x7dc
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2206      	movs	r2, #6
 8008700:	f883 27df 	strb.w	r2, [r3, #2015]	; 0x7df
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	220f      	movs	r2, #15
 8008708:	f883 27e0 	strb.w	r2, [r3, #2016]	; 0x7e0
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2209      	movs	r2, #9
 8008710:	f883 27e1 	strb.w	r2, [r3, #2017]	; 0x7e1
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	220f      	movs	r2, #15
 8008718:	f883 27e2 	strb.w	r2, [r3, #2018]	; 0x7e2
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2206      	movs	r2, #6
 8008720:	f883 27e3 	strb.w	r2, [r3, #2019]	; 0x7e3
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2218      	movs	r2, #24
 8008728:	f883 27e9 	strb.w	r2, [r3, #2025]	; 0x7e9
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2218      	movs	r2, #24
 8008730:	f883 27ea 	strb.w	r2, [r3, #2026]	; 0x7ea
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2210      	movs	r2, #16
 8008738:	f883 27f1 	strb.w	r2, [r3, #2033]	; 0x7f1
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2210      	movs	r2, #16
 8008740:	f883 27f2 	strb.w	r2, [r3, #2034]	; 0x7f2
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2210      	movs	r2, #16
 8008748:	f883 27f6 	strb.w	r2, [r3, #2038]	; 0x7f6
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2230      	movs	r2, #48	; 0x30
 8008750:	f883 27f7 	strb.w	r2, [r3, #2039]	; 0x7f7
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2270      	movs	r2, #112	; 0x70
 8008758:	f883 27f8 	strb.w	r2, [r3, #2040]	; 0x7f8
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	22c0      	movs	r2, #192	; 0xc0
 8008760:	f883 27f9 	strb.w	r2, [r3, #2041]	; 0x7f9
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	22ff      	movs	r2, #255	; 0xff
 8008768:	f883 27fa 	strb.w	r2, [r3, #2042]	; 0x7fa
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	22ff      	movs	r2, #255	; 0xff
 8008770:	f883 27fb 	strb.w	r2, [r3, #2043]	; 0x7fb
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2201      	movs	r2, #1
 8008778:	f883 27fc 	strb.w	r2, [r3, #2044]	; 0x7fc
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	f883 27fd 	strb.w	r2, [r3, #2045]	; 0x7fd
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	221f      	movs	r2, #31
 8008788:	f883 27ff 	strb.w	r2, [r3, #2047]	; 0x7ff
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	221f      	movs	r2, #31
 8008790:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2201      	movs	r2, #1
 8008798:	f883 2801 	strb.w	r2, [r3, #2049]	; 0x801
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	221f      	movs	r2, #31
 80087a0:	f883 2802 	strb.w	r2, [r3, #2050]	; 0x802
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	221e      	movs	r2, #30
 80087a8:	f883 2803 	strb.w	r2, [r3, #2051]	; 0x803
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2219      	movs	r2, #25
 80087b0:	f883 2807 	strb.w	r2, [r3, #2055]	; 0x807
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	221d      	movs	r2, #29
 80087b8:	f883 2808 	strb.w	r2, [r3, #2056]	; 0x808
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2217      	movs	r2, #23
 80087c0:	f883 2809 	strb.w	r2, [r3, #2057]	; 0x809
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2212      	movs	r2, #18
 80087c8:	f883 280a 	strb.w	r2, [r3, #2058]	; 0x80a
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	223c      	movs	r2, #60	; 0x3c
 80087d0:	f883 2810 	strb.w	r2, [r3, #2064]	; 0x810
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	223c      	movs	r2, #60	; 0x3c
 80087d8:	f883 2811 	strb.w	r2, [r3, #2065]	; 0x811
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	223c      	movs	r2, #60	; 0x3c
 80087e0:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	223c      	movs	r2, #60	; 0x3c
 80087e8:	f883 2813 	strb.w	r2, [r3, #2067]	; 0x813
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f603 0326 	addw	r3, r3, #2086	; 0x826
 80087f2:	f240 12db 	movw	r2, #475	; 0x1db
 80087f6:	2100      	movs	r1, #0
 80087f8:	4618      	mov	r0, r3
 80087fa:	f006 facd 	bl	800ed98 <memset>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	225f      	movs	r2, #95	; 0x5f
 8008802:	f883 282d 	strb.w	r2, [r3, #2093]	; 0x82d
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2207      	movs	r2, #7
 800880a:	f883 2831 	strb.w	r2, [r3, #2097]	; 0x831
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2207      	movs	r2, #7
 8008812:	f883 2833 	strb.w	r2, [r3, #2099]	; 0x833
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2214      	movs	r2, #20
 800881a:	f883 2835 	strb.w	r2, [r3, #2101]	; 0x835
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	227f      	movs	r2, #127	; 0x7f
 8008822:	f883 2836 	strb.w	r2, [r3, #2102]	; 0x836
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2214      	movs	r2, #20
 800882a:	f883 2837 	strb.w	r2, [r3, #2103]	; 0x837
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	227f      	movs	r2, #127	; 0x7f
 8008832:	f883 2838 	strb.w	r2, [r3, #2104]	; 0x838
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2214      	movs	r2, #20
 800883a:	f883 2839 	strb.w	r2, [r3, #2105]	; 0x839
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2224      	movs	r2, #36	; 0x24
 8008842:	f883 283a 	strb.w	r2, [r3, #2106]	; 0x83a
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	222a      	movs	r2, #42	; 0x2a
 800884a:	f883 283b 	strb.w	r2, [r3, #2107]	; 0x83b
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	227f      	movs	r2, #127	; 0x7f
 8008852:	f883 283c 	strb.w	r2, [r3, #2108]	; 0x83c
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	222a      	movs	r2, #42	; 0x2a
 800885a:	f883 283d 	strb.w	r2, [r3, #2109]	; 0x83d
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2212      	movs	r2, #18
 8008862:	f883 283e 	strb.w	r2, [r3, #2110]	; 0x83e
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2223      	movs	r2, #35	; 0x23
 800886a:	f883 283f 	strb.w	r2, [r3, #2111]	; 0x83f
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2213      	movs	r2, #19
 8008872:	f883 2840 	strb.w	r2, [r3, #2112]	; 0x840
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2208      	movs	r2, #8
 800887a:	f883 2841 	strb.w	r2, [r3, #2113]	; 0x841
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2264      	movs	r2, #100	; 0x64
 8008882:	f883 2842 	strb.w	r2, [r3, #2114]	; 0x842
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2262      	movs	r2, #98	; 0x62
 800888a:	f883 2843 	strb.w	r2, [r3, #2115]	; 0x843
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2236      	movs	r2, #54	; 0x36
 8008892:	f883 2844 	strb.w	r2, [r3, #2116]	; 0x844
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2249      	movs	r2, #73	; 0x49
 800889a:	f883 2845 	strb.w	r2, [r3, #2117]	; 0x845
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2255      	movs	r2, #85	; 0x55
 80088a2:	f883 2846 	strb.w	r2, [r3, #2118]	; 0x846
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2222      	movs	r2, #34	; 0x22
 80088aa:	f883 2847 	strb.w	r2, [r3, #2119]	; 0x847
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2250      	movs	r2, #80	; 0x50
 80088b2:	f883 2848 	strb.w	r2, [r3, #2120]	; 0x848
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2205      	movs	r2, #5
 80088ba:	f883 284a 	strb.w	r2, [r3, #2122]	; 0x84a
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2203      	movs	r2, #3
 80088c2:	f883 284b 	strb.w	r2, [r3, #2123]	; 0x84b
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	221c      	movs	r2, #28
 80088ca:	f883 284f 	strb.w	r2, [r3, #2127]	; 0x84f
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2222      	movs	r2, #34	; 0x22
 80088d2:	f883 2850 	strb.w	r2, [r3, #2128]	; 0x850
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2241      	movs	r2, #65	; 0x41
 80088da:	f883 2851 	strb.w	r2, [r3, #2129]	; 0x851
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2241      	movs	r2, #65	; 0x41
 80088e2:	f883 2854 	strb.w	r2, [r3, #2132]	; 0x854
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2222      	movs	r2, #34	; 0x22
 80088ea:	f883 2855 	strb.w	r2, [r3, #2133]	; 0x855
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	221c      	movs	r2, #28
 80088f2:	f883 2856 	strb.w	r2, [r3, #2134]	; 0x856
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2208      	movs	r2, #8
 80088fa:	f883 2858 	strb.w	r2, [r3, #2136]	; 0x858
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	222a      	movs	r2, #42	; 0x2a
 8008902:	f883 2859 	strb.w	r2, [r3, #2137]	; 0x859
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	221c      	movs	r2, #28
 800890a:	f883 285a 	strb.w	r2, [r3, #2138]	; 0x85a
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	222a      	movs	r2, #42	; 0x2a
 8008912:	f883 285b 	strb.w	r2, [r3, #2139]	; 0x85b
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2208      	movs	r2, #8
 800891a:	f883 285c 	strb.w	r2, [r3, #2140]	; 0x85c
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2208      	movs	r2, #8
 8008922:	f883 285d 	strb.w	r2, [r3, #2141]	; 0x85d
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2208      	movs	r2, #8
 800892a:	f883 285e 	strb.w	r2, [r3, #2142]	; 0x85e
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	223e      	movs	r2, #62	; 0x3e
 8008932:	f883 285f 	strb.w	r2, [r3, #2143]	; 0x85f
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2208      	movs	r2, #8
 800893a:	f883 2860 	strb.w	r2, [r3, #2144]	; 0x860
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2208      	movs	r2, #8
 8008942:	f883 2861 	strb.w	r2, [r3, #2145]	; 0x861
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2250      	movs	r2, #80	; 0x50
 800894a:	f883 2863 	strb.w	r2, [r3, #2147]	; 0x863
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2230      	movs	r2, #48	; 0x30
 8008952:	f883 2864 	strb.w	r2, [r3, #2148]	; 0x864
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2208      	movs	r2, #8
 800895a:	f883 2867 	strb.w	r2, [r3, #2151]	; 0x867
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2208      	movs	r2, #8
 8008962:	f883 2868 	strb.w	r2, [r3, #2152]	; 0x868
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2208      	movs	r2, #8
 800896a:	f883 2869 	strb.w	r2, [r3, #2153]	; 0x869
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2208      	movs	r2, #8
 8008972:	f883 286a 	strb.w	r2, [r3, #2154]	; 0x86a
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2208      	movs	r2, #8
 800897a:	f883 286b 	strb.w	r2, [r3, #2155]	; 0x86b
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2230      	movs	r2, #48	; 0x30
 8008982:	f883 286d 	strb.w	r2, [r3, #2157]	; 0x86d
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2230      	movs	r2, #48	; 0x30
 800898a:	f883 286e 	strb.w	r2, [r3, #2158]	; 0x86e
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2220      	movs	r2, #32
 8008992:	f883 2871 	strb.w	r2, [r3, #2161]	; 0x871
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2210      	movs	r2, #16
 800899a:	f883 2872 	strb.w	r2, [r3, #2162]	; 0x872
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2208      	movs	r2, #8
 80089a2:	f883 2873 	strb.w	r2, [r3, #2163]	; 0x873
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2204      	movs	r2, #4
 80089aa:	f883 2874 	strb.w	r2, [r3, #2164]	; 0x874
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2202      	movs	r2, #2
 80089b2:	f883 2875 	strb.w	r2, [r3, #2165]	; 0x875
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	223e      	movs	r2, #62	; 0x3e
 80089ba:	f883 2876 	strb.w	r2, [r3, #2166]	; 0x876
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2251      	movs	r2, #81	; 0x51
 80089c2:	f883 2877 	strb.w	r2, [r3, #2167]	; 0x877
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2249      	movs	r2, #73	; 0x49
 80089ca:	f883 2878 	strb.w	r2, [r3, #2168]	; 0x878
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2245      	movs	r2, #69	; 0x45
 80089d2:	f883 2879 	strb.w	r2, [r3, #2169]	; 0x879
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	223e      	movs	r2, #62	; 0x3e
 80089da:	f883 287a 	strb.w	r2, [r3, #2170]	; 0x87a
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2242      	movs	r2, #66	; 0x42
 80089e2:	f883 287c 	strb.w	r2, [r3, #2172]	; 0x87c
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	227f      	movs	r2, #127	; 0x7f
 80089ea:	f883 287d 	strb.w	r2, [r3, #2173]	; 0x87d
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2240      	movs	r2, #64	; 0x40
 80089f2:	f883 287e 	strb.w	r2, [r3, #2174]	; 0x87e
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2242      	movs	r2, #66	; 0x42
 80089fa:	f883 2880 	strb.w	r2, [r3, #2176]	; 0x880
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2261      	movs	r2, #97	; 0x61
 8008a02:	f883 2881 	strb.w	r2, [r3, #2177]	; 0x881
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2251      	movs	r2, #81	; 0x51
 8008a0a:	f883 2882 	strb.w	r2, [r3, #2178]	; 0x882
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2249      	movs	r2, #73	; 0x49
 8008a12:	f883 2883 	strb.w	r2, [r3, #2179]	; 0x883
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2246      	movs	r2, #70	; 0x46
 8008a1a:	f883 2884 	strb.w	r2, [r3, #2180]	; 0x884
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2221      	movs	r2, #33	; 0x21
 8008a22:	f883 2885 	strb.w	r2, [r3, #2181]	; 0x885
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2241      	movs	r2, #65	; 0x41
 8008a2a:	f883 2886 	strb.w	r2, [r3, #2182]	; 0x886
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2245      	movs	r2, #69	; 0x45
 8008a32:	f883 2887 	strb.w	r2, [r3, #2183]	; 0x887
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	224b      	movs	r2, #75	; 0x4b
 8008a3a:	f883 2888 	strb.w	r2, [r3, #2184]	; 0x888
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2231      	movs	r2, #49	; 0x31
 8008a42:	f883 2889 	strb.w	r2, [r3, #2185]	; 0x889
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2218      	movs	r2, #24
 8008a4a:	f883 288a 	strb.w	r2, [r3, #2186]	; 0x88a
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2214      	movs	r2, #20
 8008a52:	f883 288b 	strb.w	r2, [r3, #2187]	; 0x88b
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2212      	movs	r2, #18
 8008a5a:	f883 288c 	strb.w	r2, [r3, #2188]	; 0x88c
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	227f      	movs	r2, #127	; 0x7f
 8008a62:	f883 288d 	strb.w	r2, [r3, #2189]	; 0x88d
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2210      	movs	r2, #16
 8008a6a:	f883 288e 	strb.w	r2, [r3, #2190]	; 0x88e
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2227      	movs	r2, #39	; 0x27
 8008a72:	f883 288f 	strb.w	r2, [r3, #2191]	; 0x88f
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2245      	movs	r2, #69	; 0x45
 8008a7a:	f883 2890 	strb.w	r2, [r3, #2192]	; 0x890
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2245      	movs	r2, #69	; 0x45
 8008a82:	f883 2891 	strb.w	r2, [r3, #2193]	; 0x891
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2245      	movs	r2, #69	; 0x45
 8008a8a:	f883 2892 	strb.w	r2, [r3, #2194]	; 0x892
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2239      	movs	r2, #57	; 0x39
 8008a92:	f883 2893 	strb.w	r2, [r3, #2195]	; 0x893
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	223c      	movs	r2, #60	; 0x3c
 8008a9a:	f883 2894 	strb.w	r2, [r3, #2196]	; 0x894
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	224a      	movs	r2, #74	; 0x4a
 8008aa2:	f883 2895 	strb.w	r2, [r3, #2197]	; 0x895
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2249      	movs	r2, #73	; 0x49
 8008aaa:	f883 2896 	strb.w	r2, [r3, #2198]	; 0x896
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2249      	movs	r2, #73	; 0x49
 8008ab2:	f883 2897 	strb.w	r2, [r3, #2199]	; 0x897
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2230      	movs	r2, #48	; 0x30
 8008aba:	f883 2898 	strb.w	r2, [r3, #2200]	; 0x898
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	f883 2899 	strb.w	r2, [r3, #2201]	; 0x899
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2271      	movs	r2, #113	; 0x71
 8008aca:	f883 289a 	strb.w	r2, [r3, #2202]	; 0x89a
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2209      	movs	r2, #9
 8008ad2:	f883 289b 	strb.w	r2, [r3, #2203]	; 0x89b
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2205      	movs	r2, #5
 8008ada:	f883 289c 	strb.w	r2, [r3, #2204]	; 0x89c
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2203      	movs	r2, #3
 8008ae2:	f883 289d 	strb.w	r2, [r3, #2205]	; 0x89d
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2236      	movs	r2, #54	; 0x36
 8008aea:	f883 289e 	strb.w	r2, [r3, #2206]	; 0x89e
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2249      	movs	r2, #73	; 0x49
 8008af2:	f883 289f 	strb.w	r2, [r3, #2207]	; 0x89f
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2249      	movs	r2, #73	; 0x49
 8008afa:	f883 28a0 	strb.w	r2, [r3, #2208]	; 0x8a0
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2249      	movs	r2, #73	; 0x49
 8008b02:	f883 28a1 	strb.w	r2, [r3, #2209]	; 0x8a1
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2236      	movs	r2, #54	; 0x36
 8008b0a:	f883 28a2 	strb.w	r2, [r3, #2210]	; 0x8a2
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2206      	movs	r2, #6
 8008b12:	f883 28a3 	strb.w	r2, [r3, #2211]	; 0x8a3
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2249      	movs	r2, #73	; 0x49
 8008b1a:	f883 28a4 	strb.w	r2, [r3, #2212]	; 0x8a4
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2249      	movs	r2, #73	; 0x49
 8008b22:	f883 28a5 	strb.w	r2, [r3, #2213]	; 0x8a5
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2229      	movs	r2, #41	; 0x29
 8008b2a:	f883 28a6 	strb.w	r2, [r3, #2214]	; 0x8a6
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	221e      	movs	r2, #30
 8008b32:	f883 28a7 	strb.w	r2, [r3, #2215]	; 0x8a7
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2236      	movs	r2, #54	; 0x36
 8008b3a:	f883 28a9 	strb.w	r2, [r3, #2217]	; 0x8a9
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2236      	movs	r2, #54	; 0x36
 8008b42:	f883 28aa 	strb.w	r2, [r3, #2218]	; 0x8aa
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2256      	movs	r2, #86	; 0x56
 8008b4a:	f883 28ae 	strb.w	r2, [r3, #2222]	; 0x8ae
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2236      	movs	r2, #54	; 0x36
 8008b52:	f883 28af 	strb.w	r2, [r3, #2223]	; 0x8af
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2208      	movs	r2, #8
 8008b5a:	f883 28b3 	strb.w	r2, [r3, #2227]	; 0x8b3
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2214      	movs	r2, #20
 8008b62:	f883 28b4 	strb.w	r2, [r3, #2228]	; 0x8b4
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2222      	movs	r2, #34	; 0x22
 8008b6a:	f883 28b5 	strb.w	r2, [r3, #2229]	; 0x8b5
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2241      	movs	r2, #65	; 0x41
 8008b72:	f883 28b6 	strb.w	r2, [r3, #2230]	; 0x8b6
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2214      	movs	r2, #20
 8008b7a:	f883 28b7 	strb.w	r2, [r3, #2231]	; 0x8b7
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2214      	movs	r2, #20
 8008b82:	f883 28b8 	strb.w	r2, [r3, #2232]	; 0x8b8
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2214      	movs	r2, #20
 8008b8a:	f883 28b9 	strb.w	r2, [r3, #2233]	; 0x8b9
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2214      	movs	r2, #20
 8008b92:	f883 28ba 	strb.w	r2, [r3, #2234]	; 0x8ba
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2214      	movs	r2, #20
 8008b9a:	f883 28bb 	strb.w	r2, [r3, #2235]	; 0x8bb
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2241      	movs	r2, #65	; 0x41
 8008ba2:	f883 28bc 	strb.w	r2, [r3, #2236]	; 0x8bc
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2222      	movs	r2, #34	; 0x22
 8008baa:	f883 28bd 	strb.w	r2, [r3, #2237]	; 0x8bd
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2214      	movs	r2, #20
 8008bb2:	f883 28be 	strb.w	r2, [r3, #2238]	; 0x8be
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2208      	movs	r2, #8
 8008bba:	f883 28bf 	strb.w	r2, [r3, #2239]	; 0x8bf
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2202      	movs	r2, #2
 8008bc2:	f883 28c1 	strb.w	r2, [r3, #2241]	; 0x8c1
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2201      	movs	r2, #1
 8008bca:	f883 28c2 	strb.w	r2, [r3, #2242]	; 0x8c2
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2251      	movs	r2, #81	; 0x51
 8008bd2:	f883 28c3 	strb.w	r2, [r3, #2243]	; 0x8c3
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2209      	movs	r2, #9
 8008bda:	f883 28c4 	strb.w	r2, [r3, #2244]	; 0x8c4
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2206      	movs	r2, #6
 8008be2:	f883 28c5 	strb.w	r2, [r3, #2245]	; 0x8c5
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2232      	movs	r2, #50	; 0x32
 8008bea:	f883 28c6 	strb.w	r2, [r3, #2246]	; 0x8c6
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2249      	movs	r2, #73	; 0x49
 8008bf2:	f883 28c7 	strb.w	r2, [r3, #2247]	; 0x8c7
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2279      	movs	r2, #121	; 0x79
 8008bfa:	f883 28c8 	strb.w	r2, [r3, #2248]	; 0x8c8
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2241      	movs	r2, #65	; 0x41
 8008c02:	f883 28c9 	strb.w	r2, [r3, #2249]	; 0x8c9
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	223e      	movs	r2, #62	; 0x3e
 8008c0a:	f883 28ca 	strb.w	r2, [r3, #2250]	; 0x8ca
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	227e      	movs	r2, #126	; 0x7e
 8008c12:	f883 28cb 	strb.w	r2, [r3, #2251]	; 0x8cb
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2211      	movs	r2, #17
 8008c1a:	f883 28cc 	strb.w	r2, [r3, #2252]	; 0x8cc
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2211      	movs	r2, #17
 8008c22:	f883 28cd 	strb.w	r2, [r3, #2253]	; 0x8cd
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2211      	movs	r2, #17
 8008c2a:	f883 28ce 	strb.w	r2, [r3, #2254]	; 0x8ce
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	227e      	movs	r2, #126	; 0x7e
 8008c32:	f883 28cf 	strb.w	r2, [r3, #2255]	; 0x8cf
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	227f      	movs	r2, #127	; 0x7f
 8008c3a:	f883 28d0 	strb.w	r2, [r3, #2256]	; 0x8d0
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2249      	movs	r2, #73	; 0x49
 8008c42:	f883 28d1 	strb.w	r2, [r3, #2257]	; 0x8d1
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2249      	movs	r2, #73	; 0x49
 8008c4a:	f883 28d2 	strb.w	r2, [r3, #2258]	; 0x8d2
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2249      	movs	r2, #73	; 0x49
 8008c52:	f883 28d3 	strb.w	r2, [r3, #2259]	; 0x8d3
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2236      	movs	r2, #54	; 0x36
 8008c5a:	f883 28d4 	strb.w	r2, [r3, #2260]	; 0x8d4
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	223e      	movs	r2, #62	; 0x3e
 8008c62:	f883 28d5 	strb.w	r2, [r3, #2261]	; 0x8d5
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2241      	movs	r2, #65	; 0x41
 8008c6a:	f883 28d6 	strb.w	r2, [r3, #2262]	; 0x8d6
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2241      	movs	r2, #65	; 0x41
 8008c72:	f883 28d7 	strb.w	r2, [r3, #2263]	; 0x8d7
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2241      	movs	r2, #65	; 0x41
 8008c7a:	f883 28d8 	strb.w	r2, [r3, #2264]	; 0x8d8
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2222      	movs	r2, #34	; 0x22
 8008c82:	f883 28d9 	strb.w	r2, [r3, #2265]	; 0x8d9
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	227f      	movs	r2, #127	; 0x7f
 8008c8a:	f883 28da 	strb.w	r2, [r3, #2266]	; 0x8da
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2241      	movs	r2, #65	; 0x41
 8008c92:	f883 28db 	strb.w	r2, [r3, #2267]	; 0x8db
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2241      	movs	r2, #65	; 0x41
 8008c9a:	f883 28dc 	strb.w	r2, [r3, #2268]	; 0x8dc
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2222      	movs	r2, #34	; 0x22
 8008ca2:	f883 28dd 	strb.w	r2, [r3, #2269]	; 0x8dd
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	221c      	movs	r2, #28
 8008caa:	f883 28de 	strb.w	r2, [r3, #2270]	; 0x8de
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	227f      	movs	r2, #127	; 0x7f
 8008cb2:	f883 28df 	strb.w	r2, [r3, #2271]	; 0x8df
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2249      	movs	r2, #73	; 0x49
 8008cba:	f883 28e0 	strb.w	r2, [r3, #2272]	; 0x8e0
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2249      	movs	r2, #73	; 0x49
 8008cc2:	f883 28e1 	strb.w	r2, [r3, #2273]	; 0x8e1
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2249      	movs	r2, #73	; 0x49
 8008cca:	f883 28e2 	strb.w	r2, [r3, #2274]	; 0x8e2
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2241      	movs	r2, #65	; 0x41
 8008cd2:	f883 28e3 	strb.w	r2, [r3, #2275]	; 0x8e3
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	227f      	movs	r2, #127	; 0x7f
 8008cda:	f883 28e4 	strb.w	r2, [r3, #2276]	; 0x8e4
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2209      	movs	r2, #9
 8008ce2:	f883 28e5 	strb.w	r2, [r3, #2277]	; 0x8e5
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2209      	movs	r2, #9
 8008cea:	f883 28e6 	strb.w	r2, [r3, #2278]	; 0x8e6
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	f883 28e7 	strb.w	r2, [r3, #2279]	; 0x8e7
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	f883 28e8 	strb.w	r2, [r3, #2280]	; 0x8e8
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	223e      	movs	r2, #62	; 0x3e
 8008d02:	f883 28e9 	strb.w	r2, [r3, #2281]	; 0x8e9
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2241      	movs	r2, #65	; 0x41
 8008d0a:	f883 28ea 	strb.w	r2, [r3, #2282]	; 0x8ea
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2241      	movs	r2, #65	; 0x41
 8008d12:	f883 28eb 	strb.w	r2, [r3, #2283]	; 0x8eb
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2251      	movs	r2, #81	; 0x51
 8008d1a:	f883 28ec 	strb.w	r2, [r3, #2284]	; 0x8ec
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2232      	movs	r2, #50	; 0x32
 8008d22:	f883 28ed 	strb.w	r2, [r3, #2285]	; 0x8ed
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	227f      	movs	r2, #127	; 0x7f
 8008d2a:	f883 28ee 	strb.w	r2, [r3, #2286]	; 0x8ee
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2208      	movs	r2, #8
 8008d32:	f883 28ef 	strb.w	r2, [r3, #2287]	; 0x8ef
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2208      	movs	r2, #8
 8008d3a:	f883 28f0 	strb.w	r2, [r3, #2288]	; 0x8f0
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2208      	movs	r2, #8
 8008d42:	f883 28f1 	strb.w	r2, [r3, #2289]	; 0x8f1
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	227f      	movs	r2, #127	; 0x7f
 8008d4a:	f883 28f2 	strb.w	r2, [r3, #2290]	; 0x8f2
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2241      	movs	r2, #65	; 0x41
 8008d52:	f883 28f4 	strb.w	r2, [r3, #2292]	; 0x8f4
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	227f      	movs	r2, #127	; 0x7f
 8008d5a:	f883 28f5 	strb.w	r2, [r3, #2293]	; 0x8f5
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2241      	movs	r2, #65	; 0x41
 8008d62:	f883 28f6 	strb.w	r2, [r3, #2294]	; 0x8f6
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2220      	movs	r2, #32
 8008d6a:	f883 28f8 	strb.w	r2, [r3, #2296]	; 0x8f8
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2240      	movs	r2, #64	; 0x40
 8008d72:	f883 28f9 	strb.w	r2, [r3, #2297]	; 0x8f9
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2241      	movs	r2, #65	; 0x41
 8008d7a:	f883 28fa 	strb.w	r2, [r3, #2298]	; 0x8fa
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	223f      	movs	r2, #63	; 0x3f
 8008d82:	f883 28fb 	strb.w	r2, [r3, #2299]	; 0x8fb
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2201      	movs	r2, #1
 8008d8a:	f883 28fc 	strb.w	r2, [r3, #2300]	; 0x8fc
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	227f      	movs	r2, #127	; 0x7f
 8008d92:	f883 28fd 	strb.w	r2, [r3, #2301]	; 0x8fd
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2208      	movs	r2, #8
 8008d9a:	f883 28fe 	strb.w	r2, [r3, #2302]	; 0x8fe
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2214      	movs	r2, #20
 8008da2:	f883 28ff 	strb.w	r2, [r3, #2303]	; 0x8ff
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2222      	movs	r2, #34	; 0x22
 8008daa:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2241      	movs	r2, #65	; 0x41
 8008db2:	f883 2901 	strb.w	r2, [r3, #2305]	; 0x901
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	227f      	movs	r2, #127	; 0x7f
 8008dba:	f883 2902 	strb.w	r2, [r3, #2306]	; 0x902
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2240      	movs	r2, #64	; 0x40
 8008dc2:	f883 2903 	strb.w	r2, [r3, #2307]	; 0x903
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2240      	movs	r2, #64	; 0x40
 8008dca:	f883 2904 	strb.w	r2, [r3, #2308]	; 0x904
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2240      	movs	r2, #64	; 0x40
 8008dd2:	f883 2905 	strb.w	r2, [r3, #2309]	; 0x905
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2240      	movs	r2, #64	; 0x40
 8008dda:	f883 2906 	strb.w	r2, [r3, #2310]	; 0x906
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	227f      	movs	r2, #127	; 0x7f
 8008de2:	f883 2907 	strb.w	r2, [r3, #2311]	; 0x907
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2202      	movs	r2, #2
 8008dea:	f883 2908 	strb.w	r2, [r3, #2312]	; 0x908
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2204      	movs	r2, #4
 8008df2:	f883 2909 	strb.w	r2, [r3, #2313]	; 0x909
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2202      	movs	r2, #2
 8008dfa:	f883 290a 	strb.w	r2, [r3, #2314]	; 0x90a
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	227f      	movs	r2, #127	; 0x7f
 8008e02:	f883 290b 	strb.w	r2, [r3, #2315]	; 0x90b
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	227f      	movs	r2, #127	; 0x7f
 8008e0a:	f883 290c 	strb.w	r2, [r3, #2316]	; 0x90c
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2204      	movs	r2, #4
 8008e12:	f883 290d 	strb.w	r2, [r3, #2317]	; 0x90d
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2208      	movs	r2, #8
 8008e1a:	f883 290e 	strb.w	r2, [r3, #2318]	; 0x90e
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2210      	movs	r2, #16
 8008e22:	f883 290f 	strb.w	r2, [r3, #2319]	; 0x90f
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	227f      	movs	r2, #127	; 0x7f
 8008e2a:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	223e      	movs	r2, #62	; 0x3e
 8008e32:	f883 2911 	strb.w	r2, [r3, #2321]	; 0x911
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2241      	movs	r2, #65	; 0x41
 8008e3a:	f883 2912 	strb.w	r2, [r3, #2322]	; 0x912
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2241      	movs	r2, #65	; 0x41
 8008e42:	f883 2913 	strb.w	r2, [r3, #2323]	; 0x913
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2241      	movs	r2, #65	; 0x41
 8008e4a:	f883 2914 	strb.w	r2, [r3, #2324]	; 0x914
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	223e      	movs	r2, #62	; 0x3e
 8008e52:	f883 2915 	strb.w	r2, [r3, #2325]	; 0x915
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	227f      	movs	r2, #127	; 0x7f
 8008e5a:	f883 2916 	strb.w	r2, [r3, #2326]	; 0x916
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2209      	movs	r2, #9
 8008e62:	f883 2917 	strb.w	r2, [r3, #2327]	; 0x917
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2209      	movs	r2, #9
 8008e6a:	f883 2918 	strb.w	r2, [r3, #2328]	; 0x918
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2209      	movs	r2, #9
 8008e72:	f883 2919 	strb.w	r2, [r3, #2329]	; 0x919
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2206      	movs	r2, #6
 8008e7a:	f883 291a 	strb.w	r2, [r3, #2330]	; 0x91a
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	223e      	movs	r2, #62	; 0x3e
 8008e82:	f883 291b 	strb.w	r2, [r3, #2331]	; 0x91b
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2241      	movs	r2, #65	; 0x41
 8008e8a:	f883 291c 	strb.w	r2, [r3, #2332]	; 0x91c
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2251      	movs	r2, #81	; 0x51
 8008e92:	f883 291d 	strb.w	r2, [r3, #2333]	; 0x91d
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2221      	movs	r2, #33	; 0x21
 8008e9a:	f883 291e 	strb.w	r2, [r3, #2334]	; 0x91e
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	225e      	movs	r2, #94	; 0x5e
 8008ea2:	f883 291f 	strb.w	r2, [r3, #2335]	; 0x91f
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	227f      	movs	r2, #127	; 0x7f
 8008eaa:	f883 2920 	strb.w	r2, [r3, #2336]	; 0x920
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2209      	movs	r2, #9
 8008eb2:	f883 2921 	strb.w	r2, [r3, #2337]	; 0x921
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2219      	movs	r2, #25
 8008eba:	f883 2922 	strb.w	r2, [r3, #2338]	; 0x922
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2229      	movs	r2, #41	; 0x29
 8008ec2:	f883 2923 	strb.w	r2, [r3, #2339]	; 0x923
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2246      	movs	r2, #70	; 0x46
 8008eca:	f883 2924 	strb.w	r2, [r3, #2340]	; 0x924
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2246      	movs	r2, #70	; 0x46
 8008ed2:	f883 2925 	strb.w	r2, [r3, #2341]	; 0x925
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2249      	movs	r2, #73	; 0x49
 8008eda:	f883 2926 	strb.w	r2, [r3, #2342]	; 0x926
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2249      	movs	r2, #73	; 0x49
 8008ee2:	f883 2927 	strb.w	r2, [r3, #2343]	; 0x927
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2249      	movs	r2, #73	; 0x49
 8008eea:	f883 2928 	strb.w	r2, [r3, #2344]	; 0x928
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2231      	movs	r2, #49	; 0x31
 8008ef2:	f883 2929 	strb.w	r2, [r3, #2345]	; 0x929
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2201      	movs	r2, #1
 8008efa:	f883 292a 	strb.w	r2, [r3, #2346]	; 0x92a
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2201      	movs	r2, #1
 8008f02:	f883 292b 	strb.w	r2, [r3, #2347]	; 0x92b
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	227f      	movs	r2, #127	; 0x7f
 8008f0a:	f883 292c 	strb.w	r2, [r3, #2348]	; 0x92c
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2201      	movs	r2, #1
 8008f12:	f883 292d 	strb.w	r2, [r3, #2349]	; 0x92d
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2201      	movs	r2, #1
 8008f1a:	f883 292e 	strb.w	r2, [r3, #2350]	; 0x92e
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	223f      	movs	r2, #63	; 0x3f
 8008f22:	f883 292f 	strb.w	r2, [r3, #2351]	; 0x92f
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2240      	movs	r2, #64	; 0x40
 8008f2a:	f883 2930 	strb.w	r2, [r3, #2352]	; 0x930
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2240      	movs	r2, #64	; 0x40
 8008f32:	f883 2931 	strb.w	r2, [r3, #2353]	; 0x931
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2240      	movs	r2, #64	; 0x40
 8008f3a:	f883 2932 	strb.w	r2, [r3, #2354]	; 0x932
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	223f      	movs	r2, #63	; 0x3f
 8008f42:	f883 2933 	strb.w	r2, [r3, #2355]	; 0x933
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	221f      	movs	r2, #31
 8008f4a:	f883 2934 	strb.w	r2, [r3, #2356]	; 0x934
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2220      	movs	r2, #32
 8008f52:	f883 2935 	strb.w	r2, [r3, #2357]	; 0x935
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2240      	movs	r2, #64	; 0x40
 8008f5a:	f883 2936 	strb.w	r2, [r3, #2358]	; 0x936
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2220      	movs	r2, #32
 8008f62:	f883 2937 	strb.w	r2, [r3, #2359]	; 0x937
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	221f      	movs	r2, #31
 8008f6a:	f883 2938 	strb.w	r2, [r3, #2360]	; 0x938
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	227f      	movs	r2, #127	; 0x7f
 8008f72:	f883 2939 	strb.w	r2, [r3, #2361]	; 0x939
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2220      	movs	r2, #32
 8008f7a:	f883 293a 	strb.w	r2, [r3, #2362]	; 0x93a
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2218      	movs	r2, #24
 8008f82:	f883 293b 	strb.w	r2, [r3, #2363]	; 0x93b
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2220      	movs	r2, #32
 8008f8a:	f883 293c 	strb.w	r2, [r3, #2364]	; 0x93c
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	227f      	movs	r2, #127	; 0x7f
 8008f92:	f883 293d 	strb.w	r2, [r3, #2365]	; 0x93d
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2263      	movs	r2, #99	; 0x63
 8008f9a:	f883 293e 	strb.w	r2, [r3, #2366]	; 0x93e
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2214      	movs	r2, #20
 8008fa2:	f883 293f 	strb.w	r2, [r3, #2367]	; 0x93f
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2208      	movs	r2, #8
 8008faa:	f883 2940 	strb.w	r2, [r3, #2368]	; 0x940
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2214      	movs	r2, #20
 8008fb2:	f883 2941 	strb.w	r2, [r3, #2369]	; 0x941
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2263      	movs	r2, #99	; 0x63
 8008fba:	f883 2942 	strb.w	r2, [r3, #2370]	; 0x942
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2203      	movs	r2, #3
 8008fc2:	f883 2943 	strb.w	r2, [r3, #2371]	; 0x943
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2204      	movs	r2, #4
 8008fca:	f883 2944 	strb.w	r2, [r3, #2372]	; 0x944
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2278      	movs	r2, #120	; 0x78
 8008fd2:	f883 2945 	strb.w	r2, [r3, #2373]	; 0x945
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2204      	movs	r2, #4
 8008fda:	f883 2946 	strb.w	r2, [r3, #2374]	; 0x946
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2203      	movs	r2, #3
 8008fe2:	f883 2947 	strb.w	r2, [r3, #2375]	; 0x947
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2261      	movs	r2, #97	; 0x61
 8008fea:	f883 2948 	strb.w	r2, [r3, #2376]	; 0x948
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2251      	movs	r2, #81	; 0x51
 8008ff2:	f883 2949 	strb.w	r2, [r3, #2377]	; 0x949
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2249      	movs	r2, #73	; 0x49
 8008ffa:	f883 294a 	strb.w	r2, [r3, #2378]	; 0x94a
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2245      	movs	r2, #69	; 0x45
 8009002:	f883 294b 	strb.w	r2, [r3, #2379]	; 0x94b
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2243      	movs	r2, #67	; 0x43
 800900a:	f883 294c 	strb.w	r2, [r3, #2380]	; 0x94c
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	227f      	movs	r2, #127	; 0x7f
 8009012:	f883 294f 	strb.w	r2, [r3, #2383]	; 0x94f
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2241      	movs	r2, #65	; 0x41
 800901a:	f883 2950 	strb.w	r2, [r3, #2384]	; 0x950
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2241      	movs	r2, #65	; 0x41
 8009022:	f883 2951 	strb.w	r2, [r3, #2385]	; 0x951
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2202      	movs	r2, #2
 800902a:	f883 2952 	strb.w	r2, [r3, #2386]	; 0x952
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2204      	movs	r2, #4
 8009032:	f883 2953 	strb.w	r2, [r3, #2387]	; 0x953
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2208      	movs	r2, #8
 800903a:	f883 2954 	strb.w	r2, [r3, #2388]	; 0x954
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2210      	movs	r2, #16
 8009042:	f883 2955 	strb.w	r2, [r3, #2389]	; 0x955
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2220      	movs	r2, #32
 800904a:	f883 2956 	strb.w	r2, [r3, #2390]	; 0x956
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2241      	movs	r2, #65	; 0x41
 8009052:	f883 2957 	strb.w	r2, [r3, #2391]	; 0x957
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2241      	movs	r2, #65	; 0x41
 800905a:	f883 2958 	strb.w	r2, [r3, #2392]	; 0x958
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	227f      	movs	r2, #127	; 0x7f
 8009062:	f883 2959 	strb.w	r2, [r3, #2393]	; 0x959
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2204      	movs	r2, #4
 800906a:	f883 295c 	strb.w	r2, [r3, #2396]	; 0x95c
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2202      	movs	r2, #2
 8009072:	f883 295d 	strb.w	r2, [r3, #2397]	; 0x95d
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2201      	movs	r2, #1
 800907a:	f883 295e 	strb.w	r2, [r3, #2398]	; 0x95e
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2202      	movs	r2, #2
 8009082:	f883 295f 	strb.w	r2, [r3, #2399]	; 0x95f
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2204      	movs	r2, #4
 800908a:	f883 2960 	strb.w	r2, [r3, #2400]	; 0x960
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2240      	movs	r2, #64	; 0x40
 8009092:	f883 2961 	strb.w	r2, [r3, #2401]	; 0x961
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2240      	movs	r2, #64	; 0x40
 800909a:	f883 2962 	strb.w	r2, [r3, #2402]	; 0x962
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2240      	movs	r2, #64	; 0x40
 80090a2:	f883 2963 	strb.w	r2, [r3, #2403]	; 0x963
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2240      	movs	r2, #64	; 0x40
 80090aa:	f883 2964 	strb.w	r2, [r3, #2404]	; 0x964
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2240      	movs	r2, #64	; 0x40
 80090b2:	f883 2965 	strb.w	r2, [r3, #2405]	; 0x965
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2201      	movs	r2, #1
 80090ba:	f883 2967 	strb.w	r2, [r3, #2407]	; 0x967
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2202      	movs	r2, #2
 80090c2:	f883 2968 	strb.w	r2, [r3, #2408]	; 0x968
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2204      	movs	r2, #4
 80090ca:	f883 2969 	strb.w	r2, [r3, #2409]	; 0x969
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2220      	movs	r2, #32
 80090d2:	f883 296b 	strb.w	r2, [r3, #2411]	; 0x96b
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2254      	movs	r2, #84	; 0x54
 80090da:	f883 296c 	strb.w	r2, [r3, #2412]	; 0x96c
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2254      	movs	r2, #84	; 0x54
 80090e2:	f883 296d 	strb.w	r2, [r3, #2413]	; 0x96d
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2254      	movs	r2, #84	; 0x54
 80090ea:	f883 296e 	strb.w	r2, [r3, #2414]	; 0x96e
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2278      	movs	r2, #120	; 0x78
 80090f2:	f883 296f 	strb.w	r2, [r3, #2415]	; 0x96f
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	227f      	movs	r2, #127	; 0x7f
 80090fa:	f883 2970 	strb.w	r2, [r3, #2416]	; 0x970
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2248      	movs	r2, #72	; 0x48
 8009102:	f883 2971 	strb.w	r2, [r3, #2417]	; 0x971
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2244      	movs	r2, #68	; 0x44
 800910a:	f883 2972 	strb.w	r2, [r3, #2418]	; 0x972
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2244      	movs	r2, #68	; 0x44
 8009112:	f883 2973 	strb.w	r2, [r3, #2419]	; 0x973
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2238      	movs	r2, #56	; 0x38
 800911a:	f883 2974 	strb.w	r2, [r3, #2420]	; 0x974
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2238      	movs	r2, #56	; 0x38
 8009122:	f883 2975 	strb.w	r2, [r3, #2421]	; 0x975
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2244      	movs	r2, #68	; 0x44
 800912a:	f883 2976 	strb.w	r2, [r3, #2422]	; 0x976
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2244      	movs	r2, #68	; 0x44
 8009132:	f883 2977 	strb.w	r2, [r3, #2423]	; 0x977
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2244      	movs	r2, #68	; 0x44
 800913a:	f883 2978 	strb.w	r2, [r3, #2424]	; 0x978
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2220      	movs	r2, #32
 8009142:	f883 2979 	strb.w	r2, [r3, #2425]	; 0x979
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2238      	movs	r2, #56	; 0x38
 800914a:	f883 297a 	strb.w	r2, [r3, #2426]	; 0x97a
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2244      	movs	r2, #68	; 0x44
 8009152:	f883 297b 	strb.w	r2, [r3, #2427]	; 0x97b
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2244      	movs	r2, #68	; 0x44
 800915a:	f883 297c 	strb.w	r2, [r3, #2428]	; 0x97c
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2248      	movs	r2, #72	; 0x48
 8009162:	f883 297d 	strb.w	r2, [r3, #2429]	; 0x97d
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	227f      	movs	r2, #127	; 0x7f
 800916a:	f883 297e 	strb.w	r2, [r3, #2430]	; 0x97e
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2238      	movs	r2, #56	; 0x38
 8009172:	f883 297f 	strb.w	r2, [r3, #2431]	; 0x97f
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2254      	movs	r2, #84	; 0x54
 800917a:	f883 2980 	strb.w	r2, [r3, #2432]	; 0x980
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2254      	movs	r2, #84	; 0x54
 8009182:	f883 2981 	strb.w	r2, [r3, #2433]	; 0x981
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2254      	movs	r2, #84	; 0x54
 800918a:	f883 2982 	strb.w	r2, [r3, #2434]	; 0x982
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2218      	movs	r2, #24
 8009192:	f883 2983 	strb.w	r2, [r3, #2435]	; 0x983
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2208      	movs	r2, #8
 800919a:	f883 2984 	strb.w	r2, [r3, #2436]	; 0x984
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	227e      	movs	r2, #126	; 0x7e
 80091a2:	f883 2985 	strb.w	r2, [r3, #2437]	; 0x985
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2209      	movs	r2, #9
 80091aa:	f883 2986 	strb.w	r2, [r3, #2438]	; 0x986
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2201      	movs	r2, #1
 80091b2:	f883 2987 	strb.w	r2, [r3, #2439]	; 0x987
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2202      	movs	r2, #2
 80091ba:	f883 2988 	strb.w	r2, [r3, #2440]	; 0x988
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2208      	movs	r2, #8
 80091c2:	f883 2989 	strb.w	r2, [r3, #2441]	; 0x989
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2214      	movs	r2, #20
 80091ca:	f883 298a 	strb.w	r2, [r3, #2442]	; 0x98a
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2254      	movs	r2, #84	; 0x54
 80091d2:	f883 298b 	strb.w	r2, [r3, #2443]	; 0x98b
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2254      	movs	r2, #84	; 0x54
 80091da:	f883 298c 	strb.w	r2, [r3, #2444]	; 0x98c
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	223c      	movs	r2, #60	; 0x3c
 80091e2:	f883 298d 	strb.w	r2, [r3, #2445]	; 0x98d
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	227f      	movs	r2, #127	; 0x7f
 80091ea:	f883 298e 	strb.w	r2, [r3, #2446]	; 0x98e
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2208      	movs	r2, #8
 80091f2:	f883 298f 	strb.w	r2, [r3, #2447]	; 0x98f
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2204      	movs	r2, #4
 80091fa:	f883 2990 	strb.w	r2, [r3, #2448]	; 0x990
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2204      	movs	r2, #4
 8009202:	f883 2991 	strb.w	r2, [r3, #2449]	; 0x991
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2278      	movs	r2, #120	; 0x78
 800920a:	f883 2992 	strb.w	r2, [r3, #2450]	; 0x992
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2244      	movs	r2, #68	; 0x44
 8009212:	f883 2994 	strb.w	r2, [r3, #2452]	; 0x994
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	227d      	movs	r2, #125	; 0x7d
 800921a:	f883 2995 	strb.w	r2, [r3, #2453]	; 0x995
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2240      	movs	r2, #64	; 0x40
 8009222:	f883 2996 	strb.w	r2, [r3, #2454]	; 0x996
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2220      	movs	r2, #32
 800922a:	f883 2998 	strb.w	r2, [r3, #2456]	; 0x998
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2240      	movs	r2, #64	; 0x40
 8009232:	f883 2999 	strb.w	r2, [r3, #2457]	; 0x999
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2244      	movs	r2, #68	; 0x44
 800923a:	f883 299a 	strb.w	r2, [r3, #2458]	; 0x99a
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	223d      	movs	r2, #61	; 0x3d
 8009242:	f883 299b 	strb.w	r2, [r3, #2459]	; 0x99b
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	227f      	movs	r2, #127	; 0x7f
 800924a:	f883 299e 	strb.w	r2, [r3, #2462]	; 0x99e
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2210      	movs	r2, #16
 8009252:	f883 299f 	strb.w	r2, [r3, #2463]	; 0x99f
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2228      	movs	r2, #40	; 0x28
 800925a:	f883 29a0 	strb.w	r2, [r3, #2464]	; 0x9a0
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2244      	movs	r2, #68	; 0x44
 8009262:	f883 29a1 	strb.w	r2, [r3, #2465]	; 0x9a1
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2241      	movs	r2, #65	; 0x41
 800926a:	f883 29a3 	strb.w	r2, [r3, #2467]	; 0x9a3
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	227f      	movs	r2, #127	; 0x7f
 8009272:	f883 29a4 	strb.w	r2, [r3, #2468]	; 0x9a4
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2240      	movs	r2, #64	; 0x40
 800927a:	f883 29a5 	strb.w	r2, [r3, #2469]	; 0x9a5
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	227c      	movs	r2, #124	; 0x7c
 8009282:	f883 29a7 	strb.w	r2, [r3, #2471]	; 0x9a7
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2204      	movs	r2, #4
 800928a:	f883 29a8 	strb.w	r2, [r3, #2472]	; 0x9a8
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2218      	movs	r2, #24
 8009292:	f883 29a9 	strb.w	r2, [r3, #2473]	; 0x9a9
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2204      	movs	r2, #4
 800929a:	f883 29aa 	strb.w	r2, [r3, #2474]	; 0x9aa
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2278      	movs	r2, #120	; 0x78
 80092a2:	f883 29ab 	strb.w	r2, [r3, #2475]	; 0x9ab
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	227c      	movs	r2, #124	; 0x7c
 80092aa:	f883 29ac 	strb.w	r2, [r3, #2476]	; 0x9ac
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2208      	movs	r2, #8
 80092b2:	f883 29ad 	strb.w	r2, [r3, #2477]	; 0x9ad
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2204      	movs	r2, #4
 80092ba:	f883 29ae 	strb.w	r2, [r3, #2478]	; 0x9ae
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2204      	movs	r2, #4
 80092c2:	f883 29af 	strb.w	r2, [r3, #2479]	; 0x9af
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2278      	movs	r2, #120	; 0x78
 80092ca:	f883 29b0 	strb.w	r2, [r3, #2480]	; 0x9b0
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2238      	movs	r2, #56	; 0x38
 80092d2:	f883 29b1 	strb.w	r2, [r3, #2481]	; 0x9b1
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2244      	movs	r2, #68	; 0x44
 80092da:	f883 29b2 	strb.w	r2, [r3, #2482]	; 0x9b2
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2244      	movs	r2, #68	; 0x44
 80092e2:	f883 29b3 	strb.w	r2, [r3, #2483]	; 0x9b3
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2244      	movs	r2, #68	; 0x44
 80092ea:	f883 29b4 	strb.w	r2, [r3, #2484]	; 0x9b4
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2238      	movs	r2, #56	; 0x38
 80092f2:	f883 29b5 	strb.w	r2, [r3, #2485]	; 0x9b5
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	227c      	movs	r2, #124	; 0x7c
 80092fa:	f883 29b6 	strb.w	r2, [r3, #2486]	; 0x9b6
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2214      	movs	r2, #20
 8009302:	f883 29b7 	strb.w	r2, [r3, #2487]	; 0x9b7
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2214      	movs	r2, #20
 800930a:	f883 29b8 	strb.w	r2, [r3, #2488]	; 0x9b8
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2214      	movs	r2, #20
 8009312:	f883 29b9 	strb.w	r2, [r3, #2489]	; 0x9b9
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2208      	movs	r2, #8
 800931a:	f883 29ba 	strb.w	r2, [r3, #2490]	; 0x9ba
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2208      	movs	r2, #8
 8009322:	f883 29bb 	strb.w	r2, [r3, #2491]	; 0x9bb
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2214      	movs	r2, #20
 800932a:	f883 29bc 	strb.w	r2, [r3, #2492]	; 0x9bc
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2214      	movs	r2, #20
 8009332:	f883 29bd 	strb.w	r2, [r3, #2493]	; 0x9bd
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2218      	movs	r2, #24
 800933a:	f883 29be 	strb.w	r2, [r3, #2494]	; 0x9be
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	227c      	movs	r2, #124	; 0x7c
 8009342:	f883 29bf 	strb.w	r2, [r3, #2495]	; 0x9bf
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	227c      	movs	r2, #124	; 0x7c
 800934a:	f883 29c0 	strb.w	r2, [r3, #2496]	; 0x9c0
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2208      	movs	r2, #8
 8009352:	f883 29c1 	strb.w	r2, [r3, #2497]	; 0x9c1
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2204      	movs	r2, #4
 800935a:	f883 29c2 	strb.w	r2, [r3, #2498]	; 0x9c2
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2204      	movs	r2, #4
 8009362:	f883 29c3 	strb.w	r2, [r3, #2499]	; 0x9c3
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2208      	movs	r2, #8
 800936a:	f883 29c4 	strb.w	r2, [r3, #2500]	; 0x9c4
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2248      	movs	r2, #72	; 0x48
 8009372:	f883 29c5 	strb.w	r2, [r3, #2501]	; 0x9c5
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2254      	movs	r2, #84	; 0x54
 800937a:	f883 29c6 	strb.w	r2, [r3, #2502]	; 0x9c6
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2254      	movs	r2, #84	; 0x54
 8009382:	f883 29c7 	strb.w	r2, [r3, #2503]	; 0x9c7
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2254      	movs	r2, #84	; 0x54
 800938a:	f883 29c8 	strb.w	r2, [r3, #2504]	; 0x9c8
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2220      	movs	r2, #32
 8009392:	f883 29c9 	strb.w	r2, [r3, #2505]	; 0x9c9
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2204      	movs	r2, #4
 800939a:	f883 29ca 	strb.w	r2, [r3, #2506]	; 0x9ca
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	223f      	movs	r2, #63	; 0x3f
 80093a2:	f883 29cb 	strb.w	r2, [r3, #2507]	; 0x9cb
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2244      	movs	r2, #68	; 0x44
 80093aa:	f883 29cc 	strb.w	r2, [r3, #2508]	; 0x9cc
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2240      	movs	r2, #64	; 0x40
 80093b2:	f883 29cd 	strb.w	r2, [r3, #2509]	; 0x9cd
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2220      	movs	r2, #32
 80093ba:	f883 29ce 	strb.w	r2, [r3, #2510]	; 0x9ce
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	223c      	movs	r2, #60	; 0x3c
 80093c2:	f883 29cf 	strb.w	r2, [r3, #2511]	; 0x9cf
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2240      	movs	r2, #64	; 0x40
 80093ca:	f883 29d0 	strb.w	r2, [r3, #2512]	; 0x9d0
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2240      	movs	r2, #64	; 0x40
 80093d2:	f883 29d1 	strb.w	r2, [r3, #2513]	; 0x9d1
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2220      	movs	r2, #32
 80093da:	f883 29d2 	strb.w	r2, [r3, #2514]	; 0x9d2
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	227c      	movs	r2, #124	; 0x7c
 80093e2:	f883 29d3 	strb.w	r2, [r3, #2515]	; 0x9d3
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	221c      	movs	r2, #28
 80093ea:	f883 29d4 	strb.w	r2, [r3, #2516]	; 0x9d4
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2220      	movs	r2, #32
 80093f2:	f883 29d5 	strb.w	r2, [r3, #2517]	; 0x9d5
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2240      	movs	r2, #64	; 0x40
 80093fa:	f883 29d6 	strb.w	r2, [r3, #2518]	; 0x9d6
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2220      	movs	r2, #32
 8009402:	f883 29d7 	strb.w	r2, [r3, #2519]	; 0x9d7
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	221c      	movs	r2, #28
 800940a:	f883 29d8 	strb.w	r2, [r3, #2520]	; 0x9d8
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	223c      	movs	r2, #60	; 0x3c
 8009412:	f883 29d9 	strb.w	r2, [r3, #2521]	; 0x9d9
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2240      	movs	r2, #64	; 0x40
 800941a:	f883 29da 	strb.w	r2, [r3, #2522]	; 0x9da
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2230      	movs	r2, #48	; 0x30
 8009422:	f883 29db 	strb.w	r2, [r3, #2523]	; 0x9db
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2240      	movs	r2, #64	; 0x40
 800942a:	f883 29dc 	strb.w	r2, [r3, #2524]	; 0x9dc
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	223c      	movs	r2, #60	; 0x3c
 8009432:	f883 29dd 	strb.w	r2, [r3, #2525]	; 0x9dd
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2244      	movs	r2, #68	; 0x44
 800943a:	f883 29de 	strb.w	r2, [r3, #2526]	; 0x9de
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2228      	movs	r2, #40	; 0x28
 8009442:	f883 29df 	strb.w	r2, [r3, #2527]	; 0x9df
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2210      	movs	r2, #16
 800944a:	f883 29e0 	strb.w	r2, [r3, #2528]	; 0x9e0
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2228      	movs	r2, #40	; 0x28
 8009452:	f883 29e1 	strb.w	r2, [r3, #2529]	; 0x9e1
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2244      	movs	r2, #68	; 0x44
 800945a:	f883 29e2 	strb.w	r2, [r3, #2530]	; 0x9e2
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	220c      	movs	r2, #12
 8009462:	f883 29e3 	strb.w	r2, [r3, #2531]	; 0x9e3
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2250      	movs	r2, #80	; 0x50
 800946a:	f883 29e4 	strb.w	r2, [r3, #2532]	; 0x9e4
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2250      	movs	r2, #80	; 0x50
 8009472:	f883 29e5 	strb.w	r2, [r3, #2533]	; 0x9e5
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2250      	movs	r2, #80	; 0x50
 800947a:	f883 29e6 	strb.w	r2, [r3, #2534]	; 0x9e6
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	223c      	movs	r2, #60	; 0x3c
 8009482:	f883 29e7 	strb.w	r2, [r3, #2535]	; 0x9e7
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2244      	movs	r2, #68	; 0x44
 800948a:	f883 29e8 	strb.w	r2, [r3, #2536]	; 0x9e8
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2264      	movs	r2, #100	; 0x64
 8009492:	f883 29e9 	strb.w	r2, [r3, #2537]	; 0x9e9
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2254      	movs	r2, #84	; 0x54
 800949a:	f883 29ea 	strb.w	r2, [r3, #2538]	; 0x9ea
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	224c      	movs	r2, #76	; 0x4c
 80094a2:	f883 29eb 	strb.w	r2, [r3, #2539]	; 0x9eb
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2244      	movs	r2, #68	; 0x44
 80094aa:	f883 29ec 	strb.w	r2, [r3, #2540]	; 0x9ec
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2208      	movs	r2, #8
 80094b2:	f883 29ee 	strb.w	r2, [r3, #2542]	; 0x9ee
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2236      	movs	r2, #54	; 0x36
 80094ba:	f883 29ef 	strb.w	r2, [r3, #2543]	; 0x9ef
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2241      	movs	r2, #65	; 0x41
 80094c2:	f883 29f0 	strb.w	r2, [r3, #2544]	; 0x9f0
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	227f      	movs	r2, #127	; 0x7f
 80094ca:	f883 29f4 	strb.w	r2, [r3, #2548]	; 0x9f4
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2241      	movs	r2, #65	; 0x41
 80094d2:	f883 29f8 	strb.w	r2, [r3, #2552]	; 0x9f8
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2236      	movs	r2, #54	; 0x36
 80094da:	f883 29f9 	strb.w	r2, [r3, #2553]	; 0x9f9
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2208      	movs	r2, #8
 80094e2:	f883 29fa 	strb.w	r2, [r3, #2554]	; 0x9fa
	// TODO Auto-generated constructor stub

}
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	4618      	mov	r0, r3
 80094ea:	3708      	adds	r7, #8
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bdb0      	pop	{r4, r5, r7, pc}

080094f0 <_ZN4GLCDD1Ev>:

GLCD::~GLCD() {
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	4a05      	ldr	r2, [pc, #20]	; (8009510 <_ZN4GLCDD1Ev+0x20>)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	601a      	str	r2, [r3, #0]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	4618      	mov	r0, r3
 8009502:	f7fb ff01 	bl	8005308 <_ZN6commonD1Ev>
	// TODO Auto-generated destructor stub
}
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	4618      	mov	r0, r3
 800950a:	3708      	adds	r7, #8
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}
 8009510:	0800f104 	.word	0x0800f104

08009514 <_ZN4GLCDD0Ev>:
GLCD::~GLCD() {
 8009514:	b580      	push	{r7, lr}
 8009516:	b082      	sub	sp, #8
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
}
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f7ff ffe7 	bl	80094f0 <_ZN4GLCDD1Ev>
 8009522:	f640 2104 	movw	r1, #2564	; 0xa04
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f005 fbf7 	bl	800ed1a <_ZdlPvj>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	4618      	mov	r0, r3
 8009530:	3708      	adds	r7, #8
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
	...

08009538 <_ZN4GLCD9m_ctrloffEv>:

void GLCD::m_ctrloff(){
 8009538:	b580      	push	{r7, lr}
 800953a:	b082      	sub	sp, #8
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 8009540:	2200      	movs	r2, #0
 8009542:	2110      	movs	r1, #16
 8009544:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009548:	f000 ff96 	bl	800a478 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 800954c:	2200      	movs	r2, #0
 800954e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009552:	480c      	ldr	r0, [pc, #48]	; (8009584 <_ZN4GLCD9m_ctrloffEv+0x4c>)
 8009554:	f000 ff90 	bl	800a478 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8009558:	2200      	movs	r2, #0
 800955a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800955e:	4809      	ldr	r0, [pc, #36]	; (8009584 <_ZN4GLCD9m_ctrloffEv+0x4c>)
 8009560:	f000 ff8a 	bl	800a478 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_RESET);
 8009564:	2200      	movs	r2, #0
 8009566:	2104      	movs	r1, #4
 8009568:	4807      	ldr	r0, [pc, #28]	; (8009588 <_ZN4GLCD9m_ctrloffEv+0x50>)
 800956a:	f000 ff85 	bl	800a478 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_RESET);
 800956e:	2200      	movs	r2, #0
 8009570:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009574:	4803      	ldr	r0, [pc, #12]	; (8009584 <_ZN4GLCD9m_ctrloffEv+0x4c>)
 8009576:	f000 ff7f 	bl	800a478 <HAL_GPIO_WritePin>
}
 800957a:	bf00      	nop
 800957c:	3708      	adds	r7, #8
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
 8009582:	bf00      	nop
 8009584:	48000800 	.word	0x48000800
 8009588:	48000c00 	.word	0x48000c00

0800958c <_ZN4GLCD7m_delayEjh>:
	__HAL_TIM_SET_COUNTER(&htim1, 0);  // reset the counter
	while ((__HAL_TIM_GET_COUNTER(&htim1))<delay);  // wait for the delay to complete
}

void GLCD::m_delay(unsigned int j,uint8_t a)
{
 800958c:	b480      	push	{r7}
 800958e:	b087      	sub	sp, #28
 8009590:	af00      	add	r7, sp, #0
 8009592:	60f8      	str	r0, [r7, #12]
 8009594:	60b9      	str	r1, [r7, #8]
 8009596:	4613      	mov	r3, r2
 8009598:	71fb      	strb	r3, [r7, #7]
	unsigned int i,k;
	for(i=0;i<j;i++)
 800959a:	2300      	movs	r3, #0
 800959c:	617b      	str	r3, [r7, #20]
 800959e:	697a      	ldr	r2, [r7, #20]
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d20d      	bcs.n	80095c2 <_ZN4GLCD7m_delayEjh+0x36>
 	{for(k=0;k<a;k++);
 80095a6:	2300      	movs	r3, #0
 80095a8:	613b      	str	r3, [r7, #16]
 80095aa:	79fb      	ldrb	r3, [r7, #7]
 80095ac:	693a      	ldr	r2, [r7, #16]
 80095ae:	429a      	cmp	r2, r3
 80095b0:	d203      	bcs.n	80095ba <_ZN4GLCD7m_delayEjh+0x2e>
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	3301      	adds	r3, #1
 80095b6:	613b      	str	r3, [r7, #16]
 80095b8:	e7f7      	b.n	80095aa <_ZN4GLCD7m_delayEjh+0x1e>
	for(i=0;i<j;i++)
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	3301      	adds	r3, #1
 80095be:	617b      	str	r3, [r7, #20]
 80095c0:	e7ed      	b.n	800959e <_ZN4GLCD7m_delayEjh+0x12>
	}
}
 80095c2:	bf00      	nop
 80095c4:	371c      	adds	r7, #28
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr
	...

080095d0 <_ZN4GLCD16m_IOWritethedataEh>:

void GLCD::m_IOWritethedata(const uint8_t finput)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b082      	sub	sp, #8
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	460b      	mov	r3, r1
 80095da:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOC,LCDD0_Pin,ReadtheValueAssignPinstate(0,finput));
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	78fa      	ldrb	r2, [r7, #3]
 80095e0:	2100      	movs	r1, #0
 80095e2:	4618      	mov	r0, r3
 80095e4:	f7fb ffe8 	bl	80055b8 <_ZN6common26ReadtheValueAssignPinstateEhh>
 80095e8:	4603      	mov	r3, r0
 80095ea:	461a      	mov	r2, r3
 80095ec:	2108      	movs	r1, #8
 80095ee:	482f      	ldr	r0, [pc, #188]	; (80096ac <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 80095f0:	f000 ff42 	bl	800a478 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD1_Pin,ReadtheValueAssignPinstate(1,finput));
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	78fa      	ldrb	r2, [r7, #3]
 80095f8:	2101      	movs	r1, #1
 80095fa:	4618      	mov	r0, r3
 80095fc:	f7fb ffdc 	bl	80055b8 <_ZN6common26ReadtheValueAssignPinstateEhh>
 8009600:	4603      	mov	r3, r0
 8009602:	461a      	mov	r2, r3
 8009604:	2104      	movs	r1, #4
 8009606:	4829      	ldr	r0, [pc, #164]	; (80096ac <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 8009608:	f000 ff36 	bl	800a478 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD2_Pin,ReadtheValueAssignPinstate(2,finput));
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	78fa      	ldrb	r2, [r7, #3]
 8009610:	2102      	movs	r1, #2
 8009612:	4618      	mov	r0, r3
 8009614:	f7fb ffd0 	bl	80055b8 <_ZN6common26ReadtheValueAssignPinstateEhh>
 8009618:	4603      	mov	r3, r0
 800961a:	461a      	mov	r2, r3
 800961c:	2102      	movs	r1, #2
 800961e:	4823      	ldr	r0, [pc, #140]	; (80096ac <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 8009620:	f000 ff2a 	bl	800a478 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD3_Pin,ReadtheValueAssignPinstate(3,finput));
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	78fa      	ldrb	r2, [r7, #3]
 8009628:	2103      	movs	r1, #3
 800962a:	4618      	mov	r0, r3
 800962c:	f7fb ffc4 	bl	80055b8 <_ZN6common26ReadtheValueAssignPinstateEhh>
 8009630:	4603      	mov	r3, r0
 8009632:	461a      	mov	r2, r3
 8009634:	2101      	movs	r1, #1
 8009636:	481d      	ldr	r0, [pc, #116]	; (80096ac <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 8009638:	f000 ff1e 	bl	800a478 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD4_Pin,ReadtheValueAssignPinstate(4,finput));
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	78fa      	ldrb	r2, [r7, #3]
 8009640:	2104      	movs	r1, #4
 8009642:	4618      	mov	r0, r3
 8009644:	f7fb ffb8 	bl	80055b8 <_ZN6common26ReadtheValueAssignPinstateEhh>
 8009648:	4603      	mov	r3, r0
 800964a:	461a      	mov	r2, r3
 800964c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009650:	4816      	ldr	r0, [pc, #88]	; (80096ac <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 8009652:	f000 ff11 	bl	800a478 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD5_Pin,ReadtheValueAssignPinstate(5,finput));
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	78fa      	ldrb	r2, [r7, #3]
 800965a:	2105      	movs	r1, #5
 800965c:	4618      	mov	r0, r3
 800965e:	f7fb ffab 	bl	80055b8 <_ZN6common26ReadtheValueAssignPinstateEhh>
 8009662:	4603      	mov	r3, r0
 8009664:	461a      	mov	r2, r3
 8009666:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800966a:	4810      	ldr	r0, [pc, #64]	; (80096ac <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 800966c:	f000 ff04 	bl	800a478 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD6_Pin,ReadtheValueAssignPinstate(6,finput));
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	78fa      	ldrb	r2, [r7, #3]
 8009674:	2106      	movs	r1, #6
 8009676:	4618      	mov	r0, r3
 8009678:	f7fb ff9e 	bl	80055b8 <_ZN6common26ReadtheValueAssignPinstateEhh>
 800967c:	4603      	mov	r3, r0
 800967e:	461a      	mov	r2, r3
 8009680:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009684:	4809      	ldr	r0, [pc, #36]	; (80096ac <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 8009686:	f000 fef7 	bl	800a478 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,LCDD7_Pin, ReadtheValueAssignPinstate(7,finput));
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	78fa      	ldrb	r2, [r7, #3]
 800968e:	2107      	movs	r1, #7
 8009690:	4618      	mov	r0, r3
 8009692:	f7fb ff91 	bl	80055b8 <_ZN6common26ReadtheValueAssignPinstateEhh>
 8009696:	4603      	mov	r3, r0
 8009698:	461a      	mov	r2, r3
 800969a:	2120      	movs	r1, #32
 800969c:	4804      	ldr	r0, [pc, #16]	; (80096b0 <_ZN4GLCD16m_IOWritethedataEh+0xe0>)
 800969e:	f000 feeb 	bl	800a478 <HAL_GPIO_WritePin>
}
 80096a2:	bf00      	nop
 80096a4:	3708      	adds	r7, #8
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
 80096aa:	bf00      	nop
 80096ac:	48000800 	.word	0x48000800
 80096b0:	48000400 	.word	0x48000400

080096b4 <_ZN4GLCD11m_displayonEv>:

void GLCD::m_displayon(){
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b082      	sub	sp, #8
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
	m_ctrloff();
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f7ff ff3b 	bl	8009538 <_ZN4GLCD9m_ctrloffEv>
	m_IOWritethedata(0x3f);
 80096c2:	213f      	movs	r1, #63	; 0x3f
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f7ff ff83 	bl	80095d0 <_ZN4GLCD16m_IOWritethedataEh>
	HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 80096ca:	2201      	movs	r2, #1
 80096cc:	2104      	movs	r1, #4
 80096ce:	4815      	ldr	r0, [pc, #84]	; (8009724 <_ZN4GLCD11m_displayonEv+0x70>)
 80096d0:	f000 fed2 	bl	800a478 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 80096d4:	2201      	movs	r2, #1
 80096d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80096da:	4813      	ldr	r0, [pc, #76]	; (8009728 <_ZN4GLCD11m_displayonEv+0x74>)
 80096dc:	f000 fecc 	bl	800a478 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 80096e0:	2200      	movs	r2, #0
 80096e2:	2110      	movs	r1, #16
 80096e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80096e8:	f000 fec6 	bl	800a478 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 80096ec:	2200      	movs	r2, #0
 80096ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80096f2:	480d      	ldr	r0, [pc, #52]	; (8009728 <_ZN4GLCD11m_displayonEv+0x74>)
 80096f4:	f000 fec0 	bl	800a478 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 80096f8:	2201      	movs	r2, #1
 80096fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80096fe:	480a      	ldr	r0, [pc, #40]	; (8009728 <_ZN4GLCD11m_displayonEv+0x74>)
 8009700:	f000 feba 	bl	800a478 <HAL_GPIO_WritePin>
	//m_delay(GLCDDELAY);
	m_delay(10,100);
 8009704:	2264      	movs	r2, #100	; 0x64
 8009706:	210a      	movs	r1, #10
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f7ff ff3f 	bl	800958c <_ZN4GLCD7m_delayEjh>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 800970e:	2200      	movs	r2, #0
 8009710:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009714:	4804      	ldr	r0, [pc, #16]	; (8009728 <_ZN4GLCD11m_displayonEv+0x74>)
 8009716:	f000 feaf 	bl	800a478 <HAL_GPIO_WritePin>
}
 800971a:	bf00      	nop
 800971c:	3708      	adds	r7, #8
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
 8009722:	bf00      	nop
 8009724:	48000c00 	.word	0x48000c00
 8009728:	48000800 	.word	0x48000800

0800972c <_ZN4GLCD11m_setcolumnEh>:
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
}


void GLCD::m_setcolumn(uint8_t Columvalue)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b084      	sub	sp, #16
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	460b      	mov	r3, r1
 8009736:	70fb      	strb	r3, [r7, #3]
	uint8_t dport;
	if(Columvalue <64)
 8009738:	78fb      	ldrb	r3, [r7, #3]
 800973a:	2b3f      	cmp	r3, #63	; 0x3f
 800973c:	d839      	bhi.n	80097b2 <_ZN4GLCD11m_setcolumnEh+0x86>
	{
		m_ctrloff();
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f7ff fefa 	bl	8009538 <_ZN4GLCD9m_ctrloffEv>
		c=Columvalue;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	78fa      	ldrb	r2, [r7, #3]
 8009748:	771a      	strb	r2, [r3, #28]
		m_IOWritethedata((0x40|(Columvalue&63)));
 800974a:	78fb      	ldrb	r3, [r7, #3]
 800974c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009750:	b2db      	uxtb	r3, r3
 8009752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009756:	b2db      	uxtb	r3, r3
 8009758:	4619      	mov	r1, r3
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f7ff ff38 	bl	80095d0 <_ZN4GLCD16m_IOWritethedataEh>
		HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 8009760:	2201      	movs	r2, #1
 8009762:	2104      	movs	r1, #4
 8009764:	4831      	ldr	r0, [pc, #196]	; (800982c <_ZN4GLCD11m_setcolumnEh+0x100>)
 8009766:	f000 fe87 	bl	800a478 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_RESET);
 800976a:	2200      	movs	r2, #0
 800976c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009770:	482f      	ldr	r0, [pc, #188]	; (8009830 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8009772:	f000 fe81 	bl	800a478 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 8009776:	2200      	movs	r2, #0
 8009778:	2110      	movs	r1, #16
 800977a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800977e:	f000 fe7b 	bl	800a478 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 8009782:	2200      	movs	r2, #0
 8009784:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009788:	4829      	ldr	r0, [pc, #164]	; (8009830 <_ZN4GLCD11m_setcolumnEh+0x104>)
 800978a:	f000 fe75 	bl	800a478 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 800978e:	2201      	movs	r2, #1
 8009790:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009794:	4826      	ldr	r0, [pc, #152]	; (8009830 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8009796:	f000 fe6f 	bl	800a478 <HAL_GPIO_WritePin>
		//m_delay(GLCDDELAY);
		m_delay(10,100);
 800979a:	2264      	movs	r2, #100	; 0x64
 800979c:	210a      	movs	r1, #10
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f7ff fef4 	bl	800958c <_ZN4GLCD7m_delayEjh>
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 80097a4:	2200      	movs	r2, #0
 80097a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80097aa:	4821      	ldr	r0, [pc, #132]	; (8009830 <_ZN4GLCD11m_setcolumnEh+0x104>)
 80097ac:	f000 fe64 	bl	800a478 <HAL_GPIO_WritePin>
		//m_delay(GLCDDELAY);
		m_delay(10,100);
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);

	}
}
 80097b0:	e038      	b.n	8009824 <_ZN4GLCD11m_setcolumnEh+0xf8>
		c=Columvalue;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	78fa      	ldrb	r2, [r7, #3]
 80097b6:	771a      	strb	r2, [r3, #28]
		dport=0x40|((Columvalue-64)&63);	  //0x40 represents Column 0
 80097b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80097bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097c0:	b25b      	sxtb	r3, r3
 80097c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097c6:	b25b      	sxtb	r3, r3
 80097c8:	73fb      	strb	r3, [r7, #15]
		m_IOWritethedata(dport);
 80097ca:	7bfb      	ldrb	r3, [r7, #15]
 80097cc:	4619      	mov	r1, r3
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f7ff fefe 	bl	80095d0 <_ZN4GLCD16m_IOWritethedataEh>
		HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_RESET);
 80097d4:	2200      	movs	r2, #0
 80097d6:	2104      	movs	r1, #4
 80097d8:	4814      	ldr	r0, [pc, #80]	; (800982c <_ZN4GLCD11m_setcolumnEh+0x100>)
 80097da:	f000 fe4d 	bl	800a478 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 80097de:	2201      	movs	r2, #1
 80097e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80097e4:	4812      	ldr	r0, [pc, #72]	; (8009830 <_ZN4GLCD11m_setcolumnEh+0x104>)
 80097e6:	f000 fe47 	bl	800a478 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 80097ea:	2200      	movs	r2, #0
 80097ec:	2110      	movs	r1, #16
 80097ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80097f2:	f000 fe41 	bl	800a478 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 80097f6:	2200      	movs	r2, #0
 80097f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80097fc:	480c      	ldr	r0, [pc, #48]	; (8009830 <_ZN4GLCD11m_setcolumnEh+0x104>)
 80097fe:	f000 fe3b 	bl	800a478 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 8009802:	2201      	movs	r2, #1
 8009804:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009808:	4809      	ldr	r0, [pc, #36]	; (8009830 <_ZN4GLCD11m_setcolumnEh+0x104>)
 800980a:	f000 fe35 	bl	800a478 <HAL_GPIO_WritePin>
		m_delay(10,100);
 800980e:	2264      	movs	r2, #100	; 0x64
 8009810:	210a      	movs	r1, #10
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f7ff feba 	bl	800958c <_ZN4GLCD7m_delayEjh>
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8009818:	2200      	movs	r2, #0
 800981a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800981e:	4804      	ldr	r0, [pc, #16]	; (8009830 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8009820:	f000 fe2a 	bl	800a478 <HAL_GPIO_WritePin>
}
 8009824:	bf00      	nop
 8009826:	3710      	adds	r7, #16
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}
 800982c:	48000c00 	.word	0x48000c00
 8009830:	48000800 	.word	0x48000800

08009834 <_ZN4GLCD9m_setpageEh>:

void GLCD::m_setpage(uint8_t x)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b084      	sub	sp, #16
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	460b      	mov	r3, r1
 800983e:	70fb      	strb	r3, [r7, #3]
	uint8_t dport;
	m_ctrloff();
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f7ff fe79 	bl	8009538 <_ZN4GLCD9m_ctrloffEv>
	dport= 0xb8|x;	   //0xb8 represents Page 0
 8009846:	78fb      	ldrb	r3, [r7, #3]
 8009848:	f063 0347 	orn	r3, r3, #71	; 0x47
 800984c:	73fb      	strb	r3, [r7, #15]
	m_IOWritethedata(dport);
 800984e:	7bfb      	ldrb	r3, [r7, #15]
 8009850:	4619      	mov	r1, r3
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f7ff febc 	bl	80095d0 <_ZN4GLCD16m_IOWritethedataEh>
	HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 8009858:	2201      	movs	r2, #1
 800985a:	2104      	movs	r1, #4
 800985c:	4814      	ldr	r0, [pc, #80]	; (80098b0 <_ZN4GLCD9m_setpageEh+0x7c>)
 800985e:	f000 fe0b 	bl	800a478 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 8009862:	2201      	movs	r2, #1
 8009864:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009868:	4812      	ldr	r0, [pc, #72]	; (80098b4 <_ZN4GLCD9m_setpageEh+0x80>)
 800986a:	f000 fe05 	bl	800a478 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 800986e:	2200      	movs	r2, #0
 8009870:	2110      	movs	r1, #16
 8009872:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009876:	f000 fdff 	bl	800a478 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 800987a:	2200      	movs	r2, #0
 800987c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009880:	480c      	ldr	r0, [pc, #48]	; (80098b4 <_ZN4GLCD9m_setpageEh+0x80>)
 8009882:	f000 fdf9 	bl	800a478 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 8009886:	2201      	movs	r2, #1
 8009888:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800988c:	4809      	ldr	r0, [pc, #36]	; (80098b4 <_ZN4GLCD9m_setpageEh+0x80>)
 800988e:	f000 fdf3 	bl	800a478 <HAL_GPIO_WritePin>
	//m_delay(GLCDDELAY);
	m_delay(10,100);
 8009892:	2264      	movs	r2, #100	; 0x64
 8009894:	210a      	movs	r1, #10
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f7ff fe78 	bl	800958c <_ZN4GLCD7m_delayEjh>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 800989c:	2200      	movs	r2, #0
 800989e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80098a2:	4804      	ldr	r0, [pc, #16]	; (80098b4 <_ZN4GLCD9m_setpageEh+0x80>)
 80098a4:	f000 fde8 	bl	800a478 <HAL_GPIO_WritePin>
}
 80098a8:	bf00      	nop
 80098aa:	3710      	adds	r7, #16
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}
 80098b0:	48000c00 	.word	0x48000c00
 80098b4:	48000800 	.word	0x48000800

080098b8 <_ZN4GLCD14m_setstartlineEh>:

void GLCD::m_setstartline(uint8_t z)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b084      	sub	sp, #16
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	460b      	mov	r3, r1
 80098c2:	70fb      	strb	r3, [r7, #3]
	uint8_t dport;
	m_ctrloff();
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f7ff fe37 	bl	8009538 <_ZN4GLCD9m_ctrloffEv>
	dport=0xc0|z;	   //0xc0 represents Line 0
 80098ca:	78fb      	ldrb	r3, [r7, #3]
 80098cc:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80098d0:	73fb      	strb	r3, [r7, #15]
	m_IOWritethedata(dport);
 80098d2:	7bfb      	ldrb	r3, [r7, #15]
 80098d4:	4619      	mov	r1, r3
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f7ff fe7a 	bl	80095d0 <_ZN4GLCD16m_IOWritethedataEh>
	HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 80098dc:	2201      	movs	r2, #1
 80098de:	2104      	movs	r1, #4
 80098e0:	4814      	ldr	r0, [pc, #80]	; (8009934 <_ZN4GLCD14m_setstartlineEh+0x7c>)
 80098e2:	f000 fdc9 	bl	800a478 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 80098e6:	2201      	movs	r2, #1
 80098e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80098ec:	4812      	ldr	r0, [pc, #72]	; (8009938 <_ZN4GLCD14m_setstartlineEh+0x80>)
 80098ee:	f000 fdc3 	bl	800a478 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 80098f2:	2200      	movs	r2, #0
 80098f4:	2110      	movs	r1, #16
 80098f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80098fa:	f000 fdbd 	bl	800a478 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 80098fe:	2200      	movs	r2, #0
 8009900:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009904:	480c      	ldr	r0, [pc, #48]	; (8009938 <_ZN4GLCD14m_setstartlineEh+0x80>)
 8009906:	f000 fdb7 	bl	800a478 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 800990a:	2201      	movs	r2, #1
 800990c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009910:	4809      	ldr	r0, [pc, #36]	; (8009938 <_ZN4GLCD14m_setstartlineEh+0x80>)
 8009912:	f000 fdb1 	bl	800a478 <HAL_GPIO_WritePin>
	//m_delay(GLCDDELAY);
	m_delay(10,100);
 8009916:	2264      	movs	r2, #100	; 0x64
 8009918:	210a      	movs	r1, #10
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f7ff fe36 	bl	800958c <_ZN4GLCD7m_delayEjh>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8009920:	2200      	movs	r2, #0
 8009922:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009926:	4804      	ldr	r0, [pc, #16]	; (8009938 <_ZN4GLCD14m_setstartlineEh+0x80>)
 8009928:	f000 fda6 	bl	800a478 <HAL_GPIO_WritePin>
}
 800992c:	bf00      	nop
 800992e:	3710      	adds	r7, #16
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}
 8009934:	48000c00 	.word	0x48000c00
 8009938:	48000800 	.word	0x48000800

0800993c <_ZN4GLCD9m_lcddataEPht>:

void GLCD::m_lcddata(uint8_t *value,uint16_t limit)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b086      	sub	sp, #24
 8009940:	af00      	add	r7, sp, #0
 8009942:	60f8      	str	r0, [r7, #12]
 8009944:	60b9      	str	r1, [r7, #8]
 8009946:	4613      	mov	r3, r2
 8009948:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	uint8_t dport;
	for(i=0;i<limit;i++)
 800994a:	2300      	movs	r3, #0
 800994c:	82fb      	strh	r3, [r7, #22]
 800994e:	8afa      	ldrh	r2, [r7, #22]
 8009950:	88fb      	ldrh	r3, [r7, #6]
 8009952:	429a      	cmp	r2, r3
 8009954:	f080 8085 	bcs.w	8009a62 <_ZN4GLCD9m_lcddataEPht+0x126>
	{
		if(c<64)
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	7f1b      	ldrb	r3, [r3, #28]
 800995c:	2b3f      	cmp	r3, #63	; 0x3f
 800995e:	d838      	bhi.n	80099d2 <_ZN4GLCD9m_lcddataEPht+0x96>
		{
			dport=value[i];
 8009960:	8afb      	ldrh	r3, [r7, #22]
 8009962:	68ba      	ldr	r2, [r7, #8]
 8009964:	4413      	add	r3, r2
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	757b      	strb	r3, [r7, #21]
			m_IOWritethedata(dport);
 800996a:	7d7b      	ldrb	r3, [r7, #21]
 800996c:	4619      	mov	r1, r3
 800996e:	68f8      	ldr	r0, [r7, #12]
 8009970:	f7ff fe2e 	bl	80095d0 <_ZN4GLCD16m_IOWritethedataEh>
			HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 8009974:	2201      	movs	r2, #1
 8009976:	2104      	movs	r1, #4
 8009978:	483b      	ldr	r0, [pc, #236]	; (8009a68 <_ZN4GLCD9m_lcddataEPht+0x12c>)
 800997a:	f000 fd7d 	bl	800a478 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_RESET);
 800997e:	2200      	movs	r2, #0
 8009980:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009984:	4839      	ldr	r0, [pc, #228]	; (8009a6c <_ZN4GLCD9m_lcddataEPht+0x130>)
 8009986:	f000 fd77 	bl	800a478 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_SET);
 800998a:	2201      	movs	r2, #1
 800998c:	2110      	movs	r1, #16
 800998e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009992:	f000 fd71 	bl	800a478 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 8009996:	2200      	movs	r2, #0
 8009998:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800999c:	4833      	ldr	r0, [pc, #204]	; (8009a6c <_ZN4GLCD9m_lcddataEPht+0x130>)
 800999e:	f000 fd6b 	bl	800a478 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 80099a2:	2201      	movs	r2, #1
 80099a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80099a8:	4830      	ldr	r0, [pc, #192]	; (8009a6c <_ZN4GLCD9m_lcddataEPht+0x130>)
 80099aa:	f000 fd65 	bl	800a478 <HAL_GPIO_WritePin>
			//m_delay(GLCDDELAY);
			m_delay(10,100);
 80099ae:	2264      	movs	r2, #100	; 0x64
 80099b0:	210a      	movs	r1, #10
 80099b2:	68f8      	ldr	r0, [r7, #12]
 80099b4:	f7ff fdea 	bl	800958c <_ZN4GLCD7m_delayEjh>
			HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 80099b8:	2200      	movs	r2, #0
 80099ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80099be:	482b      	ldr	r0, [pc, #172]	; (8009a6c <_ZN4GLCD9m_lcddataEPht+0x130>)
 80099c0:	f000 fd5a 	bl	800a478 <HAL_GPIO_WritePin>
			c++;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	7f1b      	ldrb	r3, [r3, #28]
 80099c8:	3301      	adds	r3, #1
 80099ca:	b2da      	uxtb	r2, r3
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	771a      	strb	r2, [r3, #28]
 80099d0:	e03d      	b.n	8009a4e <_ZN4GLCD9m_lcddataEPht+0x112>
		}
		else
		{
			m_setcolumn(c);
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	7f1b      	ldrb	r3, [r3, #28]
 80099d6:	4619      	mov	r1, r3
 80099d8:	68f8      	ldr	r0, [r7, #12]
 80099da:	f7ff fea7 	bl	800972c <_ZN4GLCD11m_setcolumnEh>
			dport=value[i];
 80099de:	8afb      	ldrh	r3, [r7, #22]
 80099e0:	68ba      	ldr	r2, [r7, #8]
 80099e2:	4413      	add	r3, r2
 80099e4:	781b      	ldrb	r3, [r3, #0]
 80099e6:	757b      	strb	r3, [r7, #21]
			m_IOWritethedata(dport);
 80099e8:	7d7b      	ldrb	r3, [r7, #21]
 80099ea:	4619      	mov	r1, r3
 80099ec:	68f8      	ldr	r0, [r7, #12]
 80099ee:	f7ff fdef 	bl	80095d0 <_ZN4GLCD16m_IOWritethedataEh>
			HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_RESET);
 80099f2:	2200      	movs	r2, #0
 80099f4:	2104      	movs	r1, #4
 80099f6:	481c      	ldr	r0, [pc, #112]	; (8009a68 <_ZN4GLCD9m_lcddataEPht+0x12c>)
 80099f8:	f000 fd3e 	bl	800a478 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 80099fc:	2201      	movs	r2, #1
 80099fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009a02:	481a      	ldr	r0, [pc, #104]	; (8009a6c <_ZN4GLCD9m_lcddataEPht+0x130>)
 8009a04:	f000 fd38 	bl	800a478 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_SET);
 8009a08:	2201      	movs	r2, #1
 8009a0a:	2110      	movs	r1, #16
 8009a0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009a10:	f000 fd32 	bl	800a478 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 8009a14:	2200      	movs	r2, #0
 8009a16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009a1a:	4814      	ldr	r0, [pc, #80]	; (8009a6c <_ZN4GLCD9m_lcddataEPht+0x130>)
 8009a1c:	f000 fd2c 	bl	800a478 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 8009a20:	2201      	movs	r2, #1
 8009a22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009a26:	4811      	ldr	r0, [pc, #68]	; (8009a6c <_ZN4GLCD9m_lcddataEPht+0x130>)
 8009a28:	f000 fd26 	bl	800a478 <HAL_GPIO_WritePin>
			//m_delay(GLCDDELAY);
			m_delay(10,100);
 8009a2c:	2264      	movs	r2, #100	; 0x64
 8009a2e:	210a      	movs	r1, #10
 8009a30:	68f8      	ldr	r0, [r7, #12]
 8009a32:	f7ff fdab 	bl	800958c <_ZN4GLCD7m_delayEjh>
			HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8009a36:	2200      	movs	r2, #0
 8009a38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009a3c:	480b      	ldr	r0, [pc, #44]	; (8009a6c <_ZN4GLCD9m_lcddataEPht+0x130>)
 8009a3e:	f000 fd1b 	bl	800a478 <HAL_GPIO_WritePin>
			c++;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	7f1b      	ldrb	r3, [r3, #28]
 8009a46:	3301      	adds	r3, #1
 8009a48:	b2da      	uxtb	r2, r3
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	771a      	strb	r2, [r3, #28]
		}
		if(c>127)
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	7f1b      	ldrb	r3, [r3, #28]
 8009a52:	b25b      	sxtb	r3, r3
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	db03      	blt.n	8009a60 <_ZN4GLCD9m_lcddataEPht+0x124>
	for(i=0;i<limit;i++)
 8009a58:	8afb      	ldrh	r3, [r7, #22]
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	82fb      	strh	r3, [r7, #22]
 8009a5e:	e776      	b.n	800994e <_ZN4GLCD9m_lcddataEPht+0x12>
	           return;
 8009a60:	bf00      	nop
	}
}
 8009a62:	3718      	adds	r7, #24
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}
 8009a68:	48000c00 	.word	0x48000c00
 8009a6c:	48000800 	.word	0x48000800

08009a70 <_ZN4GLCD10m_lcdputs1EhhPh>:

void GLCD::m_lcdputs1(unsigned char y,unsigned char x,unsigned char *str)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b086      	sub	sp, #24
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	60f8      	str	r0, [r7, #12]
 8009a78:	607b      	str	r3, [r7, #4]
 8009a7a:	460b      	mov	r3, r1
 8009a7c:	72fb      	strb	r3, [r7, #11]
 8009a7e:	4613      	mov	r3, r2
 8009a80:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	uint16_t a;
	m_setcolumn(y);
 8009a82:	7afb      	ldrb	r3, [r7, #11]
 8009a84:	4619      	mov	r1, r3
 8009a86:	68f8      	ldr	r0, [r7, #12]
 8009a88:	f7ff fe50 	bl	800972c <_ZN4GLCD11m_setcolumnEh>
	m_setpage(x);
 8009a8c:	7abb      	ldrb	r3, [r7, #10]
 8009a8e:	4619      	mov	r1, r3
 8009a90:	68f8      	ldr	r0, [r7, #12]
 8009a92:	f7ff fecf 	bl	8009834 <_ZN4GLCD9m_setpageEh>
	for(i=0;str[i]!=0;i++)
 8009a96:	2300      	movs	r3, #0
 8009a98:	75fb      	strb	r3, [r7, #23]
 8009a9a:	7dfb      	ldrb	r3, [r7, #23]
 8009a9c:	687a      	ldr	r2, [r7, #4]
 8009a9e:	4413      	add	r3, r2
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d015      	beq.n	8009ad2 <_ZN4GLCD10m_lcdputs1EhhPh+0x62>
	{
		a=(*(str+i));
 8009aa6:	7dfb      	ldrb	r3, [r7, #23]
 8009aa8:	687a      	ldr	r2, [r7, #4]
 8009aaa:	4413      	add	r3, r2
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	82bb      	strh	r3, [r7, #20]
		a*=8;
 8009ab0:	8abb      	ldrh	r3, [r7, #20]
 8009ab2:	00db      	lsls	r3, r3, #3
 8009ab4:	82bb      	strh	r3, [r7, #20]
		m_lcddata(&Character8x8[a],8);
 8009ab6:	8abb      	ldrh	r3, [r7, #20]
 8009ab8:	3318      	adds	r3, #24
 8009aba:	68fa      	ldr	r2, [r7, #12]
 8009abc:	4413      	add	r3, r2
 8009abe:	3306      	adds	r3, #6
 8009ac0:	2208      	movs	r2, #8
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	68f8      	ldr	r0, [r7, #12]
 8009ac6:	f7ff ff39 	bl	800993c <_ZN4GLCD9m_lcddataEPht>
	for(i=0;str[i]!=0;i++)
 8009aca:	7dfb      	ldrb	r3, [r7, #23]
 8009acc:	3301      	adds	r3, #1
 8009ace:	75fb      	strb	r3, [r7, #23]
 8009ad0:	e7e3      	b.n	8009a9a <_ZN4GLCD10m_lcdputs1EhhPh+0x2a>
	}
}
 8009ad2:	bf00      	nop
 8009ad4:	3718      	adds	r7, #24
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}

08009ada <_ZN4GLCD8m_clrlcdEv>:
		m_lcddata(&font5x7[a],5);
	}
}

void GLCD::m_clrlcd(void)
{
 8009ada:	b580      	push	{r7, lr}
 8009adc:	b084      	sub	sp, #16
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
    uint8_t i,j;
    for (i=0;i < 8;i++)
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	73fb      	strb	r3, [r7, #15]
 8009ae6:	7bfb      	ldrb	r3, [r7, #15]
 8009ae8:	2b07      	cmp	r3, #7
 8009aea:	d81d      	bhi.n	8009b28 <_ZN4GLCD8m_clrlcdEv+0x4e>
    {
    m_setpage(i);
 8009aec:	7bfb      	ldrb	r3, [r7, #15]
 8009aee:	4619      	mov	r1, r3
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f7ff fe9f 	bl	8009834 <_ZN4GLCD9m_setpageEh>
    m_setcolumn(0);
 8009af6:	2100      	movs	r1, #0
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f7ff fe17 	bl	800972c <_ZN4GLCD11m_setcolumnEh>
        for (j= 0 ;j < 128; j++)
 8009afe:	2300      	movs	r3, #0
 8009b00:	73bb      	strb	r3, [r7, #14]
 8009b02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	db0a      	blt.n	8009b20 <_ZN4GLCD8m_clrlcdEv+0x46>
        	m_lcddata(&z,1);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	331d      	adds	r3, #29
 8009b0e:	2201      	movs	r2, #1
 8009b10:	4619      	mov	r1, r3
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f7ff ff12 	bl	800993c <_ZN4GLCD9m_lcddataEPht>
        for (j= 0 ;j < 128; j++)
 8009b18:	7bbb      	ldrb	r3, [r7, #14]
 8009b1a:	3301      	adds	r3, #1
 8009b1c:	73bb      	strb	r3, [r7, #14]
 8009b1e:	e7f0      	b.n	8009b02 <_ZN4GLCD8m_clrlcdEv+0x28>
    for (i=0;i < 8;i++)
 8009b20:	7bfb      	ldrb	r3, [r7, #15]
 8009b22:	3301      	adds	r3, #1
 8009b24:	73fb      	strb	r3, [r7, #15]
 8009b26:	e7de      	b.n	8009ae6 <_ZN4GLCD8m_clrlcdEv+0xc>
    }
}
 8009b28:	bf00      	nop
 8009b2a:	3710      	adds	r7, #16
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <_ZN10W5500ClassC1Ev>:
// SPI details
//SPISettings wiznet_SPI_settings(8000000, MSBFIRST, SPI_MODE0);
uint8_t SPI_CS;


W5500Class::W5500Class() {
 8009b30:	b480      	push	{r7}
 8009b32:	b083      	sub	sp, #12
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	4a04      	ldr	r2, [pc, #16]	; (8009b4c <_ZN10W5500ClassC1Ev+0x1c>)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	4618      	mov	r0, r3
 8009b42:	370c      	adds	r7, #12
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr
 8009b4c:	0800f114 	.word	0x0800f114

08009b50 <_ZN10W5500ClassD1Ev>:

W5500Class::~W5500Class() {
 8009b50:	b480      	push	{r7}
 8009b52:	b083      	sub	sp, #12
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	4a04      	ldr	r2, [pc, #16]	; (8009b6c <_ZN10W5500ClassD1Ev+0x1c>)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	4618      	mov	r0, r3
 8009b62:	370c      	adds	r7, #12
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr
 8009b6c:	0800f114 	.word	0x0800f114

08009b70 <_ZN10W5500ClassD0Ev>:
W5500Class::~W5500Class() {
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b082      	sub	sp, #8
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
}
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f7ff ffe9 	bl	8009b50 <_ZN10W5500ClassD1Ev>
 8009b7e:	2104      	movs	r1, #4
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f005 f8ca 	bl	800ed1a <_ZdlPvj>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3708      	adds	r7, #8
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}

08009b90 <_Z41__static_initialization_and_destruction_0ii>:
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b082      	sub	sp, #8
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	d107      	bne.n	8009bb0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d102      	bne.n	8009bb0 <_Z41__static_initialization_and_destruction_0ii+0x20>
W5500Class w5500;
 8009baa:	4809      	ldr	r0, [pc, #36]	; (8009bd0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8009bac:	f7ff ffc0 	bl	8009b30 <_ZN10W5500ClassC1Ev>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d107      	bne.n	8009bc6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d102      	bne.n	8009bc6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8009bc0:	4803      	ldr	r0, [pc, #12]	; (8009bd0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8009bc2:	f7ff ffc5 	bl	8009b50 <_ZN10W5500ClassD1Ev>
}
 8009bc6:	bf00      	nop
 8009bc8:	3708      	adds	r7, #8
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}
 8009bce:	bf00      	nop
 8009bd0:	20000744 	.word	0x20000744

08009bd4 <_GLOBAL__sub_I_w5500>:
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009bdc:	2001      	movs	r0, #1
 8009bde:	f7ff ffd7 	bl	8009b90 <_Z41__static_initialization_and_destruction_0ii>
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <_GLOBAL__sub_D_w5500>:
 8009be4:	b580      	push	{r7, lr}
 8009be6:	af00      	add	r7, sp, #0
 8009be8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009bec:	2000      	movs	r0, #0
 8009bee:	f7ff ffcf 	bl	8009b90 <_Z41__static_initialization_and_destruction_0ii>
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <_ZN9ModbusrtuC1Ev>:

#include "Modbusrtu.h"
#include "Modbus_types.h"

uint8_t TxSeqComplete;
Modbusrtu::Modbusrtu() {
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b082      	sub	sp, #8
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	4a0d      	ldr	r2, [pc, #52]	; (8009c34 <_ZN9ModbusrtuC1Ev+0x40>)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	601a      	str	r2, [r3, #0]
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	4a0c      	ldr	r2, [pc, #48]	; (8009c38 <_ZN9ModbusrtuC1Ev+0x44>)
 8009c06:	3314      	adds	r3, #20
 8009c08:	4611      	mov	r1, r2
 8009c0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f005 f8b4 	bl	800ed7c <memcpy>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	4a09      	ldr	r2, [pc, #36]	; (8009c3c <_ZN9ModbusrtuC1Ev+0x48>)
 8009c18:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8009c1c:	4611      	mov	r1, r2
 8009c1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c22:	4618      	mov	r0, r3
 8009c24:	f005 f8aa 	bl	800ed7c <memcpy>
	// TODO Auto-generated constructor stub

}
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3708      	adds	r7, #8
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}
 8009c32:	bf00      	nop
 8009c34:	0800f124 	.word	0x0800f124
 8009c38:	0800ee94 	.word	0x0800ee94
 8009c3c:	0800ef94 	.word	0x0800ef94

08009c40 <_ZN9ModbusrtuD1Ev>:

Modbusrtu::~Modbusrtu() {
 8009c40:	b480      	push	{r7}
 8009c42:	b083      	sub	sp, #12
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
 8009c48:	4a04      	ldr	r2, [pc, #16]	; (8009c5c <_ZN9ModbusrtuD1Ev+0x1c>)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	4618      	mov	r0, r3
 8009c52:	370c      	adds	r7, #12
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr
 8009c5c:	0800f124 	.word	0x0800f124

08009c60 <_ZN9ModbusrtuD0Ev>:
Modbusrtu::~Modbusrtu() {
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b082      	sub	sp, #8
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
}
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f7ff ffe9 	bl	8009c40 <_ZN9ModbusrtuD1Ev>
 8009c6e:	f44f 7105 	mov.w	r1, #532	; 0x214
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f005 f851 	bl	800ed1a <_ZdlPvj>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3708      	adds	r7, #8
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
	...

08009c84 <HAL_UART_TxCpltCallback>:


}
//Hardware callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b082      	sub	sp, #8
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
	TxSeqComplete =1;
 8009c8c:	4b05      	ldr	r3, [pc, #20]	; (8009ca4 <HAL_UART_TxCpltCallback+0x20>)
 8009c8e:	2201      	movs	r2, #1
 8009c90:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1,u8rxbuf,13);
 8009c92:	220d      	movs	r2, #13
 8009c94:	4904      	ldr	r1, [pc, #16]	; (8009ca8 <HAL_UART_TxCpltCallback+0x24>)
 8009c96:	4805      	ldr	r0, [pc, #20]	; (8009cac <HAL_UART_TxCpltCallback+0x28>)
 8009c98:	f003 fd54 	bl	800d744 <HAL_UART_Receive_IT>
}
 8009c9c:	bf00      	nop
 8009c9e:	3708      	adds	r7, #8
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}
 8009ca4:	20000847 	.word	0x20000847
 8009ca8:	20000748 	.word	0x20000748
 8009cac:	20000458 	.word	0x20000458

08009cb0 <cppMain>:
  * @brief  The application entry point for cpp
  * @retval int
  */
//TIM_HandleTypeDef htim6;
void cppMain()
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	f5ad 5db1 	sub.w	sp, sp, #5664	; 0x1620
 8009cb6:	b084      	sub	sp, #16
 8009cb8:	af00      	add	r7, sp, #0
	GLCD glcd;
 8009cba:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f7fb fc9a 	bl	80055f8 <_ZN4GLCDC1Ev>
	Modbusrtu ModbusInst;
 8009cc4:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f7ff ff93 	bl	8009bf4 <_ZN9ModbusrtuC1Ev>
	DisplayRoutine displayRoutineInst;
 8009cce:	f107 0310 	add.w	r3, r7, #16
 8009cd2:	3b10      	subs	r3, #16
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f7fb fb37 	bl	8005348 <_ZN14DisplayRoutineC1Ev>

	displayRoutineInst.Init();
 8009cda:	f107 0310 	add.w	r3, r7, #16
 8009cde:	3b10      	subs	r3, #16
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f7fb fc51 	bl	8005588 <_ZN14DisplayRoutine4InitEv>
	TxSeqComplete=1;
 8009ce6:	4b0d      	ldr	r3, [pc, #52]	; (8009d1c <cppMain+0x6c>)
 8009ce8:	2201      	movs	r2, #1
 8009cea:	701a      	strb	r2, [r3, #0]
	wifi_command=5;
 8009cec:	4b0c      	ldr	r3, [pc, #48]	; (8009d20 <cppMain+0x70>)
 8009cee:	2205      	movs	r2, #5
 8009cf0:	701a      	strb	r2, [r3, #0]
	while(1)
	{


		if(Flag1Second)
 8009cf2:	4b0c      	ldr	r3, [pc, #48]	; (8009d24 <cppMain+0x74>)
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d0fb      	beq.n	8009cf2 <cppMain+0x42>
		{
			Flag1Second=0;
 8009cfa:	4b0a      	ldr	r3, [pc, #40]	; (8009d24 <cppMain+0x74>)
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	701a      	strb	r2, [r3, #0]
			displayRoutineInst.run();
 8009d00:	f107 0310 	add.w	r3, r7, #16
 8009d04:	3b10      	subs	r3, #16
 8009d06:	4618      	mov	r0, r3
 8009d08:	f7fb fb64 	bl	80053d4 <_ZN14DisplayRoutine3runEv>
			Send_WifiCmd();
 8009d0c:	f7f6 fbe0 	bl	80004d0 <Send_WifiCmd>
			rtc_get_time(&hour_t,&min_t,&sec_t);
 8009d10:	4a05      	ldr	r2, [pc, #20]	; (8009d28 <cppMain+0x78>)
 8009d12:	4906      	ldr	r1, [pc, #24]	; (8009d2c <cppMain+0x7c>)
 8009d14:	4806      	ldr	r0, [pc, #24]	; (8009d30 <cppMain+0x80>)
 8009d16:	f7fa ff7d 	bl	8004c14 <rtc_get_time>
		if(Flag1Second)
 8009d1a:	e7ea      	b.n	8009cf2 <cppMain+0x42>
 8009d1c:	20000847 	.word	0x20000847
 8009d20:	2000008d 	.word	0x2000008d
 8009d24:	20000713 	.word	0x20000713
 8009d28:	2000084a 	.word	0x2000084a
 8009d2c:	20000849 	.word	0x20000849
 8009d30:	20000848 	.word	0x20000848

08009d34 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b082      	sub	sp, #8
 8009d38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009d3e:	2003      	movs	r0, #3
 8009d40:	f000 f960 	bl	800a004 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009d44:	200f      	movs	r0, #15
 8009d46:	f000 f80d 	bl	8009d64 <HAL_InitTick>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d002      	beq.n	8009d56 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8009d50:	2301      	movs	r3, #1
 8009d52:	71fb      	strb	r3, [r7, #7]
 8009d54:	e001      	b.n	8009d5a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8009d56:	f7fa fc65 	bl	8004624 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009d5a:	79fb      	ldrb	r3, [r7, #7]
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3708      	adds	r7, #8
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b084      	sub	sp, #16
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8009d70:	4b17      	ldr	r3, [pc, #92]	; (8009dd0 <HAL_InitTick+0x6c>)
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d023      	beq.n	8009dc0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8009d78:	4b16      	ldr	r3, [pc, #88]	; (8009dd4 <HAL_InitTick+0x70>)
 8009d7a:	681a      	ldr	r2, [r3, #0]
 8009d7c:	4b14      	ldr	r3, [pc, #80]	; (8009dd0 <HAL_InitTick+0x6c>)
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	4619      	mov	r1, r3
 8009d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8009d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f000 f96d 	bl	800a06e <HAL_SYSTICK_Config>
 8009d94:	4603      	mov	r3, r0
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d10f      	bne.n	8009dba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2b0f      	cmp	r3, #15
 8009d9e:	d809      	bhi.n	8009db4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009da0:	2200      	movs	r2, #0
 8009da2:	6879      	ldr	r1, [r7, #4]
 8009da4:	f04f 30ff 	mov.w	r0, #4294967295
 8009da8:	f000 f937 	bl	800a01a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8009dac:	4a0a      	ldr	r2, [pc, #40]	; (8009dd8 <HAL_InitTick+0x74>)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6013      	str	r3, [r2, #0]
 8009db2:	e007      	b.n	8009dc4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8009db4:	2301      	movs	r3, #1
 8009db6:	73fb      	strb	r3, [r7, #15]
 8009db8:	e004      	b.n	8009dc4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8009dba:	2301      	movs	r3, #1
 8009dbc:	73fb      	strb	r3, [r7, #15]
 8009dbe:	e001      	b.n	8009dc4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8009dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3710      	adds	r7, #16
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	20000008 	.word	0x20000008
 8009dd4:	20000000 	.word	0x20000000
 8009dd8:	20000004 	.word	0x20000004

08009ddc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8009de0:	4b06      	ldr	r3, [pc, #24]	; (8009dfc <HAL_IncTick+0x20>)
 8009de2:	781b      	ldrb	r3, [r3, #0]
 8009de4:	461a      	mov	r2, r3
 8009de6:	4b06      	ldr	r3, [pc, #24]	; (8009e00 <HAL_IncTick+0x24>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4413      	add	r3, r2
 8009dec:	4a04      	ldr	r2, [pc, #16]	; (8009e00 <HAL_IncTick+0x24>)
 8009dee:	6013      	str	r3, [r2, #0]
}
 8009df0:	bf00      	nop
 8009df2:	46bd      	mov	sp, r7
 8009df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df8:	4770      	bx	lr
 8009dfa:	bf00      	nop
 8009dfc:	20000008 	.word	0x20000008
 8009e00:	2000084c 	.word	0x2000084c

08009e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009e04:	b480      	push	{r7}
 8009e06:	af00      	add	r7, sp, #0
  return uwTick;
 8009e08:	4b03      	ldr	r3, [pc, #12]	; (8009e18 <HAL_GetTick+0x14>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr
 8009e16:	bf00      	nop
 8009e18:	2000084c 	.word	0x2000084c

08009e1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b084      	sub	sp, #16
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009e24:	f7ff ffee 	bl	8009e04 <HAL_GetTick>
 8009e28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e34:	d005      	beq.n	8009e42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8009e36:	4b0a      	ldr	r3, [pc, #40]	; (8009e60 <HAL_Delay+0x44>)
 8009e38:	781b      	ldrb	r3, [r3, #0]
 8009e3a:	461a      	mov	r2, r3
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	4413      	add	r3, r2
 8009e40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009e42:	bf00      	nop
 8009e44:	f7ff ffde 	bl	8009e04 <HAL_GetTick>
 8009e48:	4602      	mov	r2, r0
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	1ad3      	subs	r3, r2, r3
 8009e4e:	68fa      	ldr	r2, [r7, #12]
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d8f7      	bhi.n	8009e44 <HAL_Delay+0x28>
  {
  }
}
 8009e54:	bf00      	nop
 8009e56:	bf00      	nop
 8009e58:	3710      	adds	r7, #16
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
 8009e5e:	bf00      	nop
 8009e60:	20000008 	.word	0x20000008

08009e64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b085      	sub	sp, #20
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f003 0307 	and.w	r3, r3, #7
 8009e72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009e74:	4b0c      	ldr	r3, [pc, #48]	; (8009ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009e7a:	68ba      	ldr	r2, [r7, #8]
 8009e7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009e80:	4013      	ands	r3, r2
 8009e82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009e8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009e96:	4a04      	ldr	r2, [pc, #16]	; (8009ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	60d3      	str	r3, [r2, #12]
}
 8009e9c:	bf00      	nop
 8009e9e:	3714      	adds	r7, #20
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea6:	4770      	bx	lr
 8009ea8:	e000ed00 	.word	0xe000ed00

08009eac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009eac:	b480      	push	{r7}
 8009eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009eb0:	4b04      	ldr	r3, [pc, #16]	; (8009ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8009eb2:	68db      	ldr	r3, [r3, #12]
 8009eb4:	0a1b      	lsrs	r3, r3, #8
 8009eb6:	f003 0307 	and.w	r3, r3, #7
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr
 8009ec4:	e000ed00 	.word	0xe000ed00

08009ec8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b083      	sub	sp, #12
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	4603      	mov	r3, r0
 8009ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	db0b      	blt.n	8009ef2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009eda:	79fb      	ldrb	r3, [r7, #7]
 8009edc:	f003 021f 	and.w	r2, r3, #31
 8009ee0:	4907      	ldr	r1, [pc, #28]	; (8009f00 <__NVIC_EnableIRQ+0x38>)
 8009ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ee6:	095b      	lsrs	r3, r3, #5
 8009ee8:	2001      	movs	r0, #1
 8009eea:	fa00 f202 	lsl.w	r2, r0, r2
 8009eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8009ef2:	bf00      	nop
 8009ef4:	370c      	adds	r7, #12
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efc:	4770      	bx	lr
 8009efe:	bf00      	nop
 8009f00:	e000e100 	.word	0xe000e100

08009f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b083      	sub	sp, #12
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	6039      	str	r1, [r7, #0]
 8009f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	db0a      	blt.n	8009f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	b2da      	uxtb	r2, r3
 8009f1c:	490c      	ldr	r1, [pc, #48]	; (8009f50 <__NVIC_SetPriority+0x4c>)
 8009f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f22:	0112      	lsls	r2, r2, #4
 8009f24:	b2d2      	uxtb	r2, r2
 8009f26:	440b      	add	r3, r1
 8009f28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009f2c:	e00a      	b.n	8009f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	b2da      	uxtb	r2, r3
 8009f32:	4908      	ldr	r1, [pc, #32]	; (8009f54 <__NVIC_SetPriority+0x50>)
 8009f34:	79fb      	ldrb	r3, [r7, #7]
 8009f36:	f003 030f 	and.w	r3, r3, #15
 8009f3a:	3b04      	subs	r3, #4
 8009f3c:	0112      	lsls	r2, r2, #4
 8009f3e:	b2d2      	uxtb	r2, r2
 8009f40:	440b      	add	r3, r1
 8009f42:	761a      	strb	r2, [r3, #24]
}
 8009f44:	bf00      	nop
 8009f46:	370c      	adds	r7, #12
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4e:	4770      	bx	lr
 8009f50:	e000e100 	.word	0xe000e100
 8009f54:	e000ed00 	.word	0xe000ed00

08009f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b089      	sub	sp, #36	; 0x24
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	60f8      	str	r0, [r7, #12]
 8009f60:	60b9      	str	r1, [r7, #8]
 8009f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f003 0307 	and.w	r3, r3, #7
 8009f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009f6c:	69fb      	ldr	r3, [r7, #28]
 8009f6e:	f1c3 0307 	rsb	r3, r3, #7
 8009f72:	2b04      	cmp	r3, #4
 8009f74:	bf28      	it	cs
 8009f76:	2304      	movcs	r3, #4
 8009f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009f7a:	69fb      	ldr	r3, [r7, #28]
 8009f7c:	3304      	adds	r3, #4
 8009f7e:	2b06      	cmp	r3, #6
 8009f80:	d902      	bls.n	8009f88 <NVIC_EncodePriority+0x30>
 8009f82:	69fb      	ldr	r3, [r7, #28]
 8009f84:	3b03      	subs	r3, #3
 8009f86:	e000      	b.n	8009f8a <NVIC_EncodePriority+0x32>
 8009f88:	2300      	movs	r3, #0
 8009f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8009f90:	69bb      	ldr	r3, [r7, #24]
 8009f92:	fa02 f303 	lsl.w	r3, r2, r3
 8009f96:	43da      	mvns	r2, r3
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	401a      	ands	r2, r3
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8009faa:	43d9      	mvns	r1, r3
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009fb0:	4313      	orrs	r3, r2
         );
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3724      	adds	r7, #36	; 0x24
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbc:	4770      	bx	lr
	...

08009fc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	3b01      	subs	r3, #1
 8009fcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009fd0:	d301      	bcc.n	8009fd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	e00f      	b.n	8009ff6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009fd6:	4a0a      	ldr	r2, [pc, #40]	; (800a000 <SysTick_Config+0x40>)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	3b01      	subs	r3, #1
 8009fdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009fde:	210f      	movs	r1, #15
 8009fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8009fe4:	f7ff ff8e 	bl	8009f04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009fe8:	4b05      	ldr	r3, [pc, #20]	; (800a000 <SysTick_Config+0x40>)
 8009fea:	2200      	movs	r2, #0
 8009fec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009fee:	4b04      	ldr	r3, [pc, #16]	; (800a000 <SysTick_Config+0x40>)
 8009ff0:	2207      	movs	r2, #7
 8009ff2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009ff4:	2300      	movs	r3, #0
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3708      	adds	r7, #8
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}
 8009ffe:	bf00      	nop
 800a000:	e000e010 	.word	0xe000e010

0800a004 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b082      	sub	sp, #8
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f7ff ff29 	bl	8009e64 <__NVIC_SetPriorityGrouping>
}
 800a012:	bf00      	nop
 800a014:	3708      	adds	r7, #8
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}

0800a01a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a01a:	b580      	push	{r7, lr}
 800a01c:	b086      	sub	sp, #24
 800a01e:	af00      	add	r7, sp, #0
 800a020:	4603      	mov	r3, r0
 800a022:	60b9      	str	r1, [r7, #8]
 800a024:	607a      	str	r2, [r7, #4]
 800a026:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800a028:	2300      	movs	r3, #0
 800a02a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800a02c:	f7ff ff3e 	bl	8009eac <__NVIC_GetPriorityGrouping>
 800a030:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a032:	687a      	ldr	r2, [r7, #4]
 800a034:	68b9      	ldr	r1, [r7, #8]
 800a036:	6978      	ldr	r0, [r7, #20]
 800a038:	f7ff ff8e 	bl	8009f58 <NVIC_EncodePriority>
 800a03c:	4602      	mov	r2, r0
 800a03e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a042:	4611      	mov	r1, r2
 800a044:	4618      	mov	r0, r3
 800a046:	f7ff ff5d 	bl	8009f04 <__NVIC_SetPriority>
}
 800a04a:	bf00      	nop
 800a04c:	3718      	adds	r7, #24
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}

0800a052 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a052:	b580      	push	{r7, lr}
 800a054:	b082      	sub	sp, #8
 800a056:	af00      	add	r7, sp, #0
 800a058:	4603      	mov	r3, r0
 800a05a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a05c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a060:	4618      	mov	r0, r3
 800a062:	f7ff ff31 	bl	8009ec8 <__NVIC_EnableIRQ>
}
 800a066:	bf00      	nop
 800a068:	3708      	adds	r7, #8
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}

0800a06e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a06e:	b580      	push	{r7, lr}
 800a070:	b082      	sub	sp, #8
 800a072:	af00      	add	r7, sp, #0
 800a074:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f7ff ffa2 	bl	8009fc0 <SysTick_Config>
 800a07c:	4603      	mov	r3, r0
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3708      	adds	r7, #8
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}

0800a086 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a086:	b480      	push	{r7}
 800a088:	b085      	sub	sp, #20
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a08e:	2300      	movs	r3, #0
 800a090:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a098:	b2db      	uxtb	r3, r3
 800a09a:	2b02      	cmp	r3, #2
 800a09c:	d008      	beq.n	800a0b0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2204      	movs	r2, #4
 800a0a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	e022      	b.n	800a0f6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	681a      	ldr	r2, [r3, #0]
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f022 020e 	bic.w	r2, r2, #14
 800a0be:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	681a      	ldr	r2, [r3, #0]
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f022 0201 	bic.w	r2, r2, #1
 800a0ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0d4:	f003 021c 	and.w	r2, r3, #28
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0dc:	2101      	movs	r1, #1
 800a0de:	fa01 f202 	lsl.w	r2, r1, r2
 800a0e2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800a0f4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3714      	adds	r7, #20
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a100:	4770      	bx	lr

0800a102 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a102:	b580      	push	{r7, lr}
 800a104:	b084      	sub	sp, #16
 800a106:	af00      	add	r7, sp, #0
 800a108:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a10a:	2300      	movs	r3, #0
 800a10c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a114:	b2db      	uxtb	r3, r3
 800a116:	2b02      	cmp	r3, #2
 800a118:	d005      	beq.n	800a126 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2204      	movs	r2, #4
 800a11e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800a120:	2301      	movs	r3, #1
 800a122:	73fb      	strb	r3, [r7, #15]
 800a124:	e029      	b.n	800a17a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	681a      	ldr	r2, [r3, #0]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f022 020e 	bic.w	r2, r2, #14
 800a134:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f022 0201 	bic.w	r2, r2, #1
 800a144:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a14a:	f003 021c 	and.w	r2, r3, #28
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a152:	2101      	movs	r1, #1
 800a154:	fa01 f202 	lsl.w	r2, r1, r2
 800a158:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2201      	movs	r2, #1
 800a15e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2200      	movs	r2, #0
 800a166:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d003      	beq.n	800a17a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	4798      	blx	r3
    }
  }
  return status;
 800a17a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3710      	adds	r7, #16
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a184:	b480      	push	{r7}
 800a186:	b087      	sub	sp, #28
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a18e:	2300      	movs	r3, #0
 800a190:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a192:	e154      	b.n	800a43e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	681a      	ldr	r2, [r3, #0]
 800a198:	2101      	movs	r1, #1
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	fa01 f303 	lsl.w	r3, r1, r3
 800a1a0:	4013      	ands	r3, r2
 800a1a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	f000 8146 	beq.w	800a438 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	f003 0303 	and.w	r3, r3, #3
 800a1b4:	2b01      	cmp	r3, #1
 800a1b6:	d005      	beq.n	800a1c4 <HAL_GPIO_Init+0x40>
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	685b      	ldr	r3, [r3, #4]
 800a1bc:	f003 0303 	and.w	r3, r3, #3
 800a1c0:	2b02      	cmp	r3, #2
 800a1c2:	d130      	bne.n	800a226 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	689b      	ldr	r3, [r3, #8]
 800a1c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	005b      	lsls	r3, r3, #1
 800a1ce:	2203      	movs	r2, #3
 800a1d0:	fa02 f303 	lsl.w	r3, r2, r3
 800a1d4:	43db      	mvns	r3, r3
 800a1d6:	693a      	ldr	r2, [r7, #16]
 800a1d8:	4013      	ands	r3, r2
 800a1da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	68da      	ldr	r2, [r3, #12]
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	005b      	lsls	r3, r3, #1
 800a1e4:	fa02 f303 	lsl.w	r3, r2, r3
 800a1e8:	693a      	ldr	r2, [r7, #16]
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	693a      	ldr	r2, [r7, #16]
 800a1f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a1fa:	2201      	movs	r2, #1
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	fa02 f303 	lsl.w	r3, r2, r3
 800a202:	43db      	mvns	r3, r3
 800a204:	693a      	ldr	r2, [r7, #16]
 800a206:	4013      	ands	r3, r2
 800a208:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	091b      	lsrs	r3, r3, #4
 800a210:	f003 0201 	and.w	r2, r3, #1
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	fa02 f303 	lsl.w	r3, r2, r3
 800a21a:	693a      	ldr	r2, [r7, #16]
 800a21c:	4313      	orrs	r3, r2
 800a21e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	693a      	ldr	r2, [r7, #16]
 800a224:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	f003 0303 	and.w	r3, r3, #3
 800a22e:	2b03      	cmp	r3, #3
 800a230:	d017      	beq.n	800a262 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	68db      	ldr	r3, [r3, #12]
 800a236:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	005b      	lsls	r3, r3, #1
 800a23c:	2203      	movs	r2, #3
 800a23e:	fa02 f303 	lsl.w	r3, r2, r3
 800a242:	43db      	mvns	r3, r3
 800a244:	693a      	ldr	r2, [r7, #16]
 800a246:	4013      	ands	r3, r2
 800a248:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	689a      	ldr	r2, [r3, #8]
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	005b      	lsls	r3, r3, #1
 800a252:	fa02 f303 	lsl.w	r3, r2, r3
 800a256:	693a      	ldr	r2, [r7, #16]
 800a258:	4313      	orrs	r3, r2
 800a25a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	693a      	ldr	r2, [r7, #16]
 800a260:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	f003 0303 	and.w	r3, r3, #3
 800a26a:	2b02      	cmp	r3, #2
 800a26c:	d123      	bne.n	800a2b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	08da      	lsrs	r2, r3, #3
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	3208      	adds	r2, #8
 800a276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a27a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	f003 0307 	and.w	r3, r3, #7
 800a282:	009b      	lsls	r3, r3, #2
 800a284:	220f      	movs	r2, #15
 800a286:	fa02 f303 	lsl.w	r3, r2, r3
 800a28a:	43db      	mvns	r3, r3
 800a28c:	693a      	ldr	r2, [r7, #16]
 800a28e:	4013      	ands	r3, r2
 800a290:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	691a      	ldr	r2, [r3, #16]
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	f003 0307 	and.w	r3, r3, #7
 800a29c:	009b      	lsls	r3, r3, #2
 800a29e:	fa02 f303 	lsl.w	r3, r2, r3
 800a2a2:	693a      	ldr	r2, [r7, #16]
 800a2a4:	4313      	orrs	r3, r2
 800a2a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	08da      	lsrs	r2, r3, #3
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	3208      	adds	r2, #8
 800a2b0:	6939      	ldr	r1, [r7, #16]
 800a2b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	005b      	lsls	r3, r3, #1
 800a2c0:	2203      	movs	r2, #3
 800a2c2:	fa02 f303 	lsl.w	r3, r2, r3
 800a2c6:	43db      	mvns	r3, r3
 800a2c8:	693a      	ldr	r2, [r7, #16]
 800a2ca:	4013      	ands	r3, r2
 800a2cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	685b      	ldr	r3, [r3, #4]
 800a2d2:	f003 0203 	and.w	r2, r3, #3
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	005b      	lsls	r3, r3, #1
 800a2da:	fa02 f303 	lsl.w	r3, r2, r3
 800a2de:	693a      	ldr	r2, [r7, #16]
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	693a      	ldr	r2, [r7, #16]
 800a2e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	685b      	ldr	r3, [r3, #4]
 800a2ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	f000 80a0 	beq.w	800a438 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a2f8:	4b58      	ldr	r3, [pc, #352]	; (800a45c <HAL_GPIO_Init+0x2d8>)
 800a2fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2fc:	4a57      	ldr	r2, [pc, #348]	; (800a45c <HAL_GPIO_Init+0x2d8>)
 800a2fe:	f043 0301 	orr.w	r3, r3, #1
 800a302:	6613      	str	r3, [r2, #96]	; 0x60
 800a304:	4b55      	ldr	r3, [pc, #340]	; (800a45c <HAL_GPIO_Init+0x2d8>)
 800a306:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a308:	f003 0301 	and.w	r3, r3, #1
 800a30c:	60bb      	str	r3, [r7, #8]
 800a30e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800a310:	4a53      	ldr	r2, [pc, #332]	; (800a460 <HAL_GPIO_Init+0x2dc>)
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	089b      	lsrs	r3, r3, #2
 800a316:	3302      	adds	r3, #2
 800a318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a31c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	f003 0303 	and.w	r3, r3, #3
 800a324:	009b      	lsls	r3, r3, #2
 800a326:	220f      	movs	r2, #15
 800a328:	fa02 f303 	lsl.w	r3, r2, r3
 800a32c:	43db      	mvns	r3, r3
 800a32e:	693a      	ldr	r2, [r7, #16]
 800a330:	4013      	ands	r3, r2
 800a332:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a33a:	d019      	beq.n	800a370 <HAL_GPIO_Init+0x1ec>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	4a49      	ldr	r2, [pc, #292]	; (800a464 <HAL_GPIO_Init+0x2e0>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d013      	beq.n	800a36c <HAL_GPIO_Init+0x1e8>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	4a48      	ldr	r2, [pc, #288]	; (800a468 <HAL_GPIO_Init+0x2e4>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d00d      	beq.n	800a368 <HAL_GPIO_Init+0x1e4>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	4a47      	ldr	r2, [pc, #284]	; (800a46c <HAL_GPIO_Init+0x2e8>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d007      	beq.n	800a364 <HAL_GPIO_Init+0x1e0>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	4a46      	ldr	r2, [pc, #280]	; (800a470 <HAL_GPIO_Init+0x2ec>)
 800a358:	4293      	cmp	r3, r2
 800a35a:	d101      	bne.n	800a360 <HAL_GPIO_Init+0x1dc>
 800a35c:	2304      	movs	r3, #4
 800a35e:	e008      	b.n	800a372 <HAL_GPIO_Init+0x1ee>
 800a360:	2307      	movs	r3, #7
 800a362:	e006      	b.n	800a372 <HAL_GPIO_Init+0x1ee>
 800a364:	2303      	movs	r3, #3
 800a366:	e004      	b.n	800a372 <HAL_GPIO_Init+0x1ee>
 800a368:	2302      	movs	r3, #2
 800a36a:	e002      	b.n	800a372 <HAL_GPIO_Init+0x1ee>
 800a36c:	2301      	movs	r3, #1
 800a36e:	e000      	b.n	800a372 <HAL_GPIO_Init+0x1ee>
 800a370:	2300      	movs	r3, #0
 800a372:	697a      	ldr	r2, [r7, #20]
 800a374:	f002 0203 	and.w	r2, r2, #3
 800a378:	0092      	lsls	r2, r2, #2
 800a37a:	4093      	lsls	r3, r2
 800a37c:	693a      	ldr	r2, [r7, #16]
 800a37e:	4313      	orrs	r3, r2
 800a380:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800a382:	4937      	ldr	r1, [pc, #220]	; (800a460 <HAL_GPIO_Init+0x2dc>)
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	089b      	lsrs	r3, r3, #2
 800a388:	3302      	adds	r3, #2
 800a38a:	693a      	ldr	r2, [r7, #16]
 800a38c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a390:	4b38      	ldr	r3, [pc, #224]	; (800a474 <HAL_GPIO_Init+0x2f0>)
 800a392:	689b      	ldr	r3, [r3, #8]
 800a394:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	43db      	mvns	r3, r3
 800a39a:	693a      	ldr	r2, [r7, #16]
 800a39c:	4013      	ands	r3, r2
 800a39e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d003      	beq.n	800a3b4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800a3ac:	693a      	ldr	r2, [r7, #16]
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a3b4:	4a2f      	ldr	r2, [pc, #188]	; (800a474 <HAL_GPIO_Init+0x2f0>)
 800a3b6:	693b      	ldr	r3, [r7, #16]
 800a3b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a3ba:	4b2e      	ldr	r3, [pc, #184]	; (800a474 <HAL_GPIO_Init+0x2f0>)
 800a3bc:	68db      	ldr	r3, [r3, #12]
 800a3be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	43db      	mvns	r3, r3
 800a3c4:	693a      	ldr	r2, [r7, #16]
 800a3c6:	4013      	ands	r3, r2
 800a3c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d003      	beq.n	800a3de <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800a3d6:	693a      	ldr	r2, [r7, #16]
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a3de:	4a25      	ldr	r2, [pc, #148]	; (800a474 <HAL_GPIO_Init+0x2f0>)
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800a3e4:	4b23      	ldr	r3, [pc, #140]	; (800a474 <HAL_GPIO_Init+0x2f0>)
 800a3e6:	685b      	ldr	r3, [r3, #4]
 800a3e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	43db      	mvns	r3, r3
 800a3ee:	693a      	ldr	r2, [r7, #16]
 800a3f0:	4013      	ands	r3, r2
 800a3f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d003      	beq.n	800a408 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800a400:	693a      	ldr	r2, [r7, #16]
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	4313      	orrs	r3, r2
 800a406:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a408:	4a1a      	ldr	r2, [pc, #104]	; (800a474 <HAL_GPIO_Init+0x2f0>)
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800a40e:	4b19      	ldr	r3, [pc, #100]	; (800a474 <HAL_GPIO_Init+0x2f0>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	43db      	mvns	r3, r3
 800a418:	693a      	ldr	r2, [r7, #16]
 800a41a:	4013      	ands	r3, r2
 800a41c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	685b      	ldr	r3, [r3, #4]
 800a422:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a426:	2b00      	cmp	r3, #0
 800a428:	d003      	beq.n	800a432 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800a42a:	693a      	ldr	r2, [r7, #16]
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	4313      	orrs	r3, r2
 800a430:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a432:	4a10      	ldr	r2, [pc, #64]	; (800a474 <HAL_GPIO_Init+0x2f0>)
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	3301      	adds	r3, #1
 800a43c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	681a      	ldr	r2, [r3, #0]
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	fa22 f303 	lsr.w	r3, r2, r3
 800a448:	2b00      	cmp	r3, #0
 800a44a:	f47f aea3 	bne.w	800a194 <HAL_GPIO_Init+0x10>
  }
}
 800a44e:	bf00      	nop
 800a450:	bf00      	nop
 800a452:	371c      	adds	r7, #28
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr
 800a45c:	40021000 	.word	0x40021000
 800a460:	40010000 	.word	0x40010000
 800a464:	48000400 	.word	0x48000400
 800a468:	48000800 	.word	0x48000800
 800a46c:	48000c00 	.word	0x48000c00
 800a470:	48001000 	.word	0x48001000
 800a474:	40010400 	.word	0x40010400

0800a478 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a478:	b480      	push	{r7}
 800a47a:	b083      	sub	sp, #12
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	460b      	mov	r3, r1
 800a482:	807b      	strh	r3, [r7, #2]
 800a484:	4613      	mov	r3, r2
 800a486:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a488:	787b      	ldrb	r3, [r7, #1]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d003      	beq.n	800a496 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a48e:	887a      	ldrh	r2, [r7, #2]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a494:	e002      	b.n	800a49c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a496:	887a      	ldrh	r2, [r7, #2]
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a49c:	bf00      	nop
 800a49e:	370c      	adds	r7, #12
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a6:	4770      	bx	lr

0800a4a8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b085      	sub	sp, #20
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
 800a4b0:	460b      	mov	r3, r1
 800a4b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	695b      	ldr	r3, [r3, #20]
 800a4b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a4ba:	887a      	ldrh	r2, [r7, #2]
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	4013      	ands	r3, r2
 800a4c0:	041a      	lsls	r2, r3, #16
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	43d9      	mvns	r1, r3
 800a4c6:	887b      	ldrh	r3, [r7, #2]
 800a4c8:	400b      	ands	r3, r1
 800a4ca:	431a      	orrs	r2, r3
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	619a      	str	r2, [r3, #24]
}
 800a4d0:	bf00      	nop
 800a4d2:	3714      	adds	r7, #20
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr

0800a4dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b082      	sub	sp, #8
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d101      	bne.n	800a4ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	e081      	b.n	800a5f2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a4f4:	b2db      	uxtb	r3, r3
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d106      	bne.n	800a508 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f7fa f8b2 	bl	800466c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2224      	movs	r2, #36	; 0x24
 800a50c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	681a      	ldr	r2, [r3, #0]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f022 0201 	bic.w	r2, r2, #1
 800a51e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	685a      	ldr	r2, [r3, #4]
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a52c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	689a      	ldr	r2, [r3, #8]
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a53c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	68db      	ldr	r3, [r3, #12]
 800a542:	2b01      	cmp	r3, #1
 800a544:	d107      	bne.n	800a556 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	689a      	ldr	r2, [r3, #8]
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a552:	609a      	str	r2, [r3, #8]
 800a554:	e006      	b.n	800a564 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	689a      	ldr	r2, [r3, #8]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a562:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	68db      	ldr	r3, [r3, #12]
 800a568:	2b02      	cmp	r3, #2
 800a56a:	d104      	bne.n	800a576 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a574:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	685b      	ldr	r3, [r3, #4]
 800a57c:	687a      	ldr	r2, [r7, #4]
 800a57e:	6812      	ldr	r2, [r2, #0]
 800a580:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a584:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a588:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	68da      	ldr	r2, [r3, #12]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a598:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	691a      	ldr	r2, [r3, #16]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	695b      	ldr	r3, [r3, #20]
 800a5a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	699b      	ldr	r3, [r3, #24]
 800a5aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	430a      	orrs	r2, r1
 800a5b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	69d9      	ldr	r1, [r3, #28]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6a1a      	ldr	r2, [r3, #32]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	430a      	orrs	r2, r1
 800a5c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	681a      	ldr	r2, [r3, #0]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f042 0201 	orr.w	r2, r2, #1
 800a5d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2220      	movs	r2, #32
 800a5de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a5f0:	2300      	movs	r3, #0
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3708      	adds	r7, #8
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}
	...

0800a5fc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b088      	sub	sp, #32
 800a600:	af02      	add	r7, sp, #8
 800a602:	60f8      	str	r0, [r7, #12]
 800a604:	4608      	mov	r0, r1
 800a606:	4611      	mov	r1, r2
 800a608:	461a      	mov	r2, r3
 800a60a:	4603      	mov	r3, r0
 800a60c:	817b      	strh	r3, [r7, #10]
 800a60e:	460b      	mov	r3, r1
 800a610:	813b      	strh	r3, [r7, #8]
 800a612:	4613      	mov	r3, r2
 800a614:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a61c:	b2db      	uxtb	r3, r3
 800a61e:	2b20      	cmp	r3, #32
 800a620:	f040 80f9 	bne.w	800a816 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a624:	6a3b      	ldr	r3, [r7, #32]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d002      	beq.n	800a630 <HAL_I2C_Mem_Write+0x34>
 800a62a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d105      	bne.n	800a63c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a636:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a638:	2301      	movs	r3, #1
 800a63a:	e0ed      	b.n	800a818 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a642:	2b01      	cmp	r3, #1
 800a644:	d101      	bne.n	800a64a <HAL_I2C_Mem_Write+0x4e>
 800a646:	2302      	movs	r3, #2
 800a648:	e0e6      	b.n	800a818 <HAL_I2C_Mem_Write+0x21c>
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	2201      	movs	r2, #1
 800a64e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a652:	f7ff fbd7 	bl	8009e04 <HAL_GetTick>
 800a656:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	9300      	str	r3, [sp, #0]
 800a65c:	2319      	movs	r3, #25
 800a65e:	2201      	movs	r2, #1
 800a660:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a664:	68f8      	ldr	r0, [r7, #12]
 800a666:	f000 fac3 	bl	800abf0 <I2C_WaitOnFlagUntilTimeout>
 800a66a:	4603      	mov	r3, r0
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d001      	beq.n	800a674 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800a670:	2301      	movs	r3, #1
 800a672:	e0d1      	b.n	800a818 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	2221      	movs	r2, #33	; 0x21
 800a678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	2240      	movs	r2, #64	; 0x40
 800a680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2200      	movs	r2, #0
 800a688:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	6a3a      	ldr	r2, [r7, #32]
 800a68e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a694:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	2200      	movs	r2, #0
 800a69a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a69c:	88f8      	ldrh	r0, [r7, #6]
 800a69e:	893a      	ldrh	r2, [r7, #8]
 800a6a0:	8979      	ldrh	r1, [r7, #10]
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	9301      	str	r3, [sp, #4]
 800a6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a8:	9300      	str	r3, [sp, #0]
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	68f8      	ldr	r0, [r7, #12]
 800a6ae:	f000 f9d3 	bl	800aa58 <I2C_RequestMemoryWrite>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d005      	beq.n	800a6c4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	e0a9      	b.n	800a818 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6c8:	b29b      	uxth	r3, r3
 800a6ca:	2bff      	cmp	r3, #255	; 0xff
 800a6cc:	d90e      	bls.n	800a6ec <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	22ff      	movs	r2, #255	; 0xff
 800a6d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6d8:	b2da      	uxtb	r2, r3
 800a6da:	8979      	ldrh	r1, [r7, #10]
 800a6dc:	2300      	movs	r3, #0
 800a6de:	9300      	str	r3, [sp, #0]
 800a6e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a6e4:	68f8      	ldr	r0, [r7, #12]
 800a6e6:	f000 fc2b 	bl	800af40 <I2C_TransferConfig>
 800a6ea:	e00f      	b.n	800a70c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6f0:	b29a      	uxth	r2, r3
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6fa:	b2da      	uxtb	r2, r3
 800a6fc:	8979      	ldrh	r1, [r7, #10]
 800a6fe:	2300      	movs	r3, #0
 800a700:	9300      	str	r3, [sp, #0]
 800a702:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a706:	68f8      	ldr	r0, [r7, #12]
 800a708:	f000 fc1a 	bl	800af40 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a70c:	697a      	ldr	r2, [r7, #20]
 800a70e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a710:	68f8      	ldr	r0, [r7, #12]
 800a712:	f000 faad 	bl	800ac70 <I2C_WaitOnTXISFlagUntilTimeout>
 800a716:	4603      	mov	r3, r0
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d001      	beq.n	800a720 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800a71c:	2301      	movs	r3, #1
 800a71e:	e07b      	b.n	800a818 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a724:	781a      	ldrb	r2, [r3, #0]
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a730:	1c5a      	adds	r2, r3, #1
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a73a:	b29b      	uxth	r3, r3
 800a73c:	3b01      	subs	r3, #1
 800a73e:	b29a      	uxth	r2, r3
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a748:	3b01      	subs	r3, #1
 800a74a:	b29a      	uxth	r2, r3
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a754:	b29b      	uxth	r3, r3
 800a756:	2b00      	cmp	r3, #0
 800a758:	d034      	beq.n	800a7c4 <HAL_I2C_Mem_Write+0x1c8>
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d130      	bne.n	800a7c4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	9300      	str	r3, [sp, #0]
 800a766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a768:	2200      	movs	r2, #0
 800a76a:	2180      	movs	r1, #128	; 0x80
 800a76c:	68f8      	ldr	r0, [r7, #12]
 800a76e:	f000 fa3f 	bl	800abf0 <I2C_WaitOnFlagUntilTimeout>
 800a772:	4603      	mov	r3, r0
 800a774:	2b00      	cmp	r3, #0
 800a776:	d001      	beq.n	800a77c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800a778:	2301      	movs	r3, #1
 800a77a:	e04d      	b.n	800a818 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a780:	b29b      	uxth	r3, r3
 800a782:	2bff      	cmp	r3, #255	; 0xff
 800a784:	d90e      	bls.n	800a7a4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	22ff      	movs	r2, #255	; 0xff
 800a78a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a790:	b2da      	uxtb	r2, r3
 800a792:	8979      	ldrh	r1, [r7, #10]
 800a794:	2300      	movs	r3, #0
 800a796:	9300      	str	r3, [sp, #0]
 800a798:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a79c:	68f8      	ldr	r0, [r7, #12]
 800a79e:	f000 fbcf 	bl	800af40 <I2C_TransferConfig>
 800a7a2:	e00f      	b.n	800a7c4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7a8:	b29a      	uxth	r2, r3
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7b2:	b2da      	uxtb	r2, r3
 800a7b4:	8979      	ldrh	r1, [r7, #10]
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	9300      	str	r3, [sp, #0]
 800a7ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a7be:	68f8      	ldr	r0, [r7, #12]
 800a7c0:	f000 fbbe 	bl	800af40 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7c8:	b29b      	uxth	r3, r3
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d19e      	bne.n	800a70c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a7ce:	697a      	ldr	r2, [r7, #20]
 800a7d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a7d2:	68f8      	ldr	r0, [r7, #12]
 800a7d4:	f000 fa8c 	bl	800acf0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d001      	beq.n	800a7e2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800a7de:	2301      	movs	r3, #1
 800a7e0:	e01a      	b.n	800a818 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	2220      	movs	r2, #32
 800a7e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	6859      	ldr	r1, [r3, #4]
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681a      	ldr	r2, [r3, #0]
 800a7f4:	4b0a      	ldr	r3, [pc, #40]	; (800a820 <HAL_I2C_Mem_Write+0x224>)
 800a7f6:	400b      	ands	r3, r1
 800a7f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	2220      	movs	r2, #32
 800a7fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	2200      	movs	r2, #0
 800a806:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	2200      	movs	r2, #0
 800a80e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a812:	2300      	movs	r3, #0
 800a814:	e000      	b.n	800a818 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800a816:	2302      	movs	r3, #2
  }
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3718      	adds	r7, #24
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}
 800a820:	fe00e800 	.word	0xfe00e800

0800a824 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b088      	sub	sp, #32
 800a828:	af02      	add	r7, sp, #8
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	4608      	mov	r0, r1
 800a82e:	4611      	mov	r1, r2
 800a830:	461a      	mov	r2, r3
 800a832:	4603      	mov	r3, r0
 800a834:	817b      	strh	r3, [r7, #10]
 800a836:	460b      	mov	r3, r1
 800a838:	813b      	strh	r3, [r7, #8]
 800a83a:	4613      	mov	r3, r2
 800a83c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a844:	b2db      	uxtb	r3, r3
 800a846:	2b20      	cmp	r3, #32
 800a848:	f040 80fd 	bne.w	800aa46 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800a84c:	6a3b      	ldr	r3, [r7, #32]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d002      	beq.n	800a858 <HAL_I2C_Mem_Read+0x34>
 800a852:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a854:	2b00      	cmp	r3, #0
 800a856:	d105      	bne.n	800a864 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a85e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a860:	2301      	movs	r3, #1
 800a862:	e0f1      	b.n	800aa48 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a86a:	2b01      	cmp	r3, #1
 800a86c:	d101      	bne.n	800a872 <HAL_I2C_Mem_Read+0x4e>
 800a86e:	2302      	movs	r3, #2
 800a870:	e0ea      	b.n	800aa48 <HAL_I2C_Mem_Read+0x224>
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	2201      	movs	r2, #1
 800a876:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a87a:	f7ff fac3 	bl	8009e04 <HAL_GetTick>
 800a87e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	9300      	str	r3, [sp, #0]
 800a884:	2319      	movs	r3, #25
 800a886:	2201      	movs	r2, #1
 800a888:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a88c:	68f8      	ldr	r0, [r7, #12]
 800a88e:	f000 f9af 	bl	800abf0 <I2C_WaitOnFlagUntilTimeout>
 800a892:	4603      	mov	r3, r0
 800a894:	2b00      	cmp	r3, #0
 800a896:	d001      	beq.n	800a89c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800a898:	2301      	movs	r3, #1
 800a89a:	e0d5      	b.n	800aa48 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2222      	movs	r2, #34	; 0x22
 800a8a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2240      	movs	r2, #64	; 0x40
 800a8a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	6a3a      	ldr	r2, [r7, #32]
 800a8b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a8bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a8c4:	88f8      	ldrh	r0, [r7, #6]
 800a8c6:	893a      	ldrh	r2, [r7, #8]
 800a8c8:	8979      	ldrh	r1, [r7, #10]
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	9301      	str	r3, [sp, #4]
 800a8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8d0:	9300      	str	r3, [sp, #0]
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	68f8      	ldr	r0, [r7, #12]
 800a8d6:	f000 f913 	bl	800ab00 <I2C_RequestMemoryRead>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d005      	beq.n	800a8ec <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	e0ad      	b.n	800aa48 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8f0:	b29b      	uxth	r3, r3
 800a8f2:	2bff      	cmp	r3, #255	; 0xff
 800a8f4:	d90e      	bls.n	800a914 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	22ff      	movs	r2, #255	; 0xff
 800a8fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a900:	b2da      	uxtb	r2, r3
 800a902:	8979      	ldrh	r1, [r7, #10]
 800a904:	4b52      	ldr	r3, [pc, #328]	; (800aa50 <HAL_I2C_Mem_Read+0x22c>)
 800a906:	9300      	str	r3, [sp, #0]
 800a908:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a90c:	68f8      	ldr	r0, [r7, #12]
 800a90e:	f000 fb17 	bl	800af40 <I2C_TransferConfig>
 800a912:	e00f      	b.n	800a934 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a918:	b29a      	uxth	r2, r3
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a922:	b2da      	uxtb	r2, r3
 800a924:	8979      	ldrh	r1, [r7, #10]
 800a926:	4b4a      	ldr	r3, [pc, #296]	; (800aa50 <HAL_I2C_Mem_Read+0x22c>)
 800a928:	9300      	str	r3, [sp, #0]
 800a92a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a92e:	68f8      	ldr	r0, [r7, #12]
 800a930:	f000 fb06 	bl	800af40 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	9300      	str	r3, [sp, #0]
 800a938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a93a:	2200      	movs	r2, #0
 800a93c:	2104      	movs	r1, #4
 800a93e:	68f8      	ldr	r0, [r7, #12]
 800a940:	f000 f956 	bl	800abf0 <I2C_WaitOnFlagUntilTimeout>
 800a944:	4603      	mov	r3, r0
 800a946:	2b00      	cmp	r3, #0
 800a948:	d001      	beq.n	800a94e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800a94a:	2301      	movs	r3, #1
 800a94c:	e07c      	b.n	800aa48 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a958:	b2d2      	uxtb	r2, r2
 800a95a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a960:	1c5a      	adds	r2, r3, #1
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a96a:	3b01      	subs	r3, #1
 800a96c:	b29a      	uxth	r2, r3
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a976:	b29b      	uxth	r3, r3
 800a978:	3b01      	subs	r3, #1
 800a97a:	b29a      	uxth	r2, r3
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a984:	b29b      	uxth	r3, r3
 800a986:	2b00      	cmp	r3, #0
 800a988:	d034      	beq.n	800a9f4 <HAL_I2C_Mem_Read+0x1d0>
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d130      	bne.n	800a9f4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	9300      	str	r3, [sp, #0]
 800a996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a998:	2200      	movs	r2, #0
 800a99a:	2180      	movs	r1, #128	; 0x80
 800a99c:	68f8      	ldr	r0, [r7, #12]
 800a99e:	f000 f927 	bl	800abf0 <I2C_WaitOnFlagUntilTimeout>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d001      	beq.n	800a9ac <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	e04d      	b.n	800aa48 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9b0:	b29b      	uxth	r3, r3
 800a9b2:	2bff      	cmp	r3, #255	; 0xff
 800a9b4:	d90e      	bls.n	800a9d4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	22ff      	movs	r2, #255	; 0xff
 800a9ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9c0:	b2da      	uxtb	r2, r3
 800a9c2:	8979      	ldrh	r1, [r7, #10]
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	9300      	str	r3, [sp, #0]
 800a9c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a9cc:	68f8      	ldr	r0, [r7, #12]
 800a9ce:	f000 fab7 	bl	800af40 <I2C_TransferConfig>
 800a9d2:	e00f      	b.n	800a9f4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9d8:	b29a      	uxth	r2, r3
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9e2:	b2da      	uxtb	r2, r3
 800a9e4:	8979      	ldrh	r1, [r7, #10]
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	9300      	str	r3, [sp, #0]
 800a9ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a9ee:	68f8      	ldr	r0, [r7, #12]
 800a9f0:	f000 faa6 	bl	800af40 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9f8:	b29b      	uxth	r3, r3
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d19a      	bne.n	800a934 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a9fe:	697a      	ldr	r2, [r7, #20]
 800aa00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa02:	68f8      	ldr	r0, [r7, #12]
 800aa04:	f000 f974 	bl	800acf0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d001      	beq.n	800aa12 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800aa0e:	2301      	movs	r3, #1
 800aa10:	e01a      	b.n	800aa48 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	2220      	movs	r2, #32
 800aa18:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	6859      	ldr	r1, [r3, #4]
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681a      	ldr	r2, [r3, #0]
 800aa24:	4b0b      	ldr	r3, [pc, #44]	; (800aa54 <HAL_I2C_Mem_Read+0x230>)
 800aa26:	400b      	ands	r3, r1
 800aa28:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	2220      	movs	r2, #32
 800aa2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	2200      	movs	r2, #0
 800aa36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800aa42:	2300      	movs	r3, #0
 800aa44:	e000      	b.n	800aa48 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800aa46:	2302      	movs	r3, #2
  }
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3718      	adds	r7, #24
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}
 800aa50:	80002400 	.word	0x80002400
 800aa54:	fe00e800 	.word	0xfe00e800

0800aa58 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b086      	sub	sp, #24
 800aa5c:	af02      	add	r7, sp, #8
 800aa5e:	60f8      	str	r0, [r7, #12]
 800aa60:	4608      	mov	r0, r1
 800aa62:	4611      	mov	r1, r2
 800aa64:	461a      	mov	r2, r3
 800aa66:	4603      	mov	r3, r0
 800aa68:	817b      	strh	r3, [r7, #10]
 800aa6a:	460b      	mov	r3, r1
 800aa6c:	813b      	strh	r3, [r7, #8]
 800aa6e:	4613      	mov	r3, r2
 800aa70:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800aa72:	88fb      	ldrh	r3, [r7, #6]
 800aa74:	b2da      	uxtb	r2, r3
 800aa76:	8979      	ldrh	r1, [r7, #10]
 800aa78:	4b20      	ldr	r3, [pc, #128]	; (800aafc <I2C_RequestMemoryWrite+0xa4>)
 800aa7a:	9300      	str	r3, [sp, #0]
 800aa7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800aa80:	68f8      	ldr	r0, [r7, #12]
 800aa82:	f000 fa5d 	bl	800af40 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aa86:	69fa      	ldr	r2, [r7, #28]
 800aa88:	69b9      	ldr	r1, [r7, #24]
 800aa8a:	68f8      	ldr	r0, [r7, #12]
 800aa8c:	f000 f8f0 	bl	800ac70 <I2C_WaitOnTXISFlagUntilTimeout>
 800aa90:	4603      	mov	r3, r0
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d001      	beq.n	800aa9a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800aa96:	2301      	movs	r3, #1
 800aa98:	e02c      	b.n	800aaf4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800aa9a:	88fb      	ldrh	r3, [r7, #6]
 800aa9c:	2b01      	cmp	r3, #1
 800aa9e:	d105      	bne.n	800aaac <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800aaa0:	893b      	ldrh	r3, [r7, #8]
 800aaa2:	b2da      	uxtb	r2, r3
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	629a      	str	r2, [r3, #40]	; 0x28
 800aaaa:	e015      	b.n	800aad8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800aaac:	893b      	ldrh	r3, [r7, #8]
 800aaae:	0a1b      	lsrs	r3, r3, #8
 800aab0:	b29b      	uxth	r3, r3
 800aab2:	b2da      	uxtb	r2, r3
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aaba:	69fa      	ldr	r2, [r7, #28]
 800aabc:	69b9      	ldr	r1, [r7, #24]
 800aabe:	68f8      	ldr	r0, [r7, #12]
 800aac0:	f000 f8d6 	bl	800ac70 <I2C_WaitOnTXISFlagUntilTimeout>
 800aac4:	4603      	mov	r3, r0
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d001      	beq.n	800aace <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800aaca:	2301      	movs	r3, #1
 800aacc:	e012      	b.n	800aaf4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800aace:	893b      	ldrh	r3, [r7, #8]
 800aad0:	b2da      	uxtb	r2, r3
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800aad8:	69fb      	ldr	r3, [r7, #28]
 800aada:	9300      	str	r3, [sp, #0]
 800aadc:	69bb      	ldr	r3, [r7, #24]
 800aade:	2200      	movs	r2, #0
 800aae0:	2180      	movs	r1, #128	; 0x80
 800aae2:	68f8      	ldr	r0, [r7, #12]
 800aae4:	f000 f884 	bl	800abf0 <I2C_WaitOnFlagUntilTimeout>
 800aae8:	4603      	mov	r3, r0
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d001      	beq.n	800aaf2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800aaee:	2301      	movs	r3, #1
 800aaf0:	e000      	b.n	800aaf4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800aaf2:	2300      	movs	r3, #0
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3710      	adds	r7, #16
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}
 800aafc:	80002000 	.word	0x80002000

0800ab00 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b086      	sub	sp, #24
 800ab04:	af02      	add	r7, sp, #8
 800ab06:	60f8      	str	r0, [r7, #12]
 800ab08:	4608      	mov	r0, r1
 800ab0a:	4611      	mov	r1, r2
 800ab0c:	461a      	mov	r2, r3
 800ab0e:	4603      	mov	r3, r0
 800ab10:	817b      	strh	r3, [r7, #10]
 800ab12:	460b      	mov	r3, r1
 800ab14:	813b      	strh	r3, [r7, #8]
 800ab16:	4613      	mov	r3, r2
 800ab18:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800ab1a:	88fb      	ldrh	r3, [r7, #6]
 800ab1c:	b2da      	uxtb	r2, r3
 800ab1e:	8979      	ldrh	r1, [r7, #10]
 800ab20:	4b20      	ldr	r3, [pc, #128]	; (800aba4 <I2C_RequestMemoryRead+0xa4>)
 800ab22:	9300      	str	r3, [sp, #0]
 800ab24:	2300      	movs	r3, #0
 800ab26:	68f8      	ldr	r0, [r7, #12]
 800ab28:	f000 fa0a 	bl	800af40 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ab2c:	69fa      	ldr	r2, [r7, #28]
 800ab2e:	69b9      	ldr	r1, [r7, #24]
 800ab30:	68f8      	ldr	r0, [r7, #12]
 800ab32:	f000 f89d 	bl	800ac70 <I2C_WaitOnTXISFlagUntilTimeout>
 800ab36:	4603      	mov	r3, r0
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d001      	beq.n	800ab40 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	e02c      	b.n	800ab9a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ab40:	88fb      	ldrh	r3, [r7, #6]
 800ab42:	2b01      	cmp	r3, #1
 800ab44:	d105      	bne.n	800ab52 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ab46:	893b      	ldrh	r3, [r7, #8]
 800ab48:	b2da      	uxtb	r2, r3
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	629a      	str	r2, [r3, #40]	; 0x28
 800ab50:	e015      	b.n	800ab7e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ab52:	893b      	ldrh	r3, [r7, #8]
 800ab54:	0a1b      	lsrs	r3, r3, #8
 800ab56:	b29b      	uxth	r3, r3
 800ab58:	b2da      	uxtb	r2, r3
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ab60:	69fa      	ldr	r2, [r7, #28]
 800ab62:	69b9      	ldr	r1, [r7, #24]
 800ab64:	68f8      	ldr	r0, [r7, #12]
 800ab66:	f000 f883 	bl	800ac70 <I2C_WaitOnTXISFlagUntilTimeout>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d001      	beq.n	800ab74 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800ab70:	2301      	movs	r3, #1
 800ab72:	e012      	b.n	800ab9a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ab74:	893b      	ldrh	r3, [r7, #8]
 800ab76:	b2da      	uxtb	r2, r3
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800ab7e:	69fb      	ldr	r3, [r7, #28]
 800ab80:	9300      	str	r3, [sp, #0]
 800ab82:	69bb      	ldr	r3, [r7, #24]
 800ab84:	2200      	movs	r2, #0
 800ab86:	2140      	movs	r1, #64	; 0x40
 800ab88:	68f8      	ldr	r0, [r7, #12]
 800ab8a:	f000 f831 	bl	800abf0 <I2C_WaitOnFlagUntilTimeout>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d001      	beq.n	800ab98 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800ab94:	2301      	movs	r3, #1
 800ab96:	e000      	b.n	800ab9a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800ab98:	2300      	movs	r3, #0
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3710      	adds	r7, #16
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
 800aba2:	bf00      	nop
 800aba4:	80002000 	.word	0x80002000

0800aba8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b083      	sub	sp, #12
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	699b      	ldr	r3, [r3, #24]
 800abb6:	f003 0302 	and.w	r3, r3, #2
 800abba:	2b02      	cmp	r3, #2
 800abbc:	d103      	bne.n	800abc6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	2200      	movs	r2, #0
 800abc4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	699b      	ldr	r3, [r3, #24]
 800abcc:	f003 0301 	and.w	r3, r3, #1
 800abd0:	2b01      	cmp	r3, #1
 800abd2:	d007      	beq.n	800abe4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	699a      	ldr	r2, [r3, #24]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f042 0201 	orr.w	r2, r2, #1
 800abe2:	619a      	str	r2, [r3, #24]
  }
}
 800abe4:	bf00      	nop
 800abe6:	370c      	adds	r7, #12
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr

0800abf0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b084      	sub	sp, #16
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	60f8      	str	r0, [r7, #12]
 800abf8:	60b9      	str	r1, [r7, #8]
 800abfa:	603b      	str	r3, [r7, #0]
 800abfc:	4613      	mov	r3, r2
 800abfe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ac00:	e022      	b.n	800ac48 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac08:	d01e      	beq.n	800ac48 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac0a:	f7ff f8fb 	bl	8009e04 <HAL_GetTick>
 800ac0e:	4602      	mov	r2, r0
 800ac10:	69bb      	ldr	r3, [r7, #24]
 800ac12:	1ad3      	subs	r3, r2, r3
 800ac14:	683a      	ldr	r2, [r7, #0]
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d302      	bcc.n	800ac20 <I2C_WaitOnFlagUntilTimeout+0x30>
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d113      	bne.n	800ac48 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac24:	f043 0220 	orr.w	r2, r3, #32
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	2220      	movs	r2, #32
 800ac30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	2200      	movs	r2, #0
 800ac38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800ac44:	2301      	movs	r3, #1
 800ac46:	e00f      	b.n	800ac68 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	699a      	ldr	r2, [r3, #24]
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	4013      	ands	r3, r2
 800ac52:	68ba      	ldr	r2, [r7, #8]
 800ac54:	429a      	cmp	r2, r3
 800ac56:	bf0c      	ite	eq
 800ac58:	2301      	moveq	r3, #1
 800ac5a:	2300      	movne	r3, #0
 800ac5c:	b2db      	uxtb	r3, r3
 800ac5e:	461a      	mov	r2, r3
 800ac60:	79fb      	ldrb	r3, [r7, #7]
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d0cd      	beq.n	800ac02 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ac66:	2300      	movs	r3, #0
}
 800ac68:	4618      	mov	r0, r3
 800ac6a:	3710      	adds	r7, #16
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}

0800ac70 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b084      	sub	sp, #16
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	60f8      	str	r0, [r7, #12]
 800ac78:	60b9      	str	r1, [r7, #8]
 800ac7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ac7c:	e02c      	b.n	800acd8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ac7e:	687a      	ldr	r2, [r7, #4]
 800ac80:	68b9      	ldr	r1, [r7, #8]
 800ac82:	68f8      	ldr	r0, [r7, #12]
 800ac84:	f000 f870 	bl	800ad68 <I2C_IsErrorOccurred>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d001      	beq.n	800ac92 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ac8e:	2301      	movs	r3, #1
 800ac90:	e02a      	b.n	800ace8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac98:	d01e      	beq.n	800acd8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac9a:	f7ff f8b3 	bl	8009e04 <HAL_GetTick>
 800ac9e:	4602      	mov	r2, r0
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	1ad3      	subs	r3, r2, r3
 800aca4:	68ba      	ldr	r2, [r7, #8]
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d302      	bcc.n	800acb0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d113      	bne.n	800acd8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acb4:	f043 0220 	orr.w	r2, r3, #32
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2220      	movs	r2, #32
 800acc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	2200      	movs	r2, #0
 800acc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	2200      	movs	r2, #0
 800acd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800acd4:	2301      	movs	r3, #1
 800acd6:	e007      	b.n	800ace8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	699b      	ldr	r3, [r3, #24]
 800acde:	f003 0302 	and.w	r3, r3, #2
 800ace2:	2b02      	cmp	r3, #2
 800ace4:	d1cb      	bne.n	800ac7e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ace6:	2300      	movs	r3, #0
}
 800ace8:	4618      	mov	r0, r3
 800acea:	3710      	adds	r7, #16
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}

0800acf0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b084      	sub	sp, #16
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	60f8      	str	r0, [r7, #12]
 800acf8:	60b9      	str	r1, [r7, #8]
 800acfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800acfc:	e028      	b.n	800ad50 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800acfe:	687a      	ldr	r2, [r7, #4]
 800ad00:	68b9      	ldr	r1, [r7, #8]
 800ad02:	68f8      	ldr	r0, [r7, #12]
 800ad04:	f000 f830 	bl	800ad68 <I2C_IsErrorOccurred>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d001      	beq.n	800ad12 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ad0e:	2301      	movs	r3, #1
 800ad10:	e026      	b.n	800ad60 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad12:	f7ff f877 	bl	8009e04 <HAL_GetTick>
 800ad16:	4602      	mov	r2, r0
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	1ad3      	subs	r3, r2, r3
 800ad1c:	68ba      	ldr	r2, [r7, #8]
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d302      	bcc.n	800ad28 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d113      	bne.n	800ad50 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad2c:	f043 0220 	orr.w	r2, r3, #32
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	2220      	movs	r2, #32
 800ad38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2200      	movs	r2, #0
 800ad48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	e007      	b.n	800ad60 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	699b      	ldr	r3, [r3, #24]
 800ad56:	f003 0320 	and.w	r3, r3, #32
 800ad5a:	2b20      	cmp	r3, #32
 800ad5c:	d1cf      	bne.n	800acfe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800ad5e:	2300      	movs	r3, #0
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3710      	adds	r7, #16
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}

0800ad68 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b08a      	sub	sp, #40	; 0x28
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	60f8      	str	r0, [r7, #12]
 800ad70:	60b9      	str	r1, [r7, #8]
 800ad72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ad74:	2300      	movs	r3, #0
 800ad76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	699b      	ldr	r3, [r3, #24]
 800ad80:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800ad82:	2300      	movs	r3, #0
 800ad84:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800ad8a:	69bb      	ldr	r3, [r7, #24]
 800ad8c:	f003 0310 	and.w	r3, r3, #16
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d075      	beq.n	800ae80 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	2210      	movs	r2, #16
 800ad9a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ad9c:	e056      	b.n	800ae4c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ada4:	d052      	beq.n	800ae4c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800ada6:	f7ff f82d 	bl	8009e04 <HAL_GetTick>
 800adaa:	4602      	mov	r2, r0
 800adac:	69fb      	ldr	r3, [r7, #28]
 800adae:	1ad3      	subs	r3, r2, r3
 800adb0:	68ba      	ldr	r2, [r7, #8]
 800adb2:	429a      	cmp	r2, r3
 800adb4:	d302      	bcc.n	800adbc <I2C_IsErrorOccurred+0x54>
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d147      	bne.n	800ae4c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	685b      	ldr	r3, [r3, #4]
 800adc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800adc6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800adce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	699b      	ldr	r3, [r3, #24]
 800add6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800adda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800adde:	d12e      	bne.n	800ae3e <I2C_IsErrorOccurred+0xd6>
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ade6:	d02a      	beq.n	800ae3e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800ade8:	7cfb      	ldrb	r3, [r7, #19]
 800adea:	2b20      	cmp	r3, #32
 800adec:	d027      	beq.n	800ae3e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	685a      	ldr	r2, [r3, #4]
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800adfc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800adfe:	f7ff f801 	bl	8009e04 <HAL_GetTick>
 800ae02:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ae04:	e01b      	b.n	800ae3e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800ae06:	f7fe fffd 	bl	8009e04 <HAL_GetTick>
 800ae0a:	4602      	mov	r2, r0
 800ae0c:	69fb      	ldr	r3, [r7, #28]
 800ae0e:	1ad3      	subs	r3, r2, r3
 800ae10:	2b19      	cmp	r3, #25
 800ae12:	d914      	bls.n	800ae3e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae18:	f043 0220 	orr.w	r2, r3, #32
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	2220      	movs	r2, #32
 800ae24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	2200      	movs	r2, #0
 800ae34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800ae38:	2301      	movs	r3, #1
 800ae3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	699b      	ldr	r3, [r3, #24]
 800ae44:	f003 0320 	and.w	r3, r3, #32
 800ae48:	2b20      	cmp	r3, #32
 800ae4a:	d1dc      	bne.n	800ae06 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	699b      	ldr	r3, [r3, #24]
 800ae52:	f003 0320 	and.w	r3, r3, #32
 800ae56:	2b20      	cmp	r3, #32
 800ae58:	d003      	beq.n	800ae62 <I2C_IsErrorOccurred+0xfa>
 800ae5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d09d      	beq.n	800ad9e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800ae62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d103      	bne.n	800ae72 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	2220      	movs	r2, #32
 800ae70:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800ae72:	6a3b      	ldr	r3, [r7, #32]
 800ae74:	f043 0304 	orr.w	r3, r3, #4
 800ae78:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	699b      	ldr	r3, [r3, #24]
 800ae86:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800ae88:	69bb      	ldr	r3, [r7, #24]
 800ae8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d00b      	beq.n	800aeaa <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800ae92:	6a3b      	ldr	r3, [r7, #32]
 800ae94:	f043 0301 	orr.w	r3, r3, #1
 800ae98:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aea2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800aea4:	2301      	movs	r3, #1
 800aea6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800aeaa:	69bb      	ldr	r3, [r7, #24]
 800aeac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d00b      	beq.n	800aecc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800aeb4:	6a3b      	ldr	r3, [r7, #32]
 800aeb6:	f043 0308 	orr.w	r3, r3, #8
 800aeba:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aec4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800aec6:	2301      	movs	r3, #1
 800aec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800aecc:	69bb      	ldr	r3, [r7, #24]
 800aece:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d00b      	beq.n	800aeee <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800aed6:	6a3b      	ldr	r3, [r7, #32]
 800aed8:	f043 0302 	orr.w	r3, r3, #2
 800aedc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aee6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800aee8:	2301      	movs	r3, #1
 800aeea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800aeee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d01c      	beq.n	800af30 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800aef6:	68f8      	ldr	r0, [r7, #12]
 800aef8:	f7ff fe56 	bl	800aba8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	6859      	ldr	r1, [r3, #4]
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681a      	ldr	r2, [r3, #0]
 800af06:	4b0d      	ldr	r3, [pc, #52]	; (800af3c <I2C_IsErrorOccurred+0x1d4>)
 800af08:	400b      	ands	r3, r1
 800af0a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800af10:	6a3b      	ldr	r3, [r7, #32]
 800af12:	431a      	orrs	r2, r3
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	2220      	movs	r2, #32
 800af1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	2200      	movs	r2, #0
 800af24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	2200      	movs	r2, #0
 800af2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800af30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800af34:	4618      	mov	r0, r3
 800af36:	3728      	adds	r7, #40	; 0x28
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}
 800af3c:	fe00e800 	.word	0xfe00e800

0800af40 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800af40:	b480      	push	{r7}
 800af42:	b087      	sub	sp, #28
 800af44:	af00      	add	r7, sp, #0
 800af46:	60f8      	str	r0, [r7, #12]
 800af48:	607b      	str	r3, [r7, #4]
 800af4a:	460b      	mov	r3, r1
 800af4c:	817b      	strh	r3, [r7, #10]
 800af4e:	4613      	mov	r3, r2
 800af50:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800af52:	897b      	ldrh	r3, [r7, #10]
 800af54:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800af58:	7a7b      	ldrb	r3, [r7, #9]
 800af5a:	041b      	lsls	r3, r3, #16
 800af5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800af60:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800af66:	6a3b      	ldr	r3, [r7, #32]
 800af68:	4313      	orrs	r3, r2
 800af6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af6e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	685a      	ldr	r2, [r3, #4]
 800af76:	6a3b      	ldr	r3, [r7, #32]
 800af78:	0d5b      	lsrs	r3, r3, #21
 800af7a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800af7e:	4b08      	ldr	r3, [pc, #32]	; (800afa0 <I2C_TransferConfig+0x60>)
 800af80:	430b      	orrs	r3, r1
 800af82:	43db      	mvns	r3, r3
 800af84:	ea02 0103 	and.w	r1, r2, r3
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	697a      	ldr	r2, [r7, #20]
 800af8e:	430a      	orrs	r2, r1
 800af90:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800af92:	bf00      	nop
 800af94:	371c      	adds	r7, #28
 800af96:	46bd      	mov	sp, r7
 800af98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9c:	4770      	bx	lr
 800af9e:	bf00      	nop
 800afa0:	03ff63ff 	.word	0x03ff63ff

0800afa4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800afa4:	b480      	push	{r7}
 800afa6:	b083      	sub	sp, #12
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800afb4:	b2db      	uxtb	r3, r3
 800afb6:	2b20      	cmp	r3, #32
 800afb8:	d138      	bne.n	800b02c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d101      	bne.n	800afc8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800afc4:	2302      	movs	r3, #2
 800afc6:	e032      	b.n	800b02e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2201      	movs	r2, #1
 800afcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2224      	movs	r2, #36	; 0x24
 800afd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	681a      	ldr	r2, [r3, #0]
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f022 0201 	bic.w	r2, r2, #1
 800afe6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	681a      	ldr	r2, [r3, #0]
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800aff6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	6819      	ldr	r1, [r3, #0]
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	683a      	ldr	r2, [r7, #0]
 800b004:	430a      	orrs	r2, r1
 800b006:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	681a      	ldr	r2, [r3, #0]
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f042 0201 	orr.w	r2, r2, #1
 800b016:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2220      	movs	r2, #32
 800b01c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2200      	movs	r2, #0
 800b024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b028:	2300      	movs	r3, #0
 800b02a:	e000      	b.n	800b02e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b02c:	2302      	movs	r3, #2
  }
}
 800b02e:	4618      	mov	r0, r3
 800b030:	370c      	adds	r7, #12
 800b032:	46bd      	mov	sp, r7
 800b034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b038:	4770      	bx	lr

0800b03a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b03a:	b480      	push	{r7}
 800b03c:	b085      	sub	sp, #20
 800b03e:	af00      	add	r7, sp, #0
 800b040:	6078      	str	r0, [r7, #4]
 800b042:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b04a:	b2db      	uxtb	r3, r3
 800b04c:	2b20      	cmp	r3, #32
 800b04e:	d139      	bne.n	800b0c4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b056:	2b01      	cmp	r3, #1
 800b058:	d101      	bne.n	800b05e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b05a:	2302      	movs	r3, #2
 800b05c:	e033      	b.n	800b0c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2201      	movs	r2, #1
 800b062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2224      	movs	r2, #36	; 0x24
 800b06a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	681a      	ldr	r2, [r3, #0]
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f022 0201 	bic.w	r2, r2, #1
 800b07c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b08c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	021b      	lsls	r3, r3, #8
 800b092:	68fa      	ldr	r2, [r7, #12]
 800b094:	4313      	orrs	r3, r2
 800b096:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	68fa      	ldr	r2, [r7, #12]
 800b09e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	681a      	ldr	r2, [r3, #0]
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f042 0201 	orr.w	r2, r2, #1
 800b0ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2220      	movs	r2, #32
 800b0b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	e000      	b.n	800b0c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b0c4:	2302      	movs	r3, #2
  }
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3714      	adds	r7, #20
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d0:	4770      	bx	lr
	...

0800b0d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800b0d8:	4b04      	ldr	r3, [pc, #16]	; (800b0ec <HAL_PWREx_GetVoltageRange+0x18>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e8:	4770      	bx	lr
 800b0ea:	bf00      	nop
 800b0ec:	40007000 	.word	0x40007000

0800b0f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b0f0:	b480      	push	{r7}
 800b0f2:	b085      	sub	sp, #20
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b0fe:	d130      	bne.n	800b162 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800b100:	4b23      	ldr	r3, [pc, #140]	; (800b190 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b10c:	d038      	beq.n	800b180 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b10e:	4b20      	ldr	r3, [pc, #128]	; (800b190 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b116:	4a1e      	ldr	r2, [pc, #120]	; (800b190 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b118:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b11c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b11e:	4b1d      	ldr	r3, [pc, #116]	; (800b194 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	2232      	movs	r2, #50	; 0x32
 800b124:	fb02 f303 	mul.w	r3, r2, r3
 800b128:	4a1b      	ldr	r2, [pc, #108]	; (800b198 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800b12a:	fba2 2303 	umull	r2, r3, r2, r3
 800b12e:	0c9b      	lsrs	r3, r3, #18
 800b130:	3301      	adds	r3, #1
 800b132:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b134:	e002      	b.n	800b13c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	3b01      	subs	r3, #1
 800b13a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b13c:	4b14      	ldr	r3, [pc, #80]	; (800b190 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b13e:	695b      	ldr	r3, [r3, #20]
 800b140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b144:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b148:	d102      	bne.n	800b150 <HAL_PWREx_ControlVoltageScaling+0x60>
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d1f2      	bne.n	800b136 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b150:	4b0f      	ldr	r3, [pc, #60]	; (800b190 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b152:	695b      	ldr	r3, [r3, #20]
 800b154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b15c:	d110      	bne.n	800b180 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800b15e:	2303      	movs	r3, #3
 800b160:	e00f      	b.n	800b182 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800b162:	4b0b      	ldr	r3, [pc, #44]	; (800b190 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b16a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b16e:	d007      	beq.n	800b180 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b170:	4b07      	ldr	r3, [pc, #28]	; (800b190 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b178:	4a05      	ldr	r2, [pc, #20]	; (800b190 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b17a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b17e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800b180:	2300      	movs	r3, #0
}
 800b182:	4618      	mov	r0, r3
 800b184:	3714      	adds	r7, #20
 800b186:	46bd      	mov	sp, r7
 800b188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18c:	4770      	bx	lr
 800b18e:	bf00      	nop
 800b190:	40007000 	.word	0x40007000
 800b194:	20000000 	.word	0x20000000
 800b198:	431bde83 	.word	0x431bde83

0800b19c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b088      	sub	sp, #32
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d102      	bne.n	800b1b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	f000 bc02 	b.w	800b9b4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b1b0:	4b96      	ldr	r3, [pc, #600]	; (800b40c <HAL_RCC_OscConfig+0x270>)
 800b1b2:	689b      	ldr	r3, [r3, #8]
 800b1b4:	f003 030c 	and.w	r3, r3, #12
 800b1b8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b1ba:	4b94      	ldr	r3, [pc, #592]	; (800b40c <HAL_RCC_OscConfig+0x270>)
 800b1bc:	68db      	ldr	r3, [r3, #12]
 800b1be:	f003 0303 	and.w	r3, r3, #3
 800b1c2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f003 0310 	and.w	r3, r3, #16
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	f000 80e4 	beq.w	800b39a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800b1d2:	69bb      	ldr	r3, [r7, #24]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d007      	beq.n	800b1e8 <HAL_RCC_OscConfig+0x4c>
 800b1d8:	69bb      	ldr	r3, [r7, #24]
 800b1da:	2b0c      	cmp	r3, #12
 800b1dc:	f040 808b 	bne.w	800b2f6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800b1e0:	697b      	ldr	r3, [r7, #20]
 800b1e2:	2b01      	cmp	r3, #1
 800b1e4:	f040 8087 	bne.w	800b2f6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b1e8:	4b88      	ldr	r3, [pc, #544]	; (800b40c <HAL_RCC_OscConfig+0x270>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f003 0302 	and.w	r3, r3, #2
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d005      	beq.n	800b200 <HAL_RCC_OscConfig+0x64>
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	699b      	ldr	r3, [r3, #24]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d101      	bne.n	800b200 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	e3d9      	b.n	800b9b4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6a1a      	ldr	r2, [r3, #32]
 800b204:	4b81      	ldr	r3, [pc, #516]	; (800b40c <HAL_RCC_OscConfig+0x270>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	f003 0308 	and.w	r3, r3, #8
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d004      	beq.n	800b21a <HAL_RCC_OscConfig+0x7e>
 800b210:	4b7e      	ldr	r3, [pc, #504]	; (800b40c <HAL_RCC_OscConfig+0x270>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b218:	e005      	b.n	800b226 <HAL_RCC_OscConfig+0x8a>
 800b21a:	4b7c      	ldr	r3, [pc, #496]	; (800b40c <HAL_RCC_OscConfig+0x270>)
 800b21c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b220:	091b      	lsrs	r3, r3, #4
 800b222:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b226:	4293      	cmp	r3, r2
 800b228:	d223      	bcs.n	800b272 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6a1b      	ldr	r3, [r3, #32]
 800b22e:	4618      	mov	r0, r3
 800b230:	f000 fd8c 	bl	800bd4c <RCC_SetFlashLatencyFromMSIRange>
 800b234:	4603      	mov	r3, r0
 800b236:	2b00      	cmp	r3, #0
 800b238:	d001      	beq.n	800b23e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800b23a:	2301      	movs	r3, #1
 800b23c:	e3ba      	b.n	800b9b4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b23e:	4b73      	ldr	r3, [pc, #460]	; (800b40c <HAL_RCC_OscConfig+0x270>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	4a72      	ldr	r2, [pc, #456]	; (800b40c <HAL_RCC_OscConfig+0x270>)
 800b244:	f043 0308 	orr.w	r3, r3, #8
 800b248:	6013      	str	r3, [r2, #0]
 800b24a:	4b70      	ldr	r3, [pc, #448]	; (800b40c <HAL_RCC_OscConfig+0x270>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6a1b      	ldr	r3, [r3, #32]
 800b256:	496d      	ldr	r1, [pc, #436]	; (800b40c <HAL_RCC_OscConfig+0x270>)
 800b258:	4313      	orrs	r3, r2
 800b25a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b25c:	4b6b      	ldr	r3, [pc, #428]	; (800b40c <HAL_RCC_OscConfig+0x270>)
 800b25e:	685b      	ldr	r3, [r3, #4]
 800b260:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	69db      	ldr	r3, [r3, #28]
 800b268:	021b      	lsls	r3, r3, #8
 800b26a:	4968      	ldr	r1, [pc, #416]	; (800b40c <HAL_RCC_OscConfig+0x270>)
 800b26c:	4313      	orrs	r3, r2
 800b26e:	604b      	str	r3, [r1, #4]
 800b270:	e025      	b.n	800b2be <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b272:	4b66      	ldr	r3, [pc, #408]	; (800b40c <HAL_RCC_OscConfig+0x270>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	4a65      	ldr	r2, [pc, #404]	; (800b40c <HAL_RCC_OscConfig+0x270>)
 800b278:	f043 0308 	orr.w	r3, r3, #8
 800b27c:	6013      	str	r3, [r2, #0]
 800b27e:	4b63      	ldr	r3, [pc, #396]	; (800b40c <HAL_RCC_OscConfig+0x270>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6a1b      	ldr	r3, [r3, #32]
 800b28a:	4960      	ldr	r1, [pc, #384]	; (800b40c <HAL_RCC_OscConfig+0x270>)
 800b28c:	4313      	orrs	r3, r2
 800b28e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b290:	4b5e      	ldr	r3, [pc, #376]	; (800b40c <HAL_RCC_OscConfig+0x270>)
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	69db      	ldr	r3, [r3, #28]
 800b29c:	021b      	lsls	r3, r3, #8
 800b29e:	495b      	ldr	r1, [pc, #364]	; (800b40c <HAL_RCC_OscConfig+0x270>)
 800b2a0:	4313      	orrs	r3, r2
 800b2a2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b2a4:	69bb      	ldr	r3, [r7, #24]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d109      	bne.n	800b2be <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6a1b      	ldr	r3, [r3, #32]
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f000 fd4c 	bl	800bd4c <RCC_SetFlashLatencyFromMSIRange>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d001      	beq.n	800b2be <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800b2ba:	2301      	movs	r3, #1
 800b2bc:	e37a      	b.n	800b9b4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b2be:	f000 fc81 	bl	800bbc4 <HAL_RCC_GetSysClockFreq>
 800b2c2:	4602      	mov	r2, r0
 800b2c4:	4b51      	ldr	r3, [pc, #324]	; (800b40c <HAL_RCC_OscConfig+0x270>)
 800b2c6:	689b      	ldr	r3, [r3, #8]
 800b2c8:	091b      	lsrs	r3, r3, #4
 800b2ca:	f003 030f 	and.w	r3, r3, #15
 800b2ce:	4950      	ldr	r1, [pc, #320]	; (800b410 <HAL_RCC_OscConfig+0x274>)
 800b2d0:	5ccb      	ldrb	r3, [r1, r3]
 800b2d2:	f003 031f 	and.w	r3, r3, #31
 800b2d6:	fa22 f303 	lsr.w	r3, r2, r3
 800b2da:	4a4e      	ldr	r2, [pc, #312]	; (800b414 <HAL_RCC_OscConfig+0x278>)
 800b2dc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800b2de:	4b4e      	ldr	r3, [pc, #312]	; (800b418 <HAL_RCC_OscConfig+0x27c>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f7fe fd3e 	bl	8009d64 <HAL_InitTick>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800b2ec:	7bfb      	ldrb	r3, [r7, #15]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d052      	beq.n	800b398 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800b2f2:	7bfb      	ldrb	r3, [r7, #15]
 800b2f4:	e35e      	b.n	800b9b4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	699b      	ldr	r3, [r3, #24]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d032      	beq.n	800b364 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800b2fe:	4b43      	ldr	r3, [pc, #268]	; (800b40c <HAL_RCC_OscConfig+0x270>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	4a42      	ldr	r2, [pc, #264]	; (800b40c <HAL_RCC_OscConfig+0x270>)
 800b304:	f043 0301 	orr.w	r3, r3, #1
 800b308:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b30a:	f7fe fd7b 	bl	8009e04 <HAL_GetTick>
 800b30e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b310:	e008      	b.n	800b324 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b312:	f7fe fd77 	bl	8009e04 <HAL_GetTick>
 800b316:	4602      	mov	r2, r0
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	1ad3      	subs	r3, r2, r3
 800b31c:	2b02      	cmp	r3, #2
 800b31e:	d901      	bls.n	800b324 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800b320:	2303      	movs	r3, #3
 800b322:	e347      	b.n	800b9b4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b324:	4b39      	ldr	r3, [pc, #228]	; (800b40c <HAL_RCC_OscConfig+0x270>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f003 0302 	and.w	r3, r3, #2
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d0f0      	beq.n	800b312 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b330:	4b36      	ldr	r3, [pc, #216]	; (800b40c <HAL_RCC_OscConfig+0x270>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	4a35      	ldr	r2, [pc, #212]	; (800b40c <HAL_RCC_OscConfig+0x270>)
 800b336:	f043 0308 	orr.w	r3, r3, #8
 800b33a:	6013      	str	r3, [r2, #0]
 800b33c:	4b33      	ldr	r3, [pc, #204]	; (800b40c <HAL_RCC_OscConfig+0x270>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6a1b      	ldr	r3, [r3, #32]
 800b348:	4930      	ldr	r1, [pc, #192]	; (800b40c <HAL_RCC_OscConfig+0x270>)
 800b34a:	4313      	orrs	r3, r2
 800b34c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b34e:	4b2f      	ldr	r3, [pc, #188]	; (800b40c <HAL_RCC_OscConfig+0x270>)
 800b350:	685b      	ldr	r3, [r3, #4]
 800b352:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	69db      	ldr	r3, [r3, #28]
 800b35a:	021b      	lsls	r3, r3, #8
 800b35c:	492b      	ldr	r1, [pc, #172]	; (800b40c <HAL_RCC_OscConfig+0x270>)
 800b35e:	4313      	orrs	r3, r2
 800b360:	604b      	str	r3, [r1, #4]
 800b362:	e01a      	b.n	800b39a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800b364:	4b29      	ldr	r3, [pc, #164]	; (800b40c <HAL_RCC_OscConfig+0x270>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	4a28      	ldr	r2, [pc, #160]	; (800b40c <HAL_RCC_OscConfig+0x270>)
 800b36a:	f023 0301 	bic.w	r3, r3, #1
 800b36e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b370:	f7fe fd48 	bl	8009e04 <HAL_GetTick>
 800b374:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800b376:	e008      	b.n	800b38a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b378:	f7fe fd44 	bl	8009e04 <HAL_GetTick>
 800b37c:	4602      	mov	r2, r0
 800b37e:	693b      	ldr	r3, [r7, #16]
 800b380:	1ad3      	subs	r3, r2, r3
 800b382:	2b02      	cmp	r3, #2
 800b384:	d901      	bls.n	800b38a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800b386:	2303      	movs	r3, #3
 800b388:	e314      	b.n	800b9b4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800b38a:	4b20      	ldr	r3, [pc, #128]	; (800b40c <HAL_RCC_OscConfig+0x270>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f003 0302 	and.w	r3, r3, #2
 800b392:	2b00      	cmp	r3, #0
 800b394:	d1f0      	bne.n	800b378 <HAL_RCC_OscConfig+0x1dc>
 800b396:	e000      	b.n	800b39a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b398:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f003 0301 	and.w	r3, r3, #1
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d073      	beq.n	800b48e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800b3a6:	69bb      	ldr	r3, [r7, #24]
 800b3a8:	2b08      	cmp	r3, #8
 800b3aa:	d005      	beq.n	800b3b8 <HAL_RCC_OscConfig+0x21c>
 800b3ac:	69bb      	ldr	r3, [r7, #24]
 800b3ae:	2b0c      	cmp	r3, #12
 800b3b0:	d10e      	bne.n	800b3d0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	2b03      	cmp	r3, #3
 800b3b6:	d10b      	bne.n	800b3d0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b3b8:	4b14      	ldr	r3, [pc, #80]	; (800b40c <HAL_RCC_OscConfig+0x270>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d063      	beq.n	800b48c <HAL_RCC_OscConfig+0x2f0>
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	685b      	ldr	r3, [r3, #4]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d15f      	bne.n	800b48c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	e2f1      	b.n	800b9b4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	685b      	ldr	r3, [r3, #4]
 800b3d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3d8:	d106      	bne.n	800b3e8 <HAL_RCC_OscConfig+0x24c>
 800b3da:	4b0c      	ldr	r3, [pc, #48]	; (800b40c <HAL_RCC_OscConfig+0x270>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	4a0b      	ldr	r2, [pc, #44]	; (800b40c <HAL_RCC_OscConfig+0x270>)
 800b3e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b3e4:	6013      	str	r3, [r2, #0]
 800b3e6:	e025      	b.n	800b434 <HAL_RCC_OscConfig+0x298>
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	685b      	ldr	r3, [r3, #4]
 800b3ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b3f0:	d114      	bne.n	800b41c <HAL_RCC_OscConfig+0x280>
 800b3f2:	4b06      	ldr	r3, [pc, #24]	; (800b40c <HAL_RCC_OscConfig+0x270>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	4a05      	ldr	r2, [pc, #20]	; (800b40c <HAL_RCC_OscConfig+0x270>)
 800b3f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b3fc:	6013      	str	r3, [r2, #0]
 800b3fe:	4b03      	ldr	r3, [pc, #12]	; (800b40c <HAL_RCC_OscConfig+0x270>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	4a02      	ldr	r2, [pc, #8]	; (800b40c <HAL_RCC_OscConfig+0x270>)
 800b404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b408:	6013      	str	r3, [r2, #0]
 800b40a:	e013      	b.n	800b434 <HAL_RCC_OscConfig+0x298>
 800b40c:	40021000 	.word	0x40021000
 800b410:	0800f094 	.word	0x0800f094
 800b414:	20000000 	.word	0x20000000
 800b418:	20000004 	.word	0x20000004
 800b41c:	4ba0      	ldr	r3, [pc, #640]	; (800b6a0 <HAL_RCC_OscConfig+0x504>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	4a9f      	ldr	r2, [pc, #636]	; (800b6a0 <HAL_RCC_OscConfig+0x504>)
 800b422:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b426:	6013      	str	r3, [r2, #0]
 800b428:	4b9d      	ldr	r3, [pc, #628]	; (800b6a0 <HAL_RCC_OscConfig+0x504>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	4a9c      	ldr	r2, [pc, #624]	; (800b6a0 <HAL_RCC_OscConfig+0x504>)
 800b42e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b432:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	685b      	ldr	r3, [r3, #4]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d013      	beq.n	800b464 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b43c:	f7fe fce2 	bl	8009e04 <HAL_GetTick>
 800b440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b442:	e008      	b.n	800b456 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b444:	f7fe fcde 	bl	8009e04 <HAL_GetTick>
 800b448:	4602      	mov	r2, r0
 800b44a:	693b      	ldr	r3, [r7, #16]
 800b44c:	1ad3      	subs	r3, r2, r3
 800b44e:	2b64      	cmp	r3, #100	; 0x64
 800b450:	d901      	bls.n	800b456 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800b452:	2303      	movs	r3, #3
 800b454:	e2ae      	b.n	800b9b4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b456:	4b92      	ldr	r3, [pc, #584]	; (800b6a0 <HAL_RCC_OscConfig+0x504>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d0f0      	beq.n	800b444 <HAL_RCC_OscConfig+0x2a8>
 800b462:	e014      	b.n	800b48e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b464:	f7fe fcce 	bl	8009e04 <HAL_GetTick>
 800b468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b46a:	e008      	b.n	800b47e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b46c:	f7fe fcca 	bl	8009e04 <HAL_GetTick>
 800b470:	4602      	mov	r2, r0
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	1ad3      	subs	r3, r2, r3
 800b476:	2b64      	cmp	r3, #100	; 0x64
 800b478:	d901      	bls.n	800b47e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800b47a:	2303      	movs	r3, #3
 800b47c:	e29a      	b.n	800b9b4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b47e:	4b88      	ldr	r3, [pc, #544]	; (800b6a0 <HAL_RCC_OscConfig+0x504>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b486:	2b00      	cmp	r3, #0
 800b488:	d1f0      	bne.n	800b46c <HAL_RCC_OscConfig+0x2d0>
 800b48a:	e000      	b.n	800b48e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b48c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f003 0302 	and.w	r3, r3, #2
 800b496:	2b00      	cmp	r3, #0
 800b498:	d060      	beq.n	800b55c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800b49a:	69bb      	ldr	r3, [r7, #24]
 800b49c:	2b04      	cmp	r3, #4
 800b49e:	d005      	beq.n	800b4ac <HAL_RCC_OscConfig+0x310>
 800b4a0:	69bb      	ldr	r3, [r7, #24]
 800b4a2:	2b0c      	cmp	r3, #12
 800b4a4:	d119      	bne.n	800b4da <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	2b02      	cmp	r3, #2
 800b4aa:	d116      	bne.n	800b4da <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b4ac:	4b7c      	ldr	r3, [pc, #496]	; (800b6a0 <HAL_RCC_OscConfig+0x504>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d005      	beq.n	800b4c4 <HAL_RCC_OscConfig+0x328>
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	68db      	ldr	r3, [r3, #12]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d101      	bne.n	800b4c4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	e277      	b.n	800b9b4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b4c4:	4b76      	ldr	r3, [pc, #472]	; (800b6a0 <HAL_RCC_OscConfig+0x504>)
 800b4c6:	685b      	ldr	r3, [r3, #4]
 800b4c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	691b      	ldr	r3, [r3, #16]
 800b4d0:	061b      	lsls	r3, r3, #24
 800b4d2:	4973      	ldr	r1, [pc, #460]	; (800b6a0 <HAL_RCC_OscConfig+0x504>)
 800b4d4:	4313      	orrs	r3, r2
 800b4d6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b4d8:	e040      	b.n	800b55c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	68db      	ldr	r3, [r3, #12]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d023      	beq.n	800b52a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b4e2:	4b6f      	ldr	r3, [pc, #444]	; (800b6a0 <HAL_RCC_OscConfig+0x504>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	4a6e      	ldr	r2, [pc, #440]	; (800b6a0 <HAL_RCC_OscConfig+0x504>)
 800b4e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b4ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4ee:	f7fe fc89 	bl	8009e04 <HAL_GetTick>
 800b4f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b4f4:	e008      	b.n	800b508 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b4f6:	f7fe fc85 	bl	8009e04 <HAL_GetTick>
 800b4fa:	4602      	mov	r2, r0
 800b4fc:	693b      	ldr	r3, [r7, #16]
 800b4fe:	1ad3      	subs	r3, r2, r3
 800b500:	2b02      	cmp	r3, #2
 800b502:	d901      	bls.n	800b508 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800b504:	2303      	movs	r3, #3
 800b506:	e255      	b.n	800b9b4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b508:	4b65      	ldr	r3, [pc, #404]	; (800b6a0 <HAL_RCC_OscConfig+0x504>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b510:	2b00      	cmp	r3, #0
 800b512:	d0f0      	beq.n	800b4f6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b514:	4b62      	ldr	r3, [pc, #392]	; (800b6a0 <HAL_RCC_OscConfig+0x504>)
 800b516:	685b      	ldr	r3, [r3, #4]
 800b518:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	691b      	ldr	r3, [r3, #16]
 800b520:	061b      	lsls	r3, r3, #24
 800b522:	495f      	ldr	r1, [pc, #380]	; (800b6a0 <HAL_RCC_OscConfig+0x504>)
 800b524:	4313      	orrs	r3, r2
 800b526:	604b      	str	r3, [r1, #4]
 800b528:	e018      	b.n	800b55c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b52a:	4b5d      	ldr	r3, [pc, #372]	; (800b6a0 <HAL_RCC_OscConfig+0x504>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	4a5c      	ldr	r2, [pc, #368]	; (800b6a0 <HAL_RCC_OscConfig+0x504>)
 800b530:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b534:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b536:	f7fe fc65 	bl	8009e04 <HAL_GetTick>
 800b53a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b53c:	e008      	b.n	800b550 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b53e:	f7fe fc61 	bl	8009e04 <HAL_GetTick>
 800b542:	4602      	mov	r2, r0
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	1ad3      	subs	r3, r2, r3
 800b548:	2b02      	cmp	r3, #2
 800b54a:	d901      	bls.n	800b550 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800b54c:	2303      	movs	r3, #3
 800b54e:	e231      	b.n	800b9b4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b550:	4b53      	ldr	r3, [pc, #332]	; (800b6a0 <HAL_RCC_OscConfig+0x504>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d1f0      	bne.n	800b53e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f003 0308 	and.w	r3, r3, #8
 800b564:	2b00      	cmp	r3, #0
 800b566:	d03c      	beq.n	800b5e2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	695b      	ldr	r3, [r3, #20]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d01c      	beq.n	800b5aa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b570:	4b4b      	ldr	r3, [pc, #300]	; (800b6a0 <HAL_RCC_OscConfig+0x504>)
 800b572:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b576:	4a4a      	ldr	r2, [pc, #296]	; (800b6a0 <HAL_RCC_OscConfig+0x504>)
 800b578:	f043 0301 	orr.w	r3, r3, #1
 800b57c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b580:	f7fe fc40 	bl	8009e04 <HAL_GetTick>
 800b584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b586:	e008      	b.n	800b59a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b588:	f7fe fc3c 	bl	8009e04 <HAL_GetTick>
 800b58c:	4602      	mov	r2, r0
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	1ad3      	subs	r3, r2, r3
 800b592:	2b02      	cmp	r3, #2
 800b594:	d901      	bls.n	800b59a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800b596:	2303      	movs	r3, #3
 800b598:	e20c      	b.n	800b9b4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b59a:	4b41      	ldr	r3, [pc, #260]	; (800b6a0 <HAL_RCC_OscConfig+0x504>)
 800b59c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b5a0:	f003 0302 	and.w	r3, r3, #2
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d0ef      	beq.n	800b588 <HAL_RCC_OscConfig+0x3ec>
 800b5a8:	e01b      	b.n	800b5e2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b5aa:	4b3d      	ldr	r3, [pc, #244]	; (800b6a0 <HAL_RCC_OscConfig+0x504>)
 800b5ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b5b0:	4a3b      	ldr	r2, [pc, #236]	; (800b6a0 <HAL_RCC_OscConfig+0x504>)
 800b5b2:	f023 0301 	bic.w	r3, r3, #1
 800b5b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b5ba:	f7fe fc23 	bl	8009e04 <HAL_GetTick>
 800b5be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b5c0:	e008      	b.n	800b5d4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b5c2:	f7fe fc1f 	bl	8009e04 <HAL_GetTick>
 800b5c6:	4602      	mov	r2, r0
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	1ad3      	subs	r3, r2, r3
 800b5cc:	2b02      	cmp	r3, #2
 800b5ce:	d901      	bls.n	800b5d4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800b5d0:	2303      	movs	r3, #3
 800b5d2:	e1ef      	b.n	800b9b4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b5d4:	4b32      	ldr	r3, [pc, #200]	; (800b6a0 <HAL_RCC_OscConfig+0x504>)
 800b5d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b5da:	f003 0302 	and.w	r3, r3, #2
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d1ef      	bne.n	800b5c2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	f003 0304 	and.w	r3, r3, #4
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	f000 80a6 	beq.w	800b73c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800b5f4:	4b2a      	ldr	r3, [pc, #168]	; (800b6a0 <HAL_RCC_OscConfig+0x504>)
 800b5f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d10d      	bne.n	800b61c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b600:	4b27      	ldr	r3, [pc, #156]	; (800b6a0 <HAL_RCC_OscConfig+0x504>)
 800b602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b604:	4a26      	ldr	r2, [pc, #152]	; (800b6a0 <HAL_RCC_OscConfig+0x504>)
 800b606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b60a:	6593      	str	r3, [r2, #88]	; 0x58
 800b60c:	4b24      	ldr	r3, [pc, #144]	; (800b6a0 <HAL_RCC_OscConfig+0x504>)
 800b60e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b614:	60bb      	str	r3, [r7, #8]
 800b616:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b618:	2301      	movs	r3, #1
 800b61a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b61c:	4b21      	ldr	r3, [pc, #132]	; (800b6a4 <HAL_RCC_OscConfig+0x508>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b624:	2b00      	cmp	r3, #0
 800b626:	d118      	bne.n	800b65a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b628:	4b1e      	ldr	r3, [pc, #120]	; (800b6a4 <HAL_RCC_OscConfig+0x508>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	4a1d      	ldr	r2, [pc, #116]	; (800b6a4 <HAL_RCC_OscConfig+0x508>)
 800b62e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b632:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b634:	f7fe fbe6 	bl	8009e04 <HAL_GetTick>
 800b638:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b63a:	e008      	b.n	800b64e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b63c:	f7fe fbe2 	bl	8009e04 <HAL_GetTick>
 800b640:	4602      	mov	r2, r0
 800b642:	693b      	ldr	r3, [r7, #16]
 800b644:	1ad3      	subs	r3, r2, r3
 800b646:	2b02      	cmp	r3, #2
 800b648:	d901      	bls.n	800b64e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800b64a:	2303      	movs	r3, #3
 800b64c:	e1b2      	b.n	800b9b4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b64e:	4b15      	ldr	r3, [pc, #84]	; (800b6a4 <HAL_RCC_OscConfig+0x508>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b656:	2b00      	cmp	r3, #0
 800b658:	d0f0      	beq.n	800b63c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	689b      	ldr	r3, [r3, #8]
 800b65e:	2b01      	cmp	r3, #1
 800b660:	d108      	bne.n	800b674 <HAL_RCC_OscConfig+0x4d8>
 800b662:	4b0f      	ldr	r3, [pc, #60]	; (800b6a0 <HAL_RCC_OscConfig+0x504>)
 800b664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b668:	4a0d      	ldr	r2, [pc, #52]	; (800b6a0 <HAL_RCC_OscConfig+0x504>)
 800b66a:	f043 0301 	orr.w	r3, r3, #1
 800b66e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b672:	e029      	b.n	800b6c8 <HAL_RCC_OscConfig+0x52c>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	689b      	ldr	r3, [r3, #8]
 800b678:	2b05      	cmp	r3, #5
 800b67a:	d115      	bne.n	800b6a8 <HAL_RCC_OscConfig+0x50c>
 800b67c:	4b08      	ldr	r3, [pc, #32]	; (800b6a0 <HAL_RCC_OscConfig+0x504>)
 800b67e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b682:	4a07      	ldr	r2, [pc, #28]	; (800b6a0 <HAL_RCC_OscConfig+0x504>)
 800b684:	f043 0304 	orr.w	r3, r3, #4
 800b688:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b68c:	4b04      	ldr	r3, [pc, #16]	; (800b6a0 <HAL_RCC_OscConfig+0x504>)
 800b68e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b692:	4a03      	ldr	r2, [pc, #12]	; (800b6a0 <HAL_RCC_OscConfig+0x504>)
 800b694:	f043 0301 	orr.w	r3, r3, #1
 800b698:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b69c:	e014      	b.n	800b6c8 <HAL_RCC_OscConfig+0x52c>
 800b69e:	bf00      	nop
 800b6a0:	40021000 	.word	0x40021000
 800b6a4:	40007000 	.word	0x40007000
 800b6a8:	4b9a      	ldr	r3, [pc, #616]	; (800b914 <HAL_RCC_OscConfig+0x778>)
 800b6aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6ae:	4a99      	ldr	r2, [pc, #612]	; (800b914 <HAL_RCC_OscConfig+0x778>)
 800b6b0:	f023 0301 	bic.w	r3, r3, #1
 800b6b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b6b8:	4b96      	ldr	r3, [pc, #600]	; (800b914 <HAL_RCC_OscConfig+0x778>)
 800b6ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6be:	4a95      	ldr	r2, [pc, #596]	; (800b914 <HAL_RCC_OscConfig+0x778>)
 800b6c0:	f023 0304 	bic.w	r3, r3, #4
 800b6c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	689b      	ldr	r3, [r3, #8]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d016      	beq.n	800b6fe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b6d0:	f7fe fb98 	bl	8009e04 <HAL_GetTick>
 800b6d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b6d6:	e00a      	b.n	800b6ee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b6d8:	f7fe fb94 	bl	8009e04 <HAL_GetTick>
 800b6dc:	4602      	mov	r2, r0
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	1ad3      	subs	r3, r2, r3
 800b6e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d901      	bls.n	800b6ee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800b6ea:	2303      	movs	r3, #3
 800b6ec:	e162      	b.n	800b9b4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b6ee:	4b89      	ldr	r3, [pc, #548]	; (800b914 <HAL_RCC_OscConfig+0x778>)
 800b6f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6f4:	f003 0302 	and.w	r3, r3, #2
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d0ed      	beq.n	800b6d8 <HAL_RCC_OscConfig+0x53c>
 800b6fc:	e015      	b.n	800b72a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b6fe:	f7fe fb81 	bl	8009e04 <HAL_GetTick>
 800b702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b704:	e00a      	b.n	800b71c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b706:	f7fe fb7d 	bl	8009e04 <HAL_GetTick>
 800b70a:	4602      	mov	r2, r0
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	1ad3      	subs	r3, r2, r3
 800b710:	f241 3288 	movw	r2, #5000	; 0x1388
 800b714:	4293      	cmp	r3, r2
 800b716:	d901      	bls.n	800b71c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800b718:	2303      	movs	r3, #3
 800b71a:	e14b      	b.n	800b9b4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b71c:	4b7d      	ldr	r3, [pc, #500]	; (800b914 <HAL_RCC_OscConfig+0x778>)
 800b71e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b722:	f003 0302 	and.w	r3, r3, #2
 800b726:	2b00      	cmp	r3, #0
 800b728:	d1ed      	bne.n	800b706 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b72a:	7ffb      	ldrb	r3, [r7, #31]
 800b72c:	2b01      	cmp	r3, #1
 800b72e:	d105      	bne.n	800b73c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b730:	4b78      	ldr	r3, [pc, #480]	; (800b914 <HAL_RCC_OscConfig+0x778>)
 800b732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b734:	4a77      	ldr	r2, [pc, #476]	; (800b914 <HAL_RCC_OscConfig+0x778>)
 800b736:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b73a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f003 0320 	and.w	r3, r3, #32
 800b744:	2b00      	cmp	r3, #0
 800b746:	d03c      	beq.n	800b7c2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d01c      	beq.n	800b78a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b750:	4b70      	ldr	r3, [pc, #448]	; (800b914 <HAL_RCC_OscConfig+0x778>)
 800b752:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b756:	4a6f      	ldr	r2, [pc, #444]	; (800b914 <HAL_RCC_OscConfig+0x778>)
 800b758:	f043 0301 	orr.w	r3, r3, #1
 800b75c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b760:	f7fe fb50 	bl	8009e04 <HAL_GetTick>
 800b764:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b766:	e008      	b.n	800b77a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b768:	f7fe fb4c 	bl	8009e04 <HAL_GetTick>
 800b76c:	4602      	mov	r2, r0
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	1ad3      	subs	r3, r2, r3
 800b772:	2b02      	cmp	r3, #2
 800b774:	d901      	bls.n	800b77a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800b776:	2303      	movs	r3, #3
 800b778:	e11c      	b.n	800b9b4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b77a:	4b66      	ldr	r3, [pc, #408]	; (800b914 <HAL_RCC_OscConfig+0x778>)
 800b77c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b780:	f003 0302 	and.w	r3, r3, #2
 800b784:	2b00      	cmp	r3, #0
 800b786:	d0ef      	beq.n	800b768 <HAL_RCC_OscConfig+0x5cc>
 800b788:	e01b      	b.n	800b7c2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b78a:	4b62      	ldr	r3, [pc, #392]	; (800b914 <HAL_RCC_OscConfig+0x778>)
 800b78c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b790:	4a60      	ldr	r2, [pc, #384]	; (800b914 <HAL_RCC_OscConfig+0x778>)
 800b792:	f023 0301 	bic.w	r3, r3, #1
 800b796:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b79a:	f7fe fb33 	bl	8009e04 <HAL_GetTick>
 800b79e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b7a0:	e008      	b.n	800b7b4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b7a2:	f7fe fb2f 	bl	8009e04 <HAL_GetTick>
 800b7a6:	4602      	mov	r2, r0
 800b7a8:	693b      	ldr	r3, [r7, #16]
 800b7aa:	1ad3      	subs	r3, r2, r3
 800b7ac:	2b02      	cmp	r3, #2
 800b7ae:	d901      	bls.n	800b7b4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800b7b0:	2303      	movs	r3, #3
 800b7b2:	e0ff      	b.n	800b9b4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b7b4:	4b57      	ldr	r3, [pc, #348]	; (800b914 <HAL_RCC_OscConfig+0x778>)
 800b7b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b7ba:	f003 0302 	and.w	r3, r3, #2
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d1ef      	bne.n	800b7a2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	f000 80f3 	beq.w	800b9b2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7d0:	2b02      	cmp	r3, #2
 800b7d2:	f040 80c9 	bne.w	800b968 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800b7d6:	4b4f      	ldr	r3, [pc, #316]	; (800b914 <HAL_RCC_OscConfig+0x778>)
 800b7d8:	68db      	ldr	r3, [r3, #12]
 800b7da:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b7dc:	697b      	ldr	r3, [r7, #20]
 800b7de:	f003 0203 	and.w	r2, r3, #3
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7e6:	429a      	cmp	r2, r3
 800b7e8:	d12c      	bne.n	800b844 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7f4:	3b01      	subs	r3, #1
 800b7f6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b7f8:	429a      	cmp	r2, r3
 800b7fa:	d123      	bne.n	800b844 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b806:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b808:	429a      	cmp	r2, r3
 800b80a:	d11b      	bne.n	800b844 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b816:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b818:	429a      	cmp	r2, r3
 800b81a:	d113      	bne.n	800b844 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b826:	085b      	lsrs	r3, r3, #1
 800b828:	3b01      	subs	r3, #1
 800b82a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b82c:	429a      	cmp	r2, r3
 800b82e:	d109      	bne.n	800b844 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b83a:	085b      	lsrs	r3, r3, #1
 800b83c:	3b01      	subs	r3, #1
 800b83e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b840:	429a      	cmp	r2, r3
 800b842:	d06b      	beq.n	800b91c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b844:	69bb      	ldr	r3, [r7, #24]
 800b846:	2b0c      	cmp	r3, #12
 800b848:	d062      	beq.n	800b910 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800b84a:	4b32      	ldr	r3, [pc, #200]	; (800b914 <HAL_RCC_OscConfig+0x778>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b852:	2b00      	cmp	r3, #0
 800b854:	d001      	beq.n	800b85a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800b856:	2301      	movs	r3, #1
 800b858:	e0ac      	b.n	800b9b4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800b85a:	4b2e      	ldr	r3, [pc, #184]	; (800b914 <HAL_RCC_OscConfig+0x778>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	4a2d      	ldr	r2, [pc, #180]	; (800b914 <HAL_RCC_OscConfig+0x778>)
 800b860:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b864:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b866:	f7fe facd 	bl	8009e04 <HAL_GetTick>
 800b86a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b86c:	e008      	b.n	800b880 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b86e:	f7fe fac9 	bl	8009e04 <HAL_GetTick>
 800b872:	4602      	mov	r2, r0
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	1ad3      	subs	r3, r2, r3
 800b878:	2b02      	cmp	r3, #2
 800b87a:	d901      	bls.n	800b880 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800b87c:	2303      	movs	r3, #3
 800b87e:	e099      	b.n	800b9b4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b880:	4b24      	ldr	r3, [pc, #144]	; (800b914 <HAL_RCC_OscConfig+0x778>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d1f0      	bne.n	800b86e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b88c:	4b21      	ldr	r3, [pc, #132]	; (800b914 <HAL_RCC_OscConfig+0x778>)
 800b88e:	68da      	ldr	r2, [r3, #12]
 800b890:	4b21      	ldr	r3, [pc, #132]	; (800b918 <HAL_RCC_OscConfig+0x77c>)
 800b892:	4013      	ands	r3, r2
 800b894:	687a      	ldr	r2, [r7, #4]
 800b896:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800b898:	687a      	ldr	r2, [r7, #4]
 800b89a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b89c:	3a01      	subs	r2, #1
 800b89e:	0112      	lsls	r2, r2, #4
 800b8a0:	4311      	orrs	r1, r2
 800b8a2:	687a      	ldr	r2, [r7, #4]
 800b8a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b8a6:	0212      	lsls	r2, r2, #8
 800b8a8:	4311      	orrs	r1, r2
 800b8aa:	687a      	ldr	r2, [r7, #4]
 800b8ac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b8ae:	0852      	lsrs	r2, r2, #1
 800b8b0:	3a01      	subs	r2, #1
 800b8b2:	0552      	lsls	r2, r2, #21
 800b8b4:	4311      	orrs	r1, r2
 800b8b6:	687a      	ldr	r2, [r7, #4]
 800b8b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b8ba:	0852      	lsrs	r2, r2, #1
 800b8bc:	3a01      	subs	r2, #1
 800b8be:	0652      	lsls	r2, r2, #25
 800b8c0:	4311      	orrs	r1, r2
 800b8c2:	687a      	ldr	r2, [r7, #4]
 800b8c4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b8c6:	06d2      	lsls	r2, r2, #27
 800b8c8:	430a      	orrs	r2, r1
 800b8ca:	4912      	ldr	r1, [pc, #72]	; (800b914 <HAL_RCC_OscConfig+0x778>)
 800b8cc:	4313      	orrs	r3, r2
 800b8ce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800b8d0:	4b10      	ldr	r3, [pc, #64]	; (800b914 <HAL_RCC_OscConfig+0x778>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	4a0f      	ldr	r2, [pc, #60]	; (800b914 <HAL_RCC_OscConfig+0x778>)
 800b8d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b8da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b8dc:	4b0d      	ldr	r3, [pc, #52]	; (800b914 <HAL_RCC_OscConfig+0x778>)
 800b8de:	68db      	ldr	r3, [r3, #12]
 800b8e0:	4a0c      	ldr	r2, [pc, #48]	; (800b914 <HAL_RCC_OscConfig+0x778>)
 800b8e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b8e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b8e8:	f7fe fa8c 	bl	8009e04 <HAL_GetTick>
 800b8ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b8ee:	e008      	b.n	800b902 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b8f0:	f7fe fa88 	bl	8009e04 <HAL_GetTick>
 800b8f4:	4602      	mov	r2, r0
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	1ad3      	subs	r3, r2, r3
 800b8fa:	2b02      	cmp	r3, #2
 800b8fc:	d901      	bls.n	800b902 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800b8fe:	2303      	movs	r3, #3
 800b900:	e058      	b.n	800b9b4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b902:	4b04      	ldr	r3, [pc, #16]	; (800b914 <HAL_RCC_OscConfig+0x778>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d0f0      	beq.n	800b8f0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b90e:	e050      	b.n	800b9b2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800b910:	2301      	movs	r3, #1
 800b912:	e04f      	b.n	800b9b4 <HAL_RCC_OscConfig+0x818>
 800b914:	40021000 	.word	0x40021000
 800b918:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b91c:	4b27      	ldr	r3, [pc, #156]	; (800b9bc <HAL_RCC_OscConfig+0x820>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b924:	2b00      	cmp	r3, #0
 800b926:	d144      	bne.n	800b9b2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800b928:	4b24      	ldr	r3, [pc, #144]	; (800b9bc <HAL_RCC_OscConfig+0x820>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	4a23      	ldr	r2, [pc, #140]	; (800b9bc <HAL_RCC_OscConfig+0x820>)
 800b92e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b932:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b934:	4b21      	ldr	r3, [pc, #132]	; (800b9bc <HAL_RCC_OscConfig+0x820>)
 800b936:	68db      	ldr	r3, [r3, #12]
 800b938:	4a20      	ldr	r2, [pc, #128]	; (800b9bc <HAL_RCC_OscConfig+0x820>)
 800b93a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b93e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b940:	f7fe fa60 	bl	8009e04 <HAL_GetTick>
 800b944:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b946:	e008      	b.n	800b95a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b948:	f7fe fa5c 	bl	8009e04 <HAL_GetTick>
 800b94c:	4602      	mov	r2, r0
 800b94e:	693b      	ldr	r3, [r7, #16]
 800b950:	1ad3      	subs	r3, r2, r3
 800b952:	2b02      	cmp	r3, #2
 800b954:	d901      	bls.n	800b95a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800b956:	2303      	movs	r3, #3
 800b958:	e02c      	b.n	800b9b4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b95a:	4b18      	ldr	r3, [pc, #96]	; (800b9bc <HAL_RCC_OscConfig+0x820>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b962:	2b00      	cmp	r3, #0
 800b964:	d0f0      	beq.n	800b948 <HAL_RCC_OscConfig+0x7ac>
 800b966:	e024      	b.n	800b9b2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b968:	69bb      	ldr	r3, [r7, #24]
 800b96a:	2b0c      	cmp	r3, #12
 800b96c:	d01f      	beq.n	800b9ae <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b96e:	4b13      	ldr	r3, [pc, #76]	; (800b9bc <HAL_RCC_OscConfig+0x820>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	4a12      	ldr	r2, [pc, #72]	; (800b9bc <HAL_RCC_OscConfig+0x820>)
 800b974:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b978:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b97a:	f7fe fa43 	bl	8009e04 <HAL_GetTick>
 800b97e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b980:	e008      	b.n	800b994 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b982:	f7fe fa3f 	bl	8009e04 <HAL_GetTick>
 800b986:	4602      	mov	r2, r0
 800b988:	693b      	ldr	r3, [r7, #16]
 800b98a:	1ad3      	subs	r3, r2, r3
 800b98c:	2b02      	cmp	r3, #2
 800b98e:	d901      	bls.n	800b994 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800b990:	2303      	movs	r3, #3
 800b992:	e00f      	b.n	800b9b4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b994:	4b09      	ldr	r3, [pc, #36]	; (800b9bc <HAL_RCC_OscConfig+0x820>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d1f0      	bne.n	800b982 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800b9a0:	4b06      	ldr	r3, [pc, #24]	; (800b9bc <HAL_RCC_OscConfig+0x820>)
 800b9a2:	68da      	ldr	r2, [r3, #12]
 800b9a4:	4905      	ldr	r1, [pc, #20]	; (800b9bc <HAL_RCC_OscConfig+0x820>)
 800b9a6:	4b06      	ldr	r3, [pc, #24]	; (800b9c0 <HAL_RCC_OscConfig+0x824>)
 800b9a8:	4013      	ands	r3, r2
 800b9aa:	60cb      	str	r3, [r1, #12]
 800b9ac:	e001      	b.n	800b9b2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	e000      	b.n	800b9b4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800b9b2:	2300      	movs	r3, #0
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3720      	adds	r7, #32
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}
 800b9bc:	40021000 	.word	0x40021000
 800b9c0:	feeefffc 	.word	0xfeeefffc

0800b9c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b084      	sub	sp, #16
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
 800b9cc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d101      	bne.n	800b9d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b9d4:	2301      	movs	r3, #1
 800b9d6:	e0e7      	b.n	800bba8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b9d8:	4b75      	ldr	r3, [pc, #468]	; (800bbb0 <HAL_RCC_ClockConfig+0x1ec>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f003 0307 	and.w	r3, r3, #7
 800b9e0:	683a      	ldr	r2, [r7, #0]
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	d910      	bls.n	800ba08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b9e6:	4b72      	ldr	r3, [pc, #456]	; (800bbb0 <HAL_RCC_ClockConfig+0x1ec>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f023 0207 	bic.w	r2, r3, #7
 800b9ee:	4970      	ldr	r1, [pc, #448]	; (800bbb0 <HAL_RCC_ClockConfig+0x1ec>)
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	4313      	orrs	r3, r2
 800b9f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b9f6:	4b6e      	ldr	r3, [pc, #440]	; (800bbb0 <HAL_RCC_ClockConfig+0x1ec>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f003 0307 	and.w	r3, r3, #7
 800b9fe:	683a      	ldr	r2, [r7, #0]
 800ba00:	429a      	cmp	r2, r3
 800ba02:	d001      	beq.n	800ba08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800ba04:	2301      	movs	r3, #1
 800ba06:	e0cf      	b.n	800bba8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	f003 0302 	and.w	r3, r3, #2
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d010      	beq.n	800ba36 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	689a      	ldr	r2, [r3, #8]
 800ba18:	4b66      	ldr	r3, [pc, #408]	; (800bbb4 <HAL_RCC_ClockConfig+0x1f0>)
 800ba1a:	689b      	ldr	r3, [r3, #8]
 800ba1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d908      	bls.n	800ba36 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ba24:	4b63      	ldr	r3, [pc, #396]	; (800bbb4 <HAL_RCC_ClockConfig+0x1f0>)
 800ba26:	689b      	ldr	r3, [r3, #8]
 800ba28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	689b      	ldr	r3, [r3, #8]
 800ba30:	4960      	ldr	r1, [pc, #384]	; (800bbb4 <HAL_RCC_ClockConfig+0x1f0>)
 800ba32:	4313      	orrs	r3, r2
 800ba34:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f003 0301 	and.w	r3, r3, #1
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d04c      	beq.n	800badc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	685b      	ldr	r3, [r3, #4]
 800ba46:	2b03      	cmp	r3, #3
 800ba48:	d107      	bne.n	800ba5a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ba4a:	4b5a      	ldr	r3, [pc, #360]	; (800bbb4 <HAL_RCC_ClockConfig+0x1f0>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d121      	bne.n	800ba9a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800ba56:	2301      	movs	r3, #1
 800ba58:	e0a6      	b.n	800bba8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	685b      	ldr	r3, [r3, #4]
 800ba5e:	2b02      	cmp	r3, #2
 800ba60:	d107      	bne.n	800ba72 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ba62:	4b54      	ldr	r3, [pc, #336]	; (800bbb4 <HAL_RCC_ClockConfig+0x1f0>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d115      	bne.n	800ba9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800ba6e:	2301      	movs	r3, #1
 800ba70:	e09a      	b.n	800bba8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	685b      	ldr	r3, [r3, #4]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d107      	bne.n	800ba8a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ba7a:	4b4e      	ldr	r3, [pc, #312]	; (800bbb4 <HAL_RCC_ClockConfig+0x1f0>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f003 0302 	and.w	r3, r3, #2
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d109      	bne.n	800ba9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800ba86:	2301      	movs	r3, #1
 800ba88:	e08e      	b.n	800bba8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ba8a:	4b4a      	ldr	r3, [pc, #296]	; (800bbb4 <HAL_RCC_ClockConfig+0x1f0>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d101      	bne.n	800ba9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800ba96:	2301      	movs	r3, #1
 800ba98:	e086      	b.n	800bba8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ba9a:	4b46      	ldr	r3, [pc, #280]	; (800bbb4 <HAL_RCC_ClockConfig+0x1f0>)
 800ba9c:	689b      	ldr	r3, [r3, #8]
 800ba9e:	f023 0203 	bic.w	r2, r3, #3
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	685b      	ldr	r3, [r3, #4]
 800baa6:	4943      	ldr	r1, [pc, #268]	; (800bbb4 <HAL_RCC_ClockConfig+0x1f0>)
 800baa8:	4313      	orrs	r3, r2
 800baaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800baac:	f7fe f9aa 	bl	8009e04 <HAL_GetTick>
 800bab0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bab2:	e00a      	b.n	800baca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bab4:	f7fe f9a6 	bl	8009e04 <HAL_GetTick>
 800bab8:	4602      	mov	r2, r0
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	1ad3      	subs	r3, r2, r3
 800babe:	f241 3288 	movw	r2, #5000	; 0x1388
 800bac2:	4293      	cmp	r3, r2
 800bac4:	d901      	bls.n	800baca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800bac6:	2303      	movs	r3, #3
 800bac8:	e06e      	b.n	800bba8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800baca:	4b3a      	ldr	r3, [pc, #232]	; (800bbb4 <HAL_RCC_ClockConfig+0x1f0>)
 800bacc:	689b      	ldr	r3, [r3, #8]
 800bace:	f003 020c 	and.w	r2, r3, #12
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	685b      	ldr	r3, [r3, #4]
 800bad6:	009b      	lsls	r3, r3, #2
 800bad8:	429a      	cmp	r2, r3
 800bada:	d1eb      	bne.n	800bab4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	f003 0302 	and.w	r3, r3, #2
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d010      	beq.n	800bb0a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	689a      	ldr	r2, [r3, #8]
 800baec:	4b31      	ldr	r3, [pc, #196]	; (800bbb4 <HAL_RCC_ClockConfig+0x1f0>)
 800baee:	689b      	ldr	r3, [r3, #8]
 800baf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800baf4:	429a      	cmp	r2, r3
 800baf6:	d208      	bcs.n	800bb0a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800baf8:	4b2e      	ldr	r3, [pc, #184]	; (800bbb4 <HAL_RCC_ClockConfig+0x1f0>)
 800bafa:	689b      	ldr	r3, [r3, #8]
 800bafc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	689b      	ldr	r3, [r3, #8]
 800bb04:	492b      	ldr	r1, [pc, #172]	; (800bbb4 <HAL_RCC_ClockConfig+0x1f0>)
 800bb06:	4313      	orrs	r3, r2
 800bb08:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800bb0a:	4b29      	ldr	r3, [pc, #164]	; (800bbb0 <HAL_RCC_ClockConfig+0x1ec>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f003 0307 	and.w	r3, r3, #7
 800bb12:	683a      	ldr	r2, [r7, #0]
 800bb14:	429a      	cmp	r2, r3
 800bb16:	d210      	bcs.n	800bb3a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bb18:	4b25      	ldr	r3, [pc, #148]	; (800bbb0 <HAL_RCC_ClockConfig+0x1ec>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f023 0207 	bic.w	r2, r3, #7
 800bb20:	4923      	ldr	r1, [pc, #140]	; (800bbb0 <HAL_RCC_ClockConfig+0x1ec>)
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	4313      	orrs	r3, r2
 800bb26:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bb28:	4b21      	ldr	r3, [pc, #132]	; (800bbb0 <HAL_RCC_ClockConfig+0x1ec>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	f003 0307 	and.w	r3, r3, #7
 800bb30:	683a      	ldr	r2, [r7, #0]
 800bb32:	429a      	cmp	r2, r3
 800bb34:	d001      	beq.n	800bb3a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800bb36:	2301      	movs	r3, #1
 800bb38:	e036      	b.n	800bba8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	f003 0304 	and.w	r3, r3, #4
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d008      	beq.n	800bb58 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bb46:	4b1b      	ldr	r3, [pc, #108]	; (800bbb4 <HAL_RCC_ClockConfig+0x1f0>)
 800bb48:	689b      	ldr	r3, [r3, #8]
 800bb4a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	68db      	ldr	r3, [r3, #12]
 800bb52:	4918      	ldr	r1, [pc, #96]	; (800bbb4 <HAL_RCC_ClockConfig+0x1f0>)
 800bb54:	4313      	orrs	r3, r2
 800bb56:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f003 0308 	and.w	r3, r3, #8
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d009      	beq.n	800bb78 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800bb64:	4b13      	ldr	r3, [pc, #76]	; (800bbb4 <HAL_RCC_ClockConfig+0x1f0>)
 800bb66:	689b      	ldr	r3, [r3, #8]
 800bb68:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	691b      	ldr	r3, [r3, #16]
 800bb70:	00db      	lsls	r3, r3, #3
 800bb72:	4910      	ldr	r1, [pc, #64]	; (800bbb4 <HAL_RCC_ClockConfig+0x1f0>)
 800bb74:	4313      	orrs	r3, r2
 800bb76:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800bb78:	f000 f824 	bl	800bbc4 <HAL_RCC_GetSysClockFreq>
 800bb7c:	4602      	mov	r2, r0
 800bb7e:	4b0d      	ldr	r3, [pc, #52]	; (800bbb4 <HAL_RCC_ClockConfig+0x1f0>)
 800bb80:	689b      	ldr	r3, [r3, #8]
 800bb82:	091b      	lsrs	r3, r3, #4
 800bb84:	f003 030f 	and.w	r3, r3, #15
 800bb88:	490b      	ldr	r1, [pc, #44]	; (800bbb8 <HAL_RCC_ClockConfig+0x1f4>)
 800bb8a:	5ccb      	ldrb	r3, [r1, r3]
 800bb8c:	f003 031f 	and.w	r3, r3, #31
 800bb90:	fa22 f303 	lsr.w	r3, r2, r3
 800bb94:	4a09      	ldr	r2, [pc, #36]	; (800bbbc <HAL_RCC_ClockConfig+0x1f8>)
 800bb96:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800bb98:	4b09      	ldr	r3, [pc, #36]	; (800bbc0 <HAL_RCC_ClockConfig+0x1fc>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f7fe f8e1 	bl	8009d64 <HAL_InitTick>
 800bba2:	4603      	mov	r3, r0
 800bba4:	72fb      	strb	r3, [r7, #11]

  return status;
 800bba6:	7afb      	ldrb	r3, [r7, #11]
}
 800bba8:	4618      	mov	r0, r3
 800bbaa:	3710      	adds	r7, #16
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}
 800bbb0:	40022000 	.word	0x40022000
 800bbb4:	40021000 	.word	0x40021000
 800bbb8:	0800f094 	.word	0x0800f094
 800bbbc:	20000000 	.word	0x20000000
 800bbc0:	20000004 	.word	0x20000004

0800bbc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bbc4:	b480      	push	{r7}
 800bbc6:	b089      	sub	sp, #36	; 0x24
 800bbc8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	61fb      	str	r3, [r7, #28]
 800bbce:	2300      	movs	r3, #0
 800bbd0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bbd2:	4b3e      	ldr	r3, [pc, #248]	; (800bccc <HAL_RCC_GetSysClockFreq+0x108>)
 800bbd4:	689b      	ldr	r3, [r3, #8]
 800bbd6:	f003 030c 	and.w	r3, r3, #12
 800bbda:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bbdc:	4b3b      	ldr	r3, [pc, #236]	; (800bccc <HAL_RCC_GetSysClockFreq+0x108>)
 800bbde:	68db      	ldr	r3, [r3, #12]
 800bbe0:	f003 0303 	and.w	r3, r3, #3
 800bbe4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d005      	beq.n	800bbf8 <HAL_RCC_GetSysClockFreq+0x34>
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	2b0c      	cmp	r3, #12
 800bbf0:	d121      	bne.n	800bc36 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	2b01      	cmp	r3, #1
 800bbf6:	d11e      	bne.n	800bc36 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800bbf8:	4b34      	ldr	r3, [pc, #208]	; (800bccc <HAL_RCC_GetSysClockFreq+0x108>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	f003 0308 	and.w	r3, r3, #8
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d107      	bne.n	800bc14 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800bc04:	4b31      	ldr	r3, [pc, #196]	; (800bccc <HAL_RCC_GetSysClockFreq+0x108>)
 800bc06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bc0a:	0a1b      	lsrs	r3, r3, #8
 800bc0c:	f003 030f 	and.w	r3, r3, #15
 800bc10:	61fb      	str	r3, [r7, #28]
 800bc12:	e005      	b.n	800bc20 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800bc14:	4b2d      	ldr	r3, [pc, #180]	; (800bccc <HAL_RCC_GetSysClockFreq+0x108>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	091b      	lsrs	r3, r3, #4
 800bc1a:	f003 030f 	and.w	r3, r3, #15
 800bc1e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800bc20:	4a2b      	ldr	r2, [pc, #172]	; (800bcd0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800bc22:	69fb      	ldr	r3, [r7, #28]
 800bc24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc28:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800bc2a:	693b      	ldr	r3, [r7, #16]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d10d      	bne.n	800bc4c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800bc30:	69fb      	ldr	r3, [r7, #28]
 800bc32:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800bc34:	e00a      	b.n	800bc4c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800bc36:	693b      	ldr	r3, [r7, #16]
 800bc38:	2b04      	cmp	r3, #4
 800bc3a:	d102      	bne.n	800bc42 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800bc3c:	4b25      	ldr	r3, [pc, #148]	; (800bcd4 <HAL_RCC_GetSysClockFreq+0x110>)
 800bc3e:	61bb      	str	r3, [r7, #24]
 800bc40:	e004      	b.n	800bc4c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	2b08      	cmp	r3, #8
 800bc46:	d101      	bne.n	800bc4c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800bc48:	4b23      	ldr	r3, [pc, #140]	; (800bcd8 <HAL_RCC_GetSysClockFreq+0x114>)
 800bc4a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800bc4c:	693b      	ldr	r3, [r7, #16]
 800bc4e:	2b0c      	cmp	r3, #12
 800bc50:	d134      	bne.n	800bcbc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800bc52:	4b1e      	ldr	r3, [pc, #120]	; (800bccc <HAL_RCC_GetSysClockFreq+0x108>)
 800bc54:	68db      	ldr	r3, [r3, #12]
 800bc56:	f003 0303 	and.w	r3, r3, #3
 800bc5a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	2b02      	cmp	r3, #2
 800bc60:	d003      	beq.n	800bc6a <HAL_RCC_GetSysClockFreq+0xa6>
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	2b03      	cmp	r3, #3
 800bc66:	d003      	beq.n	800bc70 <HAL_RCC_GetSysClockFreq+0xac>
 800bc68:	e005      	b.n	800bc76 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800bc6a:	4b1a      	ldr	r3, [pc, #104]	; (800bcd4 <HAL_RCC_GetSysClockFreq+0x110>)
 800bc6c:	617b      	str	r3, [r7, #20]
      break;
 800bc6e:	e005      	b.n	800bc7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800bc70:	4b19      	ldr	r3, [pc, #100]	; (800bcd8 <HAL_RCC_GetSysClockFreq+0x114>)
 800bc72:	617b      	str	r3, [r7, #20]
      break;
 800bc74:	e002      	b.n	800bc7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800bc76:	69fb      	ldr	r3, [r7, #28]
 800bc78:	617b      	str	r3, [r7, #20]
      break;
 800bc7a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bc7c:	4b13      	ldr	r3, [pc, #76]	; (800bccc <HAL_RCC_GetSysClockFreq+0x108>)
 800bc7e:	68db      	ldr	r3, [r3, #12]
 800bc80:	091b      	lsrs	r3, r3, #4
 800bc82:	f003 0307 	and.w	r3, r3, #7
 800bc86:	3301      	adds	r3, #1
 800bc88:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800bc8a:	4b10      	ldr	r3, [pc, #64]	; (800bccc <HAL_RCC_GetSysClockFreq+0x108>)
 800bc8c:	68db      	ldr	r3, [r3, #12]
 800bc8e:	0a1b      	lsrs	r3, r3, #8
 800bc90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc94:	697a      	ldr	r2, [r7, #20]
 800bc96:	fb03 f202 	mul.w	r2, r3, r2
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bca0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800bca2:	4b0a      	ldr	r3, [pc, #40]	; (800bccc <HAL_RCC_GetSysClockFreq+0x108>)
 800bca4:	68db      	ldr	r3, [r3, #12]
 800bca6:	0e5b      	lsrs	r3, r3, #25
 800bca8:	f003 0303 	and.w	r3, r3, #3
 800bcac:	3301      	adds	r3, #1
 800bcae:	005b      	lsls	r3, r3, #1
 800bcb0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800bcb2:	697a      	ldr	r2, [r7, #20]
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800bcbc:	69bb      	ldr	r3, [r7, #24]
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	3724      	adds	r7, #36	; 0x24
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc8:	4770      	bx	lr
 800bcca:	bf00      	nop
 800bccc:	40021000 	.word	0x40021000
 800bcd0:	0800f0ac 	.word	0x0800f0ac
 800bcd4:	00f42400 	.word	0x00f42400
 800bcd8:	007a1200 	.word	0x007a1200

0800bcdc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bcdc:	b480      	push	{r7}
 800bcde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bce0:	4b03      	ldr	r3, [pc, #12]	; (800bcf0 <HAL_RCC_GetHCLKFreq+0x14>)
 800bce2:	681b      	ldr	r3, [r3, #0]
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	46bd      	mov	sp, r7
 800bce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcec:	4770      	bx	lr
 800bcee:	bf00      	nop
 800bcf0:	20000000 	.word	0x20000000

0800bcf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800bcf8:	f7ff fff0 	bl	800bcdc <HAL_RCC_GetHCLKFreq>
 800bcfc:	4602      	mov	r2, r0
 800bcfe:	4b06      	ldr	r3, [pc, #24]	; (800bd18 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bd00:	689b      	ldr	r3, [r3, #8]
 800bd02:	0a1b      	lsrs	r3, r3, #8
 800bd04:	f003 0307 	and.w	r3, r3, #7
 800bd08:	4904      	ldr	r1, [pc, #16]	; (800bd1c <HAL_RCC_GetPCLK1Freq+0x28>)
 800bd0a:	5ccb      	ldrb	r3, [r1, r3]
 800bd0c:	f003 031f 	and.w	r3, r3, #31
 800bd10:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	bd80      	pop	{r7, pc}
 800bd18:	40021000 	.word	0x40021000
 800bd1c:	0800f0a4 	.word	0x0800f0a4

0800bd20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800bd24:	f7ff ffda 	bl	800bcdc <HAL_RCC_GetHCLKFreq>
 800bd28:	4602      	mov	r2, r0
 800bd2a:	4b06      	ldr	r3, [pc, #24]	; (800bd44 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bd2c:	689b      	ldr	r3, [r3, #8]
 800bd2e:	0adb      	lsrs	r3, r3, #11
 800bd30:	f003 0307 	and.w	r3, r3, #7
 800bd34:	4904      	ldr	r1, [pc, #16]	; (800bd48 <HAL_RCC_GetPCLK2Freq+0x28>)
 800bd36:	5ccb      	ldrb	r3, [r1, r3]
 800bd38:	f003 031f 	and.w	r3, r3, #31
 800bd3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	bd80      	pop	{r7, pc}
 800bd44:	40021000 	.word	0x40021000
 800bd48:	0800f0a4 	.word	0x0800f0a4

0800bd4c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b086      	sub	sp, #24
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800bd54:	2300      	movs	r3, #0
 800bd56:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800bd58:	4b2a      	ldr	r3, [pc, #168]	; (800be04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800bd5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d003      	beq.n	800bd6c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800bd64:	f7ff f9b6 	bl	800b0d4 <HAL_PWREx_GetVoltageRange>
 800bd68:	6178      	str	r0, [r7, #20]
 800bd6a:	e014      	b.n	800bd96 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800bd6c:	4b25      	ldr	r3, [pc, #148]	; (800be04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800bd6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd70:	4a24      	ldr	r2, [pc, #144]	; (800be04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800bd72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bd76:	6593      	str	r3, [r2, #88]	; 0x58
 800bd78:	4b22      	ldr	r3, [pc, #136]	; (800be04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800bd7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd80:	60fb      	str	r3, [r7, #12]
 800bd82:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800bd84:	f7ff f9a6 	bl	800b0d4 <HAL_PWREx_GetVoltageRange>
 800bd88:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800bd8a:	4b1e      	ldr	r3, [pc, #120]	; (800be04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800bd8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd8e:	4a1d      	ldr	r2, [pc, #116]	; (800be04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800bd90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bd94:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd9c:	d10b      	bne.n	800bdb6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2b80      	cmp	r3, #128	; 0x80
 800bda2:	d919      	bls.n	800bdd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2ba0      	cmp	r3, #160	; 0xa0
 800bda8:	d902      	bls.n	800bdb0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800bdaa:	2302      	movs	r3, #2
 800bdac:	613b      	str	r3, [r7, #16]
 800bdae:	e013      	b.n	800bdd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	613b      	str	r3, [r7, #16]
 800bdb4:	e010      	b.n	800bdd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2b80      	cmp	r3, #128	; 0x80
 800bdba:	d902      	bls.n	800bdc2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800bdbc:	2303      	movs	r3, #3
 800bdbe:	613b      	str	r3, [r7, #16]
 800bdc0:	e00a      	b.n	800bdd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2b80      	cmp	r3, #128	; 0x80
 800bdc6:	d102      	bne.n	800bdce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800bdc8:	2302      	movs	r3, #2
 800bdca:	613b      	str	r3, [r7, #16]
 800bdcc:	e004      	b.n	800bdd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2b70      	cmp	r3, #112	; 0x70
 800bdd2:	d101      	bne.n	800bdd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800bdd8:	4b0b      	ldr	r3, [pc, #44]	; (800be08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f023 0207 	bic.w	r2, r3, #7
 800bde0:	4909      	ldr	r1, [pc, #36]	; (800be08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	4313      	orrs	r3, r2
 800bde6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800bde8:	4b07      	ldr	r3, [pc, #28]	; (800be08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	f003 0307 	and.w	r3, r3, #7
 800bdf0:	693a      	ldr	r2, [r7, #16]
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	d001      	beq.n	800bdfa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	e000      	b.n	800bdfc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800bdfa:	2300      	movs	r3, #0
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3718      	adds	r7, #24
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}
 800be04:	40021000 	.word	0x40021000
 800be08:	40022000 	.word	0x40022000

0800be0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b086      	sub	sp, #24
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800be14:	2300      	movs	r3, #0
 800be16:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800be18:	2300      	movs	r3, #0
 800be1a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800be24:	2b00      	cmp	r3, #0
 800be26:	d031      	beq.n	800be8c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be2c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800be30:	d01a      	beq.n	800be68 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800be32:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800be36:	d814      	bhi.n	800be62 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d009      	beq.n	800be50 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800be3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800be40:	d10f      	bne.n	800be62 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800be42:	4b5d      	ldr	r3, [pc, #372]	; (800bfb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800be44:	68db      	ldr	r3, [r3, #12]
 800be46:	4a5c      	ldr	r2, [pc, #368]	; (800bfb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800be48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800be4c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800be4e:	e00c      	b.n	800be6a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	3304      	adds	r3, #4
 800be54:	2100      	movs	r1, #0
 800be56:	4618      	mov	r0, r3
 800be58:	f000 fa22 	bl	800c2a0 <RCCEx_PLLSAI1_Config>
 800be5c:	4603      	mov	r3, r0
 800be5e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800be60:	e003      	b.n	800be6a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800be62:	2301      	movs	r3, #1
 800be64:	74fb      	strb	r3, [r7, #19]
      break;
 800be66:	e000      	b.n	800be6a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800be68:	bf00      	nop
    }

    if(ret == HAL_OK)
 800be6a:	7cfb      	ldrb	r3, [r7, #19]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d10b      	bne.n	800be88 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800be70:	4b51      	ldr	r3, [pc, #324]	; (800bfb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800be72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be76:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be7e:	494e      	ldr	r1, [pc, #312]	; (800bfb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800be80:	4313      	orrs	r3, r2
 800be82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800be86:	e001      	b.n	800be8c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be88:	7cfb      	ldrb	r3, [r7, #19]
 800be8a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be94:	2b00      	cmp	r3, #0
 800be96:	f000 809e 	beq.w	800bfd6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800be9a:	2300      	movs	r3, #0
 800be9c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800be9e:	4b46      	ldr	r3, [pc, #280]	; (800bfb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800bea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d101      	bne.n	800beae <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800beaa:	2301      	movs	r3, #1
 800beac:	e000      	b.n	800beb0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800beae:	2300      	movs	r3, #0
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d00d      	beq.n	800bed0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800beb4:	4b40      	ldr	r3, [pc, #256]	; (800bfb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800beb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800beb8:	4a3f      	ldr	r2, [pc, #252]	; (800bfb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800beba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bebe:	6593      	str	r3, [r2, #88]	; 0x58
 800bec0:	4b3d      	ldr	r3, [pc, #244]	; (800bfb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800bec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bec8:	60bb      	str	r3, [r7, #8]
 800beca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800becc:	2301      	movs	r3, #1
 800bece:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bed0:	4b3a      	ldr	r3, [pc, #232]	; (800bfbc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	4a39      	ldr	r2, [pc, #228]	; (800bfbc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800bed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800beda:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bedc:	f7fd ff92 	bl	8009e04 <HAL_GetTick>
 800bee0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800bee2:	e009      	b.n	800bef8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bee4:	f7fd ff8e 	bl	8009e04 <HAL_GetTick>
 800bee8:	4602      	mov	r2, r0
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	1ad3      	subs	r3, r2, r3
 800beee:	2b02      	cmp	r3, #2
 800bef0:	d902      	bls.n	800bef8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800bef2:	2303      	movs	r3, #3
 800bef4:	74fb      	strb	r3, [r7, #19]
        break;
 800bef6:	e005      	b.n	800bf04 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800bef8:	4b30      	ldr	r3, [pc, #192]	; (800bfbc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d0ef      	beq.n	800bee4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800bf04:	7cfb      	ldrb	r3, [r7, #19]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d15a      	bne.n	800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800bf0a:	4b2b      	ldr	r3, [pc, #172]	; (800bfb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800bf0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bf14:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800bf16:	697b      	ldr	r3, [r7, #20]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d01e      	beq.n	800bf5a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf20:	697a      	ldr	r2, [r7, #20]
 800bf22:	429a      	cmp	r2, r3
 800bf24:	d019      	beq.n	800bf5a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800bf26:	4b24      	ldr	r3, [pc, #144]	; (800bfb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800bf28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf30:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bf32:	4b21      	ldr	r3, [pc, #132]	; (800bfb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800bf34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf38:	4a1f      	ldr	r2, [pc, #124]	; (800bfb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800bf3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bf3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bf42:	4b1d      	ldr	r3, [pc, #116]	; (800bfb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800bf44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf48:	4a1b      	ldr	r2, [pc, #108]	; (800bfb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800bf4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bf4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800bf52:	4a19      	ldr	r2, [pc, #100]	; (800bfb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800bf54:	697b      	ldr	r3, [r7, #20]
 800bf56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800bf5a:	697b      	ldr	r3, [r7, #20]
 800bf5c:	f003 0301 	and.w	r3, r3, #1
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d016      	beq.n	800bf92 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf64:	f7fd ff4e 	bl	8009e04 <HAL_GetTick>
 800bf68:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bf6a:	e00b      	b.n	800bf84 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bf6c:	f7fd ff4a 	bl	8009e04 <HAL_GetTick>
 800bf70:	4602      	mov	r2, r0
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	1ad3      	subs	r3, r2, r3
 800bf76:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf7a:	4293      	cmp	r3, r2
 800bf7c:	d902      	bls.n	800bf84 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800bf7e:	2303      	movs	r3, #3
 800bf80:	74fb      	strb	r3, [r7, #19]
            break;
 800bf82:	e006      	b.n	800bf92 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bf84:	4b0c      	ldr	r3, [pc, #48]	; (800bfb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800bf86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf8a:	f003 0302 	and.w	r3, r3, #2
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d0ec      	beq.n	800bf6c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800bf92:	7cfb      	ldrb	r3, [r7, #19]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d10b      	bne.n	800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bf98:	4b07      	ldr	r3, [pc, #28]	; (800bfb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800bf9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bfa6:	4904      	ldr	r1, [pc, #16]	; (800bfb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800bfa8:	4313      	orrs	r3, r2
 800bfaa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800bfae:	e009      	b.n	800bfc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bfb0:	7cfb      	ldrb	r3, [r7, #19]
 800bfb2:	74bb      	strb	r3, [r7, #18]
 800bfb4:	e006      	b.n	800bfc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800bfb6:	bf00      	nop
 800bfb8:	40021000 	.word	0x40021000
 800bfbc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfc0:	7cfb      	ldrb	r3, [r7, #19]
 800bfc2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bfc4:	7c7b      	ldrb	r3, [r7, #17]
 800bfc6:	2b01      	cmp	r3, #1
 800bfc8:	d105      	bne.n	800bfd6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bfca:	4b8d      	ldr	r3, [pc, #564]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800bfcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfce:	4a8c      	ldr	r2, [pc, #560]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800bfd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bfd4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	f003 0301 	and.w	r3, r3, #1
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d00a      	beq.n	800bff8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bfe2:	4b87      	ldr	r3, [pc, #540]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800bfe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfe8:	f023 0203 	bic.w	r2, r3, #3
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6a1b      	ldr	r3, [r3, #32]
 800bff0:	4983      	ldr	r1, [pc, #524]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800bff2:	4313      	orrs	r3, r2
 800bff4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	f003 0302 	and.w	r3, r3, #2
 800c000:	2b00      	cmp	r3, #0
 800c002:	d00a      	beq.n	800c01a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c004:	4b7e      	ldr	r3, [pc, #504]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c00a:	f023 020c 	bic.w	r2, r3, #12
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c012:	497b      	ldr	r1, [pc, #492]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c014:	4313      	orrs	r3, r2
 800c016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f003 0304 	and.w	r3, r3, #4
 800c022:	2b00      	cmp	r3, #0
 800c024:	d00a      	beq.n	800c03c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c026:	4b76      	ldr	r3, [pc, #472]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c02c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c034:	4972      	ldr	r1, [pc, #456]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c036:	4313      	orrs	r3, r2
 800c038:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	f003 0320 	and.w	r3, r3, #32
 800c044:	2b00      	cmp	r3, #0
 800c046:	d00a      	beq.n	800c05e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c048:	4b6d      	ldr	r3, [pc, #436]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c04a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c04e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c056:	496a      	ldr	r1, [pc, #424]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c058:	4313      	orrs	r3, r2
 800c05a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c066:	2b00      	cmp	r3, #0
 800c068:	d00a      	beq.n	800c080 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c06a:	4b65      	ldr	r3, [pc, #404]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c06c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c070:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c078:	4961      	ldr	r1, [pc, #388]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c07a:	4313      	orrs	r3, r2
 800c07c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d00a      	beq.n	800c0a2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c08c:	4b5c      	ldr	r3, [pc, #368]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c08e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c092:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c09a:	4959      	ldr	r1, [pc, #356]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c09c:	4313      	orrs	r3, r2
 800c09e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d00a      	beq.n	800c0c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c0ae:	4b54      	ldr	r3, [pc, #336]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c0b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0b4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0bc:	4950      	ldr	r1, [pc, #320]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c0be:	4313      	orrs	r3, r2
 800c0c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d00a      	beq.n	800c0e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c0d0:	4b4b      	ldr	r3, [pc, #300]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c0d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0d6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0de:	4948      	ldr	r1, [pc, #288]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c0e0:	4313      	orrs	r3, r2
 800c0e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d00a      	beq.n	800c108 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c0f2:	4b43      	ldr	r3, [pc, #268]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c0f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c100:	493f      	ldr	r1, [pc, #252]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c102:	4313      	orrs	r3, r2
 800c104:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c110:	2b00      	cmp	r3, #0
 800c112:	d028      	beq.n	800c166 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c114:	4b3a      	ldr	r3, [pc, #232]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c11a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c122:	4937      	ldr	r1, [pc, #220]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c124:	4313      	orrs	r3, r2
 800c126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c12e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c132:	d106      	bne.n	800c142 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c134:	4b32      	ldr	r3, [pc, #200]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c136:	68db      	ldr	r3, [r3, #12]
 800c138:	4a31      	ldr	r2, [pc, #196]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c13a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c13e:	60d3      	str	r3, [r2, #12]
 800c140:	e011      	b.n	800c166 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c146:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c14a:	d10c      	bne.n	800c166 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	3304      	adds	r3, #4
 800c150:	2101      	movs	r1, #1
 800c152:	4618      	mov	r0, r3
 800c154:	f000 f8a4 	bl	800c2a0 <RCCEx_PLLSAI1_Config>
 800c158:	4603      	mov	r3, r0
 800c15a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800c15c:	7cfb      	ldrb	r3, [r7, #19]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d001      	beq.n	800c166 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 800c162:	7cfb      	ldrb	r3, [r7, #19]
 800c164:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d028      	beq.n	800c1c4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800c172:	4b23      	ldr	r3, [pc, #140]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c178:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c180:	491f      	ldr	r1, [pc, #124]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c182:	4313      	orrs	r3, r2
 800c184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c18c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c190:	d106      	bne.n	800c1a0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c192:	4b1b      	ldr	r3, [pc, #108]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c194:	68db      	ldr	r3, [r3, #12]
 800c196:	4a1a      	ldr	r2, [pc, #104]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c198:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c19c:	60d3      	str	r3, [r2, #12]
 800c19e:	e011      	b.n	800c1c4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c1a8:	d10c      	bne.n	800c1c4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	3304      	adds	r3, #4
 800c1ae:	2101      	movs	r1, #1
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f000 f875 	bl	800c2a0 <RCCEx_PLLSAI1_Config>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c1ba:	7cfb      	ldrb	r3, [r7, #19]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d001      	beq.n	800c1c4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800c1c0:	7cfb      	ldrb	r3, [r7, #19]
 800c1c2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d02b      	beq.n	800c228 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c1d0:	4b0b      	ldr	r3, [pc, #44]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c1d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1de:	4908      	ldr	r1, [pc, #32]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c1e0:	4313      	orrs	r3, r2
 800c1e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c1ee:	d109      	bne.n	800c204 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c1f0:	4b03      	ldr	r3, [pc, #12]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c1f2:	68db      	ldr	r3, [r3, #12]
 800c1f4:	4a02      	ldr	r2, [pc, #8]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c1f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c1fa:	60d3      	str	r3, [r2, #12]
 800c1fc:	e014      	b.n	800c228 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800c1fe:	bf00      	nop
 800c200:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c208:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c20c:	d10c      	bne.n	800c228 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	3304      	adds	r3, #4
 800c212:	2101      	movs	r1, #1
 800c214:	4618      	mov	r0, r3
 800c216:	f000 f843 	bl	800c2a0 <RCCEx_PLLSAI1_Config>
 800c21a:	4603      	mov	r3, r0
 800c21c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c21e:	7cfb      	ldrb	r3, [r7, #19]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d001      	beq.n	800c228 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 800c224:	7cfb      	ldrb	r3, [r7, #19]
 800c226:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c230:	2b00      	cmp	r3, #0
 800c232:	d01c      	beq.n	800c26e <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c234:	4b19      	ldr	r3, [pc, #100]	; (800c29c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c23a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c242:	4916      	ldr	r1, [pc, #88]	; (800c29c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c244:	4313      	orrs	r3, r2
 800c246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c24e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c252:	d10c      	bne.n	800c26e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	3304      	adds	r3, #4
 800c258:	2102      	movs	r1, #2
 800c25a:	4618      	mov	r0, r3
 800c25c:	f000 f820 	bl	800c2a0 <RCCEx_PLLSAI1_Config>
 800c260:	4603      	mov	r3, r0
 800c262:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c264:	7cfb      	ldrb	r3, [r7, #19]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d001      	beq.n	800c26e <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 800c26a:	7cfb      	ldrb	r3, [r7, #19]
 800c26c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c276:	2b00      	cmp	r3, #0
 800c278:	d00a      	beq.n	800c290 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c27a:	4b08      	ldr	r3, [pc, #32]	; (800c29c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c27c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c280:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c288:	4904      	ldr	r1, [pc, #16]	; (800c29c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c28a:	4313      	orrs	r3, r2
 800c28c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800c290:	7cbb      	ldrb	r3, [r7, #18]
}
 800c292:	4618      	mov	r0, r3
 800c294:	3718      	adds	r7, #24
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}
 800c29a:	bf00      	nop
 800c29c:	40021000 	.word	0x40021000

0800c2a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b084      	sub	sp, #16
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
 800c2a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800c2ae:	4b74      	ldr	r3, [pc, #464]	; (800c480 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c2b0:	68db      	ldr	r3, [r3, #12]
 800c2b2:	f003 0303 	and.w	r3, r3, #3
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d018      	beq.n	800c2ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800c2ba:	4b71      	ldr	r3, [pc, #452]	; (800c480 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c2bc:	68db      	ldr	r3, [r3, #12]
 800c2be:	f003 0203 	and.w	r2, r3, #3
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	d10d      	bne.n	800c2e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
       ||
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d009      	beq.n	800c2e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800c2d2:	4b6b      	ldr	r3, [pc, #428]	; (800c480 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c2d4:	68db      	ldr	r3, [r3, #12]
 800c2d6:	091b      	lsrs	r3, r3, #4
 800c2d8:	f003 0307 	and.w	r3, r3, #7
 800c2dc:	1c5a      	adds	r2, r3, #1
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	685b      	ldr	r3, [r3, #4]
       ||
 800c2e2:	429a      	cmp	r2, r3
 800c2e4:	d047      	beq.n	800c376 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800c2e6:	2301      	movs	r3, #1
 800c2e8:	73fb      	strb	r3, [r7, #15]
 800c2ea:	e044      	b.n	800c376 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	2b03      	cmp	r3, #3
 800c2f2:	d018      	beq.n	800c326 <RCCEx_PLLSAI1_Config+0x86>
 800c2f4:	2b03      	cmp	r3, #3
 800c2f6:	d825      	bhi.n	800c344 <RCCEx_PLLSAI1_Config+0xa4>
 800c2f8:	2b01      	cmp	r3, #1
 800c2fa:	d002      	beq.n	800c302 <RCCEx_PLLSAI1_Config+0x62>
 800c2fc:	2b02      	cmp	r3, #2
 800c2fe:	d009      	beq.n	800c314 <RCCEx_PLLSAI1_Config+0x74>
 800c300:	e020      	b.n	800c344 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800c302:	4b5f      	ldr	r3, [pc, #380]	; (800c480 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	f003 0302 	and.w	r3, r3, #2
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d11d      	bne.n	800c34a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800c30e:	2301      	movs	r3, #1
 800c310:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c312:	e01a      	b.n	800c34a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800c314:	4b5a      	ldr	r3, [pc, #360]	; (800c480 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d116      	bne.n	800c34e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800c320:	2301      	movs	r3, #1
 800c322:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c324:	e013      	b.n	800c34e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800c326:	4b56      	ldr	r3, [pc, #344]	; (800c480 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d10f      	bne.n	800c352 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800c332:	4b53      	ldr	r3, [pc, #332]	; (800c480 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d109      	bne.n	800c352 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800c33e:	2301      	movs	r3, #1
 800c340:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c342:	e006      	b.n	800c352 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800c344:	2301      	movs	r3, #1
 800c346:	73fb      	strb	r3, [r7, #15]
      break;
 800c348:	e004      	b.n	800c354 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800c34a:	bf00      	nop
 800c34c:	e002      	b.n	800c354 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800c34e:	bf00      	nop
 800c350:	e000      	b.n	800c354 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800c352:	bf00      	nop
    }

    if(status == HAL_OK)
 800c354:	7bfb      	ldrb	r3, [r7, #15]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d10d      	bne.n	800c376 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800c35a:	4b49      	ldr	r3, [pc, #292]	; (800c480 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c35c:	68db      	ldr	r3, [r3, #12]
 800c35e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	6819      	ldr	r1, [r3, #0]
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	685b      	ldr	r3, [r3, #4]
 800c36a:	3b01      	subs	r3, #1
 800c36c:	011b      	lsls	r3, r3, #4
 800c36e:	430b      	orrs	r3, r1
 800c370:	4943      	ldr	r1, [pc, #268]	; (800c480 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c372:	4313      	orrs	r3, r2
 800c374:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800c376:	7bfb      	ldrb	r3, [r7, #15]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d17c      	bne.n	800c476 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800c37c:	4b40      	ldr	r3, [pc, #256]	; (800c480 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	4a3f      	ldr	r2, [pc, #252]	; (800c480 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c382:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c386:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c388:	f7fd fd3c 	bl	8009e04 <HAL_GetTick>
 800c38c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c38e:	e009      	b.n	800c3a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c390:	f7fd fd38 	bl	8009e04 <HAL_GetTick>
 800c394:	4602      	mov	r2, r0
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	1ad3      	subs	r3, r2, r3
 800c39a:	2b02      	cmp	r3, #2
 800c39c:	d902      	bls.n	800c3a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800c39e:	2303      	movs	r3, #3
 800c3a0:	73fb      	strb	r3, [r7, #15]
        break;
 800c3a2:	e005      	b.n	800c3b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c3a4:	4b36      	ldr	r3, [pc, #216]	; (800c480 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d1ef      	bne.n	800c390 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800c3b0:	7bfb      	ldrb	r3, [r7, #15]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d15f      	bne.n	800c476 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d110      	bne.n	800c3de <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c3bc:	4b30      	ldr	r3, [pc, #192]	; (800c480 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c3be:	691b      	ldr	r3, [r3, #16]
 800c3c0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800c3c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800c3c8:	687a      	ldr	r2, [r7, #4]
 800c3ca:	6892      	ldr	r2, [r2, #8]
 800c3cc:	0211      	lsls	r1, r2, #8
 800c3ce:	687a      	ldr	r2, [r7, #4]
 800c3d0:	68d2      	ldr	r2, [r2, #12]
 800c3d2:	06d2      	lsls	r2, r2, #27
 800c3d4:	430a      	orrs	r2, r1
 800c3d6:	492a      	ldr	r1, [pc, #168]	; (800c480 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c3d8:	4313      	orrs	r3, r2
 800c3da:	610b      	str	r3, [r1, #16]
 800c3dc:	e027      	b.n	800c42e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	2b01      	cmp	r3, #1
 800c3e2:	d112      	bne.n	800c40a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c3e4:	4b26      	ldr	r3, [pc, #152]	; (800c480 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c3e6:	691b      	ldr	r3, [r3, #16]
 800c3e8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800c3ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800c3f0:	687a      	ldr	r2, [r7, #4]
 800c3f2:	6892      	ldr	r2, [r2, #8]
 800c3f4:	0211      	lsls	r1, r2, #8
 800c3f6:	687a      	ldr	r2, [r7, #4]
 800c3f8:	6912      	ldr	r2, [r2, #16]
 800c3fa:	0852      	lsrs	r2, r2, #1
 800c3fc:	3a01      	subs	r2, #1
 800c3fe:	0552      	lsls	r2, r2, #21
 800c400:	430a      	orrs	r2, r1
 800c402:	491f      	ldr	r1, [pc, #124]	; (800c480 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c404:	4313      	orrs	r3, r2
 800c406:	610b      	str	r3, [r1, #16]
 800c408:	e011      	b.n	800c42e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c40a:	4b1d      	ldr	r3, [pc, #116]	; (800c480 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c40c:	691b      	ldr	r3, [r3, #16]
 800c40e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800c412:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800c416:	687a      	ldr	r2, [r7, #4]
 800c418:	6892      	ldr	r2, [r2, #8]
 800c41a:	0211      	lsls	r1, r2, #8
 800c41c:	687a      	ldr	r2, [r7, #4]
 800c41e:	6952      	ldr	r2, [r2, #20]
 800c420:	0852      	lsrs	r2, r2, #1
 800c422:	3a01      	subs	r2, #1
 800c424:	0652      	lsls	r2, r2, #25
 800c426:	430a      	orrs	r2, r1
 800c428:	4915      	ldr	r1, [pc, #84]	; (800c480 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c42a:	4313      	orrs	r3, r2
 800c42c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800c42e:	4b14      	ldr	r3, [pc, #80]	; (800c480 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	4a13      	ldr	r2, [pc, #76]	; (800c480 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c434:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c438:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c43a:	f7fd fce3 	bl	8009e04 <HAL_GetTick>
 800c43e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c440:	e009      	b.n	800c456 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c442:	f7fd fcdf 	bl	8009e04 <HAL_GetTick>
 800c446:	4602      	mov	r2, r0
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	1ad3      	subs	r3, r2, r3
 800c44c:	2b02      	cmp	r3, #2
 800c44e:	d902      	bls.n	800c456 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800c450:	2303      	movs	r3, #3
 800c452:	73fb      	strb	r3, [r7, #15]
          break;
 800c454:	e005      	b.n	800c462 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c456:	4b0a      	ldr	r3, [pc, #40]	; (800c480 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d0ef      	beq.n	800c442 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800c462:	7bfb      	ldrb	r3, [r7, #15]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d106      	bne.n	800c476 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800c468:	4b05      	ldr	r3, [pc, #20]	; (800c480 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c46a:	691a      	ldr	r2, [r3, #16]
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	699b      	ldr	r3, [r3, #24]
 800c470:	4903      	ldr	r1, [pc, #12]	; (800c480 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c472:	4313      	orrs	r3, r2
 800c474:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800c476:	7bfb      	ldrb	r3, [r7, #15]
}
 800c478:	4618      	mov	r0, r3
 800c47a:	3710      	adds	r7, #16
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}
 800c480:	40021000 	.word	0x40021000

0800c484 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b084      	sub	sp, #16
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d101      	bne.n	800c496 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c492:	2301      	movs	r3, #1
 800c494:	e095      	b.n	800c5c2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d108      	bne.n	800c4b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	685b      	ldr	r3, [r3, #4]
 800c4a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c4a6:	d009      	beq.n	800c4bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	61da      	str	r2, [r3, #28]
 800c4ae:	e005      	b.n	800c4bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c4c8:	b2db      	uxtb	r3, r3
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d106      	bne.n	800c4dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f7f8 fa1a 	bl	8004910 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2202      	movs	r2, #2
 800c4e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	681a      	ldr	r2, [r3, #0]
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c4f2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	68db      	ldr	r3, [r3, #12]
 800c4f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c4fc:	d902      	bls.n	800c504 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c4fe:	2300      	movs	r3, #0
 800c500:	60fb      	str	r3, [r7, #12]
 800c502:	e002      	b.n	800c50a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c504:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c508:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	68db      	ldr	r3, [r3, #12]
 800c50e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800c512:	d007      	beq.n	800c524 <HAL_SPI_Init+0xa0>
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	68db      	ldr	r3, [r3, #12]
 800c518:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c51c:	d002      	beq.n	800c524 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2200      	movs	r2, #0
 800c522:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	685b      	ldr	r3, [r3, #4]
 800c528:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	689b      	ldr	r3, [r3, #8]
 800c530:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800c534:	431a      	orrs	r2, r3
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	691b      	ldr	r3, [r3, #16]
 800c53a:	f003 0302 	and.w	r3, r3, #2
 800c53e:	431a      	orrs	r2, r3
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	695b      	ldr	r3, [r3, #20]
 800c544:	f003 0301 	and.w	r3, r3, #1
 800c548:	431a      	orrs	r2, r3
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	699b      	ldr	r3, [r3, #24]
 800c54e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c552:	431a      	orrs	r2, r3
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	69db      	ldr	r3, [r3, #28]
 800c558:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c55c:	431a      	orrs	r2, r3
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	6a1b      	ldr	r3, [r3, #32]
 800c562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c566:	ea42 0103 	orr.w	r1, r2, r3
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c56e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	430a      	orrs	r2, r1
 800c578:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	699b      	ldr	r3, [r3, #24]
 800c57e:	0c1b      	lsrs	r3, r3, #16
 800c580:	f003 0204 	and.w	r2, r3, #4
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c588:	f003 0310 	and.w	r3, r3, #16
 800c58c:	431a      	orrs	r2, r3
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c592:	f003 0308 	and.w	r3, r3, #8
 800c596:	431a      	orrs	r2, r3
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	68db      	ldr	r3, [r3, #12]
 800c59c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800c5a0:	ea42 0103 	orr.w	r1, r2, r3
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	430a      	orrs	r2, r1
 800c5b0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2201      	movs	r2, #1
 800c5bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800c5c0:	2300      	movs	r3, #0
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	3710      	adds	r7, #16
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}

0800c5ca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c5ca:	b580      	push	{r7, lr}
 800c5cc:	b08a      	sub	sp, #40	; 0x28
 800c5ce:	af00      	add	r7, sp, #0
 800c5d0:	60f8      	str	r0, [r7, #12]
 800c5d2:	60b9      	str	r1, [r7, #8]
 800c5d4:	607a      	str	r2, [r7, #4]
 800c5d6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c5d8:	2301      	movs	r3, #1
 800c5da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c5e8:	2b01      	cmp	r3, #1
 800c5ea:	d101      	bne.n	800c5f0 <HAL_SPI_TransmitReceive+0x26>
 800c5ec:	2302      	movs	r3, #2
 800c5ee:	e1fb      	b.n	800c9e8 <HAL_SPI_TransmitReceive+0x41e>
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	2201      	movs	r2, #1
 800c5f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c5f8:	f7fd fc04 	bl	8009e04 <HAL_GetTick>
 800c5fc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c604:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	685b      	ldr	r3, [r3, #4]
 800c60a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800c60c:	887b      	ldrh	r3, [r7, #2]
 800c60e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800c610:	887b      	ldrh	r3, [r7, #2]
 800c612:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c614:	7efb      	ldrb	r3, [r7, #27]
 800c616:	2b01      	cmp	r3, #1
 800c618:	d00e      	beq.n	800c638 <HAL_SPI_TransmitReceive+0x6e>
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c620:	d106      	bne.n	800c630 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	689b      	ldr	r3, [r3, #8]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d102      	bne.n	800c630 <HAL_SPI_TransmitReceive+0x66>
 800c62a:	7efb      	ldrb	r3, [r7, #27]
 800c62c:	2b04      	cmp	r3, #4
 800c62e:	d003      	beq.n	800c638 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800c630:	2302      	movs	r3, #2
 800c632:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800c636:	e1cd      	b.n	800c9d4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c638:	68bb      	ldr	r3, [r7, #8]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d005      	beq.n	800c64a <HAL_SPI_TransmitReceive+0x80>
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d002      	beq.n	800c64a <HAL_SPI_TransmitReceive+0x80>
 800c644:	887b      	ldrh	r3, [r7, #2]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d103      	bne.n	800c652 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800c64a:	2301      	movs	r3, #1
 800c64c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800c650:	e1c0      	b.n	800c9d4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c658:	b2db      	uxtb	r3, r3
 800c65a:	2b04      	cmp	r3, #4
 800c65c:	d003      	beq.n	800c666 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	2205      	movs	r2, #5
 800c662:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	2200      	movs	r2, #0
 800c66a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	687a      	ldr	r2, [r7, #4]
 800c670:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	887a      	ldrh	r2, [r7, #2]
 800c676:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	887a      	ldrh	r2, [r7, #2]
 800c67e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	68ba      	ldr	r2, [r7, #8]
 800c686:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	887a      	ldrh	r2, [r7, #2]
 800c68c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	887a      	ldrh	r2, [r7, #2]
 800c692:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	2200      	movs	r2, #0
 800c698:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	2200      	movs	r2, #0
 800c69e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	68db      	ldr	r3, [r3, #12]
 800c6a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c6a8:	d802      	bhi.n	800c6b0 <HAL_SPI_TransmitReceive+0xe6>
 800c6aa:	8a3b      	ldrh	r3, [r7, #16]
 800c6ac:	2b01      	cmp	r3, #1
 800c6ae:	d908      	bls.n	800c6c2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	685a      	ldr	r2, [r3, #4]
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c6be:	605a      	str	r2, [r3, #4]
 800c6c0:	e007      	b.n	800c6d2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	685a      	ldr	r2, [r3, #4]
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c6d0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6dc:	2b40      	cmp	r3, #64	; 0x40
 800c6de:	d007      	beq.n	800c6f0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	681a      	ldr	r2, [r3, #0]
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c6ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	68db      	ldr	r3, [r3, #12]
 800c6f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c6f8:	d97c      	bls.n	800c7f4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	685b      	ldr	r3, [r3, #4]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d002      	beq.n	800c708 <HAL_SPI_TransmitReceive+0x13e>
 800c702:	8a7b      	ldrh	r3, [r7, #18]
 800c704:	2b01      	cmp	r3, #1
 800c706:	d169      	bne.n	800c7dc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c70c:	881a      	ldrh	r2, [r3, #0]
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c718:	1c9a      	adds	r2, r3, #2
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c722:	b29b      	uxth	r3, r3
 800c724:	3b01      	subs	r3, #1
 800c726:	b29a      	uxth	r2, r3
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c72c:	e056      	b.n	800c7dc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	689b      	ldr	r3, [r3, #8]
 800c734:	f003 0302 	and.w	r3, r3, #2
 800c738:	2b02      	cmp	r3, #2
 800c73a:	d11b      	bne.n	800c774 <HAL_SPI_TransmitReceive+0x1aa>
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c740:	b29b      	uxth	r3, r3
 800c742:	2b00      	cmp	r3, #0
 800c744:	d016      	beq.n	800c774 <HAL_SPI_TransmitReceive+0x1aa>
 800c746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c748:	2b01      	cmp	r3, #1
 800c74a:	d113      	bne.n	800c774 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c750:	881a      	ldrh	r2, [r3, #0]
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c75c:	1c9a      	adds	r2, r3, #2
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c766:	b29b      	uxth	r3, r3
 800c768:	3b01      	subs	r3, #1
 800c76a:	b29a      	uxth	r2, r3
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c770:	2300      	movs	r3, #0
 800c772:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	689b      	ldr	r3, [r3, #8]
 800c77a:	f003 0301 	and.w	r3, r3, #1
 800c77e:	2b01      	cmp	r3, #1
 800c780:	d11c      	bne.n	800c7bc <HAL_SPI_TransmitReceive+0x1f2>
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c788:	b29b      	uxth	r3, r3
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d016      	beq.n	800c7bc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	68da      	ldr	r2, [r3, #12]
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c798:	b292      	uxth	r2, r2
 800c79a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7a0:	1c9a      	adds	r2, r3, #2
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c7ac:	b29b      	uxth	r3, r3
 800c7ae:	3b01      	subs	r3, #1
 800c7b0:	b29a      	uxth	r2, r3
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c7bc:	f7fd fb22 	bl	8009e04 <HAL_GetTick>
 800c7c0:	4602      	mov	r2, r0
 800c7c2:	69fb      	ldr	r3, [r7, #28]
 800c7c4:	1ad3      	subs	r3, r2, r3
 800c7c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	d807      	bhi.n	800c7dc <HAL_SPI_TransmitReceive+0x212>
 800c7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7d2:	d003      	beq.n	800c7dc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800c7d4:	2303      	movs	r3, #3
 800c7d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800c7da:	e0fb      	b.n	800c9d4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c7e0:	b29b      	uxth	r3, r3
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d1a3      	bne.n	800c72e <HAL_SPI_TransmitReceive+0x164>
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c7ec:	b29b      	uxth	r3, r3
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d19d      	bne.n	800c72e <HAL_SPI_TransmitReceive+0x164>
 800c7f2:	e0df      	b.n	800c9b4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	685b      	ldr	r3, [r3, #4]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d003      	beq.n	800c804 <HAL_SPI_TransmitReceive+0x23a>
 800c7fc:	8a7b      	ldrh	r3, [r7, #18]
 800c7fe:	2b01      	cmp	r3, #1
 800c800:	f040 80cb 	bne.w	800c99a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c808:	b29b      	uxth	r3, r3
 800c80a:	2b01      	cmp	r3, #1
 800c80c:	d912      	bls.n	800c834 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c812:	881a      	ldrh	r2, [r3, #0]
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c81e:	1c9a      	adds	r2, r3, #2
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c828:	b29b      	uxth	r3, r3
 800c82a:	3b02      	subs	r3, #2
 800c82c:	b29a      	uxth	r2, r3
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c832:	e0b2      	b.n	800c99a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	330c      	adds	r3, #12
 800c83e:	7812      	ldrb	r2, [r2, #0]
 800c840:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c846:	1c5a      	adds	r2, r3, #1
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c850:	b29b      	uxth	r3, r3
 800c852:	3b01      	subs	r3, #1
 800c854:	b29a      	uxth	r2, r3
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c85a:	e09e      	b.n	800c99a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	689b      	ldr	r3, [r3, #8]
 800c862:	f003 0302 	and.w	r3, r3, #2
 800c866:	2b02      	cmp	r3, #2
 800c868:	d134      	bne.n	800c8d4 <HAL_SPI_TransmitReceive+0x30a>
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c86e:	b29b      	uxth	r3, r3
 800c870:	2b00      	cmp	r3, #0
 800c872:	d02f      	beq.n	800c8d4 <HAL_SPI_TransmitReceive+0x30a>
 800c874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c876:	2b01      	cmp	r3, #1
 800c878:	d12c      	bne.n	800c8d4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c87e:	b29b      	uxth	r3, r3
 800c880:	2b01      	cmp	r3, #1
 800c882:	d912      	bls.n	800c8aa <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c888:	881a      	ldrh	r2, [r3, #0]
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c894:	1c9a      	adds	r2, r3, #2
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c89e:	b29b      	uxth	r3, r3
 800c8a0:	3b02      	subs	r3, #2
 800c8a2:	b29a      	uxth	r2, r3
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c8a8:	e012      	b.n	800c8d0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	330c      	adds	r3, #12
 800c8b4:	7812      	ldrb	r2, [r2, #0]
 800c8b6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8bc:	1c5a      	adds	r2, r3, #1
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c8c6:	b29b      	uxth	r3, r3
 800c8c8:	3b01      	subs	r3, #1
 800c8ca:	b29a      	uxth	r2, r3
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	689b      	ldr	r3, [r3, #8]
 800c8da:	f003 0301 	and.w	r3, r3, #1
 800c8de:	2b01      	cmp	r3, #1
 800c8e0:	d148      	bne.n	800c974 <HAL_SPI_TransmitReceive+0x3aa>
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c8e8:	b29b      	uxth	r3, r3
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d042      	beq.n	800c974 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c8f4:	b29b      	uxth	r3, r3
 800c8f6:	2b01      	cmp	r3, #1
 800c8f8:	d923      	bls.n	800c942 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	68da      	ldr	r2, [r3, #12]
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c904:	b292      	uxth	r2, r2
 800c906:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c90c:	1c9a      	adds	r2, r3, #2
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c918:	b29b      	uxth	r3, r3
 800c91a:	3b02      	subs	r3, #2
 800c91c:	b29a      	uxth	r2, r3
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c92a:	b29b      	uxth	r3, r3
 800c92c:	2b01      	cmp	r3, #1
 800c92e:	d81f      	bhi.n	800c970 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	685a      	ldr	r2, [r3, #4]
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c93e:	605a      	str	r2, [r3, #4]
 800c940:	e016      	b.n	800c970 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f103 020c 	add.w	r2, r3, #12
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c94e:	7812      	ldrb	r2, [r2, #0]
 800c950:	b2d2      	uxtb	r2, r2
 800c952:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c958:	1c5a      	adds	r2, r3, #1
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c964:	b29b      	uxth	r3, r3
 800c966:	3b01      	subs	r3, #1
 800c968:	b29a      	uxth	r2, r3
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c970:	2301      	movs	r3, #1
 800c972:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c974:	f7fd fa46 	bl	8009e04 <HAL_GetTick>
 800c978:	4602      	mov	r2, r0
 800c97a:	69fb      	ldr	r3, [r7, #28]
 800c97c:	1ad3      	subs	r3, r2, r3
 800c97e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c980:	429a      	cmp	r2, r3
 800c982:	d803      	bhi.n	800c98c <HAL_SPI_TransmitReceive+0x3c2>
 800c984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c98a:	d102      	bne.n	800c992 <HAL_SPI_TransmitReceive+0x3c8>
 800c98c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d103      	bne.n	800c99a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800c992:	2303      	movs	r3, #3
 800c994:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800c998:	e01c      	b.n	800c9d4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c99e:	b29b      	uxth	r3, r3
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	f47f af5b 	bne.w	800c85c <HAL_SPI_TransmitReceive+0x292>
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c9ac:	b29b      	uxth	r3, r3
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	f47f af54 	bne.w	800c85c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c9b4:	69fa      	ldr	r2, [r7, #28]
 800c9b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c9b8:	68f8      	ldr	r0, [r7, #12]
 800c9ba:	f000 f937 	bl	800cc2c <SPI_EndRxTxTransaction>
 800c9be:	4603      	mov	r3, r0
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d006      	beq.n	800c9d2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800c9c4:	2301      	movs	r3, #1
 800c9c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	2220      	movs	r2, #32
 800c9ce:	661a      	str	r2, [r3, #96]	; 0x60
 800c9d0:	e000      	b.n	800c9d4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800c9d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	2201      	movs	r2, #1
 800c9d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	2200      	movs	r2, #0
 800c9e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c9e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	3728      	adds	r7, #40	; 0x28
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}

0800c9f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b088      	sub	sp, #32
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	60f8      	str	r0, [r7, #12]
 800c9f8:	60b9      	str	r1, [r7, #8]
 800c9fa:	603b      	str	r3, [r7, #0]
 800c9fc:	4613      	mov	r3, r2
 800c9fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ca00:	f7fd fa00 	bl	8009e04 <HAL_GetTick>
 800ca04:	4602      	mov	r2, r0
 800ca06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca08:	1a9b      	subs	r3, r3, r2
 800ca0a:	683a      	ldr	r2, [r7, #0]
 800ca0c:	4413      	add	r3, r2
 800ca0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ca10:	f7fd f9f8 	bl	8009e04 <HAL_GetTick>
 800ca14:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ca16:	4b39      	ldr	r3, [pc, #228]	; (800cafc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	015b      	lsls	r3, r3, #5
 800ca1c:	0d1b      	lsrs	r3, r3, #20
 800ca1e:	69fa      	ldr	r2, [r7, #28]
 800ca20:	fb02 f303 	mul.w	r3, r2, r3
 800ca24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ca26:	e054      	b.n	800cad2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca2e:	d050      	beq.n	800cad2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ca30:	f7fd f9e8 	bl	8009e04 <HAL_GetTick>
 800ca34:	4602      	mov	r2, r0
 800ca36:	69bb      	ldr	r3, [r7, #24]
 800ca38:	1ad3      	subs	r3, r2, r3
 800ca3a:	69fa      	ldr	r2, [r7, #28]
 800ca3c:	429a      	cmp	r2, r3
 800ca3e:	d902      	bls.n	800ca46 <SPI_WaitFlagStateUntilTimeout+0x56>
 800ca40:	69fb      	ldr	r3, [r7, #28]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d13d      	bne.n	800cac2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	685a      	ldr	r2, [r3, #4]
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ca54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	685b      	ldr	r3, [r3, #4]
 800ca5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ca5e:	d111      	bne.n	800ca84 <SPI_WaitFlagStateUntilTimeout+0x94>
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	689b      	ldr	r3, [r3, #8]
 800ca64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ca68:	d004      	beq.n	800ca74 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	689b      	ldr	r3, [r3, #8]
 800ca6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca72:	d107      	bne.n	800ca84 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	681a      	ldr	r2, [r3, #0]
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ca82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca8c:	d10f      	bne.n	800caae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	681a      	ldr	r2, [r3, #0]
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ca9c:	601a      	str	r2, [r3, #0]
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	681a      	ldr	r2, [r3, #0]
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800caac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	2201      	movs	r2, #1
 800cab2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	2200      	movs	r2, #0
 800caba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800cabe:	2303      	movs	r3, #3
 800cac0:	e017      	b.n	800caf2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800cac2:	697b      	ldr	r3, [r7, #20]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d101      	bne.n	800cacc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800cac8:	2300      	movs	r3, #0
 800caca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800cacc:	697b      	ldr	r3, [r7, #20]
 800cace:	3b01      	subs	r3, #1
 800cad0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	689a      	ldr	r2, [r3, #8]
 800cad8:	68bb      	ldr	r3, [r7, #8]
 800cada:	4013      	ands	r3, r2
 800cadc:	68ba      	ldr	r2, [r7, #8]
 800cade:	429a      	cmp	r2, r3
 800cae0:	bf0c      	ite	eq
 800cae2:	2301      	moveq	r3, #1
 800cae4:	2300      	movne	r3, #0
 800cae6:	b2db      	uxtb	r3, r3
 800cae8:	461a      	mov	r2, r3
 800caea:	79fb      	ldrb	r3, [r7, #7]
 800caec:	429a      	cmp	r2, r3
 800caee:	d19b      	bne.n	800ca28 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800caf0:	2300      	movs	r3, #0
}
 800caf2:	4618      	mov	r0, r3
 800caf4:	3720      	adds	r7, #32
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd80      	pop	{r7, pc}
 800cafa:	bf00      	nop
 800cafc:	20000000 	.word	0x20000000

0800cb00 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b08a      	sub	sp, #40	; 0x28
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	60f8      	str	r0, [r7, #12]
 800cb08:	60b9      	str	r1, [r7, #8]
 800cb0a:	607a      	str	r2, [r7, #4]
 800cb0c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800cb12:	f7fd f977 	bl	8009e04 <HAL_GetTick>
 800cb16:	4602      	mov	r2, r0
 800cb18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb1a:	1a9b      	subs	r3, r3, r2
 800cb1c:	683a      	ldr	r2, [r7, #0]
 800cb1e:	4413      	add	r3, r2
 800cb20:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800cb22:	f7fd f96f 	bl	8009e04 <HAL_GetTick>
 800cb26:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	330c      	adds	r3, #12
 800cb2e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800cb30:	4b3d      	ldr	r3, [pc, #244]	; (800cc28 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800cb32:	681a      	ldr	r2, [r3, #0]
 800cb34:	4613      	mov	r3, r2
 800cb36:	009b      	lsls	r3, r3, #2
 800cb38:	4413      	add	r3, r2
 800cb3a:	00da      	lsls	r2, r3, #3
 800cb3c:	1ad3      	subs	r3, r2, r3
 800cb3e:	0d1b      	lsrs	r3, r3, #20
 800cb40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb42:	fb02 f303 	mul.w	r3, r2, r3
 800cb46:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800cb48:	e060      	b.n	800cc0c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800cb4a:	68bb      	ldr	r3, [r7, #8]
 800cb4c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800cb50:	d107      	bne.n	800cb62 <SPI_WaitFifoStateUntilTimeout+0x62>
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d104      	bne.n	800cb62 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800cb58:	69fb      	ldr	r3, [r7, #28]
 800cb5a:	781b      	ldrb	r3, [r3, #0]
 800cb5c:	b2db      	uxtb	r3, r3
 800cb5e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800cb60:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb68:	d050      	beq.n	800cc0c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800cb6a:	f7fd f94b 	bl	8009e04 <HAL_GetTick>
 800cb6e:	4602      	mov	r2, r0
 800cb70:	6a3b      	ldr	r3, [r7, #32]
 800cb72:	1ad3      	subs	r3, r2, r3
 800cb74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb76:	429a      	cmp	r2, r3
 800cb78:	d902      	bls.n	800cb80 <SPI_WaitFifoStateUntilTimeout+0x80>
 800cb7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d13d      	bne.n	800cbfc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	685a      	ldr	r2, [r3, #4]
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800cb8e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	685b      	ldr	r3, [r3, #4]
 800cb94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cb98:	d111      	bne.n	800cbbe <SPI_WaitFifoStateUntilTimeout+0xbe>
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	689b      	ldr	r3, [r3, #8]
 800cb9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cba2:	d004      	beq.n	800cbae <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	689b      	ldr	r3, [r3, #8]
 800cba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cbac:	d107      	bne.n	800cbbe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	681a      	ldr	r2, [r3, #0]
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cbbc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cbc6:	d10f      	bne.n	800cbe8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	681a      	ldr	r2, [r3, #0]
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cbd6:	601a      	str	r2, [r3, #0]
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	681a      	ldr	r2, [r3, #0]
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cbe6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	2201      	movs	r2, #1
 800cbec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800cbf8:	2303      	movs	r3, #3
 800cbfa:	e010      	b.n	800cc1e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800cbfc:	69bb      	ldr	r3, [r7, #24]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d101      	bne.n	800cc06 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800cc02:	2300      	movs	r3, #0
 800cc04:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800cc06:	69bb      	ldr	r3, [r7, #24]
 800cc08:	3b01      	subs	r3, #1
 800cc0a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	689a      	ldr	r2, [r3, #8]
 800cc12:	68bb      	ldr	r3, [r7, #8]
 800cc14:	4013      	ands	r3, r2
 800cc16:	687a      	ldr	r2, [r7, #4]
 800cc18:	429a      	cmp	r2, r3
 800cc1a:	d196      	bne.n	800cb4a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800cc1c:	2300      	movs	r3, #0
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	3728      	adds	r7, #40	; 0x28
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}
 800cc26:	bf00      	nop
 800cc28:	20000000 	.word	0x20000000

0800cc2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b086      	sub	sp, #24
 800cc30:	af02      	add	r7, sp, #8
 800cc32:	60f8      	str	r0, [r7, #12]
 800cc34:	60b9      	str	r1, [r7, #8]
 800cc36:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	9300      	str	r3, [sp, #0]
 800cc3c:	68bb      	ldr	r3, [r7, #8]
 800cc3e:	2200      	movs	r2, #0
 800cc40:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800cc44:	68f8      	ldr	r0, [r7, #12]
 800cc46:	f7ff ff5b 	bl	800cb00 <SPI_WaitFifoStateUntilTimeout>
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d007      	beq.n	800cc60 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc54:	f043 0220 	orr.w	r2, r3, #32
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800cc5c:	2303      	movs	r3, #3
 800cc5e:	e027      	b.n	800ccb0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	9300      	str	r3, [sp, #0]
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	2200      	movs	r2, #0
 800cc68:	2180      	movs	r1, #128	; 0x80
 800cc6a:	68f8      	ldr	r0, [r7, #12]
 800cc6c:	f7ff fec0 	bl	800c9f0 <SPI_WaitFlagStateUntilTimeout>
 800cc70:	4603      	mov	r3, r0
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d007      	beq.n	800cc86 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc7a:	f043 0220 	orr.w	r2, r3, #32
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800cc82:	2303      	movs	r3, #3
 800cc84:	e014      	b.n	800ccb0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	9300      	str	r3, [sp, #0]
 800cc8a:	68bb      	ldr	r3, [r7, #8]
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800cc92:	68f8      	ldr	r0, [r7, #12]
 800cc94:	f7ff ff34 	bl	800cb00 <SPI_WaitFifoStateUntilTimeout>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d007      	beq.n	800ccae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cca2:	f043 0220 	orr.w	r2, r3, #32
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ccaa:	2303      	movs	r3, #3
 800ccac:	e000      	b.n	800ccb0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800ccae:	2300      	movs	r3, #0
}
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	3710      	adds	r7, #16
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bd80      	pop	{r7, pc}

0800ccb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b082      	sub	sp, #8
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d101      	bne.n	800ccca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ccc6:	2301      	movs	r3, #1
 800ccc8:	e049      	b.n	800cd5e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ccd0:	b2db      	uxtb	r3, r3
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d106      	bne.n	800cce4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	2200      	movs	r2, #0
 800ccda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	f7f7 fe8c 	bl	80049fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2202      	movs	r2, #2
 800cce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681a      	ldr	r2, [r3, #0]
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	3304      	adds	r3, #4
 800ccf4:	4619      	mov	r1, r3
 800ccf6:	4610      	mov	r0, r2
 800ccf8:	f000 fae6 	bl	800d2c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2201      	movs	r2, #1
 800cd00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2201      	movs	r2, #1
 800cd08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2201      	movs	r2, #1
 800cd10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2201      	movs	r2, #1
 800cd18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2201      	movs	r2, #1
 800cd20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2201      	movs	r2, #1
 800cd28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2201      	movs	r2, #1
 800cd30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2201      	movs	r2, #1
 800cd38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2201      	movs	r2, #1
 800cd40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2201      	movs	r2, #1
 800cd48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2201      	movs	r2, #1
 800cd50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2201      	movs	r2, #1
 800cd58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cd5c:	2300      	movs	r3, #0
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	3708      	adds	r7, #8
 800cd62:	46bd      	mov	sp, r7
 800cd64:	bd80      	pop	{r7, pc}
	...

0800cd68 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800cd68:	b480      	push	{r7}
 800cd6a:	b085      	sub	sp, #20
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd76:	b2db      	uxtb	r3, r3
 800cd78:	2b01      	cmp	r3, #1
 800cd7a:	d001      	beq.n	800cd80 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800cd7c:	2301      	movs	r3, #1
 800cd7e:	e033      	b.n	800cde8 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2202      	movs	r2, #2
 800cd84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	4a19      	ldr	r2, [pc, #100]	; (800cdf4 <HAL_TIM_Base_Start+0x8c>)
 800cd8e:	4293      	cmp	r3, r2
 800cd90:	d009      	beq.n	800cda6 <HAL_TIM_Base_Start+0x3e>
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd9a:	d004      	beq.n	800cda6 <HAL_TIM_Base_Start+0x3e>
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	4a15      	ldr	r2, [pc, #84]	; (800cdf8 <HAL_TIM_Base_Start+0x90>)
 800cda2:	4293      	cmp	r3, r2
 800cda4:	d115      	bne.n	800cdd2 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	689a      	ldr	r2, [r3, #8]
 800cdac:	4b13      	ldr	r3, [pc, #76]	; (800cdfc <HAL_TIM_Base_Start+0x94>)
 800cdae:	4013      	ands	r3, r2
 800cdb0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	2b06      	cmp	r3, #6
 800cdb6:	d015      	beq.n	800cde4 <HAL_TIM_Base_Start+0x7c>
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cdbe:	d011      	beq.n	800cde4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	681a      	ldr	r2, [r3, #0]
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	f042 0201 	orr.w	r2, r2, #1
 800cdce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cdd0:	e008      	b.n	800cde4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	681a      	ldr	r2, [r3, #0]
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	f042 0201 	orr.w	r2, r2, #1
 800cde0:	601a      	str	r2, [r3, #0]
 800cde2:	e000      	b.n	800cde6 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cde4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cde6:	2300      	movs	r3, #0
}
 800cde8:	4618      	mov	r0, r3
 800cdea:	3714      	adds	r7, #20
 800cdec:	46bd      	mov	sp, r7
 800cdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf2:	4770      	bx	lr
 800cdf4:	40012c00 	.word	0x40012c00
 800cdf8:	40014000 	.word	0x40014000
 800cdfc:	00010007 	.word	0x00010007

0800ce00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ce00:	b480      	push	{r7}
 800ce02:	b085      	sub	sp, #20
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce0e:	b2db      	uxtb	r3, r3
 800ce10:	2b01      	cmp	r3, #1
 800ce12:	d001      	beq.n	800ce18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ce14:	2301      	movs	r3, #1
 800ce16:	e03b      	b.n	800ce90 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2202      	movs	r2, #2
 800ce1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	68da      	ldr	r2, [r3, #12]
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	f042 0201 	orr.w	r2, r2, #1
 800ce2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	4a19      	ldr	r2, [pc, #100]	; (800ce9c <HAL_TIM_Base_Start_IT+0x9c>)
 800ce36:	4293      	cmp	r3, r2
 800ce38:	d009      	beq.n	800ce4e <HAL_TIM_Base_Start_IT+0x4e>
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce42:	d004      	beq.n	800ce4e <HAL_TIM_Base_Start_IT+0x4e>
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	4a15      	ldr	r2, [pc, #84]	; (800cea0 <HAL_TIM_Base_Start_IT+0xa0>)
 800ce4a:	4293      	cmp	r3, r2
 800ce4c:	d115      	bne.n	800ce7a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	689a      	ldr	r2, [r3, #8]
 800ce54:	4b13      	ldr	r3, [pc, #76]	; (800cea4 <HAL_TIM_Base_Start_IT+0xa4>)
 800ce56:	4013      	ands	r3, r2
 800ce58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	2b06      	cmp	r3, #6
 800ce5e:	d015      	beq.n	800ce8c <HAL_TIM_Base_Start_IT+0x8c>
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce66:	d011      	beq.n	800ce8c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	681a      	ldr	r2, [r3, #0]
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	f042 0201 	orr.w	r2, r2, #1
 800ce76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ce78:	e008      	b.n	800ce8c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	681a      	ldr	r2, [r3, #0]
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	f042 0201 	orr.w	r2, r2, #1
 800ce88:	601a      	str	r2, [r3, #0]
 800ce8a:	e000      	b.n	800ce8e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ce8c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ce8e:	2300      	movs	r3, #0
}
 800ce90:	4618      	mov	r0, r3
 800ce92:	3714      	adds	r7, #20
 800ce94:	46bd      	mov	sp, r7
 800ce96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9a:	4770      	bx	lr
 800ce9c:	40012c00 	.word	0x40012c00
 800cea0:	40014000 	.word	0x40014000
 800cea4:	00010007 	.word	0x00010007

0800cea8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b082      	sub	sp, #8
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	691b      	ldr	r3, [r3, #16]
 800ceb6:	f003 0302 	and.w	r3, r3, #2
 800ceba:	2b02      	cmp	r3, #2
 800cebc:	d122      	bne.n	800cf04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	68db      	ldr	r3, [r3, #12]
 800cec4:	f003 0302 	and.w	r3, r3, #2
 800cec8:	2b02      	cmp	r3, #2
 800ceca:	d11b      	bne.n	800cf04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	f06f 0202 	mvn.w	r2, #2
 800ced4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	2201      	movs	r2, #1
 800ceda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	699b      	ldr	r3, [r3, #24]
 800cee2:	f003 0303 	and.w	r3, r3, #3
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d003      	beq.n	800cef2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ceea:	6878      	ldr	r0, [r7, #4]
 800ceec:	f000 f9ce 	bl	800d28c <HAL_TIM_IC_CaptureCallback>
 800cef0:	e005      	b.n	800cefe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cef2:	6878      	ldr	r0, [r7, #4]
 800cef4:	f000 f9c0 	bl	800d278 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cef8:	6878      	ldr	r0, [r7, #4]
 800cefa:	f000 f9d1 	bl	800d2a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2200      	movs	r2, #0
 800cf02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	691b      	ldr	r3, [r3, #16]
 800cf0a:	f003 0304 	and.w	r3, r3, #4
 800cf0e:	2b04      	cmp	r3, #4
 800cf10:	d122      	bne.n	800cf58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	68db      	ldr	r3, [r3, #12]
 800cf18:	f003 0304 	and.w	r3, r3, #4
 800cf1c:	2b04      	cmp	r3, #4
 800cf1e:	d11b      	bne.n	800cf58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	f06f 0204 	mvn.w	r2, #4
 800cf28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2202      	movs	r2, #2
 800cf2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	699b      	ldr	r3, [r3, #24]
 800cf36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d003      	beq.n	800cf46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	f000 f9a4 	bl	800d28c <HAL_TIM_IC_CaptureCallback>
 800cf44:	e005      	b.n	800cf52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	f000 f996 	bl	800d278 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf4c:	6878      	ldr	r0, [r7, #4]
 800cf4e:	f000 f9a7 	bl	800d2a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	2200      	movs	r2, #0
 800cf56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	691b      	ldr	r3, [r3, #16]
 800cf5e:	f003 0308 	and.w	r3, r3, #8
 800cf62:	2b08      	cmp	r3, #8
 800cf64:	d122      	bne.n	800cfac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	68db      	ldr	r3, [r3, #12]
 800cf6c:	f003 0308 	and.w	r3, r3, #8
 800cf70:	2b08      	cmp	r3, #8
 800cf72:	d11b      	bne.n	800cfac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	f06f 0208 	mvn.w	r2, #8
 800cf7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2204      	movs	r2, #4
 800cf82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	69db      	ldr	r3, [r3, #28]
 800cf8a:	f003 0303 	and.w	r3, r3, #3
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d003      	beq.n	800cf9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cf92:	6878      	ldr	r0, [r7, #4]
 800cf94:	f000 f97a 	bl	800d28c <HAL_TIM_IC_CaptureCallback>
 800cf98:	e005      	b.n	800cfa6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf9a:	6878      	ldr	r0, [r7, #4]
 800cf9c:	f000 f96c 	bl	800d278 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cfa0:	6878      	ldr	r0, [r7, #4]
 800cfa2:	f000 f97d 	bl	800d2a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	691b      	ldr	r3, [r3, #16]
 800cfb2:	f003 0310 	and.w	r3, r3, #16
 800cfb6:	2b10      	cmp	r3, #16
 800cfb8:	d122      	bne.n	800d000 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	68db      	ldr	r3, [r3, #12]
 800cfc0:	f003 0310 	and.w	r3, r3, #16
 800cfc4:	2b10      	cmp	r3, #16
 800cfc6:	d11b      	bne.n	800d000 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	f06f 0210 	mvn.w	r2, #16
 800cfd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2208      	movs	r2, #8
 800cfd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	69db      	ldr	r3, [r3, #28]
 800cfde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d003      	beq.n	800cfee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cfe6:	6878      	ldr	r0, [r7, #4]
 800cfe8:	f000 f950 	bl	800d28c <HAL_TIM_IC_CaptureCallback>
 800cfec:	e005      	b.n	800cffa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cfee:	6878      	ldr	r0, [r7, #4]
 800cff0:	f000 f942 	bl	800d278 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	f000 f953 	bl	800d2a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2200      	movs	r2, #0
 800cffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	691b      	ldr	r3, [r3, #16]
 800d006:	f003 0301 	and.w	r3, r3, #1
 800d00a:	2b01      	cmp	r3, #1
 800d00c:	d10e      	bne.n	800d02c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	68db      	ldr	r3, [r3, #12]
 800d014:	f003 0301 	and.w	r3, r3, #1
 800d018:	2b01      	cmp	r3, #1
 800d01a:	d107      	bne.n	800d02c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	f06f 0201 	mvn.w	r2, #1
 800d024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d026:	6878      	ldr	r0, [r7, #4]
 800d028:	f7f6 ff7c 	bl	8003f24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	691b      	ldr	r3, [r3, #16]
 800d032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d036:	2b80      	cmp	r3, #128	; 0x80
 800d038:	d10e      	bne.n	800d058 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	68db      	ldr	r3, [r3, #12]
 800d040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d044:	2b80      	cmp	r3, #128	; 0x80
 800d046:	d107      	bne.n	800d058 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d052:	6878      	ldr	r0, [r7, #4]
 800d054:	f000 faa6 	bl	800d5a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	691b      	ldr	r3, [r3, #16]
 800d05e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d066:	d10e      	bne.n	800d086 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	68db      	ldr	r3, [r3, #12]
 800d06e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d072:	2b80      	cmp	r3, #128	; 0x80
 800d074:	d107      	bne.n	800d086 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d07e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d080:	6878      	ldr	r0, [r7, #4]
 800d082:	f000 fa99 	bl	800d5b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	691b      	ldr	r3, [r3, #16]
 800d08c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d090:	2b40      	cmp	r3, #64	; 0x40
 800d092:	d10e      	bne.n	800d0b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	68db      	ldr	r3, [r3, #12]
 800d09a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d09e:	2b40      	cmp	r3, #64	; 0x40
 800d0a0:	d107      	bne.n	800d0b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d0aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d0ac:	6878      	ldr	r0, [r7, #4]
 800d0ae:	f000 f901 	bl	800d2b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	691b      	ldr	r3, [r3, #16]
 800d0b8:	f003 0320 	and.w	r3, r3, #32
 800d0bc:	2b20      	cmp	r3, #32
 800d0be:	d10e      	bne.n	800d0de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	68db      	ldr	r3, [r3, #12]
 800d0c6:	f003 0320 	and.w	r3, r3, #32
 800d0ca:	2b20      	cmp	r3, #32
 800d0cc:	d107      	bne.n	800d0de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	f06f 0220 	mvn.w	r2, #32
 800d0d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	f000 fa59 	bl	800d590 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d0de:	bf00      	nop
 800d0e0:	3708      	adds	r7, #8
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}

0800d0e6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d0e6:	b580      	push	{r7, lr}
 800d0e8:	b084      	sub	sp, #16
 800d0ea:	af00      	add	r7, sp, #0
 800d0ec:	6078      	str	r0, [r7, #4]
 800d0ee:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d0fa:	2b01      	cmp	r3, #1
 800d0fc:	d101      	bne.n	800d102 <HAL_TIM_ConfigClockSource+0x1c>
 800d0fe:	2302      	movs	r3, #2
 800d100:	e0b6      	b.n	800d270 <HAL_TIM_ConfigClockSource+0x18a>
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2201      	movs	r2, #1
 800d106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	2202      	movs	r2, #2
 800d10e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	689b      	ldr	r3, [r3, #8]
 800d118:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d120:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d124:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d12c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	68ba      	ldr	r2, [r7, #8]
 800d134:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d13e:	d03e      	beq.n	800d1be <HAL_TIM_ConfigClockSource+0xd8>
 800d140:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d144:	f200 8087 	bhi.w	800d256 <HAL_TIM_ConfigClockSource+0x170>
 800d148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d14c:	f000 8086 	beq.w	800d25c <HAL_TIM_ConfigClockSource+0x176>
 800d150:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d154:	d87f      	bhi.n	800d256 <HAL_TIM_ConfigClockSource+0x170>
 800d156:	2b70      	cmp	r3, #112	; 0x70
 800d158:	d01a      	beq.n	800d190 <HAL_TIM_ConfigClockSource+0xaa>
 800d15a:	2b70      	cmp	r3, #112	; 0x70
 800d15c:	d87b      	bhi.n	800d256 <HAL_TIM_ConfigClockSource+0x170>
 800d15e:	2b60      	cmp	r3, #96	; 0x60
 800d160:	d050      	beq.n	800d204 <HAL_TIM_ConfigClockSource+0x11e>
 800d162:	2b60      	cmp	r3, #96	; 0x60
 800d164:	d877      	bhi.n	800d256 <HAL_TIM_ConfigClockSource+0x170>
 800d166:	2b50      	cmp	r3, #80	; 0x50
 800d168:	d03c      	beq.n	800d1e4 <HAL_TIM_ConfigClockSource+0xfe>
 800d16a:	2b50      	cmp	r3, #80	; 0x50
 800d16c:	d873      	bhi.n	800d256 <HAL_TIM_ConfigClockSource+0x170>
 800d16e:	2b40      	cmp	r3, #64	; 0x40
 800d170:	d058      	beq.n	800d224 <HAL_TIM_ConfigClockSource+0x13e>
 800d172:	2b40      	cmp	r3, #64	; 0x40
 800d174:	d86f      	bhi.n	800d256 <HAL_TIM_ConfigClockSource+0x170>
 800d176:	2b30      	cmp	r3, #48	; 0x30
 800d178:	d064      	beq.n	800d244 <HAL_TIM_ConfigClockSource+0x15e>
 800d17a:	2b30      	cmp	r3, #48	; 0x30
 800d17c:	d86b      	bhi.n	800d256 <HAL_TIM_ConfigClockSource+0x170>
 800d17e:	2b20      	cmp	r3, #32
 800d180:	d060      	beq.n	800d244 <HAL_TIM_ConfigClockSource+0x15e>
 800d182:	2b20      	cmp	r3, #32
 800d184:	d867      	bhi.n	800d256 <HAL_TIM_ConfigClockSource+0x170>
 800d186:	2b00      	cmp	r3, #0
 800d188:	d05c      	beq.n	800d244 <HAL_TIM_ConfigClockSource+0x15e>
 800d18a:	2b10      	cmp	r3, #16
 800d18c:	d05a      	beq.n	800d244 <HAL_TIM_ConfigClockSource+0x15e>
 800d18e:	e062      	b.n	800d256 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	6818      	ldr	r0, [r3, #0]
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	6899      	ldr	r1, [r3, #8]
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	685a      	ldr	r2, [r3, #4]
 800d19c:	683b      	ldr	r3, [r7, #0]
 800d19e:	68db      	ldr	r3, [r3, #12]
 800d1a0:	f000 f970 	bl	800d484 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	689b      	ldr	r3, [r3, #8]
 800d1aa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d1ac:	68bb      	ldr	r3, [r7, #8]
 800d1ae:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d1b2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	68ba      	ldr	r2, [r7, #8]
 800d1ba:	609a      	str	r2, [r3, #8]
      break;
 800d1bc:	e04f      	b.n	800d25e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	6818      	ldr	r0, [r3, #0]
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	6899      	ldr	r1, [r3, #8]
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	685a      	ldr	r2, [r3, #4]
 800d1ca:	683b      	ldr	r3, [r7, #0]
 800d1cc:	68db      	ldr	r3, [r3, #12]
 800d1ce:	f000 f959 	bl	800d484 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	689a      	ldr	r2, [r3, #8]
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d1e0:	609a      	str	r2, [r3, #8]
      break;
 800d1e2:	e03c      	b.n	800d25e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	6818      	ldr	r0, [r3, #0]
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	6859      	ldr	r1, [r3, #4]
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	68db      	ldr	r3, [r3, #12]
 800d1f0:	461a      	mov	r2, r3
 800d1f2:	f000 f8cd 	bl	800d390 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	2150      	movs	r1, #80	; 0x50
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	f000 f926 	bl	800d44e <TIM_ITRx_SetConfig>
      break;
 800d202:	e02c      	b.n	800d25e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	6818      	ldr	r0, [r3, #0]
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	6859      	ldr	r1, [r3, #4]
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	68db      	ldr	r3, [r3, #12]
 800d210:	461a      	mov	r2, r3
 800d212:	f000 f8ec 	bl	800d3ee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	2160      	movs	r1, #96	; 0x60
 800d21c:	4618      	mov	r0, r3
 800d21e:	f000 f916 	bl	800d44e <TIM_ITRx_SetConfig>
      break;
 800d222:	e01c      	b.n	800d25e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	6818      	ldr	r0, [r3, #0]
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	6859      	ldr	r1, [r3, #4]
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	68db      	ldr	r3, [r3, #12]
 800d230:	461a      	mov	r2, r3
 800d232:	f000 f8ad 	bl	800d390 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	2140      	movs	r1, #64	; 0x40
 800d23c:	4618      	mov	r0, r3
 800d23e:	f000 f906 	bl	800d44e <TIM_ITRx_SetConfig>
      break;
 800d242:	e00c      	b.n	800d25e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681a      	ldr	r2, [r3, #0]
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	4619      	mov	r1, r3
 800d24e:	4610      	mov	r0, r2
 800d250:	f000 f8fd 	bl	800d44e <TIM_ITRx_SetConfig>
      break;
 800d254:	e003      	b.n	800d25e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800d256:	2301      	movs	r3, #1
 800d258:	73fb      	strb	r3, [r7, #15]
      break;
 800d25a:	e000      	b.n	800d25e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800d25c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	2201      	movs	r2, #1
 800d262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	2200      	movs	r2, #0
 800d26a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d26e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d270:	4618      	mov	r0, r3
 800d272:	3710      	adds	r7, #16
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}

0800d278 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d278:	b480      	push	{r7}
 800d27a:	b083      	sub	sp, #12
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d280:	bf00      	nop
 800d282:	370c      	adds	r7, #12
 800d284:	46bd      	mov	sp, r7
 800d286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28a:	4770      	bx	lr

0800d28c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d28c:	b480      	push	{r7}
 800d28e:	b083      	sub	sp, #12
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d294:	bf00      	nop
 800d296:	370c      	adds	r7, #12
 800d298:	46bd      	mov	sp, r7
 800d29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29e:	4770      	bx	lr

0800d2a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d2a0:	b480      	push	{r7}
 800d2a2:	b083      	sub	sp, #12
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d2a8:	bf00      	nop
 800d2aa:	370c      	adds	r7, #12
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b2:	4770      	bx	lr

0800d2b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d2b4:	b480      	push	{r7}
 800d2b6:	b083      	sub	sp, #12
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d2bc:	bf00      	nop
 800d2be:	370c      	adds	r7, #12
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c6:	4770      	bx	lr

0800d2c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d2c8:	b480      	push	{r7}
 800d2ca:	b085      	sub	sp, #20
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
 800d2d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	4a2a      	ldr	r2, [pc, #168]	; (800d384 <TIM_Base_SetConfig+0xbc>)
 800d2dc:	4293      	cmp	r3, r2
 800d2de:	d003      	beq.n	800d2e8 <TIM_Base_SetConfig+0x20>
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d2e6:	d108      	bne.n	800d2fa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d2ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	685b      	ldr	r3, [r3, #4]
 800d2f4:	68fa      	ldr	r2, [r7, #12]
 800d2f6:	4313      	orrs	r3, r2
 800d2f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	4a21      	ldr	r2, [pc, #132]	; (800d384 <TIM_Base_SetConfig+0xbc>)
 800d2fe:	4293      	cmp	r3, r2
 800d300:	d00b      	beq.n	800d31a <TIM_Base_SetConfig+0x52>
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d308:	d007      	beq.n	800d31a <TIM_Base_SetConfig+0x52>
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	4a1e      	ldr	r2, [pc, #120]	; (800d388 <TIM_Base_SetConfig+0xc0>)
 800d30e:	4293      	cmp	r3, r2
 800d310:	d003      	beq.n	800d31a <TIM_Base_SetConfig+0x52>
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	4a1d      	ldr	r2, [pc, #116]	; (800d38c <TIM_Base_SetConfig+0xc4>)
 800d316:	4293      	cmp	r3, r2
 800d318:	d108      	bne.n	800d32c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d320:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	68db      	ldr	r3, [r3, #12]
 800d326:	68fa      	ldr	r2, [r7, #12]
 800d328:	4313      	orrs	r3, r2
 800d32a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	695b      	ldr	r3, [r3, #20]
 800d336:	4313      	orrs	r3, r2
 800d338:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	68fa      	ldr	r2, [r7, #12]
 800d33e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	689a      	ldr	r2, [r3, #8]
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	681a      	ldr	r2, [r3, #0]
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	4a0c      	ldr	r2, [pc, #48]	; (800d384 <TIM_Base_SetConfig+0xbc>)
 800d354:	4293      	cmp	r3, r2
 800d356:	d007      	beq.n	800d368 <TIM_Base_SetConfig+0xa0>
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	4a0b      	ldr	r2, [pc, #44]	; (800d388 <TIM_Base_SetConfig+0xc0>)
 800d35c:	4293      	cmp	r3, r2
 800d35e:	d003      	beq.n	800d368 <TIM_Base_SetConfig+0xa0>
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	4a0a      	ldr	r2, [pc, #40]	; (800d38c <TIM_Base_SetConfig+0xc4>)
 800d364:	4293      	cmp	r3, r2
 800d366:	d103      	bne.n	800d370 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	691a      	ldr	r2, [r3, #16]
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2201      	movs	r2, #1
 800d374:	615a      	str	r2, [r3, #20]
}
 800d376:	bf00      	nop
 800d378:	3714      	adds	r7, #20
 800d37a:	46bd      	mov	sp, r7
 800d37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d380:	4770      	bx	lr
 800d382:	bf00      	nop
 800d384:	40012c00 	.word	0x40012c00
 800d388:	40014000 	.word	0x40014000
 800d38c:	40014400 	.word	0x40014400

0800d390 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d390:	b480      	push	{r7}
 800d392:	b087      	sub	sp, #28
 800d394:	af00      	add	r7, sp, #0
 800d396:	60f8      	str	r0, [r7, #12]
 800d398:	60b9      	str	r1, [r7, #8]
 800d39a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	6a1b      	ldr	r3, [r3, #32]
 800d3a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	6a1b      	ldr	r3, [r3, #32]
 800d3a6:	f023 0201 	bic.w	r2, r3, #1
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	699b      	ldr	r3, [r3, #24]
 800d3b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d3b4:	693b      	ldr	r3, [r7, #16]
 800d3b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d3ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	011b      	lsls	r3, r3, #4
 800d3c0:	693a      	ldr	r2, [r7, #16]
 800d3c2:	4313      	orrs	r3, r2
 800d3c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d3c6:	697b      	ldr	r3, [r7, #20]
 800d3c8:	f023 030a 	bic.w	r3, r3, #10
 800d3cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d3ce:	697a      	ldr	r2, [r7, #20]
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	4313      	orrs	r3, r2
 800d3d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	693a      	ldr	r2, [r7, #16]
 800d3da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	697a      	ldr	r2, [r7, #20]
 800d3e0:	621a      	str	r2, [r3, #32]
}
 800d3e2:	bf00      	nop
 800d3e4:	371c      	adds	r7, #28
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ec:	4770      	bx	lr

0800d3ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d3ee:	b480      	push	{r7}
 800d3f0:	b087      	sub	sp, #28
 800d3f2:	af00      	add	r7, sp, #0
 800d3f4:	60f8      	str	r0, [r7, #12]
 800d3f6:	60b9      	str	r1, [r7, #8]
 800d3f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	6a1b      	ldr	r3, [r3, #32]
 800d3fe:	f023 0210 	bic.w	r2, r3, #16
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	699b      	ldr	r3, [r3, #24]
 800d40a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	6a1b      	ldr	r3, [r3, #32]
 800d410:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d412:	697b      	ldr	r3, [r7, #20]
 800d414:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d418:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	031b      	lsls	r3, r3, #12
 800d41e:	697a      	ldr	r2, [r7, #20]
 800d420:	4313      	orrs	r3, r2
 800d422:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d424:	693b      	ldr	r3, [r7, #16]
 800d426:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d42a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	011b      	lsls	r3, r3, #4
 800d430:	693a      	ldr	r2, [r7, #16]
 800d432:	4313      	orrs	r3, r2
 800d434:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	697a      	ldr	r2, [r7, #20]
 800d43a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	693a      	ldr	r2, [r7, #16]
 800d440:	621a      	str	r2, [r3, #32]
}
 800d442:	bf00      	nop
 800d444:	371c      	adds	r7, #28
 800d446:	46bd      	mov	sp, r7
 800d448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44c:	4770      	bx	lr

0800d44e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d44e:	b480      	push	{r7}
 800d450:	b085      	sub	sp, #20
 800d452:	af00      	add	r7, sp, #0
 800d454:	6078      	str	r0, [r7, #4]
 800d456:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	689b      	ldr	r3, [r3, #8]
 800d45c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d464:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d466:	683a      	ldr	r2, [r7, #0]
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	4313      	orrs	r3, r2
 800d46c:	f043 0307 	orr.w	r3, r3, #7
 800d470:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	68fa      	ldr	r2, [r7, #12]
 800d476:	609a      	str	r2, [r3, #8]
}
 800d478:	bf00      	nop
 800d47a:	3714      	adds	r7, #20
 800d47c:	46bd      	mov	sp, r7
 800d47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d482:	4770      	bx	lr

0800d484 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d484:	b480      	push	{r7}
 800d486:	b087      	sub	sp, #28
 800d488:	af00      	add	r7, sp, #0
 800d48a:	60f8      	str	r0, [r7, #12]
 800d48c:	60b9      	str	r1, [r7, #8]
 800d48e:	607a      	str	r2, [r7, #4]
 800d490:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	689b      	ldr	r3, [r3, #8]
 800d496:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d498:	697b      	ldr	r3, [r7, #20]
 800d49a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d49e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	021a      	lsls	r2, r3, #8
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	431a      	orrs	r2, r3
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	4313      	orrs	r3, r2
 800d4ac:	697a      	ldr	r2, [r7, #20]
 800d4ae:	4313      	orrs	r3, r2
 800d4b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	697a      	ldr	r2, [r7, #20]
 800d4b6:	609a      	str	r2, [r3, #8]
}
 800d4b8:	bf00      	nop
 800d4ba:	371c      	adds	r7, #28
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c2:	4770      	bx	lr

0800d4c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b085      	sub	sp, #20
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
 800d4cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d4d4:	2b01      	cmp	r3, #1
 800d4d6:	d101      	bne.n	800d4dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d4d8:	2302      	movs	r3, #2
 800d4da:	e04f      	b.n	800d57c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2201      	movs	r2, #1
 800d4e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2202      	movs	r2, #2
 800d4e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	685b      	ldr	r3, [r3, #4]
 800d4f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	689b      	ldr	r3, [r3, #8]
 800d4fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	4a21      	ldr	r2, [pc, #132]	; (800d588 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800d502:	4293      	cmp	r3, r2
 800d504:	d108      	bne.n	800d518 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d50c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	685b      	ldr	r3, [r3, #4]
 800d512:	68fa      	ldr	r2, [r7, #12]
 800d514:	4313      	orrs	r3, r2
 800d516:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d51e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	68fa      	ldr	r2, [r7, #12]
 800d526:	4313      	orrs	r3, r2
 800d528:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	68fa      	ldr	r2, [r7, #12]
 800d530:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	4a14      	ldr	r2, [pc, #80]	; (800d588 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800d538:	4293      	cmp	r3, r2
 800d53a:	d009      	beq.n	800d550 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d544:	d004      	beq.n	800d550 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	4a10      	ldr	r2, [pc, #64]	; (800d58c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800d54c:	4293      	cmp	r3, r2
 800d54e:	d10c      	bne.n	800d56a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d550:	68bb      	ldr	r3, [r7, #8]
 800d552:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d556:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d558:	683b      	ldr	r3, [r7, #0]
 800d55a:	689b      	ldr	r3, [r3, #8]
 800d55c:	68ba      	ldr	r2, [r7, #8]
 800d55e:	4313      	orrs	r3, r2
 800d560:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	68ba      	ldr	r2, [r7, #8]
 800d568:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	2201      	movs	r2, #1
 800d56e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	2200      	movs	r2, #0
 800d576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d57a:	2300      	movs	r3, #0
}
 800d57c:	4618      	mov	r0, r3
 800d57e:	3714      	adds	r7, #20
 800d580:	46bd      	mov	sp, r7
 800d582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d586:	4770      	bx	lr
 800d588:	40012c00 	.word	0x40012c00
 800d58c:	40014000 	.word	0x40014000

0800d590 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d590:	b480      	push	{r7}
 800d592:	b083      	sub	sp, #12
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d598:	bf00      	nop
 800d59a:	370c      	adds	r7, #12
 800d59c:	46bd      	mov	sp, r7
 800d59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a2:	4770      	bx	lr

0800d5a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d5a4:	b480      	push	{r7}
 800d5a6:	b083      	sub	sp, #12
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d5ac:	bf00      	nop
 800d5ae:	370c      	adds	r7, #12
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b6:	4770      	bx	lr

0800d5b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d5b8:	b480      	push	{r7}
 800d5ba:	b083      	sub	sp, #12
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d5c0:	bf00      	nop
 800d5c2:	370c      	adds	r7, #12
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ca:	4770      	bx	lr

0800d5cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b082      	sub	sp, #8
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d101      	bne.n	800d5de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d5da:	2301      	movs	r3, #1
 800d5dc:	e040      	b.n	800d660 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d106      	bne.n	800d5f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	f7f7 f898 	bl	8004724 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2224      	movs	r2, #36	; 0x24
 800d5f8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	681a      	ldr	r2, [r3, #0]
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	f022 0201 	bic.w	r2, r2, #1
 800d608:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d60a:	6878      	ldr	r0, [r7, #4]
 800d60c:	f000 fbe8 	bl	800dde0 <UART_SetConfig>
 800d610:	4603      	mov	r3, r0
 800d612:	2b01      	cmp	r3, #1
 800d614:	d101      	bne.n	800d61a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800d616:	2301      	movs	r3, #1
 800d618:	e022      	b.n	800d660 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d002      	beq.n	800d628 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800d622:	6878      	ldr	r0, [r7, #4]
 800d624:	f000 fe36 	bl	800e294 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	685a      	ldr	r2, [r3, #4]
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d636:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	689a      	ldr	r2, [r3, #8]
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d646:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	681a      	ldr	r2, [r3, #0]
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	f042 0201 	orr.w	r2, r2, #1
 800d656:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d658:	6878      	ldr	r0, [r7, #4]
 800d65a:	f000 febd 	bl	800e3d8 <UART_CheckIdleState>
 800d65e:	4603      	mov	r3, r0
}
 800d660:	4618      	mov	r0, r3
 800d662:	3708      	adds	r7, #8
 800d664:	46bd      	mov	sp, r7
 800d666:	bd80      	pop	{r7, pc}

0800d668 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800d668:	b480      	push	{r7}
 800d66a:	b08b      	sub	sp, #44	; 0x2c
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	60f8      	str	r0, [r7, #12]
 800d670:	60b9      	str	r1, [r7, #8]
 800d672:	4613      	mov	r3, r2
 800d674:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d67a:	2b20      	cmp	r3, #32
 800d67c:	d156      	bne.n	800d72c <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800d67e:	68bb      	ldr	r3, [r7, #8]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d002      	beq.n	800d68a <HAL_UART_Transmit_IT+0x22>
 800d684:	88fb      	ldrh	r3, [r7, #6]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d101      	bne.n	800d68e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800d68a:	2301      	movs	r3, #1
 800d68c:	e04f      	b.n	800d72e <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800d694:	2b01      	cmp	r3, #1
 800d696:	d101      	bne.n	800d69c <HAL_UART_Transmit_IT+0x34>
 800d698:	2302      	movs	r3, #2
 800d69a:	e048      	b.n	800d72e <HAL_UART_Transmit_IT+0xc6>
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	2201      	movs	r2, #1
 800d6a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	68ba      	ldr	r2, [r7, #8]
 800d6a8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	88fa      	ldrh	r2, [r7, #6]
 800d6ae:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	88fa      	ldrh	r2, [r7, #6]
 800d6b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	2200      	movs	r2, #0
 800d6be:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	2221      	movs	r2, #33	; 0x21
 800d6cc:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	689b      	ldr	r3, [r3, #8]
 800d6d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d6d6:	d107      	bne.n	800d6e8 <HAL_UART_Transmit_IT+0x80>
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	691b      	ldr	r3, [r3, #16]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d103      	bne.n	800d6e8 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	4a16      	ldr	r2, [pc, #88]	; (800d73c <HAL_UART_Transmit_IT+0xd4>)
 800d6e4:	669a      	str	r2, [r3, #104]	; 0x68
 800d6e6:	e002      	b.n	800d6ee <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	4a15      	ldr	r2, [pc, #84]	; (800d740 <HAL_UART_Transmit_IT+0xd8>)
 800d6ec:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6fc:	697b      	ldr	r3, [r7, #20]
 800d6fe:	e853 3f00 	ldrex	r3, [r3]
 800d702:	613b      	str	r3, [r7, #16]
   return(result);
 800d704:	693b      	ldr	r3, [r7, #16]
 800d706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d70a:	627b      	str	r3, [r7, #36]	; 0x24
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	461a      	mov	r2, r3
 800d712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d714:	623b      	str	r3, [r7, #32]
 800d716:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d718:	69f9      	ldr	r1, [r7, #28]
 800d71a:	6a3a      	ldr	r2, [r7, #32]
 800d71c:	e841 2300 	strex	r3, r2, [r1]
 800d720:	61bb      	str	r3, [r7, #24]
   return(result);
 800d722:	69bb      	ldr	r3, [r7, #24]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d1e6      	bne.n	800d6f6 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800d728:	2300      	movs	r3, #0
 800d72a:	e000      	b.n	800d72e <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800d72c:	2302      	movs	r3, #2
  }
}
 800d72e:	4618      	mov	r0, r3
 800d730:	372c      	adds	r7, #44	; 0x2c
 800d732:	46bd      	mov	sp, r7
 800d734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d738:	4770      	bx	lr
 800d73a:	bf00      	nop
 800d73c:	0800e933 	.word	0x0800e933
 800d740:	0800e87b 	.word	0x0800e87b

0800d744 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b08a      	sub	sp, #40	; 0x28
 800d748:	af00      	add	r7, sp, #0
 800d74a:	60f8      	str	r0, [r7, #12]
 800d74c:	60b9      	str	r1, [r7, #8]
 800d74e:	4613      	mov	r3, r2
 800d750:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d756:	2b20      	cmp	r3, #32
 800d758:	d142      	bne.n	800d7e0 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800d75a:	68bb      	ldr	r3, [r7, #8]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d002      	beq.n	800d766 <HAL_UART_Receive_IT+0x22>
 800d760:	88fb      	ldrh	r3, [r7, #6]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d101      	bne.n	800d76a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800d766:	2301      	movs	r3, #1
 800d768:	e03b      	b.n	800d7e2 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800d770:	2b01      	cmp	r3, #1
 800d772:	d101      	bne.n	800d778 <HAL_UART_Receive_IT+0x34>
 800d774:	2302      	movs	r3, #2
 800d776:	e034      	b.n	800d7e2 <HAL_UART_Receive_IT+0x9e>
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	2201      	movs	r2, #1
 800d77c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	2200      	movs	r2, #0
 800d784:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	4a18      	ldr	r2, [pc, #96]	; (800d7ec <HAL_UART_Receive_IT+0xa8>)
 800d78c:	4293      	cmp	r3, r2
 800d78e:	d01f      	beq.n	800d7d0 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	685b      	ldr	r3, [r3, #4]
 800d796:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d018      	beq.n	800d7d0 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7a4:	697b      	ldr	r3, [r7, #20]
 800d7a6:	e853 3f00 	ldrex	r3, [r3]
 800d7aa:	613b      	str	r3, [r7, #16]
   return(result);
 800d7ac:	693b      	ldr	r3, [r7, #16]
 800d7ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d7b2:	627b      	str	r3, [r7, #36]	; 0x24
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	461a      	mov	r2, r3
 800d7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7bc:	623b      	str	r3, [r7, #32]
 800d7be:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7c0:	69f9      	ldr	r1, [r7, #28]
 800d7c2:	6a3a      	ldr	r2, [r7, #32]
 800d7c4:	e841 2300 	strex	r3, r2, [r1]
 800d7c8:	61bb      	str	r3, [r7, #24]
   return(result);
 800d7ca:	69bb      	ldr	r3, [r7, #24]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d1e6      	bne.n	800d79e <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d7d0:	88fb      	ldrh	r3, [r7, #6]
 800d7d2:	461a      	mov	r2, r3
 800d7d4:	68b9      	ldr	r1, [r7, #8]
 800d7d6:	68f8      	ldr	r0, [r7, #12]
 800d7d8:	f000 ff0c 	bl	800e5f4 <UART_Start_Receive_IT>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	e000      	b.n	800d7e2 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800d7e0:	2302      	movs	r3, #2
  }
}
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	3728      	adds	r7, #40	; 0x28
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}
 800d7ea:	bf00      	nop
 800d7ec:	40008000 	.word	0x40008000

0800d7f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b0ba      	sub	sp, #232	; 0xe8
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	69db      	ldr	r3, [r3, #28]
 800d7fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	689b      	ldr	r3, [r3, #8]
 800d812:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d816:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d81a:	f640 030f 	movw	r3, #2063	; 0x80f
 800d81e:	4013      	ands	r3, r2
 800d820:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d824:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d115      	bne.n	800d858 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800d82c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d830:	f003 0320 	and.w	r3, r3, #32
 800d834:	2b00      	cmp	r3, #0
 800d836:	d00f      	beq.n	800d858 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800d838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d83c:	f003 0320 	and.w	r3, r3, #32
 800d840:	2b00      	cmp	r3, #0
 800d842:	d009      	beq.n	800d858 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d848:	2b00      	cmp	r3, #0
 800d84a:	f000 82a6 	beq.w	800dd9a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d852:	6878      	ldr	r0, [r7, #4]
 800d854:	4798      	blx	r3
      }
      return;
 800d856:	e2a0      	b.n	800dd9a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800d858:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	f000 8117 	beq.w	800da90 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800d862:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d866:	f003 0301 	and.w	r3, r3, #1
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d106      	bne.n	800d87c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800d86e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d872:	4b85      	ldr	r3, [pc, #532]	; (800da88 <HAL_UART_IRQHandler+0x298>)
 800d874:	4013      	ands	r3, r2
 800d876:	2b00      	cmp	r3, #0
 800d878:	f000 810a 	beq.w	800da90 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d87c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d880:	f003 0301 	and.w	r3, r3, #1
 800d884:	2b00      	cmp	r3, #0
 800d886:	d011      	beq.n	800d8ac <HAL_UART_IRQHandler+0xbc>
 800d888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d88c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d890:	2b00      	cmp	r3, #0
 800d892:	d00b      	beq.n	800d8ac <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	2201      	movs	r2, #1
 800d89a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d8a2:	f043 0201 	orr.w	r2, r3, #1
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d8ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8b0:	f003 0302 	and.w	r3, r3, #2
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d011      	beq.n	800d8dc <HAL_UART_IRQHandler+0xec>
 800d8b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d8bc:	f003 0301 	and.w	r3, r3, #1
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d00b      	beq.n	800d8dc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	2202      	movs	r2, #2
 800d8ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d8d2:	f043 0204 	orr.w	r2, r3, #4
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d8dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8e0:	f003 0304 	and.w	r3, r3, #4
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d011      	beq.n	800d90c <HAL_UART_IRQHandler+0x11c>
 800d8e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d8ec:	f003 0301 	and.w	r3, r3, #1
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d00b      	beq.n	800d90c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	2204      	movs	r2, #4
 800d8fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d902:	f043 0202 	orr.w	r2, r3, #2
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d90c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d910:	f003 0308 	and.w	r3, r3, #8
 800d914:	2b00      	cmp	r3, #0
 800d916:	d017      	beq.n	800d948 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800d918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d91c:	f003 0320 	and.w	r3, r3, #32
 800d920:	2b00      	cmp	r3, #0
 800d922:	d105      	bne.n	800d930 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800d924:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d928:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d00b      	beq.n	800d948 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	2208      	movs	r2, #8
 800d936:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d93e:	f043 0208 	orr.w	r2, r3, #8
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d94c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d950:	2b00      	cmp	r3, #0
 800d952:	d012      	beq.n	800d97a <HAL_UART_IRQHandler+0x18a>
 800d954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d958:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d00c      	beq.n	800d97a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d968:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d970:	f043 0220 	orr.w	r2, r3, #32
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d980:	2b00      	cmp	r3, #0
 800d982:	f000 820c 	beq.w	800dd9e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800d986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d98a:	f003 0320 	and.w	r3, r3, #32
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d00d      	beq.n	800d9ae <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800d992:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d996:	f003 0320 	and.w	r3, r3, #32
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d007      	beq.n	800d9ae <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d003      	beq.n	800d9ae <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d9b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	689b      	ldr	r3, [r3, #8]
 800d9be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9c2:	2b40      	cmp	r3, #64	; 0x40
 800d9c4:	d005      	beq.n	800d9d2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d9c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d9ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d04f      	beq.n	800da72 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	f000 fed8 	bl	800e788 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	689b      	ldr	r3, [r3, #8]
 800d9de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9e2:	2b40      	cmp	r3, #64	; 0x40
 800d9e4:	d141      	bne.n	800da6a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	3308      	adds	r3, #8
 800d9ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d9f4:	e853 3f00 	ldrex	r3, [r3]
 800d9f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d9fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800da00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	3308      	adds	r3, #8
 800da0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800da12:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800da16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800da1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800da22:	e841 2300 	strex	r3, r2, [r1]
 800da26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800da2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d1d9      	bne.n	800d9e6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da36:	2b00      	cmp	r3, #0
 800da38:	d013      	beq.n	800da62 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da3e:	4a13      	ldr	r2, [pc, #76]	; (800da8c <HAL_UART_IRQHandler+0x29c>)
 800da40:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da46:	4618      	mov	r0, r3
 800da48:	f7fc fb5b 	bl	800a102 <HAL_DMA_Abort_IT>
 800da4c:	4603      	mov	r3, r0
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d017      	beq.n	800da82 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da58:	687a      	ldr	r2, [r7, #4]
 800da5a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800da5c:	4610      	mov	r0, r2
 800da5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da60:	e00f      	b.n	800da82 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800da62:	6878      	ldr	r0, [r7, #4]
 800da64:	f000 f9a6 	bl	800ddb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da68:	e00b      	b.n	800da82 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800da6a:	6878      	ldr	r0, [r7, #4]
 800da6c:	f000 f9a2 	bl	800ddb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da70:	e007      	b.n	800da82 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800da72:	6878      	ldr	r0, [r7, #4]
 800da74:	f000 f99e 	bl	800ddb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	2200      	movs	r2, #0
 800da7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800da80:	e18d      	b.n	800dd9e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da82:	bf00      	nop
    return;
 800da84:	e18b      	b.n	800dd9e <HAL_UART_IRQHandler+0x5ae>
 800da86:	bf00      	nop
 800da88:	04000120 	.word	0x04000120
 800da8c:	0800e84f 	.word	0x0800e84f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800da94:	2b01      	cmp	r3, #1
 800da96:	f040 8146 	bne.w	800dd26 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800da9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da9e:	f003 0310 	and.w	r3, r3, #16
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	f000 813f 	beq.w	800dd26 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800daa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800daac:	f003 0310 	and.w	r3, r3, #16
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	f000 8138 	beq.w	800dd26 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	2210      	movs	r2, #16
 800dabc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	689b      	ldr	r3, [r3, #8]
 800dac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dac8:	2b40      	cmp	r3, #64	; 0x40
 800daca:	f040 80b4 	bne.w	800dc36 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	685b      	ldr	r3, [r3, #4]
 800dad6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800dada:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800dade:	2b00      	cmp	r3, #0
 800dae0:	f000 815f 	beq.w	800dda2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800daea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800daee:	429a      	cmp	r2, r3
 800daf0:	f080 8157 	bcs.w	800dda2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800dafa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	f003 0320 	and.w	r3, r3, #32
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	f040 8085 	bne.w	800dc1a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800db1c:	e853 3f00 	ldrex	r3, [r3]
 800db20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800db24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800db28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800db2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	461a      	mov	r2, r3
 800db36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800db3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800db3e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db42:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800db46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800db4a:	e841 2300 	strex	r3, r2, [r1]
 800db4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800db52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800db56:	2b00      	cmp	r3, #0
 800db58:	d1da      	bne.n	800db10 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	3308      	adds	r3, #8
 800db60:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800db64:	e853 3f00 	ldrex	r3, [r3]
 800db68:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800db6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800db6c:	f023 0301 	bic.w	r3, r3, #1
 800db70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	3308      	adds	r3, #8
 800db7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800db7e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800db82:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db84:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800db86:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800db8a:	e841 2300 	strex	r3, r2, [r1]
 800db8e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800db90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800db92:	2b00      	cmp	r3, #0
 800db94:	d1e1      	bne.n	800db5a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	3308      	adds	r3, #8
 800db9c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dba0:	e853 3f00 	ldrex	r3, [r3]
 800dba4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800dba6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dba8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dbac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	3308      	adds	r3, #8
 800dbb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800dbba:	66fa      	str	r2, [r7, #108]	; 0x6c
 800dbbc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbbe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800dbc0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dbc2:	e841 2300 	strex	r3, r2, [r1]
 800dbc6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800dbc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d1e3      	bne.n	800db96 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	2220      	movs	r2, #32
 800dbd2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbe2:	e853 3f00 	ldrex	r3, [r3]
 800dbe6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800dbe8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dbea:	f023 0310 	bic.w	r3, r3, #16
 800dbee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	461a      	mov	r2, r3
 800dbf8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dbfc:	65bb      	str	r3, [r7, #88]	; 0x58
 800dbfe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dc02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dc04:	e841 2300 	strex	r3, r2, [r1]
 800dc08:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800dc0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d1e4      	bne.n	800dbda <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc14:	4618      	mov	r0, r3
 800dc16:	f7fc fa36 	bl	800a086 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800dc26:	b29b      	uxth	r3, r3
 800dc28:	1ad3      	subs	r3, r2, r3
 800dc2a:	b29b      	uxth	r3, r3
 800dc2c:	4619      	mov	r1, r3
 800dc2e:	6878      	ldr	r0, [r7, #4]
 800dc30:	f000 f8ca 	bl	800ddc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dc34:	e0b5      	b.n	800dda2 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800dc42:	b29b      	uxth	r3, r3
 800dc44:	1ad3      	subs	r3, r2, r3
 800dc46:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800dc50:	b29b      	uxth	r3, r3
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	f000 80a7 	beq.w	800dda6 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800dc58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	f000 80a2 	beq.w	800dda6 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc6a:	e853 3f00 	ldrex	r3, [r3]
 800dc6e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dc70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dc76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	461a      	mov	r2, r3
 800dc80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dc84:	647b      	str	r3, [r7, #68]	; 0x44
 800dc86:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc88:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dc8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dc8c:	e841 2300 	strex	r3, r2, [r1]
 800dc90:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dc92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d1e4      	bne.n	800dc62 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	3308      	adds	r3, #8
 800dc9e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca2:	e853 3f00 	ldrex	r3, [r3]
 800dca6:	623b      	str	r3, [r7, #32]
   return(result);
 800dca8:	6a3b      	ldr	r3, [r7, #32]
 800dcaa:	f023 0301 	bic.w	r3, r3, #1
 800dcae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	3308      	adds	r3, #8
 800dcb8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800dcbc:	633a      	str	r2, [r7, #48]	; 0x30
 800dcbe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcc0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dcc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dcc4:	e841 2300 	strex	r3, r2, [r1]
 800dcc8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dcca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d1e3      	bne.n	800dc98 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	2220      	movs	r2, #32
 800dcd4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2200      	movs	r2, #0
 800dcda:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	2200      	movs	r2, #0
 800dce0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dce8:	693b      	ldr	r3, [r7, #16]
 800dcea:	e853 3f00 	ldrex	r3, [r3]
 800dcee:	60fb      	str	r3, [r7, #12]
   return(result);
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	f023 0310 	bic.w	r3, r3, #16
 800dcf6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	461a      	mov	r2, r3
 800dd00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800dd04:	61fb      	str	r3, [r7, #28]
 800dd06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd08:	69b9      	ldr	r1, [r7, #24]
 800dd0a:	69fa      	ldr	r2, [r7, #28]
 800dd0c:	e841 2300 	strex	r3, r2, [r1]
 800dd10:	617b      	str	r3, [r7, #20]
   return(result);
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d1e4      	bne.n	800dce2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800dd18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dd1c:	4619      	mov	r1, r3
 800dd1e:	6878      	ldr	r0, [r7, #4]
 800dd20:	f000 f852 	bl	800ddc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dd24:	e03f      	b.n	800dda6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800dd26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d00e      	beq.n	800dd50 <HAL_UART_IRQHandler+0x560>
 800dd32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dd36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d008      	beq.n	800dd50 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800dd46:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800dd48:	6878      	ldr	r0, [r7, #4]
 800dd4a:	f000 ffdc 	bl	800ed06 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dd4e:	e02d      	b.n	800ddac <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800dd50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d00e      	beq.n	800dd7a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800dd5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dd60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d008      	beq.n	800dd7a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d01c      	beq.n	800ddaa <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd74:	6878      	ldr	r0, [r7, #4]
 800dd76:	4798      	blx	r3
    }
    return;
 800dd78:	e017      	b.n	800ddaa <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800dd7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d012      	beq.n	800ddac <HAL_UART_IRQHandler+0x5bc>
 800dd86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dd8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d00c      	beq.n	800ddac <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800dd92:	6878      	ldr	r0, [r7, #4]
 800dd94:	f000 fe2d 	bl	800e9f2 <UART_EndTransmit_IT>
    return;
 800dd98:	e008      	b.n	800ddac <HAL_UART_IRQHandler+0x5bc>
      return;
 800dd9a:	bf00      	nop
 800dd9c:	e006      	b.n	800ddac <HAL_UART_IRQHandler+0x5bc>
    return;
 800dd9e:	bf00      	nop
 800dda0:	e004      	b.n	800ddac <HAL_UART_IRQHandler+0x5bc>
      return;
 800dda2:	bf00      	nop
 800dda4:	e002      	b.n	800ddac <HAL_UART_IRQHandler+0x5bc>
      return;
 800dda6:	bf00      	nop
 800dda8:	e000      	b.n	800ddac <HAL_UART_IRQHandler+0x5bc>
    return;
 800ddaa:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800ddac:	37e8      	adds	r7, #232	; 0xe8
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	bd80      	pop	{r7, pc}
 800ddb2:	bf00      	nop

0800ddb4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ddb4:	b480      	push	{r7}
 800ddb6:	b083      	sub	sp, #12
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ddbc:	bf00      	nop
 800ddbe:	370c      	adds	r7, #12
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc6:	4770      	bx	lr

0800ddc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ddc8:	b480      	push	{r7}
 800ddca:	b083      	sub	sp, #12
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
 800ddd0:	460b      	mov	r3, r1
 800ddd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ddd4:	bf00      	nop
 800ddd6:	370c      	adds	r7, #12
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddde:	4770      	bx	lr

0800dde0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dde0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dde4:	b08a      	sub	sp, #40	; 0x28
 800dde6:	af00      	add	r7, sp, #0
 800dde8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ddea:	2300      	movs	r3, #0
 800ddec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	689a      	ldr	r2, [r3, #8]
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	691b      	ldr	r3, [r3, #16]
 800ddf8:	431a      	orrs	r2, r3
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	695b      	ldr	r3, [r3, #20]
 800ddfe:	431a      	orrs	r2, r3
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	69db      	ldr	r3, [r3, #28]
 800de04:	4313      	orrs	r3, r2
 800de06:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	681a      	ldr	r2, [r3, #0]
 800de0e:	4b9e      	ldr	r3, [pc, #632]	; (800e088 <UART_SetConfig+0x2a8>)
 800de10:	4013      	ands	r3, r2
 800de12:	68fa      	ldr	r2, [r7, #12]
 800de14:	6812      	ldr	r2, [r2, #0]
 800de16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800de18:	430b      	orrs	r3, r1
 800de1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	685b      	ldr	r3, [r3, #4]
 800de22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	68da      	ldr	r2, [r3, #12]
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	430a      	orrs	r2, r1
 800de30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	699b      	ldr	r3, [r3, #24]
 800de36:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	4a93      	ldr	r2, [pc, #588]	; (800e08c <UART_SetConfig+0x2ac>)
 800de3e:	4293      	cmp	r3, r2
 800de40:	d004      	beq.n	800de4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	6a1b      	ldr	r3, [r3, #32]
 800de46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de48:	4313      	orrs	r3, r2
 800de4a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	689b      	ldr	r3, [r3, #8]
 800de52:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de5c:	430a      	orrs	r2, r1
 800de5e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	4a8a      	ldr	r2, [pc, #552]	; (800e090 <UART_SetConfig+0x2b0>)
 800de66:	4293      	cmp	r3, r2
 800de68:	d126      	bne.n	800deb8 <UART_SetConfig+0xd8>
 800de6a:	4b8a      	ldr	r3, [pc, #552]	; (800e094 <UART_SetConfig+0x2b4>)
 800de6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de70:	f003 0303 	and.w	r3, r3, #3
 800de74:	2b03      	cmp	r3, #3
 800de76:	d81b      	bhi.n	800deb0 <UART_SetConfig+0xd0>
 800de78:	a201      	add	r2, pc, #4	; (adr r2, 800de80 <UART_SetConfig+0xa0>)
 800de7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de7e:	bf00      	nop
 800de80:	0800de91 	.word	0x0800de91
 800de84:	0800dea1 	.word	0x0800dea1
 800de88:	0800de99 	.word	0x0800de99
 800de8c:	0800dea9 	.word	0x0800dea9
 800de90:	2301      	movs	r3, #1
 800de92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800de96:	e0ab      	b.n	800dff0 <UART_SetConfig+0x210>
 800de98:	2302      	movs	r3, #2
 800de9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800de9e:	e0a7      	b.n	800dff0 <UART_SetConfig+0x210>
 800dea0:	2304      	movs	r3, #4
 800dea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dea6:	e0a3      	b.n	800dff0 <UART_SetConfig+0x210>
 800dea8:	2308      	movs	r3, #8
 800deaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800deae:	e09f      	b.n	800dff0 <UART_SetConfig+0x210>
 800deb0:	2310      	movs	r3, #16
 800deb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800deb6:	e09b      	b.n	800dff0 <UART_SetConfig+0x210>
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	4a76      	ldr	r2, [pc, #472]	; (800e098 <UART_SetConfig+0x2b8>)
 800debe:	4293      	cmp	r3, r2
 800dec0:	d138      	bne.n	800df34 <UART_SetConfig+0x154>
 800dec2:	4b74      	ldr	r3, [pc, #464]	; (800e094 <UART_SetConfig+0x2b4>)
 800dec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dec8:	f003 030c 	and.w	r3, r3, #12
 800decc:	2b0c      	cmp	r3, #12
 800dece:	d82d      	bhi.n	800df2c <UART_SetConfig+0x14c>
 800ded0:	a201      	add	r2, pc, #4	; (adr r2, 800ded8 <UART_SetConfig+0xf8>)
 800ded2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ded6:	bf00      	nop
 800ded8:	0800df0d 	.word	0x0800df0d
 800dedc:	0800df2d 	.word	0x0800df2d
 800dee0:	0800df2d 	.word	0x0800df2d
 800dee4:	0800df2d 	.word	0x0800df2d
 800dee8:	0800df1d 	.word	0x0800df1d
 800deec:	0800df2d 	.word	0x0800df2d
 800def0:	0800df2d 	.word	0x0800df2d
 800def4:	0800df2d 	.word	0x0800df2d
 800def8:	0800df15 	.word	0x0800df15
 800defc:	0800df2d 	.word	0x0800df2d
 800df00:	0800df2d 	.word	0x0800df2d
 800df04:	0800df2d 	.word	0x0800df2d
 800df08:	0800df25 	.word	0x0800df25
 800df0c:	2300      	movs	r3, #0
 800df0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800df12:	e06d      	b.n	800dff0 <UART_SetConfig+0x210>
 800df14:	2302      	movs	r3, #2
 800df16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800df1a:	e069      	b.n	800dff0 <UART_SetConfig+0x210>
 800df1c:	2304      	movs	r3, #4
 800df1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800df22:	e065      	b.n	800dff0 <UART_SetConfig+0x210>
 800df24:	2308      	movs	r3, #8
 800df26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800df2a:	e061      	b.n	800dff0 <UART_SetConfig+0x210>
 800df2c:	2310      	movs	r3, #16
 800df2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800df32:	e05d      	b.n	800dff0 <UART_SetConfig+0x210>
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	4a58      	ldr	r2, [pc, #352]	; (800e09c <UART_SetConfig+0x2bc>)
 800df3a:	4293      	cmp	r3, r2
 800df3c:	d125      	bne.n	800df8a <UART_SetConfig+0x1aa>
 800df3e:	4b55      	ldr	r3, [pc, #340]	; (800e094 <UART_SetConfig+0x2b4>)
 800df40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df44:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800df48:	2b30      	cmp	r3, #48	; 0x30
 800df4a:	d016      	beq.n	800df7a <UART_SetConfig+0x19a>
 800df4c:	2b30      	cmp	r3, #48	; 0x30
 800df4e:	d818      	bhi.n	800df82 <UART_SetConfig+0x1a2>
 800df50:	2b20      	cmp	r3, #32
 800df52:	d00a      	beq.n	800df6a <UART_SetConfig+0x18a>
 800df54:	2b20      	cmp	r3, #32
 800df56:	d814      	bhi.n	800df82 <UART_SetConfig+0x1a2>
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d002      	beq.n	800df62 <UART_SetConfig+0x182>
 800df5c:	2b10      	cmp	r3, #16
 800df5e:	d008      	beq.n	800df72 <UART_SetConfig+0x192>
 800df60:	e00f      	b.n	800df82 <UART_SetConfig+0x1a2>
 800df62:	2300      	movs	r3, #0
 800df64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800df68:	e042      	b.n	800dff0 <UART_SetConfig+0x210>
 800df6a:	2302      	movs	r3, #2
 800df6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800df70:	e03e      	b.n	800dff0 <UART_SetConfig+0x210>
 800df72:	2304      	movs	r3, #4
 800df74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800df78:	e03a      	b.n	800dff0 <UART_SetConfig+0x210>
 800df7a:	2308      	movs	r3, #8
 800df7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800df80:	e036      	b.n	800dff0 <UART_SetConfig+0x210>
 800df82:	2310      	movs	r3, #16
 800df84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800df88:	e032      	b.n	800dff0 <UART_SetConfig+0x210>
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	4a3f      	ldr	r2, [pc, #252]	; (800e08c <UART_SetConfig+0x2ac>)
 800df90:	4293      	cmp	r3, r2
 800df92:	d12a      	bne.n	800dfea <UART_SetConfig+0x20a>
 800df94:	4b3f      	ldr	r3, [pc, #252]	; (800e094 <UART_SetConfig+0x2b4>)
 800df96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df9a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800df9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800dfa2:	d01a      	beq.n	800dfda <UART_SetConfig+0x1fa>
 800dfa4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800dfa8:	d81b      	bhi.n	800dfe2 <UART_SetConfig+0x202>
 800dfaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dfae:	d00c      	beq.n	800dfca <UART_SetConfig+0x1ea>
 800dfb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dfb4:	d815      	bhi.n	800dfe2 <UART_SetConfig+0x202>
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d003      	beq.n	800dfc2 <UART_SetConfig+0x1e2>
 800dfba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dfbe:	d008      	beq.n	800dfd2 <UART_SetConfig+0x1f2>
 800dfc0:	e00f      	b.n	800dfe2 <UART_SetConfig+0x202>
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dfc8:	e012      	b.n	800dff0 <UART_SetConfig+0x210>
 800dfca:	2302      	movs	r3, #2
 800dfcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dfd0:	e00e      	b.n	800dff0 <UART_SetConfig+0x210>
 800dfd2:	2304      	movs	r3, #4
 800dfd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dfd8:	e00a      	b.n	800dff0 <UART_SetConfig+0x210>
 800dfda:	2308      	movs	r3, #8
 800dfdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dfe0:	e006      	b.n	800dff0 <UART_SetConfig+0x210>
 800dfe2:	2310      	movs	r3, #16
 800dfe4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dfe8:	e002      	b.n	800dff0 <UART_SetConfig+0x210>
 800dfea:	2310      	movs	r3, #16
 800dfec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	4a25      	ldr	r2, [pc, #148]	; (800e08c <UART_SetConfig+0x2ac>)
 800dff6:	4293      	cmp	r3, r2
 800dff8:	f040 808a 	bne.w	800e110 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dffc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e000:	2b08      	cmp	r3, #8
 800e002:	d824      	bhi.n	800e04e <UART_SetConfig+0x26e>
 800e004:	a201      	add	r2, pc, #4	; (adr r2, 800e00c <UART_SetConfig+0x22c>)
 800e006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e00a:	bf00      	nop
 800e00c:	0800e031 	.word	0x0800e031
 800e010:	0800e04f 	.word	0x0800e04f
 800e014:	0800e039 	.word	0x0800e039
 800e018:	0800e04f 	.word	0x0800e04f
 800e01c:	0800e03f 	.word	0x0800e03f
 800e020:	0800e04f 	.word	0x0800e04f
 800e024:	0800e04f 	.word	0x0800e04f
 800e028:	0800e04f 	.word	0x0800e04f
 800e02c:	0800e047 	.word	0x0800e047
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e030:	f7fd fe60 	bl	800bcf4 <HAL_RCC_GetPCLK1Freq>
 800e034:	61f8      	str	r0, [r7, #28]
        break;
 800e036:	e010      	b.n	800e05a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e038:	4b19      	ldr	r3, [pc, #100]	; (800e0a0 <UART_SetConfig+0x2c0>)
 800e03a:	61fb      	str	r3, [r7, #28]
        break;
 800e03c:	e00d      	b.n	800e05a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e03e:	f7fd fdc1 	bl	800bbc4 <HAL_RCC_GetSysClockFreq>
 800e042:	61f8      	str	r0, [r7, #28]
        break;
 800e044:	e009      	b.n	800e05a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e04a:	61fb      	str	r3, [r7, #28]
        break;
 800e04c:	e005      	b.n	800e05a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800e04e:	2300      	movs	r3, #0
 800e050:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e052:	2301      	movs	r3, #1
 800e054:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800e058:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e05a:	69fb      	ldr	r3, [r7, #28]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	f000 8109 	beq.w	800e274 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	685a      	ldr	r2, [r3, #4]
 800e066:	4613      	mov	r3, r2
 800e068:	005b      	lsls	r3, r3, #1
 800e06a:	4413      	add	r3, r2
 800e06c:	69fa      	ldr	r2, [r7, #28]
 800e06e:	429a      	cmp	r2, r3
 800e070:	d305      	bcc.n	800e07e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	685b      	ldr	r3, [r3, #4]
 800e076:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e078:	69fa      	ldr	r2, [r7, #28]
 800e07a:	429a      	cmp	r2, r3
 800e07c:	d912      	bls.n	800e0a4 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800e07e:	2301      	movs	r3, #1
 800e080:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800e084:	e0f6      	b.n	800e274 <UART_SetConfig+0x494>
 800e086:	bf00      	nop
 800e088:	efff69f3 	.word	0xefff69f3
 800e08c:	40008000 	.word	0x40008000
 800e090:	40013800 	.word	0x40013800
 800e094:	40021000 	.word	0x40021000
 800e098:	40004400 	.word	0x40004400
 800e09c:	40004800 	.word	0x40004800
 800e0a0:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800e0a4:	69fb      	ldr	r3, [r7, #28]
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	461c      	mov	r4, r3
 800e0aa:	4615      	mov	r5, r2
 800e0ac:	f04f 0200 	mov.w	r2, #0
 800e0b0:	f04f 0300 	mov.w	r3, #0
 800e0b4:	022b      	lsls	r3, r5, #8
 800e0b6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800e0ba:	0222      	lsls	r2, r4, #8
 800e0bc:	68f9      	ldr	r1, [r7, #12]
 800e0be:	6849      	ldr	r1, [r1, #4]
 800e0c0:	0849      	lsrs	r1, r1, #1
 800e0c2:	2000      	movs	r0, #0
 800e0c4:	4688      	mov	r8, r1
 800e0c6:	4681      	mov	r9, r0
 800e0c8:	eb12 0a08 	adds.w	sl, r2, r8
 800e0cc:	eb43 0b09 	adc.w	fp, r3, r9
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	685b      	ldr	r3, [r3, #4]
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	603b      	str	r3, [r7, #0]
 800e0d8:	607a      	str	r2, [r7, #4]
 800e0da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e0de:	4650      	mov	r0, sl
 800e0e0:	4659      	mov	r1, fp
 800e0e2:	f7f2 f873 	bl	80001cc <__aeabi_uldivmod>
 800e0e6:	4602      	mov	r2, r0
 800e0e8:	460b      	mov	r3, r1
 800e0ea:	4613      	mov	r3, r2
 800e0ec:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e0ee:	69bb      	ldr	r3, [r7, #24]
 800e0f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e0f4:	d308      	bcc.n	800e108 <UART_SetConfig+0x328>
 800e0f6:	69bb      	ldr	r3, [r7, #24]
 800e0f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e0fc:	d204      	bcs.n	800e108 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	69ba      	ldr	r2, [r7, #24]
 800e104:	60da      	str	r2, [r3, #12]
 800e106:	e0b5      	b.n	800e274 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800e108:	2301      	movs	r3, #1
 800e10a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800e10e:	e0b1      	b.n	800e274 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	69db      	ldr	r3, [r3, #28]
 800e114:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e118:	d15d      	bne.n	800e1d6 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800e11a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e11e:	2b08      	cmp	r3, #8
 800e120:	d827      	bhi.n	800e172 <UART_SetConfig+0x392>
 800e122:	a201      	add	r2, pc, #4	; (adr r2, 800e128 <UART_SetConfig+0x348>)
 800e124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e128:	0800e14d 	.word	0x0800e14d
 800e12c:	0800e155 	.word	0x0800e155
 800e130:	0800e15d 	.word	0x0800e15d
 800e134:	0800e173 	.word	0x0800e173
 800e138:	0800e163 	.word	0x0800e163
 800e13c:	0800e173 	.word	0x0800e173
 800e140:	0800e173 	.word	0x0800e173
 800e144:	0800e173 	.word	0x0800e173
 800e148:	0800e16b 	.word	0x0800e16b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e14c:	f7fd fdd2 	bl	800bcf4 <HAL_RCC_GetPCLK1Freq>
 800e150:	61f8      	str	r0, [r7, #28]
        break;
 800e152:	e014      	b.n	800e17e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e154:	f7fd fde4 	bl	800bd20 <HAL_RCC_GetPCLK2Freq>
 800e158:	61f8      	str	r0, [r7, #28]
        break;
 800e15a:	e010      	b.n	800e17e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e15c:	4b4c      	ldr	r3, [pc, #304]	; (800e290 <UART_SetConfig+0x4b0>)
 800e15e:	61fb      	str	r3, [r7, #28]
        break;
 800e160:	e00d      	b.n	800e17e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e162:	f7fd fd2f 	bl	800bbc4 <HAL_RCC_GetSysClockFreq>
 800e166:	61f8      	str	r0, [r7, #28]
        break;
 800e168:	e009      	b.n	800e17e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e16a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e16e:	61fb      	str	r3, [r7, #28]
        break;
 800e170:	e005      	b.n	800e17e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800e172:	2300      	movs	r3, #0
 800e174:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e176:	2301      	movs	r3, #1
 800e178:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800e17c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e17e:	69fb      	ldr	r3, [r7, #28]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d077      	beq.n	800e274 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e184:	69fb      	ldr	r3, [r7, #28]
 800e186:	005a      	lsls	r2, r3, #1
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	685b      	ldr	r3, [r3, #4]
 800e18c:	085b      	lsrs	r3, r3, #1
 800e18e:	441a      	add	r2, r3
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	685b      	ldr	r3, [r3, #4]
 800e194:	fbb2 f3f3 	udiv	r3, r2, r3
 800e198:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e19a:	69bb      	ldr	r3, [r7, #24]
 800e19c:	2b0f      	cmp	r3, #15
 800e19e:	d916      	bls.n	800e1ce <UART_SetConfig+0x3ee>
 800e1a0:	69bb      	ldr	r3, [r7, #24]
 800e1a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e1a6:	d212      	bcs.n	800e1ce <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e1a8:	69bb      	ldr	r3, [r7, #24]
 800e1aa:	b29b      	uxth	r3, r3
 800e1ac:	f023 030f 	bic.w	r3, r3, #15
 800e1b0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e1b2:	69bb      	ldr	r3, [r7, #24]
 800e1b4:	085b      	lsrs	r3, r3, #1
 800e1b6:	b29b      	uxth	r3, r3
 800e1b8:	f003 0307 	and.w	r3, r3, #7
 800e1bc:	b29a      	uxth	r2, r3
 800e1be:	8afb      	ldrh	r3, [r7, #22]
 800e1c0:	4313      	orrs	r3, r2
 800e1c2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	8afa      	ldrh	r2, [r7, #22]
 800e1ca:	60da      	str	r2, [r3, #12]
 800e1cc:	e052      	b.n	800e274 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800e1ce:	2301      	movs	r3, #1
 800e1d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800e1d4:	e04e      	b.n	800e274 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e1d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e1da:	2b08      	cmp	r3, #8
 800e1dc:	d827      	bhi.n	800e22e <UART_SetConfig+0x44e>
 800e1de:	a201      	add	r2, pc, #4	; (adr r2, 800e1e4 <UART_SetConfig+0x404>)
 800e1e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1e4:	0800e209 	.word	0x0800e209
 800e1e8:	0800e211 	.word	0x0800e211
 800e1ec:	0800e219 	.word	0x0800e219
 800e1f0:	0800e22f 	.word	0x0800e22f
 800e1f4:	0800e21f 	.word	0x0800e21f
 800e1f8:	0800e22f 	.word	0x0800e22f
 800e1fc:	0800e22f 	.word	0x0800e22f
 800e200:	0800e22f 	.word	0x0800e22f
 800e204:	0800e227 	.word	0x0800e227
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e208:	f7fd fd74 	bl	800bcf4 <HAL_RCC_GetPCLK1Freq>
 800e20c:	61f8      	str	r0, [r7, #28]
        break;
 800e20e:	e014      	b.n	800e23a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e210:	f7fd fd86 	bl	800bd20 <HAL_RCC_GetPCLK2Freq>
 800e214:	61f8      	str	r0, [r7, #28]
        break;
 800e216:	e010      	b.n	800e23a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e218:	4b1d      	ldr	r3, [pc, #116]	; (800e290 <UART_SetConfig+0x4b0>)
 800e21a:	61fb      	str	r3, [r7, #28]
        break;
 800e21c:	e00d      	b.n	800e23a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e21e:	f7fd fcd1 	bl	800bbc4 <HAL_RCC_GetSysClockFreq>
 800e222:	61f8      	str	r0, [r7, #28]
        break;
 800e224:	e009      	b.n	800e23a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e22a:	61fb      	str	r3, [r7, #28]
        break;
 800e22c:	e005      	b.n	800e23a <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800e22e:	2300      	movs	r3, #0
 800e230:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e232:	2301      	movs	r3, #1
 800e234:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800e238:	bf00      	nop
    }

    if (pclk != 0U)
 800e23a:	69fb      	ldr	r3, [r7, #28]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d019      	beq.n	800e274 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	685b      	ldr	r3, [r3, #4]
 800e244:	085a      	lsrs	r2, r3, #1
 800e246:	69fb      	ldr	r3, [r7, #28]
 800e248:	441a      	add	r2, r3
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	685b      	ldr	r3, [r3, #4]
 800e24e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e252:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e254:	69bb      	ldr	r3, [r7, #24]
 800e256:	2b0f      	cmp	r3, #15
 800e258:	d909      	bls.n	800e26e <UART_SetConfig+0x48e>
 800e25a:	69bb      	ldr	r3, [r7, #24]
 800e25c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e260:	d205      	bcs.n	800e26e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e262:	69bb      	ldr	r3, [r7, #24]
 800e264:	b29a      	uxth	r2, r3
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	60da      	str	r2, [r3, #12]
 800e26c:	e002      	b.n	800e274 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800e26e:	2301      	movs	r3, #1
 800e270:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	2200      	movs	r2, #0
 800e278:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	2200      	movs	r2, #0
 800e27e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800e280:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800e284:	4618      	mov	r0, r3
 800e286:	3728      	adds	r7, #40	; 0x28
 800e288:	46bd      	mov	sp, r7
 800e28a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e28e:	bf00      	nop
 800e290:	00f42400 	.word	0x00f42400

0800e294 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e294:	b480      	push	{r7}
 800e296:	b083      	sub	sp, #12
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2a0:	f003 0301 	and.w	r3, r3, #1
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d00a      	beq.n	800e2be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	685b      	ldr	r3, [r3, #4]
 800e2ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	430a      	orrs	r2, r1
 800e2bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2c2:	f003 0302 	and.w	r3, r3, #2
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d00a      	beq.n	800e2e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	685b      	ldr	r3, [r3, #4]
 800e2d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	430a      	orrs	r2, r1
 800e2de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2e4:	f003 0304 	and.w	r3, r3, #4
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d00a      	beq.n	800e302 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	685b      	ldr	r3, [r3, #4]
 800e2f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	430a      	orrs	r2, r1
 800e300:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e306:	f003 0308 	and.w	r3, r3, #8
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d00a      	beq.n	800e324 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	685b      	ldr	r3, [r3, #4]
 800e314:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	430a      	orrs	r2, r1
 800e322:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e328:	f003 0310 	and.w	r3, r3, #16
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d00a      	beq.n	800e346 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	689b      	ldr	r3, [r3, #8]
 800e336:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	430a      	orrs	r2, r1
 800e344:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e34a:	f003 0320 	and.w	r3, r3, #32
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d00a      	beq.n	800e368 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	689b      	ldr	r3, [r3, #8]
 800e358:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	430a      	orrs	r2, r1
 800e366:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e36c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e370:	2b00      	cmp	r3, #0
 800e372:	d01a      	beq.n	800e3aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	685b      	ldr	r3, [r3, #4]
 800e37a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	430a      	orrs	r2, r1
 800e388:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e38e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e392:	d10a      	bne.n	800e3aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	685b      	ldr	r3, [r3, #4]
 800e39a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	430a      	orrs	r2, r1
 800e3a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d00a      	beq.n	800e3cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	685b      	ldr	r3, [r3, #4]
 800e3bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	430a      	orrs	r2, r1
 800e3ca:	605a      	str	r2, [r3, #4]
  }
}
 800e3cc:	bf00      	nop
 800e3ce:	370c      	adds	r7, #12
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d6:	4770      	bx	lr

0800e3d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b086      	sub	sp, #24
 800e3dc:	af02      	add	r7, sp, #8
 800e3de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e3e8:	f7fb fd0c 	bl	8009e04 <HAL_GetTick>
 800e3ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	f003 0308 	and.w	r3, r3, #8
 800e3f8:	2b08      	cmp	r3, #8
 800e3fa:	d10e      	bne.n	800e41a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e3fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e400:	9300      	str	r3, [sp, #0]
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	2200      	movs	r2, #0
 800e406:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e40a:	6878      	ldr	r0, [r7, #4]
 800e40c:	f000 f82d 	bl	800e46a <UART_WaitOnFlagUntilTimeout>
 800e410:	4603      	mov	r3, r0
 800e412:	2b00      	cmp	r3, #0
 800e414:	d001      	beq.n	800e41a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e416:	2303      	movs	r3, #3
 800e418:	e023      	b.n	800e462 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	f003 0304 	and.w	r3, r3, #4
 800e424:	2b04      	cmp	r3, #4
 800e426:	d10e      	bne.n	800e446 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e428:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e42c:	9300      	str	r3, [sp, #0]
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	2200      	movs	r2, #0
 800e432:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e436:	6878      	ldr	r0, [r7, #4]
 800e438:	f000 f817 	bl	800e46a <UART_WaitOnFlagUntilTimeout>
 800e43c:	4603      	mov	r3, r0
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d001      	beq.n	800e446 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e442:	2303      	movs	r3, #3
 800e444:	e00d      	b.n	800e462 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	2220      	movs	r2, #32
 800e44a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	2220      	movs	r2, #32
 800e450:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	2200      	movs	r2, #0
 800e456:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	2200      	movs	r2, #0
 800e45c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800e460:	2300      	movs	r3, #0
}
 800e462:	4618      	mov	r0, r3
 800e464:	3710      	adds	r7, #16
 800e466:	46bd      	mov	sp, r7
 800e468:	bd80      	pop	{r7, pc}

0800e46a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e46a:	b580      	push	{r7, lr}
 800e46c:	b09c      	sub	sp, #112	; 0x70
 800e46e:	af00      	add	r7, sp, #0
 800e470:	60f8      	str	r0, [r7, #12]
 800e472:	60b9      	str	r1, [r7, #8]
 800e474:	603b      	str	r3, [r7, #0]
 800e476:	4613      	mov	r3, r2
 800e478:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e47a:	e0a5      	b.n	800e5c8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e47c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e47e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e482:	f000 80a1 	beq.w	800e5c8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e486:	f7fb fcbd 	bl	8009e04 <HAL_GetTick>
 800e48a:	4602      	mov	r2, r0
 800e48c:	683b      	ldr	r3, [r7, #0]
 800e48e:	1ad3      	subs	r3, r2, r3
 800e490:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e492:	429a      	cmp	r2, r3
 800e494:	d302      	bcc.n	800e49c <UART_WaitOnFlagUntilTimeout+0x32>
 800e496:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d13e      	bne.n	800e51a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4a4:	e853 3f00 	ldrex	r3, [r3]
 800e4a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e4aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e4b0:	667b      	str	r3, [r7, #100]	; 0x64
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	461a      	mov	r2, r3
 800e4b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e4ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e4bc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e4c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e4c2:	e841 2300 	strex	r3, r2, [r1]
 800e4c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e4c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d1e6      	bne.n	800e49c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	3308      	adds	r3, #8
 800e4d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4d8:	e853 3f00 	ldrex	r3, [r3]
 800e4dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4e0:	f023 0301 	bic.w	r3, r3, #1
 800e4e4:	663b      	str	r3, [r7, #96]	; 0x60
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	3308      	adds	r3, #8
 800e4ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e4ee:	64ba      	str	r2, [r7, #72]	; 0x48
 800e4f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e4f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e4f6:	e841 2300 	strex	r3, r2, [r1]
 800e4fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e4fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d1e5      	bne.n	800e4ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	2220      	movs	r2, #32
 800e506:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	2220      	movs	r2, #32
 800e50c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	2200      	movs	r2, #0
 800e512:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800e516:	2303      	movs	r3, #3
 800e518:	e067      	b.n	800e5ea <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	f003 0304 	and.w	r3, r3, #4
 800e524:	2b00      	cmp	r3, #0
 800e526:	d04f      	beq.n	800e5c8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	69db      	ldr	r3, [r3, #28]
 800e52e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e532:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e536:	d147      	bne.n	800e5c8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e540:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e54a:	e853 3f00 	ldrex	r3, [r3]
 800e54e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e552:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e556:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	461a      	mov	r2, r3
 800e55e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e560:	637b      	str	r3, [r7, #52]	; 0x34
 800e562:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e564:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e566:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e568:	e841 2300 	strex	r3, r2, [r1]
 800e56c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e56e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e570:	2b00      	cmp	r3, #0
 800e572:	d1e6      	bne.n	800e542 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	3308      	adds	r3, #8
 800e57a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e57c:	697b      	ldr	r3, [r7, #20]
 800e57e:	e853 3f00 	ldrex	r3, [r3]
 800e582:	613b      	str	r3, [r7, #16]
   return(result);
 800e584:	693b      	ldr	r3, [r7, #16]
 800e586:	f023 0301 	bic.w	r3, r3, #1
 800e58a:	66bb      	str	r3, [r7, #104]	; 0x68
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	3308      	adds	r3, #8
 800e592:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e594:	623a      	str	r2, [r7, #32]
 800e596:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e598:	69f9      	ldr	r1, [r7, #28]
 800e59a:	6a3a      	ldr	r2, [r7, #32]
 800e59c:	e841 2300 	strex	r3, r2, [r1]
 800e5a0:	61bb      	str	r3, [r7, #24]
   return(result);
 800e5a2:	69bb      	ldr	r3, [r7, #24]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d1e5      	bne.n	800e574 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	2220      	movs	r2, #32
 800e5ac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	2220      	movs	r2, #32
 800e5b2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	2220      	movs	r2, #32
 800e5b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	2200      	movs	r2, #0
 800e5c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800e5c4:	2303      	movs	r3, #3
 800e5c6:	e010      	b.n	800e5ea <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	69da      	ldr	r2, [r3, #28]
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	4013      	ands	r3, r2
 800e5d2:	68ba      	ldr	r2, [r7, #8]
 800e5d4:	429a      	cmp	r2, r3
 800e5d6:	bf0c      	ite	eq
 800e5d8:	2301      	moveq	r3, #1
 800e5da:	2300      	movne	r3, #0
 800e5dc:	b2db      	uxtb	r3, r3
 800e5de:	461a      	mov	r2, r3
 800e5e0:	79fb      	ldrb	r3, [r7, #7]
 800e5e2:	429a      	cmp	r2, r3
 800e5e4:	f43f af4a 	beq.w	800e47c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e5e8:	2300      	movs	r3, #0
}
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	3770      	adds	r7, #112	; 0x70
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}
	...

0800e5f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e5f4:	b480      	push	{r7}
 800e5f6:	b097      	sub	sp, #92	; 0x5c
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	60f8      	str	r0, [r7, #12]
 800e5fc:	60b9      	str	r1, [r7, #8]
 800e5fe:	4613      	mov	r3, r2
 800e600:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	68ba      	ldr	r2, [r7, #8]
 800e606:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	88fa      	ldrh	r2, [r7, #6]
 800e60c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	88fa      	ldrh	r2, [r7, #6]
 800e614:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	2200      	movs	r2, #0
 800e61c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	689b      	ldr	r3, [r3, #8]
 800e622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e626:	d10e      	bne.n	800e646 <UART_Start_Receive_IT+0x52>
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	691b      	ldr	r3, [r3, #16]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d105      	bne.n	800e63c <UART_Start_Receive_IT+0x48>
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	f240 12ff 	movw	r2, #511	; 0x1ff
 800e636:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e63a:	e02d      	b.n	800e698 <UART_Start_Receive_IT+0xa4>
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	22ff      	movs	r2, #255	; 0xff
 800e640:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e644:	e028      	b.n	800e698 <UART_Start_Receive_IT+0xa4>
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	689b      	ldr	r3, [r3, #8]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d10d      	bne.n	800e66a <UART_Start_Receive_IT+0x76>
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	691b      	ldr	r3, [r3, #16]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d104      	bne.n	800e660 <UART_Start_Receive_IT+0x6c>
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	22ff      	movs	r2, #255	; 0xff
 800e65a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e65e:	e01b      	b.n	800e698 <UART_Start_Receive_IT+0xa4>
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	227f      	movs	r2, #127	; 0x7f
 800e664:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e668:	e016      	b.n	800e698 <UART_Start_Receive_IT+0xa4>
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	689b      	ldr	r3, [r3, #8]
 800e66e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e672:	d10d      	bne.n	800e690 <UART_Start_Receive_IT+0x9c>
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	691b      	ldr	r3, [r3, #16]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d104      	bne.n	800e686 <UART_Start_Receive_IT+0x92>
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	227f      	movs	r2, #127	; 0x7f
 800e680:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e684:	e008      	b.n	800e698 <UART_Start_Receive_IT+0xa4>
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	223f      	movs	r2, #63	; 0x3f
 800e68a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e68e:	e003      	b.n	800e698 <UART_Start_Receive_IT+0xa4>
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	2200      	movs	r2, #0
 800e694:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	2200      	movs	r2, #0
 800e69c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	2222      	movs	r2, #34	; 0x22
 800e6a4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	3308      	adds	r3, #8
 800e6ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6b0:	e853 3f00 	ldrex	r3, [r3]
 800e6b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e6b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6b8:	f043 0301 	orr.w	r3, r3, #1
 800e6bc:	657b      	str	r3, [r7, #84]	; 0x54
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	3308      	adds	r3, #8
 800e6c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e6c6:	64ba      	str	r2, [r7, #72]	; 0x48
 800e6c8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e6cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e6ce:	e841 2300 	strex	r3, r2, [r1]
 800e6d2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e6d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d1e5      	bne.n	800e6a6 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	689b      	ldr	r3, [r3, #8]
 800e6de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e6e2:	d107      	bne.n	800e6f4 <UART_Start_Receive_IT+0x100>
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	691b      	ldr	r3, [r3, #16]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d103      	bne.n	800e6f4 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	4a24      	ldr	r2, [pc, #144]	; (800e780 <UART_Start_Receive_IT+0x18c>)
 800e6f0:	665a      	str	r2, [r3, #100]	; 0x64
 800e6f2:	e002      	b.n	800e6fa <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	4a23      	ldr	r2, [pc, #140]	; (800e784 <UART_Start_Receive_IT+0x190>)
 800e6f8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	691b      	ldr	r3, [r3, #16]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d019      	beq.n	800e73e <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e712:	e853 3f00 	ldrex	r3, [r3]
 800e716:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e71a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800e71e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	461a      	mov	r2, r3
 800e726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e728:	637b      	str	r3, [r7, #52]	; 0x34
 800e72a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e72c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e72e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e730:	e841 2300 	strex	r3, r2, [r1]
 800e734:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d1e6      	bne.n	800e70a <UART_Start_Receive_IT+0x116>
 800e73c:	e018      	b.n	800e770 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e744:	697b      	ldr	r3, [r7, #20]
 800e746:	e853 3f00 	ldrex	r3, [r3]
 800e74a:	613b      	str	r3, [r7, #16]
   return(result);
 800e74c:	693b      	ldr	r3, [r7, #16]
 800e74e:	f043 0320 	orr.w	r3, r3, #32
 800e752:	653b      	str	r3, [r7, #80]	; 0x50
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	461a      	mov	r2, r3
 800e75a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e75c:	623b      	str	r3, [r7, #32]
 800e75e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e760:	69f9      	ldr	r1, [r7, #28]
 800e762:	6a3a      	ldr	r2, [r7, #32]
 800e764:	e841 2300 	strex	r3, r2, [r1]
 800e768:	61bb      	str	r3, [r7, #24]
   return(result);
 800e76a:	69bb      	ldr	r3, [r7, #24]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d1e6      	bne.n	800e73e <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800e770:	2300      	movs	r3, #0
}
 800e772:	4618      	mov	r0, r3
 800e774:	375c      	adds	r7, #92	; 0x5c
 800e776:	46bd      	mov	sp, r7
 800e778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77c:	4770      	bx	lr
 800e77e:	bf00      	nop
 800e780:	0800eba7 	.word	0x0800eba7
 800e784:	0800ea47 	.word	0x0800ea47

0800e788 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e788:	b480      	push	{r7}
 800e78a:	b095      	sub	sp, #84	; 0x54
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e798:	e853 3f00 	ldrex	r3, [r3]
 800e79c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e7a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	461a      	mov	r2, r3
 800e7ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7ae:	643b      	str	r3, [r7, #64]	; 0x40
 800e7b0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e7b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e7b6:	e841 2300 	strex	r3, r2, [r1]
 800e7ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d1e6      	bne.n	800e790 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	3308      	adds	r3, #8
 800e7c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7ca:	6a3b      	ldr	r3, [r7, #32]
 800e7cc:	e853 3f00 	ldrex	r3, [r3]
 800e7d0:	61fb      	str	r3, [r7, #28]
   return(result);
 800e7d2:	69fb      	ldr	r3, [r7, #28]
 800e7d4:	f023 0301 	bic.w	r3, r3, #1
 800e7d8:	64bb      	str	r3, [r7, #72]	; 0x48
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	3308      	adds	r3, #8
 800e7e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e7e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e7e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e7e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e7ea:	e841 2300 	strex	r3, r2, [r1]
 800e7ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d1e5      	bne.n	800e7c2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e7fa:	2b01      	cmp	r3, #1
 800e7fc:	d118      	bne.n	800e830 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	e853 3f00 	ldrex	r3, [r3]
 800e80a:	60bb      	str	r3, [r7, #8]
   return(result);
 800e80c:	68bb      	ldr	r3, [r7, #8]
 800e80e:	f023 0310 	bic.w	r3, r3, #16
 800e812:	647b      	str	r3, [r7, #68]	; 0x44
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	461a      	mov	r2, r3
 800e81a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e81c:	61bb      	str	r3, [r7, #24]
 800e81e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e820:	6979      	ldr	r1, [r7, #20]
 800e822:	69ba      	ldr	r2, [r7, #24]
 800e824:	e841 2300 	strex	r3, r2, [r1]
 800e828:	613b      	str	r3, [r7, #16]
   return(result);
 800e82a:	693b      	ldr	r3, [r7, #16]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d1e6      	bne.n	800e7fe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	2220      	movs	r2, #32
 800e834:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	2200      	movs	r2, #0
 800e83a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	2200      	movs	r2, #0
 800e840:	665a      	str	r2, [r3, #100]	; 0x64
}
 800e842:	bf00      	nop
 800e844:	3754      	adds	r7, #84	; 0x54
 800e846:	46bd      	mov	sp, r7
 800e848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84c:	4770      	bx	lr

0800e84e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e84e:	b580      	push	{r7, lr}
 800e850:	b084      	sub	sp, #16
 800e852:	af00      	add	r7, sp, #0
 800e854:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e85a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	2200      	movs	r2, #0
 800e860:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	2200      	movs	r2, #0
 800e868:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e86c:	68f8      	ldr	r0, [r7, #12]
 800e86e:	f7ff faa1 	bl	800ddb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e872:	bf00      	nop
 800e874:	3710      	adds	r7, #16
 800e876:	46bd      	mov	sp, r7
 800e878:	bd80      	pop	{r7, pc}

0800e87a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e87a:	b480      	push	{r7}
 800e87c:	b08f      	sub	sp, #60	; 0x3c
 800e87e:	af00      	add	r7, sp, #0
 800e880:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e886:	2b21      	cmp	r3, #33	; 0x21
 800e888:	d14d      	bne.n	800e926 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e890:	b29b      	uxth	r3, r3
 800e892:	2b00      	cmp	r3, #0
 800e894:	d132      	bne.n	800e8fc <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e89c:	6a3b      	ldr	r3, [r7, #32]
 800e89e:	e853 3f00 	ldrex	r3, [r3]
 800e8a2:	61fb      	str	r3, [r7, #28]
   return(result);
 800e8a4:	69fb      	ldr	r3, [r7, #28]
 800e8a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e8aa:	637b      	str	r3, [r7, #52]	; 0x34
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	461a      	mov	r2, r3
 800e8b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e8b6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e8ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e8bc:	e841 2300 	strex	r3, r2, [r1]
 800e8c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d1e6      	bne.n	800e896 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	e853 3f00 	ldrex	r3, [r3]
 800e8d4:	60bb      	str	r3, [r7, #8]
   return(result);
 800e8d6:	68bb      	ldr	r3, [r7, #8]
 800e8d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e8dc:	633b      	str	r3, [r7, #48]	; 0x30
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	461a      	mov	r2, r3
 800e8e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8e6:	61bb      	str	r3, [r7, #24]
 800e8e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8ea:	6979      	ldr	r1, [r7, #20]
 800e8ec:	69ba      	ldr	r2, [r7, #24]
 800e8ee:	e841 2300 	strex	r3, r2, [r1]
 800e8f2:	613b      	str	r3, [r7, #16]
   return(result);
 800e8f4:	693b      	ldr	r3, [r7, #16]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d1e6      	bne.n	800e8c8 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800e8fa:	e014      	b.n	800e926 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e900:	781a      	ldrb	r2, [r3, #0]
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	b292      	uxth	r2, r2
 800e908:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e90e:	1c5a      	adds	r2, r3, #1
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e91a:	b29b      	uxth	r3, r3
 800e91c:	3b01      	subs	r3, #1
 800e91e:	b29a      	uxth	r2, r3
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800e926:	bf00      	nop
 800e928:	373c      	adds	r7, #60	; 0x3c
 800e92a:	46bd      	mov	sp, r7
 800e92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e930:	4770      	bx	lr

0800e932 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e932:	b480      	push	{r7}
 800e934:	b091      	sub	sp, #68	; 0x44
 800e936:	af00      	add	r7, sp, #0
 800e938:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e93e:	2b21      	cmp	r3, #33	; 0x21
 800e940:	d151      	bne.n	800e9e6 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e948:	b29b      	uxth	r3, r3
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d132      	bne.n	800e9b4 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e956:	e853 3f00 	ldrex	r3, [r3]
 800e95a:	623b      	str	r3, [r7, #32]
   return(result);
 800e95c:	6a3b      	ldr	r3, [r7, #32]
 800e95e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e962:	63bb      	str	r3, [r7, #56]	; 0x38
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	461a      	mov	r2, r3
 800e96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e96c:	633b      	str	r3, [r7, #48]	; 0x30
 800e96e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e970:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e972:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e974:	e841 2300 	strex	r3, r2, [r1]
 800e978:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d1e6      	bne.n	800e94e <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e986:	693b      	ldr	r3, [r7, #16]
 800e988:	e853 3f00 	ldrex	r3, [r3]
 800e98c:	60fb      	str	r3, [r7, #12]
   return(result);
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e994:	637b      	str	r3, [r7, #52]	; 0x34
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	461a      	mov	r2, r3
 800e99c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e99e:	61fb      	str	r3, [r7, #28]
 800e9a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9a2:	69b9      	ldr	r1, [r7, #24]
 800e9a4:	69fa      	ldr	r2, [r7, #28]
 800e9a6:	e841 2300 	strex	r3, r2, [r1]
 800e9aa:	617b      	str	r3, [r7, #20]
   return(result);
 800e9ac:	697b      	ldr	r3, [r7, #20]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d1e6      	bne.n	800e980 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800e9b2:	e018      	b.n	800e9e6 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e9b8:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800e9ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9bc:	881a      	ldrh	r2, [r3, #0]
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e9c6:	b292      	uxth	r2, r2
 800e9c8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e9ce:	1c9a      	adds	r2, r3, #2
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e9da:	b29b      	uxth	r3, r3
 800e9dc:	3b01      	subs	r3, #1
 800e9de:	b29a      	uxth	r2, r3
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800e9e6:	bf00      	nop
 800e9e8:	3744      	adds	r7, #68	; 0x44
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f0:	4770      	bx	lr

0800e9f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e9f2:	b580      	push	{r7, lr}
 800e9f4:	b088      	sub	sp, #32
 800e9f6:	af00      	add	r7, sp, #0
 800e9f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	e853 3f00 	ldrex	r3, [r3]
 800ea06:	60bb      	str	r3, [r7, #8]
   return(result);
 800ea08:	68bb      	ldr	r3, [r7, #8]
 800ea0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ea0e:	61fb      	str	r3, [r7, #28]
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	461a      	mov	r2, r3
 800ea16:	69fb      	ldr	r3, [r7, #28]
 800ea18:	61bb      	str	r3, [r7, #24]
 800ea1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea1c:	6979      	ldr	r1, [r7, #20]
 800ea1e:	69ba      	ldr	r2, [r7, #24]
 800ea20:	e841 2300 	strex	r3, r2, [r1]
 800ea24:	613b      	str	r3, [r7, #16]
   return(result);
 800ea26:	693b      	ldr	r3, [r7, #16]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d1e6      	bne.n	800e9fa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	2220      	movs	r2, #32
 800ea30:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	2200      	movs	r2, #0
 800ea36:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ea38:	6878      	ldr	r0, [r7, #4]
 800ea3a:	f7fb f923 	bl	8009c84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ea3e:	bf00      	nop
 800ea40:	3720      	adds	r7, #32
 800ea42:	46bd      	mov	sp, r7
 800ea44:	bd80      	pop	{r7, pc}

0800ea46 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ea46:	b580      	push	{r7, lr}
 800ea48:	b096      	sub	sp, #88	; 0x58
 800ea4a:	af00      	add	r7, sp, #0
 800ea4c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ea54:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ea5c:	2b22      	cmp	r3, #34	; 0x22
 800ea5e:	f040 8094 	bne.w	800eb8a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ea68:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ea6c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800ea70:	b2d9      	uxtb	r1, r3
 800ea72:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800ea76:	b2da      	uxtb	r2, r3
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea7c:	400a      	ands	r2, r1
 800ea7e:	b2d2      	uxtb	r2, r2
 800ea80:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea86:	1c5a      	adds	r2, r3, #1
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ea92:	b29b      	uxth	r3, r3
 800ea94:	3b01      	subs	r3, #1
 800ea96:	b29a      	uxth	r2, r3
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800eaa4:	b29b      	uxth	r3, r3
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d179      	bne.n	800eb9e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eab2:	e853 3f00 	ldrex	r3, [r3]
 800eab6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800eab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eaba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800eabe:	653b      	str	r3, [r7, #80]	; 0x50
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	461a      	mov	r2, r3
 800eac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eac8:	647b      	str	r3, [r7, #68]	; 0x44
 800eaca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eacc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800eace:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ead0:	e841 2300 	strex	r3, r2, [r1]
 800ead4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ead6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d1e6      	bne.n	800eaaa <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	3308      	adds	r3, #8
 800eae2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eae6:	e853 3f00 	ldrex	r3, [r3]
 800eaea:	623b      	str	r3, [r7, #32]
   return(result);
 800eaec:	6a3b      	ldr	r3, [r7, #32]
 800eaee:	f023 0301 	bic.w	r3, r3, #1
 800eaf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	3308      	adds	r3, #8
 800eafa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800eafc:	633a      	str	r2, [r7, #48]	; 0x30
 800eafe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eb02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb04:	e841 2300 	strex	r3, r2, [r1]
 800eb08:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800eb0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d1e5      	bne.n	800eadc <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	2220      	movs	r2, #32
 800eb14:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	2200      	movs	r2, #0
 800eb1a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eb20:	2b01      	cmp	r3, #1
 800eb22:	d12e      	bne.n	800eb82 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	2200      	movs	r2, #0
 800eb28:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb30:	693b      	ldr	r3, [r7, #16]
 800eb32:	e853 3f00 	ldrex	r3, [r3]
 800eb36:	60fb      	str	r3, [r7, #12]
   return(result);
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	f023 0310 	bic.w	r3, r3, #16
 800eb3e:	64bb      	str	r3, [r7, #72]	; 0x48
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	461a      	mov	r2, r3
 800eb46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb48:	61fb      	str	r3, [r7, #28]
 800eb4a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb4c:	69b9      	ldr	r1, [r7, #24]
 800eb4e:	69fa      	ldr	r2, [r7, #28]
 800eb50:	e841 2300 	strex	r3, r2, [r1]
 800eb54:	617b      	str	r3, [r7, #20]
   return(result);
 800eb56:	697b      	ldr	r3, [r7, #20]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d1e6      	bne.n	800eb2a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	69db      	ldr	r3, [r3, #28]
 800eb62:	f003 0310 	and.w	r3, r3, #16
 800eb66:	2b10      	cmp	r3, #16
 800eb68:	d103      	bne.n	800eb72 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	2210      	movs	r2, #16
 800eb70:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800eb78:	4619      	mov	r1, r3
 800eb7a:	6878      	ldr	r0, [r7, #4]
 800eb7c:	f7ff f924 	bl	800ddc8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800eb80:	e00d      	b.n	800eb9e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800eb82:	6878      	ldr	r0, [r7, #4]
 800eb84:	f7f5 f94a 	bl	8003e1c <HAL_UART_RxCpltCallback>
}
 800eb88:	e009      	b.n	800eb9e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	8b1b      	ldrh	r3, [r3, #24]
 800eb90:	b29a      	uxth	r2, r3
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	f042 0208 	orr.w	r2, r2, #8
 800eb9a:	b292      	uxth	r2, r2
 800eb9c:	831a      	strh	r2, [r3, #24]
}
 800eb9e:	bf00      	nop
 800eba0:	3758      	adds	r7, #88	; 0x58
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bd80      	pop	{r7, pc}

0800eba6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800eba6:	b580      	push	{r7, lr}
 800eba8:	b096      	sub	sp, #88	; 0x58
 800ebaa:	af00      	add	r7, sp, #0
 800ebac:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ebb4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ebbc:	2b22      	cmp	r3, #34	; 0x22
 800ebbe:	f040 8094 	bne.w	800ecea <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ebc8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebd0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800ebd2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800ebd6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800ebda:	4013      	ands	r3, r2
 800ebdc:	b29a      	uxth	r2, r3
 800ebde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ebe0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebe6:	1c9a      	adds	r2, r3, #2
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ebf2:	b29b      	uxth	r3, r3
 800ebf4:	3b01      	subs	r3, #1
 800ebf6:	b29a      	uxth	r2, r3
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ec04:	b29b      	uxth	r3, r3
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d179      	bne.n	800ecfe <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec12:	e853 3f00 	ldrex	r3, [r3]
 800ec16:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ec18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ec1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	461a      	mov	r2, r3
 800ec26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec28:	643b      	str	r3, [r7, #64]	; 0x40
 800ec2a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ec2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ec30:	e841 2300 	strex	r3, r2, [r1]
 800ec34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ec36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d1e6      	bne.n	800ec0a <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	3308      	adds	r3, #8
 800ec42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec44:	6a3b      	ldr	r3, [r7, #32]
 800ec46:	e853 3f00 	ldrex	r3, [r3]
 800ec4a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ec4c:	69fb      	ldr	r3, [r7, #28]
 800ec4e:	f023 0301 	bic.w	r3, r3, #1
 800ec52:	64bb      	str	r3, [r7, #72]	; 0x48
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	3308      	adds	r3, #8
 800ec5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ec5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ec5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ec62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec64:	e841 2300 	strex	r3, r2, [r1]
 800ec68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ec6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d1e5      	bne.n	800ec3c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	2220      	movs	r2, #32
 800ec74:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	2200      	movs	r2, #0
 800ec7a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ec80:	2b01      	cmp	r3, #1
 800ec82:	d12e      	bne.n	800ece2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2200      	movs	r2, #0
 800ec88:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	e853 3f00 	ldrex	r3, [r3]
 800ec96:	60bb      	str	r3, [r7, #8]
   return(result);
 800ec98:	68bb      	ldr	r3, [r7, #8]
 800ec9a:	f023 0310 	bic.w	r3, r3, #16
 800ec9e:	647b      	str	r3, [r7, #68]	; 0x44
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	461a      	mov	r2, r3
 800eca6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eca8:	61bb      	str	r3, [r7, #24]
 800ecaa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecac:	6979      	ldr	r1, [r7, #20]
 800ecae:	69ba      	ldr	r2, [r7, #24]
 800ecb0:	e841 2300 	strex	r3, r2, [r1]
 800ecb4:	613b      	str	r3, [r7, #16]
   return(result);
 800ecb6:	693b      	ldr	r3, [r7, #16]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d1e6      	bne.n	800ec8a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	69db      	ldr	r3, [r3, #28]
 800ecc2:	f003 0310 	and.w	r3, r3, #16
 800ecc6:	2b10      	cmp	r3, #16
 800ecc8:	d103      	bne.n	800ecd2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	2210      	movs	r2, #16
 800ecd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ecd8:	4619      	mov	r1, r3
 800ecda:	6878      	ldr	r0, [r7, #4]
 800ecdc:	f7ff f874 	bl	800ddc8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ece0:	e00d      	b.n	800ecfe <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800ece2:	6878      	ldr	r0, [r7, #4]
 800ece4:	f7f5 f89a 	bl	8003e1c <HAL_UART_RxCpltCallback>
}
 800ece8:	e009      	b.n	800ecfe <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	8b1b      	ldrh	r3, [r3, #24]
 800ecf0:	b29a      	uxth	r2, r3
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	f042 0208 	orr.w	r2, r2, #8
 800ecfa:	b292      	uxth	r2, r2
 800ecfc:	831a      	strh	r2, [r3, #24]
}
 800ecfe:	bf00      	nop
 800ed00:	3758      	adds	r7, #88	; 0x58
 800ed02:	46bd      	mov	sp, r7
 800ed04:	bd80      	pop	{r7, pc}

0800ed06 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ed06:	b480      	push	{r7}
 800ed08:	b083      	sub	sp, #12
 800ed0a:	af00      	add	r7, sp, #0
 800ed0c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ed0e:	bf00      	nop
 800ed10:	370c      	adds	r7, #12
 800ed12:	46bd      	mov	sp, r7
 800ed14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed18:	4770      	bx	lr

0800ed1a <_ZdlPvj>:
 800ed1a:	f000 b800 	b.w	800ed1e <_ZdlPv>

0800ed1e <_ZdlPv>:
 800ed1e:	f000 b825 	b.w	800ed6c <free>
	...

0800ed24 <__libc_init_array>:
 800ed24:	b570      	push	{r4, r5, r6, lr}
 800ed26:	4d0d      	ldr	r5, [pc, #52]	; (800ed5c <__libc_init_array+0x38>)
 800ed28:	4c0d      	ldr	r4, [pc, #52]	; (800ed60 <__libc_init_array+0x3c>)
 800ed2a:	1b64      	subs	r4, r4, r5
 800ed2c:	10a4      	asrs	r4, r4, #2
 800ed2e:	2600      	movs	r6, #0
 800ed30:	42a6      	cmp	r6, r4
 800ed32:	d109      	bne.n	800ed48 <__libc_init_array+0x24>
 800ed34:	4d0b      	ldr	r5, [pc, #44]	; (800ed64 <__libc_init_array+0x40>)
 800ed36:	4c0c      	ldr	r4, [pc, #48]	; (800ed68 <__libc_init_array+0x44>)
 800ed38:	f000 f890 	bl	800ee5c <_init>
 800ed3c:	1b64      	subs	r4, r4, r5
 800ed3e:	10a4      	asrs	r4, r4, #2
 800ed40:	2600      	movs	r6, #0
 800ed42:	42a6      	cmp	r6, r4
 800ed44:	d105      	bne.n	800ed52 <__libc_init_array+0x2e>
 800ed46:	bd70      	pop	{r4, r5, r6, pc}
 800ed48:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed4c:	4798      	blx	r3
 800ed4e:	3601      	adds	r6, #1
 800ed50:	e7ee      	b.n	800ed30 <__libc_init_array+0xc>
 800ed52:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed56:	4798      	blx	r3
 800ed58:	3601      	adds	r6, #1
 800ed5a:	e7f2      	b.n	800ed42 <__libc_init_array+0x1e>
 800ed5c:	0800f134 	.word	0x0800f134
 800ed60:	0800f134 	.word	0x0800f134
 800ed64:	0800f134 	.word	0x0800f134
 800ed68:	0800f13c 	.word	0x0800f13c

0800ed6c <free>:
 800ed6c:	4b02      	ldr	r3, [pc, #8]	; (800ed78 <free+0xc>)
 800ed6e:	4601      	mov	r1, r0
 800ed70:	6818      	ldr	r0, [r3, #0]
 800ed72:	f000 b819 	b.w	800eda8 <_free_r>
 800ed76:	bf00      	nop
 800ed78:	2000000c 	.word	0x2000000c

0800ed7c <memcpy>:
 800ed7c:	440a      	add	r2, r1
 800ed7e:	4291      	cmp	r1, r2
 800ed80:	f100 33ff 	add.w	r3, r0, #4294967295
 800ed84:	d100      	bne.n	800ed88 <memcpy+0xc>
 800ed86:	4770      	bx	lr
 800ed88:	b510      	push	{r4, lr}
 800ed8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ed92:	4291      	cmp	r1, r2
 800ed94:	d1f9      	bne.n	800ed8a <memcpy+0xe>
 800ed96:	bd10      	pop	{r4, pc}

0800ed98 <memset>:
 800ed98:	4402      	add	r2, r0
 800ed9a:	4603      	mov	r3, r0
 800ed9c:	4293      	cmp	r3, r2
 800ed9e:	d100      	bne.n	800eda2 <memset+0xa>
 800eda0:	4770      	bx	lr
 800eda2:	f803 1b01 	strb.w	r1, [r3], #1
 800eda6:	e7f9      	b.n	800ed9c <memset+0x4>

0800eda8 <_free_r>:
 800eda8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800edaa:	2900      	cmp	r1, #0
 800edac:	d044      	beq.n	800ee38 <_free_r+0x90>
 800edae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800edb2:	9001      	str	r0, [sp, #4]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	f1a1 0404 	sub.w	r4, r1, #4
 800edba:	bfb8      	it	lt
 800edbc:	18e4      	addlt	r4, r4, r3
 800edbe:	f000 f83f 	bl	800ee40 <__malloc_lock>
 800edc2:	4a1e      	ldr	r2, [pc, #120]	; (800ee3c <_free_r+0x94>)
 800edc4:	9801      	ldr	r0, [sp, #4]
 800edc6:	6813      	ldr	r3, [r2, #0]
 800edc8:	b933      	cbnz	r3, 800edd8 <_free_r+0x30>
 800edca:	6063      	str	r3, [r4, #4]
 800edcc:	6014      	str	r4, [r2, #0]
 800edce:	b003      	add	sp, #12
 800edd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800edd4:	f000 b83a 	b.w	800ee4c <__malloc_unlock>
 800edd8:	42a3      	cmp	r3, r4
 800edda:	d908      	bls.n	800edee <_free_r+0x46>
 800eddc:	6825      	ldr	r5, [r4, #0]
 800edde:	1961      	adds	r1, r4, r5
 800ede0:	428b      	cmp	r3, r1
 800ede2:	bf01      	itttt	eq
 800ede4:	6819      	ldreq	r1, [r3, #0]
 800ede6:	685b      	ldreq	r3, [r3, #4]
 800ede8:	1949      	addeq	r1, r1, r5
 800edea:	6021      	streq	r1, [r4, #0]
 800edec:	e7ed      	b.n	800edca <_free_r+0x22>
 800edee:	461a      	mov	r2, r3
 800edf0:	685b      	ldr	r3, [r3, #4]
 800edf2:	b10b      	cbz	r3, 800edf8 <_free_r+0x50>
 800edf4:	42a3      	cmp	r3, r4
 800edf6:	d9fa      	bls.n	800edee <_free_r+0x46>
 800edf8:	6811      	ldr	r1, [r2, #0]
 800edfa:	1855      	adds	r5, r2, r1
 800edfc:	42a5      	cmp	r5, r4
 800edfe:	d10b      	bne.n	800ee18 <_free_r+0x70>
 800ee00:	6824      	ldr	r4, [r4, #0]
 800ee02:	4421      	add	r1, r4
 800ee04:	1854      	adds	r4, r2, r1
 800ee06:	42a3      	cmp	r3, r4
 800ee08:	6011      	str	r1, [r2, #0]
 800ee0a:	d1e0      	bne.n	800edce <_free_r+0x26>
 800ee0c:	681c      	ldr	r4, [r3, #0]
 800ee0e:	685b      	ldr	r3, [r3, #4]
 800ee10:	6053      	str	r3, [r2, #4]
 800ee12:	4421      	add	r1, r4
 800ee14:	6011      	str	r1, [r2, #0]
 800ee16:	e7da      	b.n	800edce <_free_r+0x26>
 800ee18:	d902      	bls.n	800ee20 <_free_r+0x78>
 800ee1a:	230c      	movs	r3, #12
 800ee1c:	6003      	str	r3, [r0, #0]
 800ee1e:	e7d6      	b.n	800edce <_free_r+0x26>
 800ee20:	6825      	ldr	r5, [r4, #0]
 800ee22:	1961      	adds	r1, r4, r5
 800ee24:	428b      	cmp	r3, r1
 800ee26:	bf04      	itt	eq
 800ee28:	6819      	ldreq	r1, [r3, #0]
 800ee2a:	685b      	ldreq	r3, [r3, #4]
 800ee2c:	6063      	str	r3, [r4, #4]
 800ee2e:	bf04      	itt	eq
 800ee30:	1949      	addeq	r1, r1, r5
 800ee32:	6021      	streq	r1, [r4, #0]
 800ee34:	6054      	str	r4, [r2, #4]
 800ee36:	e7ca      	b.n	800edce <_free_r+0x26>
 800ee38:	b003      	add	sp, #12
 800ee3a:	bd30      	pop	{r4, r5, pc}
 800ee3c:	20000850 	.word	0x20000850

0800ee40 <__malloc_lock>:
 800ee40:	4801      	ldr	r0, [pc, #4]	; (800ee48 <__malloc_lock+0x8>)
 800ee42:	f000 b809 	b.w	800ee58 <__retarget_lock_acquire_recursive>
 800ee46:	bf00      	nop
 800ee48:	20000854 	.word	0x20000854

0800ee4c <__malloc_unlock>:
 800ee4c:	4801      	ldr	r0, [pc, #4]	; (800ee54 <__malloc_unlock+0x8>)
 800ee4e:	f000 b804 	b.w	800ee5a <__retarget_lock_release_recursive>
 800ee52:	bf00      	nop
 800ee54:	20000854 	.word	0x20000854

0800ee58 <__retarget_lock_acquire_recursive>:
 800ee58:	4770      	bx	lr

0800ee5a <__retarget_lock_release_recursive>:
 800ee5a:	4770      	bx	lr

0800ee5c <_init>:
 800ee5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee5e:	bf00      	nop
 800ee60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee62:	bc08      	pop	{r3}
 800ee64:	469e      	mov	lr, r3
 800ee66:	4770      	bx	lr

0800ee68 <_fini>:
 800ee68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee6a:	bf00      	nop
 800ee6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee6e:	bc08      	pop	{r3}
 800ee70:	469e      	mov	lr, r3
 800ee72:	4770      	bx	lr
