
powermeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f0dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000770  0800f26c  0800f26c  0001f26c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f9dc  0800f9dc  000200f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f9dc  0800f9dc  0001f9dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f9e4  0800f9e4  000200f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800f9e4  0800f9e4  0001f9e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800f9ec  0800f9ec  0001f9ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f4  20000000  0800f9f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000542c  200000f4  0800fae8  000200f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005520  0800fae8  00025520  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021a54  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005478  00000000  00000000  00041b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ca8  00000000  00000000  00046ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ad0  00000000  00000000  00048c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029c47  00000000  00000000  0004a768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024eab  00000000  00000000  000743af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4cd9  00000000  00000000  0009925a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017df33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008298  00000000  00000000  0017df84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f4 	.word	0x200000f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f254 	.word	0x0800f254

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000f8 	.word	0x200000f8
 80001cc:	0800f254 	.word	0x0800f254

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <Dwin_Receive_Decode>:
uint8_t No_Of_Dwin_Bytes;
uint8_t Rx_Dwin_Data_Buff_Point;
uint8_t Rx_Dwin_Complete;

void Dwin_Receive_Decode(uint8_t *rx_data)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	if((rx_data ==0x83)&&(Rx_Dwin_Point==0))
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2b83      	cmp	r3, #131	; 0x83
 80005a0:	d107      	bne.n	80005b2 <Dwin_Receive_Decode+0x1e>
 80005a2:	4b2d      	ldr	r3, [pc, #180]	; (8000658 <Dwin_Receive_Decode+0xc4>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d103      	bne.n	80005b2 <Dwin_Receive_Decode+0x1e>
			{
				Rx_Dwin_Point=1;
 80005aa:	4b2b      	ldr	r3, [pc, #172]	; (8000658 <Dwin_Receive_Decode+0xc4>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	701a      	strb	r2, [r3, #0]
 80005b0:	e04c      	b.n	800064c <Dwin_Receive_Decode+0xb8>
			}
			else if(Rx_Dwin_Point==1)
 80005b2:	4b29      	ldr	r3, [pc, #164]	; (8000658 <Dwin_Receive_Decode+0xc4>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d10a      	bne.n	80005d0 <Dwin_Receive_Decode+0x3c>
			{
				if(rx_data == 0x30){
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	2b30      	cmp	r3, #48	; 0x30
 80005be:	d103      	bne.n	80005c8 <Dwin_Receive_Decode+0x34>
					Rx_Dwin_Point=2;
 80005c0:	4b25      	ldr	r3, [pc, #148]	; (8000658 <Dwin_Receive_Decode+0xc4>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
				if(No_Of_Dwin_Bytes==0){
					Rx_Dwin_Complete = 1;
					Rx_Dwin_Point=0;
				}
			}
}
 80005c6:	e041      	b.n	800064c <Dwin_Receive_Decode+0xb8>
					Rx_Dwin_Point=0;
 80005c8:	4b23      	ldr	r3, [pc, #140]	; (8000658 <Dwin_Receive_Decode+0xc4>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	701a      	strb	r2, [r3, #0]
}
 80005ce:	e03d      	b.n	800064c <Dwin_Receive_Decode+0xb8>
			else if((rx_data == 0x00)&&(Rx_Dwin_Point==2))
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d107      	bne.n	80005e6 <Dwin_Receive_Decode+0x52>
 80005d6:	4b20      	ldr	r3, [pc, #128]	; (8000658 <Dwin_Receive_Decode+0xc4>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	2b02      	cmp	r3, #2
 80005dc:	d103      	bne.n	80005e6 <Dwin_Receive_Decode+0x52>
				Rx_Dwin_Point=3;
 80005de:	4b1e      	ldr	r3, [pc, #120]	; (8000658 <Dwin_Receive_Decode+0xc4>)
 80005e0:	2203      	movs	r2, #3
 80005e2:	701a      	strb	r2, [r3, #0]
 80005e4:	e032      	b.n	800064c <Dwin_Receive_Decode+0xb8>
			else if(Rx_Dwin_Point==3)
 80005e6:	4b1c      	ldr	r3, [pc, #112]	; (8000658 <Dwin_Receive_Decode+0xc4>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2b03      	cmp	r3, #3
 80005ec:	d10c      	bne.n	8000608 <Dwin_Receive_Decode+0x74>
				Rx_Dwin_Point=4;
 80005ee:	4b1a      	ldr	r3, [pc, #104]	; (8000658 <Dwin_Receive_Decode+0xc4>)
 80005f0:	2204      	movs	r2, #4
 80005f2:	701a      	strb	r2, [r3, #0]
				No_Of_Dwin_Bytes = (*rx_data)*2;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	005b      	lsls	r3, r3, #1
 80005fa:	b2da      	uxtb	r2, r3
 80005fc:	4b17      	ldr	r3, [pc, #92]	; (800065c <Dwin_Receive_Decode+0xc8>)
 80005fe:	701a      	strb	r2, [r3, #0]
				Rx_Dwin_Data_Buff_Point = 0;
 8000600:	4b17      	ldr	r3, [pc, #92]	; (8000660 <Dwin_Receive_Decode+0xcc>)
 8000602:	2200      	movs	r2, #0
 8000604:	701a      	strb	r2, [r3, #0]
}
 8000606:	e021      	b.n	800064c <Dwin_Receive_Decode+0xb8>
			else if(Rx_Dwin_Point==4)
 8000608:	4b13      	ldr	r3, [pc, #76]	; (8000658 <Dwin_Receive_Decode+0xc4>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b04      	cmp	r3, #4
 800060e:	d11d      	bne.n	800064c <Dwin_Receive_Decode+0xb8>
				Rx_Dwin_Data_Buff[Rx_Dwin_Data_Buff_Point]= rx_data;
 8000610:	6879      	ldr	r1, [r7, #4]
 8000612:	4b13      	ldr	r3, [pc, #76]	; (8000660 <Dwin_Receive_Decode+0xcc>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	461a      	mov	r2, r3
 8000618:	b2c9      	uxtb	r1, r1
 800061a:	4b12      	ldr	r3, [pc, #72]	; (8000664 <Dwin_Receive_Decode+0xd0>)
 800061c:	5499      	strb	r1, [r3, r2]
				No_Of_Dwin_Bytes = No_Of_Dwin_Bytes-1;
 800061e:	4b0f      	ldr	r3, [pc, #60]	; (800065c <Dwin_Receive_Decode+0xc8>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	3b01      	subs	r3, #1
 8000624:	b2da      	uxtb	r2, r3
 8000626:	4b0d      	ldr	r3, [pc, #52]	; (800065c <Dwin_Receive_Decode+0xc8>)
 8000628:	701a      	strb	r2, [r3, #0]
				Rx_Dwin_Data_Buff_Point = Rx_Dwin_Data_Buff_Point+1;
 800062a:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <Dwin_Receive_Decode+0xcc>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	3301      	adds	r3, #1
 8000630:	b2da      	uxtb	r2, r3
 8000632:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <Dwin_Receive_Decode+0xcc>)
 8000634:	701a      	strb	r2, [r3, #0]
				if(No_Of_Dwin_Bytes==0){
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <Dwin_Receive_Decode+0xc8>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d106      	bne.n	800064c <Dwin_Receive_Decode+0xb8>
					Rx_Dwin_Complete = 1;
 800063e:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <Dwin_Receive_Decode+0xd4>)
 8000640:	2201      	movs	r2, #1
 8000642:	701a      	strb	r2, [r3, #0]
					Rx_Dwin_Point=0;
 8000644:	4b04      	ldr	r3, [pc, #16]	; (8000658 <Dwin_Receive_Decode+0xc4>)
 8000646:	2200      	movs	r2, #0
 8000648:	701a      	strb	r2, [r3, #0]
}
 800064a:	e7ff      	b.n	800064c <Dwin_Receive_Decode+0xb8>
 800064c:	bf00      	nop
 800064e:	370c      	adds	r7, #12
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	20000142 	.word	0x20000142
 800065c:	20000143 	.word	0x20000143
 8000660:	20000144 	.word	0x20000144
 8000664:	20000110 	.word	0x20000110
 8000668:	20000145 	.word	0x20000145

0800066c <HAL_TIM_PeriodElapsedCallback>:
 uint16_t seq1_count_inc,seq2_count_inc;
 uint16_t seq1_remaining_time_total_min,seq2_remaining_time_total_min;
 uint8_t seq1_remaining_time_Hr,seq1_remaining_time_min,seq2_remaining_time_Hr,seq2_remaining_time_min;

 void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 {
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 	if(htim == &htim7)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4a1a      	ldr	r2, [pc, #104]	; (80006e0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d102      	bne.n	8000682 <HAL_TIM_PeriodElapsedCallback+0x16>
 	{
 		Flag1MS=1;
 800067c:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800067e:	2201      	movs	r2, #1
 8000680:	701a      	strb	r2, [r3, #0]
 	}
 	if(htim == &htim6)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4a18      	ldr	r2, [pc, #96]	; (80006e8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d125      	bne.n	80006d6 <HAL_TIM_PeriodElapsedCallback+0x6a>
	{

 		if(++LocCount1S >= 10)
 800068a:	4b18      	ldr	r3, [pc, #96]	; (80006ec <HAL_TIM_PeriodElapsedCallback+0x80>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	3301      	adds	r3, #1
 8000690:	b2da      	uxtb	r2, r3
 8000692:	4b16      	ldr	r3, [pc, #88]	; (80006ec <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000694:	701a      	strb	r2, [r3, #0]
 8000696:	4b15      	ldr	r3, [pc, #84]	; (80006ec <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2b09      	cmp	r3, #9
 800069c:	d91b      	bls.n	80006d6 <HAL_TIM_PeriodElapsedCallback+0x6a>
		{
			LocCount1S=0;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <HAL_TIM_PeriodElapsedCallback+0x80>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	701a      	strb	r2, [r3, #0]
			if(++SimCount >= 20)
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	3301      	adds	r3, #1
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80006ae:	701a      	strb	r2, [r3, #0]
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b13      	cmp	r3, #19
 80006b6:	d906      	bls.n	80006c6 <HAL_TIM_PeriodElapsedCallback+0x5a>
			{
				SimCount=0;
 80006b8:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_TogglePin(GPIOC, RELAY4_Pin);
 80006be:	2120      	movs	r1, #32
 80006c0:	480c      	ldr	r0, [pc, #48]	; (80006f4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80006c2:	f009 fb95 	bl	8009df0 <HAL_GPIO_TogglePin>
			}
			Flag1Second =1;
 80006c6:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	701a      	strb	r2, [r3, #0]
			Flag100milliSeconds=1;
 80006cc:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <HAL_TIM_PeriodElapsedCallback+0x90>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	701a      	strb	r2, [r3, #0]
			DHCP_time_handler( );
 80006d2:	f001 f815 	bl	8001700 <DHCP_time_handler>
		}


	}
 
 }
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	200036d8 	.word	0x200036d8
 80006e4:	20000146 	.word	0x20000146
 80006e8:	2000368c 	.word	0x2000368c
 80006ec:	2000014a 	.word	0x2000014a
 80006f0:	20000149 	.word	0x20000149
 80006f4:	48000800 	.word	0x48000800
 80006f8:	20000147 	.word	0x20000147
 80006fc:	20000148 	.word	0x20000148

08000700 <HAL_UART_RxCpltCallback>:
extern uint8_t CurrentFrame;
extern uint16_t Valid_No_Of_Data;
extern void ESPRxDecoder(unsigned char Rxwifi_data,unsigned char Rxseqdecoder);

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000700:	b590      	push	{r4, r7, lr}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	if(huart == &hlpuart1)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4a5a      	ldr	r2, [pc, #360]	; (8000874 <HAL_UART_RxCpltCallback+0x174>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d107      	bne.n	8000720 <HAL_UART_RxCpltCallback+0x20>
	{
		Dwin_Receive_Decode(rxTempBuff);
 8000710:	4859      	ldr	r0, [pc, #356]	; (8000878 <HAL_UART_RxCpltCallback+0x178>)
 8000712:	f7ff ff3f 	bl	8000594 <Dwin_Receive_Decode>
		HAL_UART_Receive_IT(&hlpuart1,rxTempBuff,1);
 8000716:	2201      	movs	r2, #1
 8000718:	4957      	ldr	r1, [pc, #348]	; (8000878 <HAL_UART_RxCpltCallback+0x178>)
 800071a:	4856      	ldr	r0, [pc, #344]	; (8000874 <HAL_UART_RxCpltCallback+0x174>)
 800071c:	f00b ffe0 	bl	800c6e0 <HAL_UART_Receive_IT>
	}

	if(huart == &huart1)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	4a56      	ldr	r2, [pc, #344]	; (800087c <HAL_UART_RxCpltCallback+0x17c>)
 8000724:	4293      	cmp	r3, r2
 8000726:	f040 809b 	bne.w	8000860 <HAL_UART_RxCpltCallback+0x160>
	{
		HAL_UART_Receive_IT(&huart1,modbustemp,1);
 800072a:	2201      	movs	r2, #1
 800072c:	4954      	ldr	r1, [pc, #336]	; (8000880 <HAL_UART_RxCpltCallback+0x180>)
 800072e:	4853      	ldr	r0, [pc, #332]	; (800087c <HAL_UART_RxCpltCallback+0x17c>)
 8000730:	f00b ffd6 	bl	800c6e0 <HAL_UART_Receive_IT>
		switch(DataTrack)
 8000734:	4b53      	ldr	r3, [pc, #332]	; (8000884 <HAL_UART_RxCpltCallback+0x184>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b04      	cmp	r3, #4
 800073a:	f200 808d 	bhi.w	8000858 <HAL_UART_RxCpltCallback+0x158>
 800073e:	a201      	add	r2, pc, #4	; (adr r2, 8000744 <HAL_UART_RxCpltCallback+0x44>)
 8000740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000744:	08000759 	.word	0x08000759
 8000748:	08000775 	.word	0x08000775
 800074c:	0800078d 	.word	0x0800078d
 8000750:	080007e7 	.word	0x080007e7
 8000754:	0800081d 	.word	0x0800081d
		{
			case 0:
				if(modbustemp[0] <= Total_No_Of_Meter){
 8000758:	4b49      	ldr	r3, [pc, #292]	; (8000880 <HAL_UART_RxCpltCallback+0x180>)
 800075a:	781a      	ldrb	r2, [r3, #0]
 800075c:	4b4a      	ldr	r3, [pc, #296]	; (8000888 <HAL_UART_RxCpltCallback+0x188>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	429a      	cmp	r2, r3
 8000762:	d87f      	bhi.n	8000864 <HAL_UART_RxCpltCallback+0x164>
					DataTrack=1;
 8000764:	4b47      	ldr	r3, [pc, #284]	; (8000884 <HAL_UART_RxCpltCallback+0x184>)
 8000766:	2201      	movs	r2, #1
 8000768:	701a      	strb	r2, [r3, #0]
					rxMeterId = modbustemp[0];
 800076a:	4b45      	ldr	r3, [pc, #276]	; (8000880 <HAL_UART_RxCpltCallback+0x180>)
 800076c:	781a      	ldrb	r2, [r3, #0]
 800076e:	4b47      	ldr	r3, [pc, #284]	; (800088c <HAL_UART_RxCpltCallback+0x18c>)
 8000770:	701a      	strb	r2, [r3, #0]
				}
			break;
 8000772:	e077      	b.n	8000864 <HAL_UART_RxCpltCallback+0x164>
			case 1:
				if(modbustemp[0]==3){
 8000774:	4b42      	ldr	r3, [pc, #264]	; (8000880 <HAL_UART_RxCpltCallback+0x180>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2b03      	cmp	r3, #3
 800077a:	d103      	bne.n	8000784 <HAL_UART_RxCpltCallback+0x84>
					DataTrack=2;
 800077c:	4b41      	ldr	r3, [pc, #260]	; (8000884 <HAL_UART_RxCpltCallback+0x184>)
 800077e:	2202      	movs	r2, #2
 8000780:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					DataTrack=0;
				}
			break;
 8000782:	e072      	b.n	800086a <HAL_UART_RxCpltCallback+0x16a>
					DataTrack=0;
 8000784:	4b3f      	ldr	r3, [pc, #252]	; (8000884 <HAL_UART_RxCpltCallback+0x184>)
 8000786:	2200      	movs	r2, #0
 8000788:	701a      	strb	r2, [r3, #0]
			break;
 800078a:	e06e      	b.n	800086a <HAL_UART_RxCpltCallback+0x16a>
			case 2:
				if(modbustemp[0] == Valid_No_Of_Data*2)
 800078c:	4b3c      	ldr	r3, [pc, #240]	; (8000880 <HAL_UART_RxCpltCallback+0x180>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	461a      	mov	r2, r3
 8000792:	4b3f      	ldr	r3, [pc, #252]	; (8000890 <HAL_UART_RxCpltCallback+0x190>)
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	429a      	cmp	r2, r3
 800079a:	d11d      	bne.n	80007d8 <HAL_UART_RxCpltCallback+0xd8>
				{
					TotalNoOfData = modbustemp[0];
 800079c:	4b38      	ldr	r3, [pc, #224]	; (8000880 <HAL_UART_RxCpltCallback+0x180>)
 800079e:	781a      	ldrb	r2, [r3, #0]
 80007a0:	4b3c      	ldr	r3, [pc, #240]	; (8000894 <HAL_UART_RxCpltCallback+0x194>)
 80007a2:	701a      	strb	r2, [r3, #0]
					PowerMeterdatabase[rxMeterId-1].NoOfData[CurrentFrame-1]=TotalNoOfData;
 80007a4:	4b39      	ldr	r3, [pc, #228]	; (800088c <HAL_UART_RxCpltCallback+0x18c>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	1e5a      	subs	r2, r3, #1
 80007aa:	4b3b      	ldr	r3, [pc, #236]	; (8000898 <HAL_UART_RxCpltCallback+0x198>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	3b01      	subs	r3, #1
 80007b0:	4938      	ldr	r1, [pc, #224]	; (8000894 <HAL_UART_RxCpltCallback+0x194>)
 80007b2:	780c      	ldrb	r4, [r1, #0]
 80007b4:	4939      	ldr	r1, [pc, #228]	; (800089c <HAL_UART_RxCpltCallback+0x19c>)
 80007b6:	f44f 7049 	mov.w	r0, #804	; 0x324
 80007ba:	fb00 f202 	mul.w	r2, r0, r2
 80007be:	440a      	add	r2, r1
 80007c0:	4413      	add	r3, r2
 80007c2:	f503 7348 	add.w	r3, r3, #800	; 0x320
 80007c6:	4622      	mov	r2, r4
 80007c8:	701a      	strb	r2, [r3, #0]
					CountTrack=0;
 80007ca:	4b35      	ldr	r3, [pc, #212]	; (80008a0 <HAL_UART_RxCpltCallback+0x1a0>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	701a      	strb	r2, [r3, #0]
					DataTrack=3;
 80007d0:	4b2c      	ldr	r3, [pc, #176]	; (8000884 <HAL_UART_RxCpltCallback+0x184>)
 80007d2:	2203      	movs	r2, #3
 80007d4:	701a      	strb	r2, [r3, #0]
				{
					CountTrack=0;
					DataTrack=0;
				}

			break;
 80007d6:	e048      	b.n	800086a <HAL_UART_RxCpltCallback+0x16a>
					CountTrack=0;
 80007d8:	4b31      	ldr	r3, [pc, #196]	; (80008a0 <HAL_UART_RxCpltCallback+0x1a0>)
 80007da:	2200      	movs	r2, #0
 80007dc:	701a      	strb	r2, [r3, #0]
					DataTrack=0;
 80007de:	4b29      	ldr	r3, [pc, #164]	; (8000884 <HAL_UART_RxCpltCallback+0x184>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	701a      	strb	r2, [r3, #0]
			break;
 80007e4:	e041      	b.n	800086a <HAL_UART_RxCpltCallback+0x16a>
			case 3:

				u8rxbuf[CountTrack] = modbustemp[0];
 80007e6:	4b2e      	ldr	r3, [pc, #184]	; (80008a0 <HAL_UART_RxCpltCallback+0x1a0>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	461a      	mov	r2, r3
 80007ec:	4b24      	ldr	r3, [pc, #144]	; (8000880 <HAL_UART_RxCpltCallback+0x180>)
 80007ee:	7819      	ldrb	r1, [r3, #0]
 80007f0:	4b2c      	ldr	r3, [pc, #176]	; (80008a4 <HAL_UART_RxCpltCallback+0x1a4>)
 80007f2:	5499      	strb	r1, [r3, r2]
				CountTrack++;
 80007f4:	4b2a      	ldr	r3, [pc, #168]	; (80008a0 <HAL_UART_RxCpltCallback+0x1a0>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	3301      	adds	r3, #1
 80007fa:	b2da      	uxtb	r2, r3
 80007fc:	4b28      	ldr	r3, [pc, #160]	; (80008a0 <HAL_UART_RxCpltCallback+0x1a0>)
 80007fe:	701a      	strb	r2, [r3, #0]
				TotalNoOfData--;
 8000800:	4b24      	ldr	r3, [pc, #144]	; (8000894 <HAL_UART_RxCpltCallback+0x194>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	3b01      	subs	r3, #1
 8000806:	b2da      	uxtb	r2, r3
 8000808:	4b22      	ldr	r3, [pc, #136]	; (8000894 <HAL_UART_RxCpltCallback+0x194>)
 800080a:	701a      	strb	r2, [r3, #0]
				if(TotalNoOfData==0){
 800080c:	4b21      	ldr	r3, [pc, #132]	; (8000894 <HAL_UART_RxCpltCallback+0x194>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d129      	bne.n	8000868 <HAL_UART_RxCpltCallback+0x168>
					DataTrack=4;
 8000814:	4b1b      	ldr	r3, [pc, #108]	; (8000884 <HAL_UART_RxCpltCallback+0x184>)
 8000816:	2204      	movs	r2, #4
 8000818:	701a      	strb	r2, [r3, #0]
				}
			break;
 800081a:	e025      	b.n	8000868 <HAL_UART_RxCpltCallback+0x168>
			case 4:
				memcpy(&PowerMeterdatabase[rxMeterId-1].loc_datastore[CurrentFrame-1][0],u8rxbuf,100);
 800081c:	4b1b      	ldr	r3, [pc, #108]	; (800088c <HAL_UART_RxCpltCallback+0x18c>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	3b01      	subs	r3, #1
 8000822:	4a1d      	ldr	r2, [pc, #116]	; (8000898 <HAL_UART_RxCpltCallback+0x198>)
 8000824:	7812      	ldrb	r2, [r2, #0]
 8000826:	3a01      	subs	r2, #1
 8000828:	21c8      	movs	r1, #200	; 0xc8
 800082a:	fb01 f202 	mul.w	r2, r1, r2
 800082e:	f44f 7149 	mov.w	r1, #804	; 0x324
 8000832:	fb01 f303 	mul.w	r3, r1, r3
 8000836:	4413      	add	r3, r2
 8000838:	4a18      	ldr	r2, [pc, #96]	; (800089c <HAL_UART_RxCpltCallback+0x19c>)
 800083a:	4413      	add	r3, r2
 800083c:	2264      	movs	r2, #100	; 0x64
 800083e:	4919      	ldr	r1, [pc, #100]	; (80008a4 <HAL_UART_RxCpltCallback+0x1a4>)
 8000840:	4618      	mov	r0, r3
 8000842:	f00d fa81 	bl	800dd48 <memcpy>
				memset(u8rxbuf,0,sizeof(u8rxbuf));
 8000846:	22ff      	movs	r2, #255	; 0xff
 8000848:	2100      	movs	r1, #0
 800084a:	4816      	ldr	r0, [pc, #88]	; (80008a4 <HAL_UART_RxCpltCallback+0x1a4>)
 800084c:	f00d fa8a 	bl	800dd64 <memset>
				DataTrack=0;
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <HAL_UART_RxCpltCallback+0x184>)
 8000852:	2200      	movs	r2, #0
 8000854:	701a      	strb	r2, [r3, #0]
			break;
 8000856:	e008      	b.n	800086a <HAL_UART_RxCpltCallback+0x16a>
			default:
				DataTrack=0;
 8000858:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <HAL_UART_RxCpltCallback+0x184>)
 800085a:	2200      	movs	r2, #0
 800085c:	701a      	strb	r2, [r3, #0]
			break;
 800085e:	e004      	b.n	800086a <HAL_UART_RxCpltCallback+0x16a>

		}

	}
 8000860:	bf00      	nop
 8000862:	e002      	b.n	800086a <HAL_UART_RxCpltCallback+0x16a>
			break;
 8000864:	bf00      	nop
 8000866:	e000      	b.n	800086a <HAL_UART_RxCpltCallback+0x16a>
			break;
 8000868:	bf00      	nop
}
 800086a:	bf00      	nop
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	bd90      	pop	{r4, r7, pc}
 8000872:	bf00      	nop
 8000874:	200033ec 	.word	0x200033ec
 8000878:	2000338c 	.word	0x2000338c
 800087c:	20003470 	.word	0x20003470
 8000880:	20003724 	.word	0x20003724
 8000884:	20003392 	.word	0x20003392
 8000888:	200041b0 	.word	0x200041b0
 800088c:	20003391 	.word	0x20003391
 8000890:	2000550a 	.word	0x2000550a
 8000894:	20003393 	.word	0x20003393
 8000898:	20000085 	.word	0x20000085
 800089c:	2000014c 	.word	0x2000014c
 80008a0:	20003394 	.word	0x20003394
 80008a4:	200053fc 	.word	0x200053fc

080008a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ac:	f008 fee6 	bl	800967c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b0:	f000 f852 	bl	8000958 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b4:	f000 fac0 	bl	8000e38 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008b8:	f000 f93c 	bl	8000b34 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80008bc:	f000 f89e 	bl	80009fc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80008c0:	f000 f908 	bl	8000ad4 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 80008c4:	f000 fa4a 	bl	8000d5c <MX_TIM6_Init>
  MX_SPI2_Init();
 80008c8:	f000 f9ac 	bl	8000c24 <MX_SPI2_Init>
  MX_TIM1_Init();
 80008cc:	f000 f9f2 	bl	8000cb4 <MX_TIM1_Init>
  MX_LPUART1_UART_Init();
 80008d0:	f000 f8d4 	bl	8000a7c <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 80008d4:	f000 f95e 	bl	8000b94 <MX_SPI1_Init>
  MX_TIM7_Init();
 80008d8:	f000 fa76 	bl	8000dc8 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 80008dc:	4816      	ldr	r0, [pc, #88]	; (8000938 <main+0x90>)
 80008de:	f00b fa5d 	bl	800bd9c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 80008e2:	4816      	ldr	r0, [pc, #88]	; (800093c <main+0x94>)
 80008e4:	f00b fa5a 	bl	800bd9c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim1);
 80008e8:	4815      	ldr	r0, [pc, #84]	; (8000940 <main+0x98>)
 80008ea:	f00b fa0b 	bl	800bd04 <HAL_TIM_Base_Start>
//  for(i=0;i<=250;i++)
//  {
//	  data[i]=i;
//  }

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f8:	f009 fa62 	bl	8009dc0 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 80008fc:	2002      	movs	r0, #2
 80008fe:	f008 ff31 	bl	8009764 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000902:	2201      	movs	r2, #1
 8000904:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000908:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800090c:	f009 fa58 	bl	8009dc0 <HAL_GPIO_WritePin>
  Meter_Id=1;
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <main+0x9c>)
 8000912:	2201      	movs	r2, #1
 8000914:	701a      	strb	r2, [r3, #0]
  wiz5500Init();
 8000916:	f002 fe6d 	bl	80035f4 <wiz5500Init>

  W25qxx_Init();
 800091a:	f000 ffc7 	bl	80018ac <W25qxx_Init>
  HAL_UART_Receive_IT(&huart1,modbustemp,1);
 800091e:	2201      	movs	r2, #1
 8000920:	4909      	ldr	r1, [pc, #36]	; (8000948 <main+0xa0>)
 8000922:	480a      	ldr	r0, [pc, #40]	; (800094c <main+0xa4>)
 8000924:	f00b fedc 	bl	800c6e0 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&hlpuart1,rxTempBuff,1);
 8000928:	2201      	movs	r2, #1
 800092a:	4909      	ldr	r1, [pc, #36]	; (8000950 <main+0xa8>)
 800092c:	4809      	ldr	r0, [pc, #36]	; (8000954 <main+0xac>)
 800092e:	f00b fed7 	bl	800c6e0 <HAL_UART_Receive_IT>
  //rtc_set_time(13,14,30);
  //rtc_set_date(2,20,2,23);
  while (1)
  {
	  cppMain();
 8000932:	f008 fe4f 	bl	80095d4 <cppMain>
 8000936:	e7fc      	b.n	8000932 <main+0x8a>
 8000938:	2000368c 	.word	0x2000368c
 800093c:	200036d8 	.word	0x200036d8
 8000940:	20003640 	.word	0x20003640
 8000944:	200053e2 	.word	0x200053e2
 8000948:	20003724 	.word	0x20003724
 800094c:	20003470 	.word	0x20003470
 8000950:	2000338c 	.word	0x2000338c
 8000954:	200033ec 	.word	0x200033ec

08000958 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b096      	sub	sp, #88	; 0x58
 800095c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	2244      	movs	r2, #68	; 0x44
 8000964:	2100      	movs	r1, #0
 8000966:	4618      	mov	r0, r3
 8000968:	f00d f9fc 	bl	800dd64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800096c:	463b      	mov	r3, r7
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
 8000978:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800097a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800097e:	f009 fb85 	bl	800a08c <HAL_PWREx_ControlVoltageScaling>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000988:	f000 fb48 	bl	800101c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800098c:	2310      	movs	r3, #16
 800098e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000990:	2301      	movs	r3, #1
 8000992:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000998:	2360      	movs	r3, #96	; 0x60
 800099a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099c:	2302      	movs	r3, #2
 800099e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80009a0:	2301      	movs	r3, #1
 80009a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009a4:	2301      	movs	r3, #1
 80009a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 86;
 80009a8:	2356      	movs	r3, #86	; 0x56
 80009aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009ac:	2307      	movs	r3, #7
 80009ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009b0:	2302      	movs	r3, #2
 80009b2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 80009b4:	2308      	movs	r3, #8
 80009b6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	4618      	mov	r0, r3
 80009be:	f009 fbbb 	bl	800a138 <HAL_RCC_OscConfig>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80009c8:	f000 fb28 	bl	800101c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009cc:	230f      	movs	r3, #15
 80009ce:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d0:	2303      	movs	r3, #3
 80009d2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009d8:	2300      	movs	r3, #0
 80009da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009dc:	2300      	movs	r3, #0
 80009de:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009e0:	463b      	mov	r3, r7
 80009e2:	2102      	movs	r1, #2
 80009e4:	4618      	mov	r0, r3
 80009e6:	f009 ffbb 	bl	800a960 <HAL_RCC_ClockConfig>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80009f0:	f000 fb14 	bl	800101c <Error_Handler>
  }
}
 80009f4:	bf00      	nop
 80009f6:	3758      	adds	r7, #88	; 0x58
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a00:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a02:	4a1c      	ldr	r2, [pc, #112]	; (8000a74 <MX_I2C1_Init+0x78>)
 8000a04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00A0A7FD;
 8000a06:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a08:	4a1b      	ldr	r2, [pc, #108]	; (8000a78 <MX_I2C1_Init+0x7c>)
 8000a0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a0c:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a12:	4b17      	ldr	r3, [pc, #92]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a18:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a1e:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a36:	480e      	ldr	r0, [pc, #56]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a38:	f009 f9f4 	bl	8009e24 <HAL_I2C_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a42:	f000 faeb 	bl	800101c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a46:	2100      	movs	r1, #0
 8000a48:	4809      	ldr	r0, [pc, #36]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a4a:	f009 fa7a 	bl	8009f42 <HAL_I2CEx_ConfigAnalogFilter>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a54:	f000 fae2 	bl	800101c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4805      	ldr	r0, [pc, #20]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a5c:	f009 fabc 	bl	8009fd8 <HAL_I2CEx_ConfigDigitalFilter>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a66:	f000 fad9 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20003398 	.word	0x20003398
 8000a74:	40005400 	.word	0x40005400
 8000a78:	00a0a7fd 	.word	0x00a0a7fd

08000a7c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000a80:	4b12      	ldr	r3, [pc, #72]	; (8000acc <MX_LPUART1_UART_Init+0x50>)
 8000a82:	4a13      	ldr	r2, [pc, #76]	; (8000ad0 <MX_LPUART1_UART_Init+0x54>)
 8000a84:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000a86:	4b11      	ldr	r3, [pc, #68]	; (8000acc <MX_LPUART1_UART_Init+0x50>)
 8000a88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a8c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8e:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <MX_LPUART1_UART_Init+0x50>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000a94:	4b0d      	ldr	r3, [pc, #52]	; (8000acc <MX_LPUART1_UART_Init+0x50>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000a9a:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <MX_LPUART1_UART_Init+0x50>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000aa0:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <MX_LPUART1_UART_Init+0x50>)
 8000aa2:	220c      	movs	r2, #12
 8000aa4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <MX_LPUART1_UART_Init+0x50>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aac:	4b07      	ldr	r3, [pc, #28]	; (8000acc <MX_LPUART1_UART_Init+0x50>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <MX_LPUART1_UART_Init+0x50>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000ab8:	4804      	ldr	r0, [pc, #16]	; (8000acc <MX_LPUART1_UART_Init+0x50>)
 8000aba:	f00b fd55 	bl	800c568 <HAL_UART_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000ac4:	f000 faaa 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	200033ec 	.word	0x200033ec
 8000ad0:	40008000 	.word	0x40008000

08000ad4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ad8:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <MX_USART1_UART_Init+0x58>)
 8000ada:	4a15      	ldr	r2, [pc, #84]	; (8000b30 <MX_USART1_UART_Init+0x5c>)
 8000adc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000ade:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <MX_USART1_UART_Init+0x58>)
 8000ae0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ae4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <MX_USART1_UART_Init+0x58>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <MX_USART1_UART_Init+0x58>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <MX_USART1_UART_Init+0x58>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <MX_USART1_UART_Init+0x58>)
 8000afa:	220c      	movs	r2, #12
 8000afc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afe:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <MX_USART1_UART_Init+0x58>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b04:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <MX_USART1_UART_Init+0x58>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b0a:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <MX_USART1_UART_Init+0x58>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <MX_USART1_UART_Init+0x58>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b16:	4805      	ldr	r0, [pc, #20]	; (8000b2c <MX_USART1_UART_Init+0x58>)
 8000b18:	f00b fd26 	bl	800c568 <HAL_UART_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b22:	f000 fa7b 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20003470 	.word	0x20003470
 8000b30:	40013800 	.word	0x40013800

08000b34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b38:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <MX_USART2_UART_Init+0x58>)
 8000b3a:	4a15      	ldr	r2, [pc, #84]	; (8000b90 <MX_USART2_UART_Init+0x5c>)
 8000b3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000b3e:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <MX_USART2_UART_Init+0x58>)
 8000b40:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <MX_USART2_UART_Init+0x58>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <MX_USART2_UART_Init+0x58>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <MX_USART2_UART_Init+0x58>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <MX_USART2_UART_Init+0x58>)
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <MX_USART2_UART_Init+0x58>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b64:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <MX_USART2_UART_Init+0x58>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b6a:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <MX_USART2_UART_Init+0x58>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <MX_USART2_UART_Init+0x58>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b76:	4805      	ldr	r0, [pc, #20]	; (8000b8c <MX_USART2_UART_Init+0x58>)
 8000b78:	f00b fcf6 	bl	800c568 <HAL_UART_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b82:	f000 fa4b 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200034f4 	.word	0x200034f4
 8000b90:	40004400 	.word	0x40004400

08000b94 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b98:	4b1f      	ldr	r3, [pc, #124]	; (8000c18 <MX_SPI1_Init+0x84>)
 8000b9a:	4a20      	ldr	r2, [pc, #128]	; (8000c1c <MX_SPI1_Init+0x88>)
 8000b9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b9e:	4b1e      	ldr	r3, [pc, #120]	; (8000c18 <MX_SPI1_Init+0x84>)
 8000ba0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ba4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ba6:	4b1c      	ldr	r3, [pc, #112]	; (8000c18 <MX_SPI1_Init+0x84>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bac:	4b1a      	ldr	r3, [pc, #104]	; (8000c18 <MX_SPI1_Init+0x84>)
 8000bae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000bb2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bb4:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <MX_SPI1_Init+0x84>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bba:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <MX_SPI1_Init+0x84>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bc0:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <MX_SPI1_Init+0x84>)
 8000bc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bc6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000bc8:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <MX_SPI1_Init+0x84>)
 8000bca:	2210      	movs	r2, #16
 8000bcc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bce:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <MX_SPI1_Init+0x84>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bd4:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <MX_SPI1_Init+0x84>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bda:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <MX_SPI1_Init+0x84>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000be0:	4b0d      	ldr	r3, [pc, #52]	; (8000c18 <MX_SPI1_Init+0x84>)
 8000be2:	2207      	movs	r2, #7
 8000be4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <MX_SPI1_Init+0x84>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bec:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <MX_SPI1_Init+0x84>)
 8000bee:	2208      	movs	r2, #8
 8000bf0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bf2:	4809      	ldr	r0, [pc, #36]	; (8000c18 <MX_SPI1_Init+0x84>)
 8000bf4:	f00a fc14 	bl	800b420 <HAL_SPI_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000bfe:	f000 fa0d 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi2);
 8000c02:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <MX_SPI1_Init+0x8c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <MX_SPI1_Init+0x8c>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c10:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20003578 	.word	0x20003578
 8000c1c:	40013000 	.word	0x40013000
 8000c20:	200035dc 	.word	0x200035dc

08000c24 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c28:	4b1f      	ldr	r3, [pc, #124]	; (8000ca8 <MX_SPI2_Init+0x84>)
 8000c2a:	4a20      	ldr	r2, [pc, #128]	; (8000cac <MX_SPI2_Init+0x88>)
 8000c2c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ca8 <MX_SPI2_Init+0x84>)
 8000c30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c34:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c36:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <MX_SPI2_Init+0x84>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <MX_SPI2_Init+0x84>)
 8000c3e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c42:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c44:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <MX_SPI2_Init+0x84>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c4a:	4b17      	ldr	r3, [pc, #92]	; (8000ca8 <MX_SPI2_Init+0x84>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c50:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <MX_SPI2_Init+0x84>)
 8000c52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c56:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000c58:	4b13      	ldr	r3, [pc, #76]	; (8000ca8 <MX_SPI2_Init+0x84>)
 8000c5a:	2208      	movs	r2, #8
 8000c5c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c5e:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <MX_SPI2_Init+0x84>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c64:	4b10      	ldr	r3, [pc, #64]	; (8000ca8 <MX_SPI2_Init+0x84>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <MX_SPI2_Init+0x84>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000c70:	4b0d      	ldr	r3, [pc, #52]	; (8000ca8 <MX_SPI2_Init+0x84>)
 8000c72:	2207      	movs	r2, #7
 8000c74:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c76:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <MX_SPI2_Init+0x84>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <MX_SPI2_Init+0x84>)
 8000c7e:	2208      	movs	r2, #8
 8000c80:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c82:	4809      	ldr	r0, [pc, #36]	; (8000ca8 <MX_SPI2_Init+0x84>)
 8000c84:	f00a fbcc 	bl	800b420 <HAL_SPI_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000c8e:	f000 f9c5 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 8000c92:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <MX_SPI2_Init+0x8c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <MX_SPI2_Init+0x8c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ca0:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI2_Init 2 */

}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	200035dc 	.word	0x200035dc
 8000cac:	40003800 	.word	0x40003800
 8000cb0:	20003578 	.word	0x20003578

08000cb4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b088      	sub	sp, #32
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cba:	f107 0310 	add.w	r3, r7, #16
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]
 8000cc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cd2:	4b20      	ldr	r3, [pc, #128]	; (8000d54 <MX_TIM1_Init+0xa0>)
 8000cd4:	4a20      	ldr	r2, [pc, #128]	; (8000d58 <MX_TIM1_Init+0xa4>)
 8000cd6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000cd8:	4b1e      	ldr	r3, [pc, #120]	; (8000d54 <MX_TIM1_Init+0xa0>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cde:	4b1d      	ldr	r3, [pc, #116]	; (8000d54 <MX_TIM1_Init+0xa0>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ce4:	4b1b      	ldr	r3, [pc, #108]	; (8000d54 <MX_TIM1_Init+0xa0>)
 8000ce6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cec:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <MX_TIM1_Init+0xa0>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cf2:	4b18      	ldr	r3, [pc, #96]	; (8000d54 <MX_TIM1_Init+0xa0>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf8:	4b16      	ldr	r3, [pc, #88]	; (8000d54 <MX_TIM1_Init+0xa0>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000cfe:	4815      	ldr	r0, [pc, #84]	; (8000d54 <MX_TIM1_Init+0xa0>)
 8000d00:	f00a ffa8 	bl	800bc54 <HAL_TIM_Base_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000d0a:	f000 f987 	bl	800101c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d14:	f107 0310 	add.w	r3, r7, #16
 8000d18:	4619      	mov	r1, r3
 8000d1a:	480e      	ldr	r0, [pc, #56]	; (8000d54 <MX_TIM1_Init+0xa0>)
 8000d1c:	f00b f9b1 	bl	800c082 <HAL_TIM_ConfigClockSource>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000d26:	f000 f979 	bl	800101c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4806      	ldr	r0, [pc, #24]	; (8000d54 <MX_TIM1_Init+0xa0>)
 8000d3c:	f00b fb90 	bl	800c460 <HAL_TIMEx_MasterConfigSynchronization>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000d46:	f000 f969 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d4a:	bf00      	nop
 8000d4c:	3720      	adds	r7, #32
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20003640 	.word	0x20003640
 8000d58:	40012c00 	.word	0x40012c00

08000d5c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000d6c:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <MX_TIM6_Init+0x64>)
 8000d6e:	4a15      	ldr	r2, [pc, #84]	; (8000dc4 <MX_TIM6_Init+0x68>)
 8000d70:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 43000-1;
 8000d72:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <MX_TIM6_Init+0x64>)
 8000d74:	f24a 72f7 	movw	r2, #42999	; 0xa7f7
 8000d78:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7a:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <MX_TIM6_Init+0x64>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100;
 8000d80:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <MX_TIM6_Init+0x64>)
 8000d82:	2264      	movs	r2, #100	; 0x64
 8000d84:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <MX_TIM6_Init+0x64>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d8c:	480c      	ldr	r0, [pc, #48]	; (8000dc0 <MX_TIM6_Init+0x64>)
 8000d8e:	f00a ff61 	bl	800bc54 <HAL_TIM_Base_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000d98:	f000 f940 	bl	800101c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	4619      	mov	r1, r3
 8000da8:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <MX_TIM6_Init+0x64>)
 8000daa:	f00b fb59 	bl	800c460 <HAL_TIMEx_MasterConfigSynchronization>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000db4:	f000 f932 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000db8:	bf00      	nop
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	2000368c 	.word	0x2000368c
 8000dc4:	40001000 	.word	0x40001000

08000dc8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000dd8:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <MX_TIM7_Init+0x68>)
 8000dda:	4a16      	ldr	r2, [pc, #88]	; (8000e34 <MX_TIM7_Init+0x6c>)
 8000ddc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 43000-1;
 8000dde:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <MX_TIM7_Init+0x68>)
 8000de0:	f24a 72f7 	movw	r2, #42999	; 0xa7f7
 8000de4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de6:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <MX_TIM7_Init+0x68>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 8000dec:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <MX_TIM7_Init+0x68>)
 8000dee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000df2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df4:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <MX_TIM7_Init+0x68>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000dfa:	480d      	ldr	r0, [pc, #52]	; (8000e30 <MX_TIM7_Init+0x68>)
 8000dfc:	f00a ff2a 	bl	800bc54 <HAL_TIM_Base_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000e06:	f000 f909 	bl	800101c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	4619      	mov	r1, r3
 8000e16:	4806      	ldr	r0, [pc, #24]	; (8000e30 <MX_TIM7_Init+0x68>)
 8000e18:	f00b fb22 	bl	800c460 <HAL_TIMEx_MasterConfigSynchronization>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8000e22:	f000 f8fb 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000e26:	bf00      	nop
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	200036d8 	.word	0x200036d8
 8000e34:	40001400 	.word	0x40001400

08000e38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08a      	sub	sp, #40	; 0x28
 8000e3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]
 8000e4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4e:	4b6f      	ldr	r3, [pc, #444]	; (800100c <MX_GPIO_Init+0x1d4>)
 8000e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e52:	4a6e      	ldr	r2, [pc, #440]	; (800100c <MX_GPIO_Init+0x1d4>)
 8000e54:	f043 0304 	orr.w	r3, r3, #4
 8000e58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e5a:	4b6c      	ldr	r3, [pc, #432]	; (800100c <MX_GPIO_Init+0x1d4>)
 8000e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5e:	f003 0304 	and.w	r3, r3, #4
 8000e62:	613b      	str	r3, [r7, #16]
 8000e64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e66:	4b69      	ldr	r3, [pc, #420]	; (800100c <MX_GPIO_Init+0x1d4>)
 8000e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6a:	4a68      	ldr	r2, [pc, #416]	; (800100c <MX_GPIO_Init+0x1d4>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e72:	4b66      	ldr	r3, [pc, #408]	; (800100c <MX_GPIO_Init+0x1d4>)
 8000e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7e:	4b63      	ldr	r3, [pc, #396]	; (800100c <MX_GPIO_Init+0x1d4>)
 8000e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e82:	4a62      	ldr	r2, [pc, #392]	; (800100c <MX_GPIO_Init+0x1d4>)
 8000e84:	f043 0302 	orr.w	r3, r3, #2
 8000e88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e8a:	4b60      	ldr	r3, [pc, #384]	; (800100c <MX_GPIO_Init+0x1d4>)
 8000e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8e:	f003 0302 	and.w	r3, r3, #2
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e96:	4b5d      	ldr	r3, [pc, #372]	; (800100c <MX_GPIO_Init+0x1d4>)
 8000e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9a:	4a5c      	ldr	r2, [pc, #368]	; (800100c <MX_GPIO_Init+0x1d4>)
 8000e9c:	f043 0308 	orr.w	r3, r3, #8
 8000ea0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ea2:	4b5a      	ldr	r3, [pc, #360]	; (800100c <MX_GPIO_Init+0x1d4>)
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea6:	f003 0308 	and.w	r3, r3, #8
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCDD6_Pin|LCDD5_Pin|LCDD4_Pin|LCDD3_Pin
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f64f 417f 	movw	r1, #64639	; 0xfc7f
 8000eb4:	4856      	ldr	r0, [pc, #344]	; (8001010 <MX_GPIO_Init+0x1d8>)
 8000eb6:	f008 ff83 	bl	8009dc0 <HAL_GPIO_WritePin>
                          |LCDD2_Pin|LCDD1_Pin|LCDD0_Pin|RELAY3_Pin
                          |RELAY4_Pin|W5500_INT_Pin|GLCDEN_Pin|GLCDCS2_Pin
                          |GLCDRW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RELAY2_Pin|LCDRS_Pin, GPIO_PIN_RESET);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2112      	movs	r1, #18
 8000ebe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec2:	f008 ff7d 	bl	8009dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _W25QXX_CS_PIN_Pin|WIFIRST_Pin|LCDD7_Pin, GPIO_PIN_RESET);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2125      	movs	r1, #37	; 0x25
 8000eca:	4852      	ldr	r0, [pc, #328]	; (8001014 <MX_GPIO_Init+0x1dc>)
 8000ecc:	f008 ff78 	bl	8009dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_SET);
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ed6:	484f      	ldr	r0, [pc, #316]	; (8001014 <MX_GPIO_Init+0x1dc>)
 8000ed8:	f008 ff72 	bl	8009dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500RST_GPIO_Port, W5500RST_Pin, GPIO_PIN_SET);
 8000edc:	2201      	movs	r2, #1
 8000ede:	2180      	movs	r1, #128	; 0x80
 8000ee0:	484b      	ldr	r0, [pc, #300]	; (8001010 <MX_GPIO_Init+0x1d8>)
 8000ee2:	f008 ff6d 	bl	8009dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(InputMachine_GPIO_Port, InputMachine_Pin, GPIO_PIN_SET);
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef0:	f008 ff66 	bl	8009dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2104      	movs	r1, #4
 8000ef8:	4847      	ldr	r0, [pc, #284]	; (8001018 <MX_GPIO_Init+0x1e0>)
 8000efa:	f008 ff61 	bl	8009dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCDD6_Pin LCDD5_Pin LCDD4_Pin LCDD3_Pin
                           LCDD2_Pin LCDD1_Pin LCDD0_Pin RELAY3_Pin
                           RELAY4_Pin W5500_INT_Pin W5500RST_Pin */
  GPIO_InitStruct.Pin = LCDD6_Pin|LCDD5_Pin|LCDD4_Pin|LCDD3_Pin
 8000efe:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8000f02:	617b      	str	r3, [r7, #20]
                          |LCDD2_Pin|LCDD1_Pin|LCDD0_Pin|RELAY3_Pin
                          |RELAY4_Pin|W5500_INT_Pin|W5500RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f04:	2301      	movs	r3, #1
 8000f06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	4619      	mov	r1, r3
 8000f16:	483e      	ldr	r0, [pc, #248]	; (8001010 <MX_GPIO_Init+0x1d8>)
 8000f18:	f008 fdd8 	bl	8009acc <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY2_Pin InputMachine_Pin */
  GPIO_InitStruct.Pin = RELAY2_Pin|InputMachine_Pin;
 8000f1c:	f241 0302 	movw	r3, #4098	; 0x1002
 8000f20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f22:	2301      	movs	r3, #1
 8000f24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	4619      	mov	r1, r3
 8000f34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f38:	f008 fdc8 	bl	8009acc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCDRS_Pin */
  GPIO_InitStruct.Pin = LCDRS_Pin;
 8000f3c:	2310      	movs	r3, #16
 8000f3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f40:	2301      	movs	r3, #1
 8000f42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f44:	2301      	movs	r3, #1
 8000f46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCDRS_GPIO_Port, &GPIO_InitStruct);
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	4619      	mov	r1, r3
 8000f52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f56:	f008 fdb9 	bl	8009acc <HAL_GPIO_Init>

  /*Configure GPIO pins : _W25QXX_CS_PIN_Pin WIFIRST_Pin LCDD7_Pin */
  GPIO_InitStruct.Pin = _W25QXX_CS_PIN_Pin|WIFIRST_Pin|LCDD7_Pin;
 8000f5a:	2325      	movs	r3, #37	; 0x25
 8000f5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2300      	movs	r3, #0
 8000f68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4828      	ldr	r0, [pc, #160]	; (8001014 <MX_GPIO_Init+0x1dc>)
 8000f72:	f008 fdab 	bl	8009acc <HAL_GPIO_Init>

  /*Configure GPIO pin : W5500_CS_Pin */
  GPIO_InitStruct.Pin = W5500_CS_Pin;
 8000f76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f84:	2302      	movs	r3, #2
 8000f86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(W5500_CS_GPIO_Port, &GPIO_InitStruct);
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4821      	ldr	r0, [pc, #132]	; (8001014 <MX_GPIO_Init+0x1dc>)
 8000f90:	f008 fd9c 	bl	8009acc <HAL_GPIO_Init>

  /*Configure GPIO pins : InputMachine1_Pin InputMachine2_Pin */
  GPIO_InitStruct.Pin = InputMachine1_Pin|InputMachine2_Pin;
 8000f94:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa2:	f107 0314 	add.w	r3, r7, #20
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4819      	ldr	r0, [pc, #100]	; (8001010 <MX_GPIO_Init+0x1d8>)
 8000faa:	f008 fd8f 	bl	8009acc <HAL_GPIO_Init>

  /*Configure GPIO pins : InputMachine3_Pin InputMachine4_Pin InputMachine5_Pin InputMachine6_Pin */
  GPIO_InitStruct.Pin = InputMachine3_Pin|InputMachine4_Pin|InputMachine5_Pin|InputMachine6_Pin;
 8000fae:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000fb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc6:	f008 fd81 	bl	8009acc <HAL_GPIO_Init>

  /*Configure GPIO pins : GLCDEN_Pin GLCDCS2_Pin GLCDRW_Pin */
  GPIO_InitStruct.Pin = GLCDEN_Pin|GLCDCS2_Pin|GLCDRW_Pin;
 8000fca:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000fce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	480b      	ldr	r0, [pc, #44]	; (8001010 <MX_GPIO_Init+0x1d8>)
 8000fe4:	f008 fd72 	bl	8009acc <HAL_GPIO_Init>

  /*Configure GPIO pin : GLCDCS1_Pin */
  GPIO_InitStruct.Pin = GLCDCS1_Pin;
 8000fe8:	2304      	movs	r3, #4
 8000fea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fec:	2301      	movs	r3, #1
 8000fee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GLCDCS1_GPIO_Port, &GPIO_InitStruct);
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4806      	ldr	r0, [pc, #24]	; (8001018 <MX_GPIO_Init+0x1e0>)
 8001000:	f008 fd64 	bl	8009acc <HAL_GPIO_Init>

}
 8001004:	bf00      	nop
 8001006:	3728      	adds	r7, #40	; 0x28
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40021000 	.word	0x40021000
 8001010:	48000800 	.word	0x48000800
 8001014:	48000400 	.word	0x48000400
 8001018:	48000c00 	.word	0x48000c00

0800101c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001020:	b672      	cpsid	i
}
 8001022:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001024:	e7fe      	b.n	8001024 <Error_Handler+0x8>
	...

08001028 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102e:	4b0f      	ldr	r3, [pc, #60]	; (800106c <HAL_MspInit+0x44>)
 8001030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001032:	4a0e      	ldr	r2, [pc, #56]	; (800106c <HAL_MspInit+0x44>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6613      	str	r3, [r2, #96]	; 0x60
 800103a:	4b0c      	ldr	r3, [pc, #48]	; (800106c <HAL_MspInit+0x44>)
 800103c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <HAL_MspInit+0x44>)
 8001048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800104a:	4a08      	ldr	r2, [pc, #32]	; (800106c <HAL_MspInit+0x44>)
 800104c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001050:	6593      	str	r3, [r2, #88]	; 0x58
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_MspInit+0x44>)
 8001054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105a:	603b      	str	r3, [r7, #0]
 800105c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	40021000 	.word	0x40021000

08001070 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b0a2      	sub	sp, #136	; 0x88
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	2260      	movs	r2, #96	; 0x60
 800108e:	2100      	movs	r1, #0
 8001090:	4618      	mov	r0, r3
 8001092:	f00c fe67 	bl	800dd64 <memset>
  if(hi2c->Instance==I2C1)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a20      	ldr	r2, [pc, #128]	; (800111c <HAL_I2C_MspInit+0xac>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d138      	bne.n	8001112 <HAL_I2C_MspInit+0xa2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010a0:	2340      	movs	r3, #64	; 0x40
 80010a2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	4618      	mov	r0, r3
 80010ae:	f009 fe7b 	bl	800ada8 <HAL_RCCEx_PeriphCLKConfig>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80010b8:	f7ff ffb0 	bl	800101c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010bc:	4b18      	ldr	r3, [pc, #96]	; (8001120 <HAL_I2C_MspInit+0xb0>)
 80010be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c0:	4a17      	ldr	r2, [pc, #92]	; (8001120 <HAL_I2C_MspInit+0xb0>)
 80010c2:	f043 0302 	orr.w	r3, r3, #2
 80010c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c8:	4b15      	ldr	r3, [pc, #84]	; (8001120 <HAL_I2C_MspInit+0xb0>)
 80010ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010cc:	f003 0302 	and.w	r3, r3, #2
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010d4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010d8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010da:	2312      	movs	r3, #18
 80010dc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e2:	2303      	movs	r3, #3
 80010e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010e8:	2304      	movs	r3, #4
 80010ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ee:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80010f2:	4619      	mov	r1, r3
 80010f4:	480b      	ldr	r0, [pc, #44]	; (8001124 <HAL_I2C_MspInit+0xb4>)
 80010f6:	f008 fce9 	bl	8009acc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010fa:	4b09      	ldr	r3, [pc, #36]	; (8001120 <HAL_I2C_MspInit+0xb0>)
 80010fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010fe:	4a08      	ldr	r2, [pc, #32]	; (8001120 <HAL_I2C_MspInit+0xb0>)
 8001100:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001104:	6593      	str	r3, [r2, #88]	; 0x58
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <HAL_I2C_MspInit+0xb0>)
 8001108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001112:	bf00      	nop
 8001114:	3788      	adds	r7, #136	; 0x88
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40005400 	.word	0x40005400
 8001120:	40021000 	.word	0x40021000
 8001124:	48000400 	.word	0x48000400

08001128 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b0a6      	sub	sp, #152	; 0x98
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001130:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001140:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001144:	2260      	movs	r2, #96	; 0x60
 8001146:	2100      	movs	r1, #0
 8001148:	4618      	mov	r0, r3
 800114a:	f00c fe0b 	bl	800dd64 <memset>
  if(huart->Instance==LPUART1)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a6b      	ldr	r2, [pc, #428]	; (8001300 <HAL_UART_MspInit+0x1d8>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d144      	bne.n	80011e2 <HAL_UART_MspInit+0xba>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001158:	2320      	movs	r3, #32
 800115a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800115c:	2300      	movs	r3, #0
 800115e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001160:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001164:	4618      	mov	r0, r3
 8001166:	f009 fe1f 	bl	800ada8 <HAL_RCCEx_PeriphCLKConfig>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001170:	f7ff ff54 	bl	800101c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001174:	4b63      	ldr	r3, [pc, #396]	; (8001304 <HAL_UART_MspInit+0x1dc>)
 8001176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001178:	4a62      	ldr	r2, [pc, #392]	; (8001304 <HAL_UART_MspInit+0x1dc>)
 800117a:	f043 0301 	orr.w	r3, r3, #1
 800117e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001180:	4b60      	ldr	r3, [pc, #384]	; (8001304 <HAL_UART_MspInit+0x1dc>)
 8001182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	623b      	str	r3, [r7, #32]
 800118a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800118c:	4b5d      	ldr	r3, [pc, #372]	; (8001304 <HAL_UART_MspInit+0x1dc>)
 800118e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001190:	4a5c      	ldr	r2, [pc, #368]	; (8001304 <HAL_UART_MspInit+0x1dc>)
 8001192:	f043 0302 	orr.w	r3, r3, #2
 8001196:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001198:	4b5a      	ldr	r3, [pc, #360]	; (8001304 <HAL_UART_MspInit+0x1dc>)
 800119a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119c:	f003 0302 	and.w	r3, r3, #2
 80011a0:	61fb      	str	r3, [r7, #28]
 80011a2:	69fb      	ldr	r3, [r7, #28]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80011a4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ac:	2302      	movs	r3, #2
 80011ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b8:	2303      	movs	r3, #3
 80011ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80011be:	2308      	movs	r3, #8
 80011c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80011c8:	4619      	mov	r1, r3
 80011ca:	484f      	ldr	r0, [pc, #316]	; (8001308 <HAL_UART_MspInit+0x1e0>)
 80011cc:	f008 fc7e 	bl	8009acc <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80011d0:	2200      	movs	r2, #0
 80011d2:	2100      	movs	r1, #0
 80011d4:	2046      	movs	r0, #70	; 0x46
 80011d6:	f008 fbc4 	bl	8009962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80011da:	2046      	movs	r0, #70	; 0x46
 80011dc:	f008 fbdd 	bl	800999a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011e0:	e089      	b.n	80012f6 <HAL_UART_MspInit+0x1ce>
  else if(huart->Instance==USART1)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a49      	ldr	r2, [pc, #292]	; (800130c <HAL_UART_MspInit+0x1e4>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d143      	bne.n	8001274 <HAL_UART_MspInit+0x14c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80011ec:	2301      	movs	r3, #1
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80011f0:	2300      	movs	r3, #0
 80011f2:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f8:	4618      	mov	r0, r3
 80011fa:	f009 fdd5 	bl	800ada8 <HAL_RCCEx_PeriphCLKConfig>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8001204:	f7ff ff0a 	bl	800101c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001208:	4b3e      	ldr	r3, [pc, #248]	; (8001304 <HAL_UART_MspInit+0x1dc>)
 800120a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800120c:	4a3d      	ldr	r2, [pc, #244]	; (8001304 <HAL_UART_MspInit+0x1dc>)
 800120e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001212:	6613      	str	r3, [r2, #96]	; 0x60
 8001214:	4b3b      	ldr	r3, [pc, #236]	; (8001304 <HAL_UART_MspInit+0x1dc>)
 8001216:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001218:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800121c:	61bb      	str	r3, [r7, #24]
 800121e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001220:	4b38      	ldr	r3, [pc, #224]	; (8001304 <HAL_UART_MspInit+0x1dc>)
 8001222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001224:	4a37      	ldr	r2, [pc, #220]	; (8001304 <HAL_UART_MspInit+0x1dc>)
 8001226:	f043 0302 	orr.w	r3, r3, #2
 800122a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122c:	4b35      	ldr	r3, [pc, #212]	; (8001304 <HAL_UART_MspInit+0x1dc>)
 800122e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	617b      	str	r3, [r7, #20]
 8001236:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001238:	23c0      	movs	r3, #192	; 0xc0
 800123a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123e:	2302      	movs	r3, #2
 8001240:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124a:	2303      	movs	r3, #3
 800124c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001250:	2307      	movs	r3, #7
 8001252:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001256:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800125a:	4619      	mov	r1, r3
 800125c:	482a      	ldr	r0, [pc, #168]	; (8001308 <HAL_UART_MspInit+0x1e0>)
 800125e:	f008 fc35 	bl	8009acc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	2100      	movs	r1, #0
 8001266:	2025      	movs	r0, #37	; 0x25
 8001268:	f008 fb7b 	bl	8009962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800126c:	2025      	movs	r0, #37	; 0x25
 800126e:	f008 fb94 	bl	800999a <HAL_NVIC_EnableIRQ>
}
 8001272:	e040      	b.n	80012f6 <HAL_UART_MspInit+0x1ce>
  else if(huart->Instance==USART2)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a25      	ldr	r2, [pc, #148]	; (8001310 <HAL_UART_MspInit+0x1e8>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d13b      	bne.n	80012f6 <HAL_UART_MspInit+0x1ce>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800127e:	2302      	movs	r3, #2
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001282:	2300      	movs	r3, #0
 8001284:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128a:	4618      	mov	r0, r3
 800128c:	f009 fd8c 	bl	800ada8 <HAL_RCCEx_PeriphCLKConfig>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <HAL_UART_MspInit+0x172>
      Error_Handler();
 8001296:	f7ff fec1 	bl	800101c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800129a:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <HAL_UART_MspInit+0x1dc>)
 800129c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800129e:	4a19      	ldr	r2, [pc, #100]	; (8001304 <HAL_UART_MspInit+0x1dc>)
 80012a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a4:	6593      	str	r3, [r2, #88]	; 0x58
 80012a6:	4b17      	ldr	r3, [pc, #92]	; (8001304 <HAL_UART_MspInit+0x1dc>)
 80012a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b2:	4b14      	ldr	r3, [pc, #80]	; (8001304 <HAL_UART_MspInit+0x1dc>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b6:	4a13      	ldr	r2, [pc, #76]	; (8001304 <HAL_UART_MspInit+0x1dc>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012be:	4b11      	ldr	r3, [pc, #68]	; (8001304 <HAL_UART_MspInit+0x1dc>)
 80012c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012ca:	230c      	movs	r3, #12
 80012cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	2302      	movs	r3, #2
 80012d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012dc:	2303      	movs	r3, #3
 80012de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012e2:	2307      	movs	r3, #7
 80012e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80012ec:	4619      	mov	r1, r3
 80012ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f2:	f008 fbeb 	bl	8009acc <HAL_GPIO_Init>
}
 80012f6:	bf00      	nop
 80012f8:	3798      	adds	r7, #152	; 0x98
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40008000 	.word	0x40008000
 8001304:	40021000 	.word	0x40021000
 8001308:	48000400 	.word	0x48000400
 800130c:	40013800 	.word	0x40013800
 8001310:	40004400 	.word	0x40004400

08001314 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08c      	sub	sp, #48	; 0x30
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 031c 	add.w	r3, r7, #28
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a2f      	ldr	r2, [pc, #188]	; (80013f0 <HAL_SPI_MspInit+0xdc>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d129      	bne.n	800138a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001336:	4b2f      	ldr	r3, [pc, #188]	; (80013f4 <HAL_SPI_MspInit+0xe0>)
 8001338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800133a:	4a2e      	ldr	r2, [pc, #184]	; (80013f4 <HAL_SPI_MspInit+0xe0>)
 800133c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001340:	6613      	str	r3, [r2, #96]	; 0x60
 8001342:	4b2c      	ldr	r3, [pc, #176]	; (80013f4 <HAL_SPI_MspInit+0xe0>)
 8001344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001346:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800134a:	61bb      	str	r3, [r7, #24]
 800134c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134e:	4b29      	ldr	r3, [pc, #164]	; (80013f4 <HAL_SPI_MspInit+0xe0>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001352:	4a28      	ldr	r2, [pc, #160]	; (80013f4 <HAL_SPI_MspInit+0xe0>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	64d3      	str	r3, [r2, #76]	; 0x4c
 800135a:	4b26      	ldr	r3, [pc, #152]	; (80013f4 <HAL_SPI_MspInit+0xe0>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001366:	23e0      	movs	r3, #224	; 0xe0
 8001368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001372:	2303      	movs	r3, #3
 8001374:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001376:	2305      	movs	r3, #5
 8001378:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137a:	f107 031c 	add.w	r3, r7, #28
 800137e:	4619      	mov	r1, r3
 8001380:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001384:	f008 fba2 	bl	8009acc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001388:	e02d      	b.n	80013e6 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI2)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a1a      	ldr	r2, [pc, #104]	; (80013f8 <HAL_SPI_MspInit+0xe4>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d128      	bne.n	80013e6 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001394:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <HAL_SPI_MspInit+0xe0>)
 8001396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001398:	4a16      	ldr	r2, [pc, #88]	; (80013f4 <HAL_SPI_MspInit+0xe0>)
 800139a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800139e:	6593      	str	r3, [r2, #88]	; 0x58
 80013a0:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <HAL_SPI_MspInit+0xe0>)
 80013a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013a8:	613b      	str	r3, [r7, #16]
 80013aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ac:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <HAL_SPI_MspInit+0xe0>)
 80013ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b0:	4a10      	ldr	r2, [pc, #64]	; (80013f4 <HAL_SPI_MspInit+0xe0>)
 80013b2:	f043 0302 	orr.w	r3, r3, #2
 80013b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013b8:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <HAL_SPI_MspInit+0xe0>)
 80013ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80013c4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80013c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ca:	2302      	movs	r3, #2
 80013cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d2:	2303      	movs	r3, #3
 80013d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013d6:	2305      	movs	r3, #5
 80013d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013da:	f107 031c 	add.w	r3, r7, #28
 80013de:	4619      	mov	r1, r3
 80013e0:	4806      	ldr	r0, [pc, #24]	; (80013fc <HAL_SPI_MspInit+0xe8>)
 80013e2:	f008 fb73 	bl	8009acc <HAL_GPIO_Init>
}
 80013e6:	bf00      	nop
 80013e8:	3730      	adds	r7, #48	; 0x30
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40013000 	.word	0x40013000
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40003800 	.word	0x40003800
 80013fc:	48000400 	.word	0x48000400

08001400 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a23      	ldr	r2, [pc, #140]	; (800149c <HAL_TIM_Base_MspInit+0x9c>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d10c      	bne.n	800142c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001412:	4b23      	ldr	r3, [pc, #140]	; (80014a0 <HAL_TIM_Base_MspInit+0xa0>)
 8001414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001416:	4a22      	ldr	r2, [pc, #136]	; (80014a0 <HAL_TIM_Base_MspInit+0xa0>)
 8001418:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800141c:	6613      	str	r3, [r2, #96]	; 0x60
 800141e:	4b20      	ldr	r3, [pc, #128]	; (80014a0 <HAL_TIM_Base_MspInit+0xa0>)
 8001420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001422:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001426:	617b      	str	r3, [r7, #20]
 8001428:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800142a:	e032      	b.n	8001492 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM6)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a1c      	ldr	r2, [pc, #112]	; (80014a4 <HAL_TIM_Base_MspInit+0xa4>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d114      	bne.n	8001460 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001436:	4b1a      	ldr	r3, [pc, #104]	; (80014a0 <HAL_TIM_Base_MspInit+0xa0>)
 8001438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800143a:	4a19      	ldr	r2, [pc, #100]	; (80014a0 <HAL_TIM_Base_MspInit+0xa0>)
 800143c:	f043 0310 	orr.w	r3, r3, #16
 8001440:	6593      	str	r3, [r2, #88]	; 0x58
 8001442:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <HAL_TIM_Base_MspInit+0xa0>)
 8001444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001446:	f003 0310 	and.w	r3, r3, #16
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	2100      	movs	r1, #0
 8001452:	2036      	movs	r0, #54	; 0x36
 8001454:	f008 fa85 	bl	8009962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001458:	2036      	movs	r0, #54	; 0x36
 800145a:	f008 fa9e 	bl	800999a <HAL_NVIC_EnableIRQ>
}
 800145e:	e018      	b.n	8001492 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM7)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a10      	ldr	r2, [pc, #64]	; (80014a8 <HAL_TIM_Base_MspInit+0xa8>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d113      	bne.n	8001492 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800146a:	4b0d      	ldr	r3, [pc, #52]	; (80014a0 <HAL_TIM_Base_MspInit+0xa0>)
 800146c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800146e:	4a0c      	ldr	r2, [pc, #48]	; (80014a0 <HAL_TIM_Base_MspInit+0xa0>)
 8001470:	f043 0320 	orr.w	r3, r3, #32
 8001474:	6593      	str	r3, [r2, #88]	; 0x58
 8001476:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <HAL_TIM_Base_MspInit+0xa0>)
 8001478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800147a:	f003 0320 	and.w	r3, r3, #32
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001482:	2200      	movs	r2, #0
 8001484:	2100      	movs	r1, #0
 8001486:	2037      	movs	r0, #55	; 0x37
 8001488:	f008 fa6b 	bl	8009962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800148c:	2037      	movs	r0, #55	; 0x37
 800148e:	f008 fa84 	bl	800999a <HAL_NVIC_EnableIRQ>
}
 8001492:	bf00      	nop
 8001494:	3718      	adds	r7, #24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40012c00 	.word	0x40012c00
 80014a0:	40021000 	.word	0x40021000
 80014a4:	40001000 	.word	0x40001000
 80014a8:	40001400 	.word	0x40001400

080014ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014b0:	e7fe      	b.n	80014b0 <NMI_Handler+0x4>

080014b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b6:	e7fe      	b.n	80014b6 <HardFault_Handler+0x4>

080014b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014bc:	e7fe      	b.n	80014bc <MemManage_Handler+0x4>

080014be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c2:	e7fe      	b.n	80014c2 <BusFault_Handler+0x4>

080014c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c8:	e7fe      	b.n	80014c8 <UsageFault_Handler+0x4>

080014ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014f8:	f008 f914 	bl	8009724 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}

08001500 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001504:	4802      	ldr	r0, [pc, #8]	; (8001510 <USART1_IRQHandler+0x10>)
 8001506:	f00b f941 	bl	800c78c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20003470 	.word	0x20003470

08001514 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001518:	4802      	ldr	r0, [pc, #8]	; (8001524 <TIM6_DAC_IRQHandler+0x10>)
 800151a:	f00a fc93 	bl	800be44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	2000368c 	.word	0x2000368c

08001528 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800152c:	4802      	ldr	r0, [pc, #8]	; (8001538 <TIM7_IRQHandler+0x10>)
 800152e:	f00a fc89 	bl	800be44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	200036d8 	.word	0x200036d8

0800153c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001540:	4802      	ldr	r0, [pc, #8]	; (800154c <LPUART1_IRQHandler+0x10>)
 8001542:	f00b f923 	bl	800c78c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	200033ec 	.word	0x200033ec

08001550 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
	return 1;
 8001554:	2301      	movs	r3, #1
}
 8001556:	4618      	mov	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <_kill>:

int _kill(int pid, int sig)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800156a:	f00c fbb3 	bl	800dcd4 <__errno>
 800156e:	4603      	mov	r3, r0
 8001570:	2216      	movs	r2, #22
 8001572:	601a      	str	r2, [r3, #0]
	return -1;
 8001574:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001578:	4618      	mov	r0, r3
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <_exit>:

void _exit (int status)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001588:	f04f 31ff 	mov.w	r1, #4294967295
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff ffe7 	bl	8001560 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001592:	e7fe      	b.n	8001592 <_exit+0x12>

08001594 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
 80015a4:	e00a      	b.n	80015bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015a6:	f3af 8000 	nop.w
 80015aa:	4601      	mov	r1, r0
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	1c5a      	adds	r2, r3, #1
 80015b0:	60ba      	str	r2, [r7, #8]
 80015b2:	b2ca      	uxtb	r2, r1
 80015b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	3301      	adds	r3, #1
 80015ba:	617b      	str	r3, [r7, #20]
 80015bc:	697a      	ldr	r2, [r7, #20]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	dbf0      	blt.n	80015a6 <_read+0x12>
	}

return len;
 80015c4:	687b      	ldr	r3, [r7, #4]
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b086      	sub	sp, #24
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	60f8      	str	r0, [r7, #12]
 80015d6:	60b9      	str	r1, [r7, #8]
 80015d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
 80015de:	e009      	b.n	80015f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	1c5a      	adds	r2, r3, #1
 80015e4:	60ba      	str	r2, [r7, #8]
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	3301      	adds	r3, #1
 80015f2:	617b      	str	r3, [r7, #20]
 80015f4:	697a      	ldr	r2, [r7, #20]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	dbf1      	blt.n	80015e0 <_write+0x12>
	}
	return len;
 80015fc:	687b      	ldr	r3, [r7, #4]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <_close>:

int _close(int file)
{
 8001606:	b480      	push	{r7}
 8001608:	b083      	sub	sp, #12
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
	return -1;
 800160e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001612:	4618      	mov	r0, r3
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800161e:	b480      	push	{r7}
 8001620:	b083      	sub	sp, #12
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
 8001626:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800162e:	605a      	str	r2, [r3, #4]
	return 0;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <_isatty>:

int _isatty(int file)
{
 800163e:	b480      	push	{r7}
 8001640:	b083      	sub	sp, #12
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
	return 1;
 8001646:	2301      	movs	r3, #1
}
 8001648:	4618      	mov	r0, r3
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
	return 0;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
	...

08001670 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001678:	4a14      	ldr	r2, [pc, #80]	; (80016cc <_sbrk+0x5c>)
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <_sbrk+0x60>)
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001684:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <_sbrk+0x64>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d102      	bne.n	8001692 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <_sbrk+0x64>)
 800168e:	4a12      	ldr	r2, [pc, #72]	; (80016d8 <_sbrk+0x68>)
 8001690:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001692:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <_sbrk+0x64>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4413      	add	r3, r2
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	429a      	cmp	r2, r3
 800169e:	d207      	bcs.n	80016b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016a0:	f00c fb18 	bl	800dcd4 <__errno>
 80016a4:	4603      	mov	r3, r0
 80016a6:	220c      	movs	r2, #12
 80016a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295
 80016ae:	e009      	b.n	80016c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016b0:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <_sbrk+0x64>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016b6:	4b07      	ldr	r3, [pc, #28]	; (80016d4 <_sbrk+0x64>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4413      	add	r3, r2
 80016be:	4a05      	ldr	r2, [pc, #20]	; (80016d4 <_sbrk+0x64>)
 80016c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016c2:	68fb      	ldr	r3, [r7, #12]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20010000 	.word	0x20010000
 80016d0:	00000400 	.word	0x00000400
 80016d4:	20003728 	.word	0x20003728
 80016d8:	20005520 	.word	0x20005520

080016dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016e0:	4b06      	ldr	r3, [pc, #24]	; (80016fc <SystemInit+0x20>)
 80016e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016e6:	4a05      	ldr	r2, [pc, #20]	; (80016fc <SystemInit+0x20>)
 80016e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <DHCP_time_handler>:
	dhcp_tick_next = DHCP_WAIT_TIME;
	dhcp_retry_count = 0;
}

void DHCP_time_handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
	dhcp_tick_1s++;
 8001704:	4b04      	ldr	r3, [pc, #16]	; (8001718 <DHCP_time_handler+0x18>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	3301      	adds	r3, #1
 800170a:	4a03      	ldr	r2, [pc, #12]	; (8001718 <DHCP_time_handler+0x18>)
 800170c:	6013      	str	r3, [r2, #0]
}
 800170e:	bf00      	nop
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	2000372c 	.word	0x2000372c

0800171c <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af02      	add	r7, sp, #8
 8001722:	4603      	mov	r3, r0
 8001724:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8001726:	f107 020f 	add.w	r2, r7, #15
 800172a:	1df9      	adds	r1, r7, #7
 800172c:	2364      	movs	r3, #100	; 0x64
 800172e:	9300      	str	r3, [sp, #0]
 8001730:	2301      	movs	r3, #1
 8001732:	4804      	ldr	r0, [pc, #16]	; (8001744 <W25qxx_Spi+0x28>)
 8001734:	f009 ff17 	bl	800b566 <HAL_SPI_TransmitReceive>
	return ret;
 8001738:	7bfb      	ldrb	r3, [r7, #15]
}
 800173a:	4618      	mov	r0, r3
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20003578 	.word	0x20003578

08001748 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	2300      	movs	r3, #0
 8001754:	60bb      	str	r3, [r7, #8]
 8001756:	2300      	movs	r3, #0
 8001758:	607b      	str	r3, [r7, #4]
 800175a:	2300      	movs	r3, #0
 800175c:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800175e:	2200      	movs	r2, #0
 8001760:	2101      	movs	r1, #1
 8001762:	4813      	ldr	r0, [pc, #76]	; (80017b0 <W25qxx_ReadID+0x68>)
 8001764:	f008 fb2c 	bl	8009dc0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8001768:	209f      	movs	r0, #159	; 0x9f
 800176a:	f7ff ffd7 	bl	800171c <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800176e:	20a5      	movs	r0, #165	; 0xa5
 8001770:	f7ff ffd4 	bl	800171c <W25qxx_Spi>
 8001774:	4603      	mov	r3, r0
 8001776:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001778:	20a5      	movs	r0, #165	; 0xa5
 800177a:	f7ff ffcf 	bl	800171c <W25qxx_Spi>
 800177e:	4603      	mov	r3, r0
 8001780:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001782:	20a5      	movs	r0, #165	; 0xa5
 8001784:	f7ff ffca 	bl	800171c <W25qxx_Spi>
 8001788:	4603      	mov	r3, r0
 800178a:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800178c:	2201      	movs	r2, #1
 800178e:	2101      	movs	r1, #1
 8001790:	4807      	ldr	r0, [pc, #28]	; (80017b0 <W25qxx_ReadID+0x68>)
 8001792:	f008 fb15 	bl	8009dc0 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	041a      	lsls	r2, r3, #16
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	021b      	lsls	r3, r3, #8
 800179e:	4313      	orrs	r3, r2
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	60fb      	str	r3, [r7, #12]
	return Temp;
 80017a6:	68fb      	ldr	r3, [r7, #12]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	48000400 	.word	0x48000400

080017b4 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 80017b4:	b590      	push	{r4, r7, lr}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80017ba:	2200      	movs	r2, #0
 80017bc:	2101      	movs	r1, #1
 80017be:	4816      	ldr	r0, [pc, #88]	; (8001818 <W25qxx_ReadUniqID+0x64>)
 80017c0:	f008 fafe 	bl	8009dc0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 80017c4:	204b      	movs	r0, #75	; 0x4b
 80017c6:	f7ff ffa9 	bl	800171c <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80017ca:	2300      	movs	r3, #0
 80017cc:	71fb      	strb	r3, [r7, #7]
 80017ce:	e005      	b.n	80017dc <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80017d0:	20a5      	movs	r0, #165	; 0xa5
 80017d2:	f7ff ffa3 	bl	800171c <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	3301      	adds	r3, #1
 80017da:	71fb      	strb	r3, [r7, #7]
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	2b03      	cmp	r3, #3
 80017e0:	d9f6      	bls.n	80017d0 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 80017e2:	2300      	movs	r3, #0
 80017e4:	71bb      	strb	r3, [r7, #6]
 80017e6:	e00b      	b.n	8001800 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80017e8:	79bc      	ldrb	r4, [r7, #6]
 80017ea:	20a5      	movs	r0, #165	; 0xa5
 80017ec:	f7ff ff96 	bl	800171c <W25qxx_Spi>
 80017f0:	4603      	mov	r3, r0
 80017f2:	461a      	mov	r2, r3
 80017f4:	4b09      	ldr	r3, [pc, #36]	; (800181c <W25qxx_ReadUniqID+0x68>)
 80017f6:	4423      	add	r3, r4
 80017f8:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 80017fa:	79bb      	ldrb	r3, [r7, #6]
 80017fc:	3301      	adds	r3, #1
 80017fe:	71bb      	strb	r3, [r7, #6]
 8001800:	79bb      	ldrb	r3, [r7, #6]
 8001802:	2b07      	cmp	r3, #7
 8001804:	d9f0      	bls.n	80017e8 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001806:	2201      	movs	r2, #1
 8001808:	2101      	movs	r1, #1
 800180a:	4803      	ldr	r0, [pc, #12]	; (8001818 <W25qxx_ReadUniqID+0x64>)
 800180c:	f008 fad8 	bl	8009dc0 <HAL_GPIO_WritePin>
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	bd90      	pop	{r4, r7, pc}
 8001818:	48000400 	.word	0x48000400
 800181c:	20003730 	.word	0x20003730

08001820 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 800182a:	2300      	movs	r3, #0
 800182c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800182e:	2200      	movs	r2, #0
 8001830:	2101      	movs	r1, #1
 8001832:	481c      	ldr	r0, [pc, #112]	; (80018a4 <W25qxx_ReadStatusRegister+0x84>)
 8001834:	f008 fac4 	bl	8009dc0 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d10c      	bne.n	8001858 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 800183e:	2005      	movs	r0, #5
 8001840:	f7ff ff6c 	bl	800171c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001844:	20a5      	movs	r0, #165	; 0xa5
 8001846:	f7ff ff69 	bl	800171c <W25qxx_Spi>
 800184a:	4603      	mov	r3, r0
 800184c:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 800184e:	4a16      	ldr	r2, [pc, #88]	; (80018a8 <W25qxx_ReadStatusRegister+0x88>)
 8001850:	7bfb      	ldrb	r3, [r7, #15]
 8001852:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8001856:	e01b      	b.n	8001890 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	2b02      	cmp	r3, #2
 800185c:	d10c      	bne.n	8001878 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 800185e:	2035      	movs	r0, #53	; 0x35
 8001860:	f7ff ff5c 	bl	800171c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001864:	20a5      	movs	r0, #165	; 0xa5
 8001866:	f7ff ff59 	bl	800171c <W25qxx_Spi>
 800186a:	4603      	mov	r3, r0
 800186c:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 800186e:	4a0e      	ldr	r2, [pc, #56]	; (80018a8 <W25qxx_ReadStatusRegister+0x88>)
 8001870:	7bfb      	ldrb	r3, [r7, #15]
 8001872:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8001876:	e00b      	b.n	8001890 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8001878:	2015      	movs	r0, #21
 800187a:	f7ff ff4f 	bl	800171c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800187e:	20a5      	movs	r0, #165	; 0xa5
 8001880:	f7ff ff4c 	bl	800171c <W25qxx_Spi>
 8001884:	4603      	mov	r3, r0
 8001886:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8001888:	4a07      	ldr	r2, [pc, #28]	; (80018a8 <W25qxx_ReadStatusRegister+0x88>)
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001890:	2201      	movs	r2, #1
 8001892:	2101      	movs	r1, #1
 8001894:	4803      	ldr	r0, [pc, #12]	; (80018a4 <W25qxx_ReadStatusRegister+0x84>)
 8001896:	f008 fa93 	bl	8009dc0 <HAL_GPIO_WritePin>
	return status;
 800189a:	7bfb      	ldrb	r3, [r7, #15]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	48000400 	.word	0x48000400
 80018a8:	20003730 	.word	0x20003730

080018ac <W25qxx_Init>:
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
bool W25qxx_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 80018b2:	4b65      	ldr	r3, [pc, #404]	; (8001a48 <W25qxx_Init+0x19c>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 80018ba:	e002      	b.n	80018c2 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 80018bc:	2001      	movs	r0, #1
 80018be:	f007 ff51 	bl	8009764 <HAL_Delay>
	while (HAL_GetTick() < 100)
 80018c2:	f007 ff43 	bl	800974c <HAL_GetTick>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b63      	cmp	r3, #99	; 0x63
 80018ca:	d9f7      	bls.n	80018bc <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80018cc:	2201      	movs	r2, #1
 80018ce:	2101      	movs	r1, #1
 80018d0:	485e      	ldr	r0, [pc, #376]	; (8001a4c <W25qxx_Init+0x1a0>)
 80018d2:	f008 fa75 	bl	8009dc0 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 80018d6:	2064      	movs	r0, #100	; 0x64
 80018d8:	f007 ff44 	bl	8009764 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 80018dc:	f7ff ff34 	bl	8001748 <W25qxx_ReadID>
 80018e0:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	3b11      	subs	r3, #17
 80018e8:	2b0f      	cmp	r3, #15
 80018ea:	d86c      	bhi.n	80019c6 <W25qxx_Init+0x11a>
 80018ec:	a201      	add	r2, pc, #4	; (adr r2, 80018f4 <W25qxx_Init+0x48>)
 80018ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f2:	bf00      	nop
 80018f4:	080019b9 	.word	0x080019b9
 80018f8:	080019ab 	.word	0x080019ab
 80018fc:	0800199d 	.word	0x0800199d
 8001900:	0800198f 	.word	0x0800198f
 8001904:	08001981 	.word	0x08001981
 8001908:	08001973 	.word	0x08001973
 800190c:	08001965 	.word	0x08001965
 8001910:	08001955 	.word	0x08001955
 8001914:	08001945 	.word	0x08001945
 8001918:	080019c7 	.word	0x080019c7
 800191c:	080019c7 	.word	0x080019c7
 8001920:	080019c7 	.word	0x080019c7
 8001924:	080019c7 	.word	0x080019c7
 8001928:	080019c7 	.word	0x080019c7
 800192c:	080019c7 	.word	0x080019c7
 8001930:	08001935 	.word	0x08001935
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8001934:	4b44      	ldr	r3, [pc, #272]	; (8001a48 <W25qxx_Init+0x19c>)
 8001936:	220a      	movs	r2, #10
 8001938:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 800193a:	4b43      	ldr	r3, [pc, #268]	; (8001a48 <W25qxx_Init+0x19c>)
 800193c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001940:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 8001942:	e046      	b.n	80019d2 <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8001944:	4b40      	ldr	r3, [pc, #256]	; (8001a48 <W25qxx_Init+0x19c>)
 8001946:	2209      	movs	r2, #9
 8001948:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 800194a:	4b3f      	ldr	r3, [pc, #252]	; (8001a48 <W25qxx_Init+0x19c>)
 800194c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001950:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 8001952:	e03e      	b.n	80019d2 <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8001954:	4b3c      	ldr	r3, [pc, #240]	; (8001a48 <W25qxx_Init+0x19c>)
 8001956:	2208      	movs	r2, #8
 8001958:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 800195a:	4b3b      	ldr	r3, [pc, #236]	; (8001a48 <W25qxx_Init+0x19c>)
 800195c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001960:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 8001962:	e036      	b.n	80019d2 <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8001964:	4b38      	ldr	r3, [pc, #224]	; (8001a48 <W25qxx_Init+0x19c>)
 8001966:	2207      	movs	r2, #7
 8001968:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 800196a:	4b37      	ldr	r3, [pc, #220]	; (8001a48 <W25qxx_Init+0x19c>)
 800196c:	2280      	movs	r2, #128	; 0x80
 800196e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 8001970:	e02f      	b.n	80019d2 <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8001972:	4b35      	ldr	r3, [pc, #212]	; (8001a48 <W25qxx_Init+0x19c>)
 8001974:	2206      	movs	r2, #6
 8001976:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8001978:	4b33      	ldr	r3, [pc, #204]	; (8001a48 <W25qxx_Init+0x19c>)
 800197a:	2240      	movs	r2, #64	; 0x40
 800197c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 800197e:	e028      	b.n	80019d2 <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8001980:	4b31      	ldr	r3, [pc, #196]	; (8001a48 <W25qxx_Init+0x19c>)
 8001982:	2205      	movs	r2, #5
 8001984:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8001986:	4b30      	ldr	r3, [pc, #192]	; (8001a48 <W25qxx_Init+0x19c>)
 8001988:	2220      	movs	r2, #32
 800198a:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 800198c:	e021      	b.n	80019d2 <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 800198e:	4b2e      	ldr	r3, [pc, #184]	; (8001a48 <W25qxx_Init+0x19c>)
 8001990:	2204      	movs	r2, #4
 8001992:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8001994:	4b2c      	ldr	r3, [pc, #176]	; (8001a48 <W25qxx_Init+0x19c>)
 8001996:	2210      	movs	r2, #16
 8001998:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 800199a:	e01a      	b.n	80019d2 <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 800199c:	4b2a      	ldr	r3, [pc, #168]	; (8001a48 <W25qxx_Init+0x19c>)
 800199e:	2203      	movs	r2, #3
 80019a0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 80019a2:	4b29      	ldr	r3, [pc, #164]	; (8001a48 <W25qxx_Init+0x19c>)
 80019a4:	2208      	movs	r2, #8
 80019a6:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 80019a8:	e013      	b.n	80019d2 <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 80019aa:	4b27      	ldr	r3, [pc, #156]	; (8001a48 <W25qxx_Init+0x19c>)
 80019ac:	2202      	movs	r2, #2
 80019ae:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 80019b0:	4b25      	ldr	r3, [pc, #148]	; (8001a48 <W25qxx_Init+0x19c>)
 80019b2:	2204      	movs	r2, #4
 80019b4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 80019b6:	e00c      	b.n	80019d2 <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 80019b8:	4b23      	ldr	r3, [pc, #140]	; (8001a48 <W25qxx_Init+0x19c>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 80019be:	4b22      	ldr	r3, [pc, #136]	; (8001a48 <W25qxx_Init+0x19c>)
 80019c0:	2202      	movs	r2, #2
 80019c2:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 80019c4:	e005      	b.n	80019d2 <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 80019c6:	4b20      	ldr	r3, [pc, #128]	; (8001a48 <W25qxx_Init+0x19c>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 80019ce:	2300      	movs	r3, #0
 80019d0:	e036      	b.n	8001a40 <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 80019d2:	4b1d      	ldr	r3, [pc, #116]	; (8001a48 <W25qxx_Init+0x19c>)
 80019d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019d8:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 80019da:	4b1b      	ldr	r3, [pc, #108]	; (8001a48 <W25qxx_Init+0x19c>)
 80019dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019e0:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 80019e2:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <W25qxx_Init+0x19c>)
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	011b      	lsls	r3, r3, #4
 80019e8:	4a17      	ldr	r2, [pc, #92]	; (8001a48 <W25qxx_Init+0x19c>)
 80019ea:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 80019ec:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <W25qxx_Init+0x19c>)
 80019ee:	695b      	ldr	r3, [r3, #20]
 80019f0:	4a15      	ldr	r2, [pc, #84]	; (8001a48 <W25qxx_Init+0x19c>)
 80019f2:	6912      	ldr	r2, [r2, #16]
 80019f4:	fb02 f303 	mul.w	r3, r2, r3
 80019f8:	4a13      	ldr	r2, [pc, #76]	; (8001a48 <W25qxx_Init+0x19c>)
 80019fa:	8952      	ldrh	r2, [r2, #10]
 80019fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a00:	4a11      	ldr	r2, [pc, #68]	; (8001a48 <W25qxx_Init+0x19c>)
 8001a02:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8001a04:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <W25qxx_Init+0x19c>)
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	011b      	lsls	r3, r3, #4
 8001a0a:	4a0f      	ldr	r2, [pc, #60]	; (8001a48 <W25qxx_Init+0x19c>)
 8001a0c:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <W25qxx_Init+0x19c>)
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	4a0d      	ldr	r2, [pc, #52]	; (8001a48 <W25qxx_Init+0x19c>)
 8001a14:	6912      	ldr	r2, [r2, #16]
 8001a16:	fb02 f303 	mul.w	r3, r2, r3
 8001a1a:	0a9b      	lsrs	r3, r3, #10
 8001a1c:	4a0a      	ldr	r2, [pc, #40]	; (8001a48 <W25qxx_Init+0x19c>)
 8001a1e:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8001a20:	f7ff fec8 	bl	80017b4 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8001a24:	2001      	movs	r0, #1
 8001a26:	f7ff fefb 	bl	8001820 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8001a2a:	2002      	movs	r0, #2
 8001a2c:	f7ff fef8 	bl	8001820 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8001a30:	2003      	movs	r0, #3
 8001a32:	f7ff fef5 	bl	8001820 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 8001a36:	4b04      	ldr	r3, [pc, #16]	; (8001a48 <W25qxx_Init+0x19c>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8001a3e:	2301      	movs	r3, #1
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20003730 	.word	0x20003730
 8001a4c:	48000400 	.word	0x48000400

08001a50 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8001a58:	4b22      	ldr	r3, [pc, #136]	; (8001ae4 <WIZCHIP_READ+0x94>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001a5e:	4b21      	ldr	r3, [pc, #132]	; (8001ae4 <WIZCHIP_READ+0x94>)
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001a64:	4b1f      	ldr	r3, [pc, #124]	; (8001ae4 <WIZCHIP_READ+0x94>)
 8001a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <WIZCHIP_READ+0x24>
 8001a6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <WIZCHIP_READ+0x94>)
 8001a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d114      	bne.n	8001a9e <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001a74:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <WIZCHIP_READ+0x94>)
 8001a76:	6a1b      	ldr	r3, [r3, #32]
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	0c12      	lsrs	r2, r2, #16
 8001a7c:	b2d2      	uxtb	r2, r2
 8001a7e:	4610      	mov	r0, r2
 8001a80:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001a82:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <WIZCHIP_READ+0x94>)
 8001a84:	6a1b      	ldr	r3, [r3, #32]
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	0a12      	lsrs	r2, r2, #8
 8001a8a:	b2d2      	uxtb	r2, r2
 8001a8c:	4610      	mov	r0, r2
 8001a8e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001a90:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <WIZCHIP_READ+0x94>)
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	4610      	mov	r0, r2
 8001a9a:	4798      	blx	r3
 8001a9c:	e011      	b.n	8001ac2 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	0c1b      	lsrs	r3, r3, #16
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	0a1b      	lsrs	r3, r3, #8
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <WIZCHIP_READ+0x94>)
 8001ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab8:	f107 020c 	add.w	r2, r7, #12
 8001abc:	2103      	movs	r1, #3
 8001abe:	4610      	mov	r0, r2
 8001ac0:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8001ac2:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <WIZCHIP_READ+0x94>)
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	4798      	blx	r3
 8001ac8:	4603      	mov	r3, r0
 8001aca:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8001acc:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <WIZCHIP_READ+0x94>)
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001ad2:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <WIZCHIP_READ+0x94>)
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	4798      	blx	r3
   return ret;
 8001ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000058 	.word	0x20000058

08001ae8 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	460b      	mov	r3, r1
 8001af2:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8001af4:	4b22      	ldr	r3, [pc, #136]	; (8001b80 <WIZCHIP_WRITE+0x98>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001afa:	4b21      	ldr	r3, [pc, #132]	; (8001b80 <WIZCHIP_WRITE+0x98>)
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f043 0304 	orr.w	r3, r3, #4
 8001b06:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001b08:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <WIZCHIP_WRITE+0x98>)
 8001b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d119      	bne.n	8001b44 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001b10:	4b1b      	ldr	r3, [pc, #108]	; (8001b80 <WIZCHIP_WRITE+0x98>)
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	0c12      	lsrs	r2, r2, #16
 8001b18:	b2d2      	uxtb	r2, r2
 8001b1a:	4610      	mov	r0, r2
 8001b1c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001b1e:	4b18      	ldr	r3, [pc, #96]	; (8001b80 <WIZCHIP_WRITE+0x98>)
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	0a12      	lsrs	r2, r2, #8
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	4610      	mov	r0, r2
 8001b2a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001b2c:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <WIZCHIP_WRITE+0x98>)
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	4610      	mov	r0, r2
 8001b36:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8001b38:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <WIZCHIP_WRITE+0x98>)
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	78fa      	ldrb	r2, [r7, #3]
 8001b3e:	4610      	mov	r0, r2
 8001b40:	4798      	blx	r3
 8001b42:	e013      	b.n	8001b6c <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	0c1b      	lsrs	r3, r3, #16
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	0a1b      	lsrs	r3, r3, #8
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8001b5a:	78fb      	ldrb	r3, [r7, #3]
 8001b5c:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8001b5e:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <WIZCHIP_WRITE+0x98>)
 8001b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b62:	f107 020c 	add.w	r2, r7, #12
 8001b66:	2104      	movs	r1, #4
 8001b68:	4610      	mov	r0, r2
 8001b6a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001b6c:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <WIZCHIP_WRITE+0x98>)
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001b72:	4b03      	ldr	r3, [pc, #12]	; (8001b80 <WIZCHIP_WRITE+0x98>)
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	4798      	blx	r3
}
 8001b78:	bf00      	nop
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20000058 	.word	0x20000058

08001b84 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001b84:	b590      	push	{r4, r7, lr}
 8001b86:	b087      	sub	sp, #28
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001b92:	4b2b      	ldr	r3, [pc, #172]	; (8001c40 <WIZCHIP_READ_BUF+0xbc>)
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001b98:	4b29      	ldr	r3, [pc, #164]	; (8001c40 <WIZCHIP_READ_BUF+0xbc>)
 8001b9a:	695b      	ldr	r3, [r3, #20]
 8001b9c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001b9e:	4b28      	ldr	r3, [pc, #160]	; (8001c40 <WIZCHIP_READ_BUF+0xbc>)
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <WIZCHIP_READ_BUF+0x2a>
 8001ba6:	4b26      	ldr	r3, [pc, #152]	; (8001c40 <WIZCHIP_READ_BUF+0xbc>)
 8001ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d126      	bne.n	8001bfc <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001bae:	4b24      	ldr	r3, [pc, #144]	; (8001c40 <WIZCHIP_READ_BUF+0xbc>)
 8001bb0:	6a1b      	ldr	r3, [r3, #32]
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	0c12      	lsrs	r2, r2, #16
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	4610      	mov	r0, r2
 8001bba:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001bbc:	4b20      	ldr	r3, [pc, #128]	; (8001c40 <WIZCHIP_READ_BUF+0xbc>)
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	0a12      	lsrs	r2, r2, #8
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	4610      	mov	r0, r2
 8001bc8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001bca:	4b1d      	ldr	r3, [pc, #116]	; (8001c40 <WIZCHIP_READ_BUF+0xbc>)
 8001bcc:	6a1b      	ldr	r3, [r3, #32]
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	82fb      	strh	r3, [r7, #22]
 8001bda:	e00a      	b.n	8001bf2 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8001bdc:	4b18      	ldr	r3, [pc, #96]	; (8001c40 <WIZCHIP_READ_BUF+0xbc>)
 8001bde:	69db      	ldr	r3, [r3, #28]
 8001be0:	8afa      	ldrh	r2, [r7, #22]
 8001be2:	68b9      	ldr	r1, [r7, #8]
 8001be4:	188c      	adds	r4, r1, r2
 8001be6:	4798      	blx	r3
 8001be8:	4603      	mov	r3, r0
 8001bea:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8001bec:	8afb      	ldrh	r3, [r7, #22]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	82fb      	strh	r3, [r7, #22]
 8001bf2:	8afa      	ldrh	r2, [r7, #22]
 8001bf4:	88fb      	ldrh	r3, [r7, #6]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d3f0      	bcc.n	8001bdc <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001bfa:	e017      	b.n	8001c2c <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	0c1b      	lsrs	r3, r3, #16
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	0a1b      	lsrs	r3, r3, #8
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001c12:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <WIZCHIP_READ_BUF+0xbc>)
 8001c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c16:	f107 0210 	add.w	r2, r7, #16
 8001c1a:	2103      	movs	r1, #3
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8001c20:	4b07      	ldr	r3, [pc, #28]	; (8001c40 <WIZCHIP_READ_BUF+0xbc>)
 8001c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c24:	88fa      	ldrh	r2, [r7, #6]
 8001c26:	4611      	mov	r1, r2
 8001c28:	68b8      	ldr	r0, [r7, #8]
 8001c2a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001c2c:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <WIZCHIP_READ_BUF+0xbc>)
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001c32:	4b03      	ldr	r3, [pc, #12]	; (8001c40 <WIZCHIP_READ_BUF+0xbc>)
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	4798      	blx	r3
}
 8001c38:	bf00      	nop
 8001c3a:	371c      	adds	r7, #28
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd90      	pop	{r4, r7, pc}
 8001c40:	20000058 	.word	0x20000058

08001c44 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001c52:	4b2b      	ldr	r3, [pc, #172]	; (8001d00 <WIZCHIP_WRITE_BUF+0xbc>)
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001c58:	4b29      	ldr	r3, [pc, #164]	; (8001d00 <WIZCHIP_WRITE_BUF+0xbc>)
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f043 0304 	orr.w	r3, r3, #4
 8001c64:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001c66:	4b26      	ldr	r3, [pc, #152]	; (8001d00 <WIZCHIP_WRITE_BUF+0xbc>)
 8001c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d126      	bne.n	8001cbc <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001c6e:	4b24      	ldr	r3, [pc, #144]	; (8001d00 <WIZCHIP_WRITE_BUF+0xbc>)
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	0c12      	lsrs	r2, r2, #16
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	4610      	mov	r0, r2
 8001c7a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001c7c:	4b20      	ldr	r3, [pc, #128]	; (8001d00 <WIZCHIP_WRITE_BUF+0xbc>)
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	0a12      	lsrs	r2, r2, #8
 8001c84:	b2d2      	uxtb	r2, r2
 8001c86:	4610      	mov	r0, r2
 8001c88:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001c8a:	4b1d      	ldr	r3, [pc, #116]	; (8001d00 <WIZCHIP_WRITE_BUF+0xbc>)
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	b2d2      	uxtb	r2, r2
 8001c92:	4610      	mov	r0, r2
 8001c94:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001c96:	2300      	movs	r3, #0
 8001c98:	82fb      	strh	r3, [r7, #22]
 8001c9a:	e00a      	b.n	8001cb2 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8001c9c:	4b18      	ldr	r3, [pc, #96]	; (8001d00 <WIZCHIP_WRITE_BUF+0xbc>)
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
 8001ca0:	8afa      	ldrh	r2, [r7, #22]
 8001ca2:	68b9      	ldr	r1, [r7, #8]
 8001ca4:	440a      	add	r2, r1
 8001ca6:	7812      	ldrb	r2, [r2, #0]
 8001ca8:	4610      	mov	r0, r2
 8001caa:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001cac:	8afb      	ldrh	r3, [r7, #22]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	82fb      	strh	r3, [r7, #22]
 8001cb2:	8afa      	ldrh	r2, [r7, #22]
 8001cb4:	88fb      	ldrh	r3, [r7, #6]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d3f0      	bcc.n	8001c9c <WIZCHIP_WRITE_BUF+0x58>
 8001cba:	e017      	b.n	8001cec <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	0c1b      	lsrs	r3, r3, #16
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	0a1b      	lsrs	r3, r3, #8
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <WIZCHIP_WRITE_BUF+0xbc>)
 8001cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd6:	f107 0210 	add.w	r2, r7, #16
 8001cda:	2103      	movs	r1, #3
 8001cdc:	4610      	mov	r0, r2
 8001cde:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8001ce0:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <WIZCHIP_WRITE_BUF+0xbc>)
 8001ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce4:	88fa      	ldrh	r2, [r7, #6]
 8001ce6:	4611      	mov	r1, r2
 8001ce8:	68b8      	ldr	r0, [r7, #8]
 8001cea:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001cec:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <WIZCHIP_WRITE_BUF+0xbc>)
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001cf2:	4b03      	ldr	r3, [pc, #12]	; (8001d00 <WIZCHIP_WRITE_BUF+0xbc>)
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	4798      	blx	r3
}
 8001cf8:	bf00      	nop
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	20000058 	.word	0x20000058

08001d04 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8001d04:	b590      	push	{r4, r7, lr}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	81fb      	strh	r3, [r7, #14]
 8001d12:	2300      	movs	r3, #0
 8001d14:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff fe94 	bl	8001a50 <WIZCHIP_READ>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001d2c:	89bb      	ldrh	r3, [r7, #12]
 8001d2e:	021b      	lsls	r3, r3, #8
 8001d30:	b29c      	uxth	r4, r3
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	3301      	adds	r3, #1
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff fe86 	bl	8001a50 <WIZCHIP_READ>
 8001d44:	4603      	mov	r3, r0
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	4423      	add	r3, r4
 8001d4a:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8001d4c:	89bb      	ldrh	r3, [r7, #12]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d01a      	beq.n	8001d88 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	3301      	adds	r3, #1
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff fe76 	bl	8001a50 <WIZCHIP_READ>
 8001d64:	4603      	mov	r3, r0
 8001d66:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001d68:	89fb      	ldrh	r3, [r7, #14]
 8001d6a:	021b      	lsls	r3, r3, #8
 8001d6c:	b29c      	uxth	r4, r3
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	3301      	adds	r3, #1
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff fe68 	bl	8001a50 <WIZCHIP_READ>
 8001d80:	4603      	mov	r3, r0
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	4423      	add	r3, r4
 8001d86:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8001d88:	89fa      	ldrh	r2, [r7, #14]
 8001d8a:	89bb      	ldrh	r3, [r7, #12]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d1c2      	bne.n	8001d16 <getSn_TX_FSR+0x12>
   return val;
 8001d90:	89fb      	ldrh	r3, [r7, #14]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3714      	adds	r7, #20
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd90      	pop	{r4, r7, pc}

08001d9a <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8001d9a:	b590      	push	{r4, r7, lr}
 8001d9c:	b085      	sub	sp, #20
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	4603      	mov	r3, r0
 8001da2:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	81fb      	strh	r3, [r7, #14]
 8001da8:	2300      	movs	r3, #0
 8001daa:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001dac:	79fb      	ldrb	r3, [r7, #7]
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	3301      	adds	r3, #1
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff fe49 	bl	8001a50 <WIZCHIP_READ>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8001dc2:	89bb      	ldrh	r3, [r7, #12]
 8001dc4:	021b      	lsls	r3, r3, #8
 8001dc6:	b29c      	uxth	r4, r3
 8001dc8:	79fb      	ldrb	r3, [r7, #7]
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	3301      	adds	r3, #1
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff fe3b 	bl	8001a50 <WIZCHIP_READ>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	4423      	add	r3, r4
 8001de0:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8001de2:	89bb      	ldrh	r3, [r7, #12]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d01a      	beq.n	8001e1e <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	3301      	adds	r3, #1
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff fe2b 	bl	8001a50 <WIZCHIP_READ>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8001dfe:	89fb      	ldrh	r3, [r7, #14]
 8001e00:	021b      	lsls	r3, r3, #8
 8001e02:	b29c      	uxth	r4, r3
 8001e04:	79fb      	ldrb	r3, [r7, #7]
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	3301      	adds	r3, #1
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff fe1d 	bl	8001a50 <WIZCHIP_READ>
 8001e16:	4603      	mov	r3, r0
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	4423      	add	r3, r4
 8001e1c:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8001e1e:	89fa      	ldrh	r2, [r7, #14]
 8001e20:	89bb      	ldrh	r3, [r7, #12]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d1c2      	bne.n	8001dac <getSn_RX_RSR+0x12>
   return val;
 8001e26:	89fb      	ldrh	r3, [r7, #14]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3714      	adds	r7, #20
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd90      	pop	{r4, r7, pc}

08001e30 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8001e30:	b590      	push	{r4, r7, lr}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	6039      	str	r1, [r7, #0]
 8001e3a:	71fb      	strb	r3, [r7, #7]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8001e40:	2300      	movs	r3, #0
 8001e42:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8001e44:	2300      	movs	r3, #0
 8001e46:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8001e48:	88bb      	ldrh	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d048      	beq.n	8001ee0 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8001e4e:	79fb      	ldrb	r3, [r7, #7]
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	3301      	adds	r3, #1
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff fdf8 	bl	8001a50 <WIZCHIP_READ>
 8001e60:	4603      	mov	r3, r0
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	021b      	lsls	r3, r3, #8
 8001e66:	b29c      	uxth	r4, r3
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff fdeb 	bl	8001a50 <WIZCHIP_READ>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	4423      	add	r3, r4
 8001e80:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8001e82:	89fb      	ldrh	r3, [r7, #14]
 8001e84:	021b      	lsls	r3, r3, #8
 8001e86:	79fa      	ldrb	r2, [r7, #7]
 8001e88:	0092      	lsls	r2, r2, #2
 8001e8a:	3202      	adds	r2, #2
 8001e8c:	00d2      	lsls	r2, r2, #3
 8001e8e:	4413      	add	r3, r2
 8001e90:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8001e92:	88bb      	ldrh	r3, [r7, #4]
 8001e94:	461a      	mov	r2, r3
 8001e96:	6839      	ldr	r1, [r7, #0]
 8001e98:	68b8      	ldr	r0, [r7, #8]
 8001e9a:	f7ff fed3 	bl	8001c44 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8001e9e:	89fa      	ldrh	r2, [r7, #14]
 8001ea0:	88bb      	ldrh	r3, [r7, #4]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	3301      	adds	r3, #1
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	89fb      	ldrh	r3, [r7, #14]
 8001eb6:	0a1b      	lsrs	r3, r3, #8
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4610      	mov	r0, r2
 8001ec0:	f7ff fe12 	bl	8001ae8 <WIZCHIP_WRITE>
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	3301      	adds	r3, #1
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	89fb      	ldrh	r3, [r7, #14]
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4610      	mov	r0, r2
 8001eda:	f7ff fe05 	bl	8001ae8 <WIZCHIP_WRITE>
 8001ede:	e000      	b.n	8001ee2 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8001ee0:	bf00      	nop
}
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd90      	pop	{r4, r7, pc}

08001ee8 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8001ee8:	b590      	push	{r4, r7, lr}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	6039      	str	r1, [r7, #0]
 8001ef2:	71fb      	strb	r3, [r7, #7]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8001efc:	2300      	movs	r3, #0
 8001efe:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8001f00:	88bb      	ldrh	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d048      	beq.n	8001f98 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8001f06:	79fb      	ldrb	r3, [r7, #7]
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff fd9c 	bl	8001a50 <WIZCHIP_READ>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	021b      	lsls	r3, r3, #8
 8001f1e:	b29c      	uxth	r4, r3
 8001f20:	79fb      	ldrb	r3, [r7, #7]
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	3301      	adds	r3, #1
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff fd8f 	bl	8001a50 <WIZCHIP_READ>
 8001f32:	4603      	mov	r3, r0
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	4423      	add	r3, r4
 8001f38:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8001f3a:	89fb      	ldrh	r3, [r7, #14]
 8001f3c:	021b      	lsls	r3, r3, #8
 8001f3e:	79fa      	ldrb	r2, [r7, #7]
 8001f40:	0092      	lsls	r2, r2, #2
 8001f42:	3203      	adds	r2, #3
 8001f44:	00d2      	lsls	r2, r2, #3
 8001f46:	4413      	add	r3, r2
 8001f48:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8001f4a:	88bb      	ldrh	r3, [r7, #4]
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	6839      	ldr	r1, [r7, #0]
 8001f50:	68b8      	ldr	r0, [r7, #8]
 8001f52:	f7ff fe17 	bl	8001b84 <WIZCHIP_READ_BUF>
   ptr += len;
 8001f56:	89fa      	ldrh	r2, [r7, #14]
 8001f58:	88bb      	ldrh	r3, [r7, #4]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	3301      	adds	r3, #1
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	89fb      	ldrh	r3, [r7, #14]
 8001f6e:	0a1b      	lsrs	r3, r3, #8
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	4619      	mov	r1, r3
 8001f76:	4610      	mov	r0, r2
 8001f78:	f7ff fdb6 	bl	8001ae8 <WIZCHIP_WRITE>
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	3301      	adds	r3, #1
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8001f88:	461a      	mov	r2, r3
 8001f8a:	89fb      	ldrh	r3, [r7, #14]
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4610      	mov	r0, r2
 8001f92:	f7ff fda9 	bl	8001ae8 <WIZCHIP_WRITE>
 8001f96:	e000      	b.n	8001f9a <wiz_recv_data+0xb2>
   if(len == 0) return;
 8001f98:	bf00      	nop
}
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd90      	pop	{r4, r7, pc}

08001fa0 <httpc_init>:
192.168.0.206
*/
/* Public & Private functions ------------------------------------------------*/

uint8_t httpc_init(uint8_t sock, uint8_t * ip, uint16_t port, uint8_t * sbuf, uint8_t * rbuf)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b087      	sub	sp, #28
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60b9      	str	r1, [r7, #8]
 8001fa8:	607b      	str	r3, [r7, #4]
 8001faa:	4603      	mov	r3, r0
 8001fac:	73fb      	strb	r3, [r7, #15]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	81bb      	strh	r3, [r7, #12]
	uint8_t ret = HTTPC_FALSE;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	75fb      	strb	r3, [r7, #23]

	if(sock <= _WIZCHIP_SOCK_NUM_)
 8001fb6:	7bfb      	ldrb	r3, [r7, #15]
 8001fb8:	2b08      	cmp	r3, #8
 8001fba:	d81e      	bhi.n	8001ffa <httpc_init+0x5a>
	{
		// Hardware socket number for HTTP client (0 ~ 7)
		httpsock = sock;
 8001fbc:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001fc0:	4b11      	ldr	r3, [pc, #68]	; (8002008 <httpc_init+0x68>)
 8001fc2:	701a      	strb	r2, [r3, #0]

		// Shared buffers: HTTP Send / Recevice
		httpc_send_buf = sbuf;
 8001fc4:	4a11      	ldr	r2, [pc, #68]	; (800200c <httpc_init+0x6c>)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6013      	str	r3, [r2, #0]
		httpc_recv_buf = rbuf;
 8001fca:	4a11      	ldr	r2, [pc, #68]	; (8002010 <httpc_init+0x70>)
 8001fcc:	6a3b      	ldr	r3, [r7, #32]
 8001fce:	6013      	str	r3, [r2, #0]

		// Destination IP address and Port number
		// (Destination = HTTP server)
		dest_ip[0] = ip[0];
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	781a      	ldrb	r2, [r3, #0]
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <httpc_init+0x74>)
 8001fd6:	701a      	strb	r2, [r3, #0]
		dest_ip[1] = ip[1];
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	785a      	ldrb	r2, [r3, #1]
 8001fdc:	4b0d      	ldr	r3, [pc, #52]	; (8002014 <httpc_init+0x74>)
 8001fde:	705a      	strb	r2, [r3, #1]
		dest_ip[2] = ip[2];
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	789a      	ldrb	r2, [r3, #2]
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <httpc_init+0x74>)
 8001fe6:	709a      	strb	r2, [r3, #2]
		dest_ip[3] = ip[3];
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	78da      	ldrb	r2, [r3, #3]
 8001fec:	4b09      	ldr	r3, [pc, #36]	; (8002014 <httpc_init+0x74>)
 8001fee:	70da      	strb	r2, [r3, #3]
		dest_port = port;
 8001ff0:	4a09      	ldr	r2, [pc, #36]	; (8002018 <httpc_init+0x78>)
 8001ff2:	89bb      	ldrh	r3, [r7, #12]
 8001ff4:	8013      	strh	r3, [r2, #0]

		ret = HTTPC_TRUE;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 8001ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	371c      	adds	r7, #28
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	200038c0 	.word	0x200038c0
 800200c:	200038b8 	.word	0x200038b8
 8002010:	200038bc 	.word	0x200038bc
 8002014:	2000001c 	.word	0x2000001c
 8002018:	20000020 	.word	0x20000020

0800201c <httpc_connection_handler>:


// return: true / false
uint8_t httpc_connection_handler()
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
	uint8_t ret = HTTPC_FALSE;
 8002022:	2300      	movs	r3, #0
 8002024:	71fb      	strb	r3, [r7, #7]
#ifdef _HTTPCLIENT_DEBUG_
	uint8_t destip[4] = {0, };
	uint16_t destport = 80;
#endif

	uint8_t state = getSn_SR(httpsock);
 8002026:	4b53      	ldr	r3, [pc, #332]	; (8002174 <httpc_connection_handler+0x158>)
 8002028:	f993 3000 	ldrsb.w	r3, [r3]
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	3301      	adds	r3, #1
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff fd0a 	bl	8001a50 <WIZCHIP_READ>
 800203c:	4603      	mov	r3, r0
 800203e:	71bb      	strb	r3, [r7, #6]
	switch(state)
 8002040:	79bb      	ldrb	r3, [r7, #6]
 8002042:	2b1c      	cmp	r3, #28
 8002044:	f200 808d 	bhi.w	8002162 <httpc_connection_handler+0x146>
 8002048:	a201      	add	r2, pc, #4	; (adr r2, 8002050 <httpc_connection_handler+0x34>)
 800204a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800204e:	bf00      	nop
 8002050:	0800211f 	.word	0x0800211f
 8002054:	08002163 	.word	0x08002163
 8002058:	08002163 	.word	0x08002163
 800205c:	08002163 	.word	0x08002163
 8002060:	08002163 	.word	0x08002163
 8002064:	08002163 	.word	0x08002163
 8002068:	08002163 	.word	0x08002163
 800206c:	08002163 	.word	0x08002163
 8002070:	08002163 	.word	0x08002163
 8002074:	08002163 	.word	0x08002163
 8002078:	08002163 	.word	0x08002163
 800207c:	08002163 	.word	0x08002163
 8002080:	08002163 	.word	0x08002163
 8002084:	08002163 	.word	0x08002163
 8002088:	08002163 	.word	0x08002163
 800208c:	08002163 	.word	0x08002163
 8002090:	08002163 	.word	0x08002163
 8002094:	08002163 	.word	0x08002163
 8002098:	08002163 	.word	0x08002163
 800209c:	080020c5 	.word	0x080020c5
 80020a0:	08002163 	.word	0x08002163
 80020a4:	08002163 	.word	0x08002163
 80020a8:	08002163 	.word	0x08002163
 80020ac:	080020cb 	.word	0x080020cb
 80020b0:	0800211f 	.word	0x0800211f
 80020b4:	08002163 	.word	0x08002163
 80020b8:	08002163 	.word	0x08002163
 80020bc:	08002163 	.word	0x08002163
 80020c0:	0800210f 	.word	0x0800210f
	{
		case SOCK_INIT:
			// state: connect
			ret = HTTPC_TRUE;
 80020c4:	2301      	movs	r3, #1
 80020c6:	71fb      	strb	r3, [r7, #7]
			break;
 80020c8:	e04e      	b.n	8002168 <httpc_connection_handler+0x14c>

		case SOCK_ESTABLISHED:
			if(getSn_IR(httpsock) & Sn_IR_CON)
 80020ca:	4b2a      	ldr	r3, [pc, #168]	; (8002174 <httpc_connection_handler+0x158>)
 80020cc:	f993 3000 	ldrsb.w	r3, [r3]
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	3301      	adds	r3, #1
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff fcb8 	bl	8001a50 <WIZCHIP_READ>
 80020e0:	4603      	mov	r3, r0
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00e      	beq.n	8002108 <httpc_connection_handler+0xec>
				// Serial debug message printout
				getsockopt(httpsock, SO_DESTIP, &destip);
				getsockopt(httpsock, SO_DESTPORT, &destport);
				printf(" > HTTP CLIENT: CONNECTED TO - %d.%d.%d.%d : %d\r\n",destip[0], destip[1], destip[2], destip[3], destport);
#endif
				httpc_isConnected = HTTPC_TRUE;
 80020ea:	4b23      	ldr	r3, [pc, #140]	; (8002178 <httpc_connection_handler+0x15c>)
 80020ec:	2201      	movs	r2, #1
 80020ee:	701a      	strb	r2, [r3, #0]
				//receivehttpcheck();
				setSn_IR(httpsock, Sn_IR_CON);
 80020f0:	4b20      	ldr	r3, [pc, #128]	; (8002174 <httpc_connection_handler+0x158>)
 80020f2:	f993 3000 	ldrsb.w	r3, [r3]
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	3301      	adds	r3, #1
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002100:	2101      	movs	r1, #1
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff fcf0 	bl	8001ae8 <WIZCHIP_WRITE>
			}

			//httpc_isReceived = getSn_RX_RSR(httpsock);
			ret = HTTPC_CONNECTED;
 8002108:	2302      	movs	r3, #2
 800210a:	71fb      	strb	r3, [r7, #7]
			break;
 800210c:	e02c      	b.n	8002168 <httpc_connection_handler+0x14c>

		case SOCK_CLOSE_WAIT:
			disconnect(httpsock);
 800210e:	4b19      	ldr	r3, [pc, #100]	; (8002174 <httpc_connection_handler+0x158>)
 8002110:	f993 3000 	ldrsb.w	r3, [r3]
 8002114:	b2db      	uxtb	r3, r3
 8002116:	4618      	mov	r0, r3
 8002118:	f001 f818 	bl	800314c <disconnect>
			break;
 800211c:	e024      	b.n	8002168 <httpc_connection_handler+0x14c>

		case SOCK_FIN_WAIT:
		case SOCK_CLOSED:
			httpc_isSockOpen = HTTPC_FALSE;
 800211e:	4b17      	ldr	r3, [pc, #92]	; (800217c <httpc_connection_handler+0x160>)
 8002120:	2200      	movs	r2, #0
 8002122:	701a      	strb	r2, [r3, #0]
			httpc_isConnected = HTTPC_FALSE;
 8002124:	4b14      	ldr	r3, [pc, #80]	; (8002178 <httpc_connection_handler+0x15c>)
 8002126:	2200      	movs	r2, #0
 8002128:	701a      	strb	r2, [r3, #0]

			source_port = get_httpc_any_port();
 800212a:	f000 f90d 	bl	8002348 <get_httpc_any_port>
 800212e:	4603      	mov	r3, r0
 8002130:	80bb      	strh	r3, [r7, #4]
#ifdef _HTTPCLIENT_DEBUG_
			printf(" > HTTP CLIENT: source_port = %d\r\n", source_port);
#endif

			if(socket(httpsock, Sn_MR_TCP, source_port, Sn_MR_ND) == httpsock)
 8002132:	4b10      	ldr	r3, [pc, #64]	; (8002174 <httpc_connection_handler+0x158>)
 8002134:	f993 3000 	ldrsb.w	r3, [r3]
 8002138:	b2d8      	uxtb	r0, r3
 800213a:	88ba      	ldrh	r2, [r7, #4]
 800213c:	2320      	movs	r3, #32
 800213e:	2101      	movs	r1, #1
 8002140:	f000 fda4 	bl	8002c8c <socket>
 8002144:	4603      	mov	r3, r0
 8002146:	461a      	mov	r2, r3
 8002148:	4b0a      	ldr	r3, [pc, #40]	; (8002174 <httpc_connection_handler+0x158>)
 800214a:	f993 3000 	ldrsb.w	r3, [r3]
 800214e:	429a      	cmp	r2, r3
 8002150:	d109      	bne.n	8002166 <httpc_connection_handler+0x14a>
			{
				if(httpc_isSockOpen == HTTPC_FALSE)
 8002152:	4b0a      	ldr	r3, [pc, #40]	; (800217c <httpc_connection_handler+0x160>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d105      	bne.n	8002166 <httpc_connection_handler+0x14a>
				{
#ifdef _HTTPCLIENT_DEBUG_
					printf(" > HTTP CLIENT: SOCKOPEN\r\n");
#endif
					httpc_isSockOpen = HTTPC_TRUE;
 800215a:	4b08      	ldr	r3, [pc, #32]	; (800217c <httpc_connection_handler+0x160>)
 800215c:	2201      	movs	r2, #1
 800215e:	701a      	strb	r2, [r3, #0]
				}
			}


			break;
 8002160:	e001      	b.n	8002166 <httpc_connection_handler+0x14a>

		default:
			break;
 8002162:	bf00      	nop
 8002164:	e000      	b.n	8002168 <httpc_connection_handler+0x14c>
			break;
 8002166:	bf00      	nop
	}

	return ret;
 8002168:	79fb      	ldrb	r3, [r7, #7]
}
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	200038c0 	.word	0x200038c0
 8002178:	200038c5 	.word	0x200038c5
 800217c:	200038c4 	.word	0x200038c4

08002180 <httpc_connect>:


// return: socket status
uint8_t httpc_connect()
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
	uint8_t ret = HTTPC_FALSE;
 8002186:	2300      	movs	r3, #0
 8002188:	71fb      	strb	r3, [r7, #7]

	if(httpsock >= 0)
 800218a:	4b0f      	ldr	r3, [pc, #60]	; (80021c8 <httpc_connect+0x48>)
 800218c:	f993 3000 	ldrsb.w	r3, [r3]
 8002190:	2b00      	cmp	r3, #0
 8002192:	db14      	blt.n	80021be <httpc_connect+0x3e>
	{
		if(httpc_isSockOpen == HTTPC_TRUE)
 8002194:	4b0d      	ldr	r3, [pc, #52]	; (80021cc <httpc_connect+0x4c>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d110      	bne.n	80021be <httpc_connect+0x3e>
		{
			// TCP connect
			ret = connect(httpsock, dest_ip, dest_port);
 800219c:	4b0a      	ldr	r3, [pc, #40]	; (80021c8 <httpc_connect+0x48>)
 800219e:	f993 3000 	ldrsb.w	r3, [r3]
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	4a0a      	ldr	r2, [pc, #40]	; (80021d0 <httpc_connect+0x50>)
 80021a6:	8812      	ldrh	r2, [r2, #0]
 80021a8:	490a      	ldr	r1, [pc, #40]	; (80021d4 <httpc_connect+0x54>)
 80021aa:	4618      	mov	r0, r3
 80021ac:	f000 fef2 	bl	8002f94 <connect>
 80021b0:	4603      	mov	r3, r0
 80021b2:	71fb      	strb	r3, [r7, #7]
			if(ret == SOCK_OK) ret = HTTPC_TRUE;
 80021b4:	79fb      	ldrb	r3, [r7, #7]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d101      	bne.n	80021be <httpc_connect+0x3e>
 80021ba:	2301      	movs	r3, #1
 80021bc:	71fb      	strb	r3, [r7, #7]
		}
	}

	return ret;
 80021be:	79fb      	ldrb	r3, [r7, #7]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	200038c0 	.word	0x200038c0
 80021cc:	200038c4 	.word	0x200038c4
 80021d0:	20000020 	.word	0x20000020
 80021d4:	2000001c 	.word	0x2000001c

080021d8 <httpc_send>:
}


// return: sent data length
uint16_t httpc_send(HttpRequest * req, uint8_t * buf, uint8_t * body, uint16_t content_len)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
 80021e4:	807b      	strh	r3, [r7, #2]
	uint16_t i;
	uint16_t len;
	uint8_t http_header_generated = HTTPC_FAILED;
 80021e6:	2300      	movs	r3, #0
 80021e8:	74fb      	strb	r3, [r7, #19]

	if(httpc_isConnected == HTTPC_TRUE)
 80021ea:	4b4d      	ldr	r3, [pc, #308]	; (8002320 <httpc_send+0x148>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	f040 808e 	bne.w	8002310 <httpc_send+0x138>
	{
		do
		{
			memset(buf, 0x00, DATA_BUF_SIZE);
 80021f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021f8:	2100      	movs	r1, #0
 80021fa:	68b8      	ldr	r0, [r7, #8]
 80021fc:	f00b fdb2 	bl	800dd64 <memset>

			/* HTTP request header */
			len = sprintf((char *)buf, "%s\r\n", req->uri);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	461a      	mov	r2, r3
 8002206:	4947      	ldr	r1, [pc, #284]	; (8002324 <httpc_send+0x14c>)
 8002208:	68b8      	ldr	r0, [r7, #8]
 800220a:	f00b fee1 	bl	800dfd0 <siprintf>
 800220e:	4603      	mov	r3, r0
 8002210:	82bb      	strh	r3, [r7, #20]
//			len += sprintf((char *)buf+len, "Host: %s\r\n", req->host);
			len += sprintf((char *)buf+len, "Connection: %s\r\n", req->connection);
 8002212:	8abb      	ldrh	r3, [r7, #20]
 8002214:	68ba      	ldr	r2, [r7, #8]
 8002216:	18d0      	adds	r0, r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	461a      	mov	r2, r3
 800221e:	4942      	ldr	r1, [pc, #264]	; (8002328 <httpc_send+0x150>)
 8002220:	f00b fed6 	bl	800dfd0 <siprintf>
 8002224:	4603      	mov	r3, r0
 8002226:	b29a      	uxth	r2, r3
 8002228:	8abb      	ldrh	r3, [r7, #20]
 800222a:	4413      	add	r3, r2
 800222c:	82bb      	strh	r3, [r7, #20]

			// HTTP content type: POST / PUT only
			if(content_len > 0)
 800222e:	887b      	ldrh	r3, [r7, #2]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d032      	beq.n	800229a <httpc_send+0xc2>
			{
				len += sprintf((char *)buf+len, "Content-Length: %d\r\n", content_len);
 8002234:	8abb      	ldrh	r3, [r7, #20]
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	4413      	add	r3, r2
 800223a:	887a      	ldrh	r2, [r7, #2]
 800223c:	493b      	ldr	r1, [pc, #236]	; (800232c <httpc_send+0x154>)
 800223e:	4618      	mov	r0, r3
 8002240:	f00b fec6 	bl	800dfd0 <siprintf>
 8002244:	4603      	mov	r3, r0
 8002246:	b29a      	uxth	r2, r3
 8002248:	8abb      	ldrh	r3, [r7, #20]
 800224a:	4413      	add	r3, r2
 800224c:	82bb      	strh	r3, [r7, #20]

				if(strcmp((char *)req->content_type, HTTP_CTYPE_MULTIPART_FORM) == 0)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	4937      	ldr	r1, [pc, #220]	; (8002330 <httpc_send+0x158>)
 8002254:	4618      	mov	r0, r3
 8002256:	f7fd ffbb 	bl	80001d0 <strcmp>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10e      	bne.n	800227e <httpc_send+0xa6>
				{
					// HTTP content type: multipart/form-data
					len += sprintf((char *)buf+len, "Content-Type: %s; boundary=%s\r\n", req->content_type, formDataBoundary);
 8002260:	8abb      	ldrh	r3, [r7, #20]
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	18d0      	adds	r0, r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	68da      	ldr	r2, [r3, #12]
 800226a:	4b32      	ldr	r3, [pc, #200]	; (8002334 <httpc_send+0x15c>)
 800226c:	4932      	ldr	r1, [pc, #200]	; (8002338 <httpc_send+0x160>)
 800226e:	f00b feaf 	bl	800dfd0 <siprintf>
 8002272:	4603      	mov	r3, r0
 8002274:	b29a      	uxth	r2, r3
 8002276:	8abb      	ldrh	r3, [r7, #20]
 8002278:	4413      	add	r3, r2
 800227a:	82bb      	strh	r3, [r7, #20]
 800227c:	e00d      	b.n	800229a <httpc_send+0xc2>
				}
				else
				{
					// HTTP content type: others
					len += sprintf((char *)buf+len, "Content-Type: %s\r\n", req->content_type); // HTTP content type: others
 800227e:	8abb      	ldrh	r3, [r7, #20]
 8002280:	68ba      	ldr	r2, [r7, #8]
 8002282:	18d0      	adds	r0, r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	461a      	mov	r2, r3
 800228a:	492c      	ldr	r1, [pc, #176]	; (800233c <httpc_send+0x164>)
 800228c:	f00b fea0 	bl	800dfd0 <siprintf>
 8002290:	4603      	mov	r3, r0
 8002292:	b29a      	uxth	r2, r3
 8002294:	8abb      	ldrh	r3, [r7, #20]
 8002296:	4413      	add	r3, r2
 8002298:	82bb      	strh	r3, [r7, #20]
				}
			}
			len += sprintf((char *)buf+len, "\r\n");
 800229a:	8abb      	ldrh	r3, [r7, #20]
 800229c:	68ba      	ldr	r2, [r7, #8]
 800229e:	4413      	add	r3, r2
 80022a0:	4927      	ldr	r1, [pc, #156]	; (8002340 <httpc_send+0x168>)
 80022a2:	4618      	mov	r0, r3
 80022a4:	f00b fe94 	bl	800dfd0 <siprintf>
 80022a8:	4603      	mov	r3, r0
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	8abb      	ldrh	r3, [r7, #20]
 80022ae:	4413      	add	r3, r2
 80022b0:	82bb      	strh	r3, [r7, #20]

			// Avoiding buffer overflow
			if((len + content_len) > DATA_BUF_SIZE) {
 80022b2:	8aba      	ldrh	r2, [r7, #20]
 80022b4:	887b      	ldrh	r3, [r7, #2]
 80022b6:	4413      	add	r3, r2
 80022b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022bc:	dd04      	ble.n	80022c8 <httpc_send+0xf0>
				content_len = DATA_BUF_SIZE - len; // HTTP request header re-generation (do-while)
 80022be:	8abb      	ldrh	r3, [r7, #20]
 80022c0:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80022c4:	807b      	strh	r3, [r7, #2]
 80022c6:	e001      	b.n	80022cc <httpc_send+0xf4>
				//http_header_generated = FAILED;
			} else {
				http_header_generated = HTTPC_SUCCESS;
 80022c8:	2301      	movs	r3, #1
 80022ca:	74fb      	strb	r3, [r7, #19]
			}
		} while(http_header_generated != HTTPC_SUCCESS);
 80022cc:	7cfb      	ldrb	r3, [r7, #19]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d190      	bne.n	80021f4 <httpc_send+0x1c>

		/* HTTP request body */
		for(i = 0; i < content_len; i++)
 80022d2:	2300      	movs	r3, #0
 80022d4:	82fb      	strh	r3, [r7, #22]
 80022d6:	e00d      	b.n	80022f4 <httpc_send+0x11c>
		{
			buf[len++] = body[i];
 80022d8:	8afb      	ldrh	r3, [r7, #22]
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	441a      	add	r2, r3
 80022de:	8abb      	ldrh	r3, [r7, #20]
 80022e0:	1c59      	adds	r1, r3, #1
 80022e2:	82b9      	strh	r1, [r7, #20]
 80022e4:	4619      	mov	r1, r3
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	440b      	add	r3, r1
 80022ea:	7812      	ldrb	r2, [r2, #0]
 80022ec:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < content_len; i++)
 80022ee:	8afb      	ldrh	r3, [r7, #22]
 80022f0:	3301      	adds	r3, #1
 80022f2:	82fb      	strh	r3, [r7, #22]
 80022f4:	8afa      	ldrh	r2, [r7, #22]
 80022f6:	887b      	ldrh	r3, [r7, #2]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d3ed      	bcc.n	80022d8 <httpc_send+0x100>
#ifdef _HTTPCLIENT_DEBUG_
		printf(" >> HTTP Request - Method: %s, URI: %s, Content-Length: %d\r\n", req->method, req->uri, content_len);
		for(i = 0; i < len; i++) printf("%c", buf[i]);
		printf("\r\n");
#endif
		send(httpsock, buf, len);
 80022fc:	4b11      	ldr	r3, [pc, #68]	; (8002344 <httpc_send+0x16c>)
 80022fe:	f993 3000 	ldrsb.w	r3, [r3]
 8002302:	b2db      	uxtb	r3, r3
 8002304:	8aba      	ldrh	r2, [r7, #20]
 8002306:	68b9      	ldr	r1, [r7, #8]
 8002308:	4618      	mov	r0, r3
 800230a:	f000 ff95 	bl	8003238 <send>
 800230e:	e001      	b.n	8002314 <httpc_send+0x13c>
	}
	else
	{
		len = HTTPC_FAILED;
 8002310:	2300      	movs	r3, #0
 8002312:	82bb      	strh	r3, [r7, #20]
	}

	return len;
 8002314:	8abb      	ldrh	r3, [r7, #20]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3718      	adds	r7, #24
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	200038c5 	.word	0x200038c5
 8002324:	0800f358 	.word	0x0800f358
 8002328:	0800f2b4 	.word	0x0800f2b4
 800232c:	0800f2c8 	.word	0x0800f2c8
 8002330:	0800f2e0 	.word	0x0800f2e0
 8002334:	0800f2f4 	.word	0x0800f2f4
 8002338:	0800f31c 	.word	0x0800f31c
 800233c:	0800f33c 	.word	0x0800f33c
 8002340:	0800f354 	.word	0x0800f354
 8002344:	200038c0 	.word	0x200038c0

08002348 <get_httpc_any_port>:
}


// return: source port number for tcp client
uint16_t get_httpc_any_port(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
	if(httpc_any_port)
 800234c:	4b1b      	ldr	r3, [pc, #108]	; (80023bc <get_httpc_any_port+0x74>)
 800234e:	881b      	ldrh	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d014      	beq.n	800237e <get_httpc_any_port+0x36>
	{
		if((httpc_any_port >= HTTP_CLIENT_PORT_MIN) && (httpc_any_port < HTTP_CLIENT_PORT_MAX)) {
 8002354:	4b19      	ldr	r3, [pc, #100]	; (80023bc <get_httpc_any_port+0x74>)
 8002356:	881b      	ldrh	r3, [r3, #0]
 8002358:	f5b3 4f30 	cmp.w	r3, #45056	; 0xb000
 800235c:	d30c      	bcc.n	8002378 <get_httpc_any_port+0x30>
 800235e:	4b17      	ldr	r3, [pc, #92]	; (80023bc <get_httpc_any_port+0x74>)
 8002360:	881b      	ldrh	r3, [r3, #0]
 8002362:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002366:	4293      	cmp	r3, r2
 8002368:	d006      	beq.n	8002378 <get_httpc_any_port+0x30>
			httpc_any_port++;
 800236a:	4b14      	ldr	r3, [pc, #80]	; (80023bc <get_httpc_any_port+0x74>)
 800236c:	881b      	ldrh	r3, [r3, #0]
 800236e:	3301      	adds	r3, #1
 8002370:	b29a      	uxth	r2, r3
 8002372:	4b12      	ldr	r3, [pc, #72]	; (80023bc <get_httpc_any_port+0x74>)
 8002374:	801a      	strh	r2, [r3, #0]
 8002376:	e002      	b.n	800237e <get_httpc_any_port+0x36>
		} else {
			httpc_any_port = 0;
 8002378:	4b10      	ldr	r3, [pc, #64]	; (80023bc <get_httpc_any_port+0x74>)
 800237a:	2200      	movs	r2, #0
 800237c:	801a      	strh	r2, [r3, #0]
		}
	}

	if(httpc_any_port < HTTP_CLIENT_PORT_MIN)
 800237e:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <get_httpc_any_port+0x74>)
 8002380:	881b      	ldrh	r3, [r3, #0]
 8002382:	f5b3 4f30 	cmp.w	r3, #45056	; 0xb000
 8002386:	d214      	bcs.n	80023b2 <get_httpc_any_port+0x6a>
	{
		// todo: get random seed value
		httpc_any_port = (rand() % 10000) + 46000; // 46000 ~ 55999
 8002388:	f00b fdd4 	bl	800df34 <rand>
 800238c:	4603      	mov	r3, r0
 800238e:	4a0c      	ldr	r2, [pc, #48]	; (80023c0 <get_httpc_any_port+0x78>)
 8002390:	fb82 1203 	smull	r1, r2, r2, r3
 8002394:	1311      	asrs	r1, r2, #12
 8002396:	17da      	asrs	r2, r3, #31
 8002398:	1a8a      	subs	r2, r1, r2
 800239a:	f242 7110 	movw	r1, #10000	; 0x2710
 800239e:	fb01 f202 	mul.w	r2, r1, r2
 80023a2:	1a9a      	subs	r2, r3, r2
 80023a4:	b293      	uxth	r3, r2
 80023a6:	f5a3 4398 	sub.w	r3, r3, #19456	; 0x4c00
 80023aa:	3b50      	subs	r3, #80	; 0x50
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	4b03      	ldr	r3, [pc, #12]	; (80023bc <get_httpc_any_port+0x74>)
 80023b0:	801a      	strh	r2, [r3, #0]
	}

	return httpc_any_port;
 80023b2:	4b02      	ldr	r3, [pc, #8]	; (80023bc <get_httpc_any_port+0x74>)
 80023b4:	881b      	ldrh	r3, [r3, #0]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	200038c2 	.word	0x200038c2
 80023c0:	68db8bad 	.word	0x68db8bad

080023c4 <receivehttpcheck>:

void receivehttpcheck(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
	uint16_t Frame_2_StartAdd,Frame_2_NoOfData;
	uint16_t Frame_3_StartAdd,Frame_3_NoOfData;
	uint16_t Frame_4_StartAdd,Frame_4_NoOfData;
	uint16_t Frame_5_StartAdd,Frame_5_NoOfData;
	//uint8_t filtereddata[200];
	valhttp = getSn_RX_RSR(httpsock);
 80023ca:	4b91      	ldr	r3, [pc, #580]	; (8002610 <receivehttpcheck+0x24c>)
 80023cc:	f993 3000 	ldrsb.w	r3, [r3]
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff fce1 	bl	8001d9a <getSn_RX_RSR>
 80023d8:	4603      	mov	r3, r0
 80023da:	461a      	mov	r2, r3
 80023dc:	4b8d      	ldr	r3, [pc, #564]	; (8002614 <receivehttpcheck+0x250>)
 80023de:	801a      	strh	r2, [r3, #0]
//	filtereddata
	if(valhttp>0){
 80023e0:	4b8c      	ldr	r3, [pc, #560]	; (8002614 <receivehttpcheck+0x250>)
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 843a 	beq.w	8002c5e <receivehttpcheck+0x89a>
		//httpc_recv(rxBufhttp,valhttp);
		memset(rxBufhttp,0,sizeof(rxBufhttp));
 80023ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023ee:	2100      	movs	r1, #0
 80023f0:	4889      	ldr	r0, [pc, #548]	; (8002618 <receivehttpcheck+0x254>)
 80023f2:	f00b fcb7 	bl	800dd64 <memset>
		recv(httpsock, rxBufhttp, valhttp);
 80023f6:	4b86      	ldr	r3, [pc, #536]	; (8002610 <receivehttpcheck+0x24c>)
 80023f8:	f993 3000 	ldrsb.w	r3, [r3]
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	4a85      	ldr	r2, [pc, #532]	; (8002614 <receivehttpcheck+0x250>)
 8002400:	8812      	ldrh	r2, [r2, #0]
 8002402:	4985      	ldr	r1, [pc, #532]	; (8002618 <receivehttpcheck+0x254>)
 8002404:	4618      	mov	r0, r3
 8002406:	f001 f811 	bl	800342c <recv>
		startPosition = strchr(rxBufhttp,'$');
 800240a:	2124      	movs	r1, #36	; 0x24
 800240c:	4882      	ldr	r0, [pc, #520]	; (8002618 <receivehttpcheck+0x254>)
 800240e:	f00b fdff 	bl	800e010 <strchr>
 8002412:	4603      	mov	r3, r0
 8002414:	4a81      	ldr	r2, [pc, #516]	; (800261c <receivehttpcheck+0x258>)
 8002416:	6013      	str	r3, [r2, #0]
		strcpy(filtereddata,startPosition);
 8002418:	4b80      	ldr	r3, [pc, #512]	; (800261c <receivehttpcheck+0x258>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4619      	mov	r1, r3
 800241e:	4880      	ldr	r0, [pc, #512]	; (8002620 <receivehttpcheck+0x25c>)
 8002420:	f00b fe03 	bl	800e02a <strcpy>
		pch = strtok (filtereddata,",");
 8002424:	497f      	ldr	r1, [pc, #508]	; (8002624 <receivehttpcheck+0x260>)
 8002426:	487e      	ldr	r0, [pc, #504]	; (8002620 <receivehttpcheck+0x25c>)
 8002428:	f00b fe08 	bl	800e03c <strtok>
 800242c:	4603      	mov	r3, r0
 800242e:	4a7e      	ldr	r2, [pc, #504]	; (8002628 <receivehttpcheck+0x264>)
 8002430:	6013      	str	r3, [r2, #0]
		if(pch!= NULL){
 8002432:	4b7d      	ldr	r3, [pc, #500]	; (8002628 <receivehttpcheck+0x264>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d01e      	beq.n	8002478 <receivehttpcheck+0xb4>
			strcpy(token_1,pch);
 800243a:	4b7b      	ldr	r3, [pc, #492]	; (8002628 <receivehttpcheck+0x264>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4619      	mov	r1, r3
 8002440:	487a      	ldr	r0, [pc, #488]	; (800262c <receivehttpcheck+0x268>)
 8002442:	f00b fdf2 	bl	800e02a <strcpy>
			if(token_1[0] == '$'){
 8002446:	4b79      	ldr	r3, [pc, #484]	; (800262c <receivehttpcheck+0x268>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	2b24      	cmp	r3, #36	; 0x24
 800244c:	d114      	bne.n	8002478 <receivehttpcheck+0xb4>
				Meter_Id_Rx = token_1[2]-48 +((token_1[1]-48)*10);
 800244e:	4b77      	ldr	r3, [pc, #476]	; (800262c <receivehttpcheck+0x268>)
 8002450:	789a      	ldrb	r2, [r3, #2]
 8002452:	4b76      	ldr	r3, [pc, #472]	; (800262c <receivehttpcheck+0x268>)
 8002454:	785b      	ldrb	r3, [r3, #1]
 8002456:	4619      	mov	r1, r3
 8002458:	0089      	lsls	r1, r1, #2
 800245a:	440b      	add	r3, r1
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	b2db      	uxtb	r3, r3
 8002460:	4413      	add	r3, r2
 8002462:	b2db      	uxtb	r3, r3
 8002464:	3b10      	subs	r3, #16
 8002466:	b2da      	uxtb	r2, r3
 8002468:	4b71      	ldr	r3, [pc, #452]	; (8002630 <receivehttpcheck+0x26c>)
 800246a:	701a      	strb	r2, [r3, #0]
				UpdateNewEntry =0;
 800246c:	4b71      	ldr	r3, [pc, #452]	; (8002634 <receivehttpcheck+0x270>)
 800246e:	2200      	movs	r2, #0
 8002470:	701a      	strb	r2, [r3, #0]
				LockUpdate=0;
 8002472:	4b71      	ldr	r3, [pc, #452]	; (8002638 <receivehttpcheck+0x274>)
 8002474:	2200      	movs	r2, #0
 8002476:	701a      	strb	r2, [r3, #0]
			}
			else{
				//exit;
			}
		}
		pch = strtok (0,",");
 8002478:	496a      	ldr	r1, [pc, #424]	; (8002624 <receivehttpcheck+0x260>)
 800247a:	2000      	movs	r0, #0
 800247c:	f00b fdde 	bl	800e03c <strtok>
 8002480:	4603      	mov	r3, r0
 8002482:	4a69      	ldr	r2, [pc, #420]	; (8002628 <receivehttpcheck+0x264>)
 8002484:	6013      	str	r3, [r2, #0]
		while(pch!= NULL){
 8002486:	e3d2      	b.n	8002c2e <receivehttpcheck+0x86a>
			strcpy(token_1,pch);
 8002488:	4b67      	ldr	r3, [pc, #412]	; (8002628 <receivehttpcheck+0x264>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4619      	mov	r1, r3
 800248e:	4867      	ldr	r0, [pc, #412]	; (800262c <receivehttpcheck+0x268>)
 8002490:	f00b fdcb 	bl	800e02a <strcpy>
			if((token_1[0] == 'F')&&(token_1[1] == '1')){
 8002494:	4b65      	ldr	r3, [pc, #404]	; (800262c <receivehttpcheck+0x268>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b46      	cmp	r3, #70	; 0x46
 800249a:	f040 80d1 	bne.w	8002640 <receivehttpcheck+0x27c>
 800249e:	4b63      	ldr	r3, [pc, #396]	; (800262c <receivehttpcheck+0x268>)
 80024a0:	785b      	ldrb	r3, [r3, #1]
 80024a2:	2b31      	cmp	r3, #49	; 0x31
 80024a4:	f040 80cc 	bne.w	8002640 <receivehttpcheck+0x27c>
/*Caluclation consume runtime*/Frame_1_StartAdd = token_1[7]-48 +((token_1[6]-48)*10)+((token_1[5]-48)*100)+((token_1[4]-48)*1000)+((token_1[3]-48)*10000);
 80024a8:	4b60      	ldr	r3, [pc, #384]	; (800262c <receivehttpcheck+0x268>)
 80024aa:	79db      	ldrb	r3, [r3, #7]
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	4b5f      	ldr	r3, [pc, #380]	; (800262c <receivehttpcheck+0x268>)
 80024b0:	799b      	ldrb	r3, [r3, #6]
 80024b2:	3b30      	subs	r3, #48	; 0x30
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	4619      	mov	r1, r3
 80024b8:	0089      	lsls	r1, r1, #2
 80024ba:	440b      	add	r3, r1
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	b29b      	uxth	r3, r3
 80024c0:	4413      	add	r3, r2
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	4b59      	ldr	r3, [pc, #356]	; (800262c <receivehttpcheck+0x268>)
 80024c6:	795b      	ldrb	r3, [r3, #5]
 80024c8:	3b30      	subs	r3, #48	; 0x30
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	4619      	mov	r1, r3
 80024ce:	0089      	lsls	r1, r1, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	4619      	mov	r1, r3
 80024d4:	0088      	lsls	r0, r1, #2
 80024d6:	4619      	mov	r1, r3
 80024d8:	4603      	mov	r3, r0
 80024da:	440b      	add	r3, r1
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	b29b      	uxth	r3, r3
 80024e0:	4413      	add	r3, r2
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	4b51      	ldr	r3, [pc, #324]	; (800262c <receivehttpcheck+0x268>)
 80024e6:	791b      	ldrb	r3, [r3, #4]
 80024e8:	3b30      	subs	r3, #48	; 0x30
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	4619      	mov	r1, r3
 80024ee:	0149      	lsls	r1, r1, #5
 80024f0:	1ac9      	subs	r1, r1, r3
 80024f2:	0089      	lsls	r1, r1, #2
 80024f4:	440b      	add	r3, r1
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	4413      	add	r3, r2
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	4b4b      	ldr	r3, [pc, #300]	; (800262c <receivehttpcheck+0x268>)
 8002500:	78db      	ldrb	r3, [r3, #3]
 8002502:	3b30      	subs	r3, #48	; 0x30
 8002504:	b29b      	uxth	r3, r3
 8002506:	4619      	mov	r1, r3
 8002508:	0149      	lsls	r1, r1, #5
 800250a:	1ac9      	subs	r1, r1, r3
 800250c:	0089      	lsls	r1, r1, #2
 800250e:	440b      	add	r3, r1
 8002510:	4619      	mov	r1, r3
 8002512:	0088      	lsls	r0, r1, #2
 8002514:	4619      	mov	r1, r3
 8002516:	4603      	mov	r3, r0
 8002518:	440b      	add	r3, r1
 800251a:	011b      	lsls	r3, r3, #4
 800251c:	b29b      	uxth	r3, r3
 800251e:	4413      	add	r3, r2
 8002520:	b29b      	uxth	r3, r3
 8002522:	3b30      	subs	r3, #48	; 0x30
 8002524:	82fb      	strh	r3, [r7, #22]
				Frame_1_NoOfData = token_1[13]-48 +((token_1[12]-48)*10)+((token_1[11]-48)*100)+((token_1[10]-48)*1000)+((token_1[9]-48)*10000);
 8002526:	4b41      	ldr	r3, [pc, #260]	; (800262c <receivehttpcheck+0x268>)
 8002528:	7b5b      	ldrb	r3, [r3, #13]
 800252a:	b29a      	uxth	r2, r3
 800252c:	4b3f      	ldr	r3, [pc, #252]	; (800262c <receivehttpcheck+0x268>)
 800252e:	7b1b      	ldrb	r3, [r3, #12]
 8002530:	3b30      	subs	r3, #48	; 0x30
 8002532:	b29b      	uxth	r3, r3
 8002534:	4619      	mov	r1, r3
 8002536:	0089      	lsls	r1, r1, #2
 8002538:	440b      	add	r3, r1
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	b29b      	uxth	r3, r3
 800253e:	4413      	add	r3, r2
 8002540:	b29a      	uxth	r2, r3
 8002542:	4b3a      	ldr	r3, [pc, #232]	; (800262c <receivehttpcheck+0x268>)
 8002544:	7adb      	ldrb	r3, [r3, #11]
 8002546:	3b30      	subs	r3, #48	; 0x30
 8002548:	b29b      	uxth	r3, r3
 800254a:	4619      	mov	r1, r3
 800254c:	0089      	lsls	r1, r1, #2
 800254e:	440b      	add	r3, r1
 8002550:	4619      	mov	r1, r3
 8002552:	0088      	lsls	r0, r1, #2
 8002554:	4619      	mov	r1, r3
 8002556:	4603      	mov	r3, r0
 8002558:	440b      	add	r3, r1
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	b29b      	uxth	r3, r3
 800255e:	4413      	add	r3, r2
 8002560:	b29a      	uxth	r2, r3
 8002562:	4b32      	ldr	r3, [pc, #200]	; (800262c <receivehttpcheck+0x268>)
 8002564:	7a9b      	ldrb	r3, [r3, #10]
 8002566:	3b30      	subs	r3, #48	; 0x30
 8002568:	b29b      	uxth	r3, r3
 800256a:	4619      	mov	r1, r3
 800256c:	0149      	lsls	r1, r1, #5
 800256e:	1ac9      	subs	r1, r1, r3
 8002570:	0089      	lsls	r1, r1, #2
 8002572:	440b      	add	r3, r1
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	b29b      	uxth	r3, r3
 8002578:	4413      	add	r3, r2
 800257a:	b29a      	uxth	r2, r3
 800257c:	4b2b      	ldr	r3, [pc, #172]	; (800262c <receivehttpcheck+0x268>)
 800257e:	7a5b      	ldrb	r3, [r3, #9]
 8002580:	3b30      	subs	r3, #48	; 0x30
 8002582:	b29b      	uxth	r3, r3
 8002584:	4619      	mov	r1, r3
 8002586:	0149      	lsls	r1, r1, #5
 8002588:	1ac9      	subs	r1, r1, r3
 800258a:	0089      	lsls	r1, r1, #2
 800258c:	440b      	add	r3, r1
 800258e:	4619      	mov	r1, r3
 8002590:	0088      	lsls	r0, r1, #2
 8002592:	4619      	mov	r1, r3
 8002594:	4603      	mov	r3, r0
 8002596:	440b      	add	r3, r1
 8002598:	011b      	lsls	r3, r3, #4
 800259a:	b29b      	uxth	r3, r3
 800259c:	4413      	add	r3, r2
 800259e:	b29b      	uxth	r3, r3
 80025a0:	3b30      	subs	r3, #48	; 0x30
 80025a2:	82bb      	strh	r3, [r7, #20]
				MeterInfo[Meter_Id_Rx-1].ModbusFrameRegInfo[0].FrameStartAddress = Frame_1_StartAdd;
 80025a4:	4b22      	ldr	r3, [pc, #136]	; (8002630 <receivehttpcheck+0x26c>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	3b01      	subs	r3, #1
 80025aa:	4a24      	ldr	r2, [pc, #144]	; (800263c <receivehttpcheck+0x278>)
 80025ac:	2116      	movs	r1, #22
 80025ae:	fb01 f303 	mul.w	r3, r1, r3
 80025b2:	4413      	add	r3, r2
 80025b4:	3302      	adds	r3, #2
 80025b6:	8afa      	ldrh	r2, [r7, #22]
 80025b8:	801a      	strh	r2, [r3, #0]
				MeterInfo[Meter_Id_Rx-1].ModbusFrameRegInfo[0].FrameNoOfData = Frame_1_NoOfData;
 80025ba:	4b1d      	ldr	r3, [pc, #116]	; (8002630 <receivehttpcheck+0x26c>)
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	3b01      	subs	r3, #1
 80025c0:	4a1e      	ldr	r2, [pc, #120]	; (800263c <receivehttpcheck+0x278>)
 80025c2:	2116      	movs	r1, #22
 80025c4:	fb01 f303 	mul.w	r3, r1, r3
 80025c8:	4413      	add	r3, r2
 80025ca:	3304      	adds	r3, #4
 80025cc:	8aba      	ldrh	r2, [r7, #20]
 80025ce:	801a      	strh	r2, [r3, #0]
				UpdateNewEntry=UpdateNewEntry+1;
 80025d0:	4b18      	ldr	r3, [pc, #96]	; (8002634 <receivehttpcheck+0x270>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	3301      	adds	r3, #1
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	4b16      	ldr	r3, [pc, #88]	; (8002634 <receivehttpcheck+0x270>)
 80025da:	701a      	strb	r2, [r3, #0]
				if(UpdateNewEntry > 1){LockUpdate=1;}
 80025dc:	4b15      	ldr	r3, [pc, #84]	; (8002634 <receivehttpcheck+0x270>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d902      	bls.n	80025ea <receivehttpcheck+0x226>
 80025e4:	4b14      	ldr	r3, [pc, #80]	; (8002638 <receivehttpcheck+0x274>)
 80025e6:	2201      	movs	r2, #1
 80025e8:	701a      	strb	r2, [r3, #0]
				(LockUpdate == 0)? (MeterInfo[Meter_Id_Rx-1].NoOfFrame = 1):(LockUpdate=1);
 80025ea:	4b13      	ldr	r3, [pc, #76]	; (8002638 <receivehttpcheck+0x274>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10a      	bne.n	8002608 <receivehttpcheck+0x244>
 80025f2:	4b0f      	ldr	r3, [pc, #60]	; (8002630 <receivehttpcheck+0x26c>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	3b01      	subs	r3, #1
 80025f8:	4a10      	ldr	r2, [pc, #64]	; (800263c <receivehttpcheck+0x278>)
 80025fa:	2116      	movs	r1, #22
 80025fc:	fb01 f303 	mul.w	r3, r1, r3
 8002600:	4413      	add	r3, r2
 8002602:	2201      	movs	r2, #1
 8002604:	701a      	strb	r2, [r3, #0]
 8002606:	e30b      	b.n	8002c20 <receivehttpcheck+0x85c>
 8002608:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <receivehttpcheck+0x274>)
 800260a:	2201      	movs	r2, #1
 800260c:	701a      	strb	r2, [r3, #0]
 800260e:	e307      	b.n	8002c20 <receivehttpcheck+0x85c>
 8002610:	200038c0 	.word	0x200038c0
 8002614:	200038c6 	.word	0x200038c6
 8002618:	200038c8 	.word	0x200038c8
 800261c:	200040c8 	.word	0x200040c8
 8002620:	200040cc 	.word	0x200040cc
 8002624:	0800f360 	.word	0x0800f360
 8002628:	20004194 	.word	0x20004194
 800262c:	2000419c 	.word	0x2000419c
 8002630:	20004198 	.word	0x20004198
 8002634:	200041b1 	.word	0x200041b1
 8002638:	200041b2 	.word	0x200041b2
 800263c:	20003758 	.word	0x20003758
			}
			else if((token_1[0] == 'F')&&(token_1[1] == '2')){
 8002640:	4b5b      	ldr	r3, [pc, #364]	; (80027b0 <receivehttpcheck+0x3ec>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b46      	cmp	r3, #70	; 0x46
 8002646:	f040 80bd 	bne.w	80027c4 <receivehttpcheck+0x400>
 800264a:	4b59      	ldr	r3, [pc, #356]	; (80027b0 <receivehttpcheck+0x3ec>)
 800264c:	785b      	ldrb	r3, [r3, #1]
 800264e:	2b32      	cmp	r3, #50	; 0x32
 8002650:	f040 80b8 	bne.w	80027c4 <receivehttpcheck+0x400>
				Frame_2_StartAdd = token_1[7]-48 +((token_1[6]-48)*10)+((token_1[5]-48)*100)+((token_1[4]-48)*1000)+((token_1[3]-48)*10000);
 8002654:	4b56      	ldr	r3, [pc, #344]	; (80027b0 <receivehttpcheck+0x3ec>)
 8002656:	79db      	ldrb	r3, [r3, #7]
 8002658:	b29a      	uxth	r2, r3
 800265a:	4b55      	ldr	r3, [pc, #340]	; (80027b0 <receivehttpcheck+0x3ec>)
 800265c:	799b      	ldrb	r3, [r3, #6]
 800265e:	3b30      	subs	r3, #48	; 0x30
 8002660:	b29b      	uxth	r3, r3
 8002662:	4619      	mov	r1, r3
 8002664:	0089      	lsls	r1, r1, #2
 8002666:	440b      	add	r3, r1
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	b29b      	uxth	r3, r3
 800266c:	4413      	add	r3, r2
 800266e:	b29a      	uxth	r2, r3
 8002670:	4b4f      	ldr	r3, [pc, #316]	; (80027b0 <receivehttpcheck+0x3ec>)
 8002672:	795b      	ldrb	r3, [r3, #5]
 8002674:	3b30      	subs	r3, #48	; 0x30
 8002676:	b29b      	uxth	r3, r3
 8002678:	4619      	mov	r1, r3
 800267a:	0089      	lsls	r1, r1, #2
 800267c:	440b      	add	r3, r1
 800267e:	4619      	mov	r1, r3
 8002680:	0088      	lsls	r0, r1, #2
 8002682:	4619      	mov	r1, r3
 8002684:	4603      	mov	r3, r0
 8002686:	440b      	add	r3, r1
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	b29b      	uxth	r3, r3
 800268c:	4413      	add	r3, r2
 800268e:	b29a      	uxth	r2, r3
 8002690:	4b47      	ldr	r3, [pc, #284]	; (80027b0 <receivehttpcheck+0x3ec>)
 8002692:	791b      	ldrb	r3, [r3, #4]
 8002694:	3b30      	subs	r3, #48	; 0x30
 8002696:	b29b      	uxth	r3, r3
 8002698:	4619      	mov	r1, r3
 800269a:	0149      	lsls	r1, r1, #5
 800269c:	1ac9      	subs	r1, r1, r3
 800269e:	0089      	lsls	r1, r1, #2
 80026a0:	440b      	add	r3, r1
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	4413      	add	r3, r2
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	4b41      	ldr	r3, [pc, #260]	; (80027b0 <receivehttpcheck+0x3ec>)
 80026ac:	78db      	ldrb	r3, [r3, #3]
 80026ae:	3b30      	subs	r3, #48	; 0x30
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	4619      	mov	r1, r3
 80026b4:	0149      	lsls	r1, r1, #5
 80026b6:	1ac9      	subs	r1, r1, r3
 80026b8:	0089      	lsls	r1, r1, #2
 80026ba:	440b      	add	r3, r1
 80026bc:	4619      	mov	r1, r3
 80026be:	0088      	lsls	r0, r1, #2
 80026c0:	4619      	mov	r1, r3
 80026c2:	4603      	mov	r3, r0
 80026c4:	440b      	add	r3, r1
 80026c6:	011b      	lsls	r3, r3, #4
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	4413      	add	r3, r2
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	3b30      	subs	r3, #48	; 0x30
 80026d0:	827b      	strh	r3, [r7, #18]
				Frame_2_NoOfData = token_1[13]-48 +((token_1[12]-48)*10)+((token_1[11]-48)*100)+((token_1[10]-48)*1000)+((token_1[9]-48)*10000);
 80026d2:	4b37      	ldr	r3, [pc, #220]	; (80027b0 <receivehttpcheck+0x3ec>)
 80026d4:	7b5b      	ldrb	r3, [r3, #13]
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	4b35      	ldr	r3, [pc, #212]	; (80027b0 <receivehttpcheck+0x3ec>)
 80026da:	7b1b      	ldrb	r3, [r3, #12]
 80026dc:	3b30      	subs	r3, #48	; 0x30
 80026de:	b29b      	uxth	r3, r3
 80026e0:	4619      	mov	r1, r3
 80026e2:	0089      	lsls	r1, r1, #2
 80026e4:	440b      	add	r3, r1
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	4413      	add	r3, r2
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	4b30      	ldr	r3, [pc, #192]	; (80027b0 <receivehttpcheck+0x3ec>)
 80026f0:	7adb      	ldrb	r3, [r3, #11]
 80026f2:	3b30      	subs	r3, #48	; 0x30
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	4619      	mov	r1, r3
 80026f8:	0089      	lsls	r1, r1, #2
 80026fa:	440b      	add	r3, r1
 80026fc:	4619      	mov	r1, r3
 80026fe:	0088      	lsls	r0, r1, #2
 8002700:	4619      	mov	r1, r3
 8002702:	4603      	mov	r3, r0
 8002704:	440b      	add	r3, r1
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	b29b      	uxth	r3, r3
 800270a:	4413      	add	r3, r2
 800270c:	b29a      	uxth	r2, r3
 800270e:	4b28      	ldr	r3, [pc, #160]	; (80027b0 <receivehttpcheck+0x3ec>)
 8002710:	7a9b      	ldrb	r3, [r3, #10]
 8002712:	3b30      	subs	r3, #48	; 0x30
 8002714:	b29b      	uxth	r3, r3
 8002716:	4619      	mov	r1, r3
 8002718:	0149      	lsls	r1, r1, #5
 800271a:	1ac9      	subs	r1, r1, r3
 800271c:	0089      	lsls	r1, r1, #2
 800271e:	440b      	add	r3, r1
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	b29b      	uxth	r3, r3
 8002724:	4413      	add	r3, r2
 8002726:	b29a      	uxth	r2, r3
 8002728:	4b21      	ldr	r3, [pc, #132]	; (80027b0 <receivehttpcheck+0x3ec>)
 800272a:	7a5b      	ldrb	r3, [r3, #9]
 800272c:	3b30      	subs	r3, #48	; 0x30
 800272e:	b29b      	uxth	r3, r3
 8002730:	4619      	mov	r1, r3
 8002732:	0149      	lsls	r1, r1, #5
 8002734:	1ac9      	subs	r1, r1, r3
 8002736:	0089      	lsls	r1, r1, #2
 8002738:	440b      	add	r3, r1
 800273a:	4619      	mov	r1, r3
 800273c:	0088      	lsls	r0, r1, #2
 800273e:	4619      	mov	r1, r3
 8002740:	4603      	mov	r3, r0
 8002742:	440b      	add	r3, r1
 8002744:	011b      	lsls	r3, r3, #4
 8002746:	b29b      	uxth	r3, r3
 8002748:	4413      	add	r3, r2
 800274a:	b29b      	uxth	r3, r3
 800274c:	3b30      	subs	r3, #48	; 0x30
 800274e:	823b      	strh	r3, [r7, #16]
				MeterInfo[Meter_Id_Rx-1].ModbusFrameRegInfo[1].FrameStartAddress = Frame_2_StartAdd;
 8002750:	4b18      	ldr	r3, [pc, #96]	; (80027b4 <receivehttpcheck+0x3f0>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	3b01      	subs	r3, #1
 8002756:	4a18      	ldr	r2, [pc, #96]	; (80027b8 <receivehttpcheck+0x3f4>)
 8002758:	2116      	movs	r1, #22
 800275a:	fb01 f303 	mul.w	r3, r1, r3
 800275e:	4413      	add	r3, r2
 8002760:	3306      	adds	r3, #6
 8002762:	8a7a      	ldrh	r2, [r7, #18]
 8002764:	801a      	strh	r2, [r3, #0]
				MeterInfo[Meter_Id_Rx-1].ModbusFrameRegInfo[1].FrameNoOfData = Frame_2_NoOfData;
 8002766:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <receivehttpcheck+0x3f0>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	3b01      	subs	r3, #1
 800276c:	4a12      	ldr	r2, [pc, #72]	; (80027b8 <receivehttpcheck+0x3f4>)
 800276e:	2116      	movs	r1, #22
 8002770:	fb01 f303 	mul.w	r3, r1, r3
 8002774:	4413      	add	r3, r2
 8002776:	3308      	adds	r3, #8
 8002778:	8a3a      	ldrh	r2, [r7, #16]
 800277a:	801a      	strh	r2, [r3, #0]
				UpdateNewEntry=UpdateNewEntry+1;
 800277c:	4b0f      	ldr	r3, [pc, #60]	; (80027bc <receivehttpcheck+0x3f8>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	3301      	adds	r3, #1
 8002782:	b2da      	uxtb	r2, r3
 8002784:	4b0d      	ldr	r3, [pc, #52]	; (80027bc <receivehttpcheck+0x3f8>)
 8002786:	701a      	strb	r2, [r3, #0]
				(LockUpdate == 0)? (MeterInfo[Meter_Id_Rx-1].NoOfFrame = 2):(LockUpdate=1);
 8002788:	4b0d      	ldr	r3, [pc, #52]	; (80027c0 <receivehttpcheck+0x3fc>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10a      	bne.n	80027a6 <receivehttpcheck+0x3e2>
 8002790:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <receivehttpcheck+0x3f0>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	3b01      	subs	r3, #1
 8002796:	4a08      	ldr	r2, [pc, #32]	; (80027b8 <receivehttpcheck+0x3f4>)
 8002798:	2116      	movs	r1, #22
 800279a:	fb01 f303 	mul.w	r3, r1, r3
 800279e:	4413      	add	r3, r2
 80027a0:	2202      	movs	r2, #2
 80027a2:	701a      	strb	r2, [r3, #0]
 80027a4:	e23c      	b.n	8002c20 <receivehttpcheck+0x85c>
 80027a6:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <receivehttpcheck+0x3fc>)
 80027a8:	2201      	movs	r2, #1
 80027aa:	701a      	strb	r2, [r3, #0]
 80027ac:	e238      	b.n	8002c20 <receivehttpcheck+0x85c>
 80027ae:	bf00      	nop
 80027b0:	2000419c 	.word	0x2000419c
 80027b4:	20004198 	.word	0x20004198
 80027b8:	20003758 	.word	0x20003758
 80027bc:	200041b1 	.word	0x200041b1
 80027c0:	200041b2 	.word	0x200041b2

			}
			else if((token_1[0] == 'F')&&(token_1[1] == '3')){
 80027c4:	4bb1      	ldr	r3, [pc, #708]	; (8002a8c <receivehttpcheck+0x6c8>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b46      	cmp	r3, #70	; 0x46
 80027ca:	f040 80b2 	bne.w	8002932 <receivehttpcheck+0x56e>
 80027ce:	4baf      	ldr	r3, [pc, #700]	; (8002a8c <receivehttpcheck+0x6c8>)
 80027d0:	785b      	ldrb	r3, [r3, #1]
 80027d2:	2b33      	cmp	r3, #51	; 0x33
 80027d4:	f040 80ad 	bne.w	8002932 <receivehttpcheck+0x56e>
				Frame_3_StartAdd = token_1[7]-48 +((token_1[6]-48)*10)+((token_1[5]-48)*100)+((token_1[4]-48)*1000)+((token_1[3]-48)*10000);
 80027d8:	4bac      	ldr	r3, [pc, #688]	; (8002a8c <receivehttpcheck+0x6c8>)
 80027da:	79db      	ldrb	r3, [r3, #7]
 80027dc:	b29a      	uxth	r2, r3
 80027de:	4bab      	ldr	r3, [pc, #684]	; (8002a8c <receivehttpcheck+0x6c8>)
 80027e0:	799b      	ldrb	r3, [r3, #6]
 80027e2:	3b30      	subs	r3, #48	; 0x30
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	4619      	mov	r1, r3
 80027e8:	0089      	lsls	r1, r1, #2
 80027ea:	440b      	add	r3, r1
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	4413      	add	r3, r2
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	4ba5      	ldr	r3, [pc, #660]	; (8002a8c <receivehttpcheck+0x6c8>)
 80027f6:	795b      	ldrb	r3, [r3, #5]
 80027f8:	3b30      	subs	r3, #48	; 0x30
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	4619      	mov	r1, r3
 80027fe:	0089      	lsls	r1, r1, #2
 8002800:	440b      	add	r3, r1
 8002802:	4619      	mov	r1, r3
 8002804:	0088      	lsls	r0, r1, #2
 8002806:	4619      	mov	r1, r3
 8002808:	4603      	mov	r3, r0
 800280a:	440b      	add	r3, r1
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	b29b      	uxth	r3, r3
 8002810:	4413      	add	r3, r2
 8002812:	b29a      	uxth	r2, r3
 8002814:	4b9d      	ldr	r3, [pc, #628]	; (8002a8c <receivehttpcheck+0x6c8>)
 8002816:	791b      	ldrb	r3, [r3, #4]
 8002818:	3b30      	subs	r3, #48	; 0x30
 800281a:	b29b      	uxth	r3, r3
 800281c:	4619      	mov	r1, r3
 800281e:	0149      	lsls	r1, r1, #5
 8002820:	1ac9      	subs	r1, r1, r3
 8002822:	0089      	lsls	r1, r1, #2
 8002824:	440b      	add	r3, r1
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	b29b      	uxth	r3, r3
 800282a:	4413      	add	r3, r2
 800282c:	b29a      	uxth	r2, r3
 800282e:	4b97      	ldr	r3, [pc, #604]	; (8002a8c <receivehttpcheck+0x6c8>)
 8002830:	78db      	ldrb	r3, [r3, #3]
 8002832:	3b30      	subs	r3, #48	; 0x30
 8002834:	b29b      	uxth	r3, r3
 8002836:	4619      	mov	r1, r3
 8002838:	0149      	lsls	r1, r1, #5
 800283a:	1ac9      	subs	r1, r1, r3
 800283c:	0089      	lsls	r1, r1, #2
 800283e:	440b      	add	r3, r1
 8002840:	4619      	mov	r1, r3
 8002842:	0088      	lsls	r0, r1, #2
 8002844:	4619      	mov	r1, r3
 8002846:	4603      	mov	r3, r0
 8002848:	440b      	add	r3, r1
 800284a:	011b      	lsls	r3, r3, #4
 800284c:	b29b      	uxth	r3, r3
 800284e:	4413      	add	r3, r2
 8002850:	b29b      	uxth	r3, r3
 8002852:	3b30      	subs	r3, #48	; 0x30
 8002854:	81fb      	strh	r3, [r7, #14]
				Frame_3_NoOfData = token_1[13]-48 +((token_1[12]-48)*10)+((token_1[11]-48)*100)+((token_1[10]-48)*1000)+((token_1[9]-48)*10000);
 8002856:	4b8d      	ldr	r3, [pc, #564]	; (8002a8c <receivehttpcheck+0x6c8>)
 8002858:	7b5b      	ldrb	r3, [r3, #13]
 800285a:	b29a      	uxth	r2, r3
 800285c:	4b8b      	ldr	r3, [pc, #556]	; (8002a8c <receivehttpcheck+0x6c8>)
 800285e:	7b1b      	ldrb	r3, [r3, #12]
 8002860:	3b30      	subs	r3, #48	; 0x30
 8002862:	b29b      	uxth	r3, r3
 8002864:	4619      	mov	r1, r3
 8002866:	0089      	lsls	r1, r1, #2
 8002868:	440b      	add	r3, r1
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	b29b      	uxth	r3, r3
 800286e:	4413      	add	r3, r2
 8002870:	b29a      	uxth	r2, r3
 8002872:	4b86      	ldr	r3, [pc, #536]	; (8002a8c <receivehttpcheck+0x6c8>)
 8002874:	7adb      	ldrb	r3, [r3, #11]
 8002876:	3b30      	subs	r3, #48	; 0x30
 8002878:	b29b      	uxth	r3, r3
 800287a:	4619      	mov	r1, r3
 800287c:	0089      	lsls	r1, r1, #2
 800287e:	440b      	add	r3, r1
 8002880:	4619      	mov	r1, r3
 8002882:	0088      	lsls	r0, r1, #2
 8002884:	4619      	mov	r1, r3
 8002886:	4603      	mov	r3, r0
 8002888:	440b      	add	r3, r1
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	b29b      	uxth	r3, r3
 800288e:	4413      	add	r3, r2
 8002890:	b29a      	uxth	r2, r3
 8002892:	4b7e      	ldr	r3, [pc, #504]	; (8002a8c <receivehttpcheck+0x6c8>)
 8002894:	7a9b      	ldrb	r3, [r3, #10]
 8002896:	3b30      	subs	r3, #48	; 0x30
 8002898:	b29b      	uxth	r3, r3
 800289a:	4619      	mov	r1, r3
 800289c:	0149      	lsls	r1, r1, #5
 800289e:	1ac9      	subs	r1, r1, r3
 80028a0:	0089      	lsls	r1, r1, #2
 80028a2:	440b      	add	r3, r1
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	4413      	add	r3, r2
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	4b77      	ldr	r3, [pc, #476]	; (8002a8c <receivehttpcheck+0x6c8>)
 80028ae:	7a5b      	ldrb	r3, [r3, #9]
 80028b0:	3b30      	subs	r3, #48	; 0x30
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	4619      	mov	r1, r3
 80028b6:	0149      	lsls	r1, r1, #5
 80028b8:	1ac9      	subs	r1, r1, r3
 80028ba:	0089      	lsls	r1, r1, #2
 80028bc:	440b      	add	r3, r1
 80028be:	4619      	mov	r1, r3
 80028c0:	0088      	lsls	r0, r1, #2
 80028c2:	4619      	mov	r1, r3
 80028c4:	4603      	mov	r3, r0
 80028c6:	440b      	add	r3, r1
 80028c8:	011b      	lsls	r3, r3, #4
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	4413      	add	r3, r2
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	3b30      	subs	r3, #48	; 0x30
 80028d2:	81bb      	strh	r3, [r7, #12]
				MeterInfo[Meter_Id_Rx-1].ModbusFrameRegInfo[2].FrameStartAddress = Frame_3_StartAdd;
 80028d4:	4b6e      	ldr	r3, [pc, #440]	; (8002a90 <receivehttpcheck+0x6cc>)
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	3b01      	subs	r3, #1
 80028da:	4a6e      	ldr	r2, [pc, #440]	; (8002a94 <receivehttpcheck+0x6d0>)
 80028dc:	2116      	movs	r1, #22
 80028de:	fb01 f303 	mul.w	r3, r1, r3
 80028e2:	4413      	add	r3, r2
 80028e4:	330a      	adds	r3, #10
 80028e6:	89fa      	ldrh	r2, [r7, #14]
 80028e8:	801a      	strh	r2, [r3, #0]
				MeterInfo[Meter_Id_Rx-1].ModbusFrameRegInfo[2].FrameNoOfData = Frame_3_NoOfData;
 80028ea:	4b69      	ldr	r3, [pc, #420]	; (8002a90 <receivehttpcheck+0x6cc>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	3b01      	subs	r3, #1
 80028f0:	4a68      	ldr	r2, [pc, #416]	; (8002a94 <receivehttpcheck+0x6d0>)
 80028f2:	2116      	movs	r1, #22
 80028f4:	fb01 f303 	mul.w	r3, r1, r3
 80028f8:	4413      	add	r3, r2
 80028fa:	330c      	adds	r3, #12
 80028fc:	89ba      	ldrh	r2, [r7, #12]
 80028fe:	801a      	strh	r2, [r3, #0]
				UpdateNewEntry=UpdateNewEntry+1;
 8002900:	4b65      	ldr	r3, [pc, #404]	; (8002a98 <receivehttpcheck+0x6d4>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	3301      	adds	r3, #1
 8002906:	b2da      	uxtb	r2, r3
 8002908:	4b63      	ldr	r3, [pc, #396]	; (8002a98 <receivehttpcheck+0x6d4>)
 800290a:	701a      	strb	r2, [r3, #0]
				(LockUpdate == 0)? (MeterInfo[Meter_Id_Rx-1].NoOfFrame = 3):(LockUpdate=1);
 800290c:	4b63      	ldr	r3, [pc, #396]	; (8002a9c <receivehttpcheck+0x6d8>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10a      	bne.n	800292a <receivehttpcheck+0x566>
 8002914:	4b5e      	ldr	r3, [pc, #376]	; (8002a90 <receivehttpcheck+0x6cc>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	3b01      	subs	r3, #1
 800291a:	4a5e      	ldr	r2, [pc, #376]	; (8002a94 <receivehttpcheck+0x6d0>)
 800291c:	2116      	movs	r1, #22
 800291e:	fb01 f303 	mul.w	r3, r1, r3
 8002922:	4413      	add	r3, r2
 8002924:	2203      	movs	r2, #3
 8002926:	701a      	strb	r2, [r3, #0]
 8002928:	e17a      	b.n	8002c20 <receivehttpcheck+0x85c>
 800292a:	4b5c      	ldr	r3, [pc, #368]	; (8002a9c <receivehttpcheck+0x6d8>)
 800292c:	2201      	movs	r2, #1
 800292e:	701a      	strb	r2, [r3, #0]
 8002930:	e176      	b.n	8002c20 <receivehttpcheck+0x85c>
			}
			else if((token_1[0] == 'F')&&(token_1[1] == '4')){
 8002932:	4b56      	ldr	r3, [pc, #344]	; (8002a8c <receivehttpcheck+0x6c8>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b46      	cmp	r3, #70	; 0x46
 8002938:	f040 80bc 	bne.w	8002ab4 <receivehttpcheck+0x6f0>
 800293c:	4b53      	ldr	r3, [pc, #332]	; (8002a8c <receivehttpcheck+0x6c8>)
 800293e:	785b      	ldrb	r3, [r3, #1]
 8002940:	2b34      	cmp	r3, #52	; 0x34
 8002942:	f040 80b7 	bne.w	8002ab4 <receivehttpcheck+0x6f0>
				Frame_4_StartAdd = token_1[7]-48 +((token_1[6]-48)*10)+((token_1[5]-48)*100)+((token_1[4]-48)*1000)+((token_1[3]-48)*10000);
 8002946:	4b51      	ldr	r3, [pc, #324]	; (8002a8c <receivehttpcheck+0x6c8>)
 8002948:	79db      	ldrb	r3, [r3, #7]
 800294a:	b29a      	uxth	r2, r3
 800294c:	4b4f      	ldr	r3, [pc, #316]	; (8002a8c <receivehttpcheck+0x6c8>)
 800294e:	799b      	ldrb	r3, [r3, #6]
 8002950:	3b30      	subs	r3, #48	; 0x30
 8002952:	b29b      	uxth	r3, r3
 8002954:	4619      	mov	r1, r3
 8002956:	0089      	lsls	r1, r1, #2
 8002958:	440b      	add	r3, r1
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	b29b      	uxth	r3, r3
 800295e:	4413      	add	r3, r2
 8002960:	b29a      	uxth	r2, r3
 8002962:	4b4a      	ldr	r3, [pc, #296]	; (8002a8c <receivehttpcheck+0x6c8>)
 8002964:	795b      	ldrb	r3, [r3, #5]
 8002966:	3b30      	subs	r3, #48	; 0x30
 8002968:	b29b      	uxth	r3, r3
 800296a:	4619      	mov	r1, r3
 800296c:	0089      	lsls	r1, r1, #2
 800296e:	440b      	add	r3, r1
 8002970:	4619      	mov	r1, r3
 8002972:	0088      	lsls	r0, r1, #2
 8002974:	4619      	mov	r1, r3
 8002976:	4603      	mov	r3, r0
 8002978:	440b      	add	r3, r1
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	b29b      	uxth	r3, r3
 800297e:	4413      	add	r3, r2
 8002980:	b29a      	uxth	r2, r3
 8002982:	4b42      	ldr	r3, [pc, #264]	; (8002a8c <receivehttpcheck+0x6c8>)
 8002984:	791b      	ldrb	r3, [r3, #4]
 8002986:	3b30      	subs	r3, #48	; 0x30
 8002988:	b29b      	uxth	r3, r3
 800298a:	4619      	mov	r1, r3
 800298c:	0149      	lsls	r1, r1, #5
 800298e:	1ac9      	subs	r1, r1, r3
 8002990:	0089      	lsls	r1, r1, #2
 8002992:	440b      	add	r3, r1
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	b29b      	uxth	r3, r3
 8002998:	4413      	add	r3, r2
 800299a:	b29a      	uxth	r2, r3
 800299c:	4b3b      	ldr	r3, [pc, #236]	; (8002a8c <receivehttpcheck+0x6c8>)
 800299e:	78db      	ldrb	r3, [r3, #3]
 80029a0:	3b30      	subs	r3, #48	; 0x30
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	4619      	mov	r1, r3
 80029a6:	0149      	lsls	r1, r1, #5
 80029a8:	1ac9      	subs	r1, r1, r3
 80029aa:	0089      	lsls	r1, r1, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	4619      	mov	r1, r3
 80029b0:	0088      	lsls	r0, r1, #2
 80029b2:	4619      	mov	r1, r3
 80029b4:	4603      	mov	r3, r0
 80029b6:	440b      	add	r3, r1
 80029b8:	011b      	lsls	r3, r3, #4
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	4413      	add	r3, r2
 80029be:	b29b      	uxth	r3, r3
 80029c0:	3b30      	subs	r3, #48	; 0x30
 80029c2:	817b      	strh	r3, [r7, #10]
				Frame_4_NoOfData = token_1[13]-48 +((token_1[12]-48)*10)+((token_1[11]-48)*100)+((token_1[10]-48)*1000)+((token_1[9]-48)*10000);
 80029c4:	4b31      	ldr	r3, [pc, #196]	; (8002a8c <receivehttpcheck+0x6c8>)
 80029c6:	7b5b      	ldrb	r3, [r3, #13]
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	4b30      	ldr	r3, [pc, #192]	; (8002a8c <receivehttpcheck+0x6c8>)
 80029cc:	7b1b      	ldrb	r3, [r3, #12]
 80029ce:	3b30      	subs	r3, #48	; 0x30
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	4619      	mov	r1, r3
 80029d4:	0089      	lsls	r1, r1, #2
 80029d6:	440b      	add	r3, r1
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	b29b      	uxth	r3, r3
 80029dc:	4413      	add	r3, r2
 80029de:	b29a      	uxth	r2, r3
 80029e0:	4b2a      	ldr	r3, [pc, #168]	; (8002a8c <receivehttpcheck+0x6c8>)
 80029e2:	7adb      	ldrb	r3, [r3, #11]
 80029e4:	3b30      	subs	r3, #48	; 0x30
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	4619      	mov	r1, r3
 80029ea:	0089      	lsls	r1, r1, #2
 80029ec:	440b      	add	r3, r1
 80029ee:	4619      	mov	r1, r3
 80029f0:	0088      	lsls	r0, r1, #2
 80029f2:	4619      	mov	r1, r3
 80029f4:	4603      	mov	r3, r0
 80029f6:	440b      	add	r3, r1
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	4413      	add	r3, r2
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	4b22      	ldr	r3, [pc, #136]	; (8002a8c <receivehttpcheck+0x6c8>)
 8002a02:	7a9b      	ldrb	r3, [r3, #10]
 8002a04:	3b30      	subs	r3, #48	; 0x30
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	4619      	mov	r1, r3
 8002a0a:	0149      	lsls	r1, r1, #5
 8002a0c:	1ac9      	subs	r1, r1, r3
 8002a0e:	0089      	lsls	r1, r1, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	4413      	add	r3, r2
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	4b1c      	ldr	r3, [pc, #112]	; (8002a8c <receivehttpcheck+0x6c8>)
 8002a1c:	7a5b      	ldrb	r3, [r3, #9]
 8002a1e:	3b30      	subs	r3, #48	; 0x30
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	4619      	mov	r1, r3
 8002a24:	0149      	lsls	r1, r1, #5
 8002a26:	1ac9      	subs	r1, r1, r3
 8002a28:	0089      	lsls	r1, r1, #2
 8002a2a:	440b      	add	r3, r1
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	0088      	lsls	r0, r1, #2
 8002a30:	4619      	mov	r1, r3
 8002a32:	4603      	mov	r3, r0
 8002a34:	440b      	add	r3, r1
 8002a36:	011b      	lsls	r3, r3, #4
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	4413      	add	r3, r2
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	3b30      	subs	r3, #48	; 0x30
 8002a40:	813b      	strh	r3, [r7, #8]
				MeterInfo[Meter_Id_Rx-1].ModbusFrameRegInfo[3].FrameStartAddress = Frame_4_StartAdd;
 8002a42:	4b13      	ldr	r3, [pc, #76]	; (8002a90 <receivehttpcheck+0x6cc>)
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	3b01      	subs	r3, #1
 8002a48:	4a12      	ldr	r2, [pc, #72]	; (8002a94 <receivehttpcheck+0x6d0>)
 8002a4a:	2116      	movs	r1, #22
 8002a4c:	fb01 f303 	mul.w	r3, r1, r3
 8002a50:	4413      	add	r3, r2
 8002a52:	330e      	adds	r3, #14
 8002a54:	897a      	ldrh	r2, [r7, #10]
 8002a56:	801a      	strh	r2, [r3, #0]
				MeterInfo[Meter_Id_Rx-1].ModbusFrameRegInfo[3].FrameNoOfData = Frame_4_NoOfData;
 8002a58:	4b0d      	ldr	r3, [pc, #52]	; (8002a90 <receivehttpcheck+0x6cc>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	4a0d      	ldr	r2, [pc, #52]	; (8002a94 <receivehttpcheck+0x6d0>)
 8002a60:	2116      	movs	r1, #22
 8002a62:	fb01 f303 	mul.w	r3, r1, r3
 8002a66:	4413      	add	r3, r2
 8002a68:	3310      	adds	r3, #16
 8002a6a:	893a      	ldrh	r2, [r7, #8]
 8002a6c:	801a      	strh	r2, [r3, #0]
				(LockUpdate == 0)? (MeterInfo[Meter_Id_Rx-1].NoOfFrame = 4):(LockUpdate=1);
 8002a6e:	4b0b      	ldr	r3, [pc, #44]	; (8002a9c <receivehttpcheck+0x6d8>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d114      	bne.n	8002aa0 <receivehttpcheck+0x6dc>
 8002a76:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <receivehttpcheck+0x6cc>)
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	4a05      	ldr	r2, [pc, #20]	; (8002a94 <receivehttpcheck+0x6d0>)
 8002a7e:	2116      	movs	r1, #22
 8002a80:	fb01 f303 	mul.w	r3, r1, r3
 8002a84:	4413      	add	r3, r2
 8002a86:	2204      	movs	r2, #4
 8002a88:	701a      	strb	r2, [r3, #0]
 8002a8a:	e00c      	b.n	8002aa6 <receivehttpcheck+0x6e2>
 8002a8c:	2000419c 	.word	0x2000419c
 8002a90:	20004198 	.word	0x20004198
 8002a94:	20003758 	.word	0x20003758
 8002a98:	200041b1 	.word	0x200041b1
 8002a9c:	200041b2 	.word	0x200041b2
 8002aa0:	4b71      	ldr	r3, [pc, #452]	; (8002c68 <receivehttpcheck+0x8a4>)
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	701a      	strb	r2, [r3, #0]
				UpdateNewEntry=UpdateNewEntry+1;
 8002aa6:	4b71      	ldr	r3, [pc, #452]	; (8002c6c <receivehttpcheck+0x8a8>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	b2da      	uxtb	r2, r3
 8002aae:	4b6f      	ldr	r3, [pc, #444]	; (8002c6c <receivehttpcheck+0x8a8>)
 8002ab0:	701a      	strb	r2, [r3, #0]
 8002ab2:	e0b5      	b.n	8002c20 <receivehttpcheck+0x85c>
			}
			else if((token_1[0] == 'F')&&(token_1[1] == '5')){
 8002ab4:	4b6e      	ldr	r3, [pc, #440]	; (8002c70 <receivehttpcheck+0x8ac>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	2b46      	cmp	r3, #70	; 0x46
 8002aba:	f040 80b1 	bne.w	8002c20 <receivehttpcheck+0x85c>
 8002abe:	4b6c      	ldr	r3, [pc, #432]	; (8002c70 <receivehttpcheck+0x8ac>)
 8002ac0:	785b      	ldrb	r3, [r3, #1]
 8002ac2:	2b35      	cmp	r3, #53	; 0x35
 8002ac4:	f040 80ac 	bne.w	8002c20 <receivehttpcheck+0x85c>
				Frame_5_StartAdd = token_1[7]-48 +((token_1[6]-48)*10)+((token_1[5]-48)*100)+((token_1[4]-48)*1000)+((token_1[3]-48)*10000);
 8002ac8:	4b69      	ldr	r3, [pc, #420]	; (8002c70 <receivehttpcheck+0x8ac>)
 8002aca:	79db      	ldrb	r3, [r3, #7]
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	4b68      	ldr	r3, [pc, #416]	; (8002c70 <receivehttpcheck+0x8ac>)
 8002ad0:	799b      	ldrb	r3, [r3, #6]
 8002ad2:	3b30      	subs	r3, #48	; 0x30
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	0089      	lsls	r1, r1, #2
 8002ada:	440b      	add	r3, r1
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	4b62      	ldr	r3, [pc, #392]	; (8002c70 <receivehttpcheck+0x8ac>)
 8002ae6:	795b      	ldrb	r3, [r3, #5]
 8002ae8:	3b30      	subs	r3, #48	; 0x30
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	4619      	mov	r1, r3
 8002aee:	0089      	lsls	r1, r1, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	4619      	mov	r1, r3
 8002af4:	0088      	lsls	r0, r1, #2
 8002af6:	4619      	mov	r1, r3
 8002af8:	4603      	mov	r3, r0
 8002afa:	440b      	add	r3, r1
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	4413      	add	r3, r2
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	4b5a      	ldr	r3, [pc, #360]	; (8002c70 <receivehttpcheck+0x8ac>)
 8002b06:	791b      	ldrb	r3, [r3, #4]
 8002b08:	3b30      	subs	r3, #48	; 0x30
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	0149      	lsls	r1, r1, #5
 8002b10:	1ac9      	subs	r1, r1, r3
 8002b12:	0089      	lsls	r1, r1, #2
 8002b14:	440b      	add	r3, r1
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	4b54      	ldr	r3, [pc, #336]	; (8002c70 <receivehttpcheck+0x8ac>)
 8002b20:	78db      	ldrb	r3, [r3, #3]
 8002b22:	3b30      	subs	r3, #48	; 0x30
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	4619      	mov	r1, r3
 8002b28:	0149      	lsls	r1, r1, #5
 8002b2a:	1ac9      	subs	r1, r1, r3
 8002b2c:	0089      	lsls	r1, r1, #2
 8002b2e:	440b      	add	r3, r1
 8002b30:	4619      	mov	r1, r3
 8002b32:	0088      	lsls	r0, r1, #2
 8002b34:	4619      	mov	r1, r3
 8002b36:	4603      	mov	r3, r0
 8002b38:	440b      	add	r3, r1
 8002b3a:	011b      	lsls	r3, r3, #4
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	4413      	add	r3, r2
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	3b30      	subs	r3, #48	; 0x30
 8002b44:	80fb      	strh	r3, [r7, #6]
				Frame_5_NoOfData = token_1[13]-48 +((token_1[12]-48)*10)+((token_1[11]-48)*100)+((token_1[10]-48)*1000)+((token_1[9]-48)*10000);
 8002b46:	4b4a      	ldr	r3, [pc, #296]	; (8002c70 <receivehttpcheck+0x8ac>)
 8002b48:	7b5b      	ldrb	r3, [r3, #13]
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	4b48      	ldr	r3, [pc, #288]	; (8002c70 <receivehttpcheck+0x8ac>)
 8002b4e:	7b1b      	ldrb	r3, [r3, #12]
 8002b50:	3b30      	subs	r3, #48	; 0x30
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	4619      	mov	r1, r3
 8002b56:	0089      	lsls	r1, r1, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	4413      	add	r3, r2
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	4b43      	ldr	r3, [pc, #268]	; (8002c70 <receivehttpcheck+0x8ac>)
 8002b64:	7adb      	ldrb	r3, [r3, #11]
 8002b66:	3b30      	subs	r3, #48	; 0x30
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	0089      	lsls	r1, r1, #2
 8002b6e:	440b      	add	r3, r1
 8002b70:	4619      	mov	r1, r3
 8002b72:	0088      	lsls	r0, r1, #2
 8002b74:	4619      	mov	r1, r3
 8002b76:	4603      	mov	r3, r0
 8002b78:	440b      	add	r3, r1
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	4413      	add	r3, r2
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	4b3b      	ldr	r3, [pc, #236]	; (8002c70 <receivehttpcheck+0x8ac>)
 8002b84:	7a9b      	ldrb	r3, [r3, #10]
 8002b86:	3b30      	subs	r3, #48	; 0x30
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	0149      	lsls	r1, r1, #5
 8002b8e:	1ac9      	subs	r1, r1, r3
 8002b90:	0089      	lsls	r1, r1, #2
 8002b92:	440b      	add	r3, r1
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	4413      	add	r3, r2
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	4b34      	ldr	r3, [pc, #208]	; (8002c70 <receivehttpcheck+0x8ac>)
 8002b9e:	7a5b      	ldrb	r3, [r3, #9]
 8002ba0:	3b30      	subs	r3, #48	; 0x30
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	0149      	lsls	r1, r1, #5
 8002ba8:	1ac9      	subs	r1, r1, r3
 8002baa:	0089      	lsls	r1, r1, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	4619      	mov	r1, r3
 8002bb0:	0088      	lsls	r0, r1, #2
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	440b      	add	r3, r1
 8002bb8:	011b      	lsls	r3, r3, #4
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	4413      	add	r3, r2
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	3b30      	subs	r3, #48	; 0x30
 8002bc2:	80bb      	strh	r3, [r7, #4]
				MeterInfo[Meter_Id_Rx-1].ModbusFrameRegInfo[4].FrameStartAddress = Frame_5_StartAdd;
 8002bc4:	4b2b      	ldr	r3, [pc, #172]	; (8002c74 <receivehttpcheck+0x8b0>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	4a2b      	ldr	r2, [pc, #172]	; (8002c78 <receivehttpcheck+0x8b4>)
 8002bcc:	2116      	movs	r1, #22
 8002bce:	fb01 f303 	mul.w	r3, r1, r3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	3312      	adds	r3, #18
 8002bd6:	88fa      	ldrh	r2, [r7, #6]
 8002bd8:	801a      	strh	r2, [r3, #0]
				MeterInfo[Meter_Id_Rx-1].ModbusFrameRegInfo[4].FrameNoOfData = Frame_5_NoOfData;
 8002bda:	4b26      	ldr	r3, [pc, #152]	; (8002c74 <receivehttpcheck+0x8b0>)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	3b01      	subs	r3, #1
 8002be0:	4a25      	ldr	r2, [pc, #148]	; (8002c78 <receivehttpcheck+0x8b4>)
 8002be2:	2116      	movs	r1, #22
 8002be4:	fb01 f303 	mul.w	r3, r1, r3
 8002be8:	4413      	add	r3, r2
 8002bea:	3314      	adds	r3, #20
 8002bec:	88ba      	ldrh	r2, [r7, #4]
 8002bee:	801a      	strh	r2, [r3, #0]
				(LockUpdate == 0)? (MeterInfo[Meter_Id_Rx-1].NoOfFrame = 5):(LockUpdate=1);
 8002bf0:	4b1d      	ldr	r3, [pc, #116]	; (8002c68 <receivehttpcheck+0x8a4>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10a      	bne.n	8002c0e <receivehttpcheck+0x84a>
 8002bf8:	4b1e      	ldr	r3, [pc, #120]	; (8002c74 <receivehttpcheck+0x8b0>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	4a1e      	ldr	r2, [pc, #120]	; (8002c78 <receivehttpcheck+0x8b4>)
 8002c00:	2116      	movs	r1, #22
 8002c02:	fb01 f303 	mul.w	r3, r1, r3
 8002c06:	4413      	add	r3, r2
 8002c08:	2205      	movs	r2, #5
 8002c0a:	701a      	strb	r2, [r3, #0]
 8002c0c:	e002      	b.n	8002c14 <receivehttpcheck+0x850>
 8002c0e:	4b16      	ldr	r3, [pc, #88]	; (8002c68 <receivehttpcheck+0x8a4>)
 8002c10:	2201      	movs	r2, #1
 8002c12:	701a      	strb	r2, [r3, #0]
				UpdateNewEntry=UpdateNewEntry+1;
 8002c14:	4b15      	ldr	r3, [pc, #84]	; (8002c6c <receivehttpcheck+0x8a8>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	4b13      	ldr	r3, [pc, #76]	; (8002c6c <receivehttpcheck+0x8a8>)
 8002c1e:	701a      	strb	r2, [r3, #0]
			}
			else{
				/*Wrong data*/
			}
			pch = strtok (0,",");
 8002c20:	4916      	ldr	r1, [pc, #88]	; (8002c7c <receivehttpcheck+0x8b8>)
 8002c22:	2000      	movs	r0, #0
 8002c24:	f00b fa0a 	bl	800e03c <strtok>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	4a15      	ldr	r2, [pc, #84]	; (8002c80 <receivehttpcheck+0x8bc>)
 8002c2c:	6013      	str	r3, [r2, #0]
		while(pch!= NULL){
 8002c2e:	4b14      	ldr	r3, [pc, #80]	; (8002c80 <receivehttpcheck+0x8bc>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f47f ac28 	bne.w	8002488 <receivehttpcheck+0xc4>
		}

		Total_No_Of_Meter = 9;/*modify manual*/
 8002c38:	4b12      	ldr	r3, [pc, #72]	; (8002c84 <receivehttpcheck+0x8c0>)
 8002c3a:	2209      	movs	r2, #9
 8002c3c:	701a      	strb	r2, [r3, #0]
		if(Meter_Id_Rx == Total_No_Of_Meter)
 8002c3e:	4b0d      	ldr	r3, [pc, #52]	; (8002c74 <receivehttpcheck+0x8b0>)
 8002c40:	781a      	ldrb	r2, [r3, #0]
 8002c42:	4b10      	ldr	r3, [pc, #64]	; (8002c84 <receivehttpcheck+0x8c0>)
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d103      	bne.n	8002c52 <receivehttpcheck+0x88e>
		{
			Meter_Id =1;
 8002c4a:	4b0f      	ldr	r3, [pc, #60]	; (8002c88 <receivehttpcheck+0x8c4>)
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	701a      	strb	r2, [r3, #0]
			Meter_Id =Meter_Id_Rx+1;
		}

	//   	}
	}
}
 8002c50:	e005      	b.n	8002c5e <receivehttpcheck+0x89a>
			Meter_Id =Meter_Id_Rx+1;
 8002c52:	4b08      	ldr	r3, [pc, #32]	; (8002c74 <receivehttpcheck+0x8b0>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	3301      	adds	r3, #1
 8002c58:	b2da      	uxtb	r2, r3
 8002c5a:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <receivehttpcheck+0x8c4>)
 8002c5c:	701a      	strb	r2, [r3, #0]
}
 8002c5e:	bf00      	nop
 8002c60:	3718      	adds	r7, #24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	200041b2 	.word	0x200041b2
 8002c6c:	200041b1 	.word	0x200041b1
 8002c70:	2000419c 	.word	0x2000419c
 8002c74:	20004198 	.word	0x20004198
 8002c78:	20003758 	.word	0x20003758
 8002c7c:	0800f360 	.word	0x0800f360
 8002c80:	20004194 	.word	0x20004194
 8002c84:	200041b0 	.word	0x200041b0
 8002c88:	200053e2 	.word	0x200053e2

08002c8c <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8002c8c:	b590      	push	{r4, r7, lr}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4604      	mov	r4, r0
 8002c94:	4608      	mov	r0, r1
 8002c96:	4611      	mov	r1, r2
 8002c98:	461a      	mov	r2, r3
 8002c9a:	4623      	mov	r3, r4
 8002c9c:	71fb      	strb	r3, [r7, #7]
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	71bb      	strb	r3, [r7, #6]
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	80bb      	strh	r3, [r7, #4]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8002caa:	79fb      	ldrb	r3, [r7, #7]
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	d902      	bls.n	8002cb6 <socket+0x2a>
 8002cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8002cb4:	e0f2      	b.n	8002e9c <socket+0x210>
	switch(protocol)
 8002cb6:	79bb      	ldrb	r3, [r7, #6]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d005      	beq.n	8002cc8 <socket+0x3c>
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	dd11      	ble.n	8002ce4 <socket+0x58>
 8002cc0:	3b02      	subs	r3, #2
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d80e      	bhi.n	8002ce4 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8002cc6:	e011      	b.n	8002cec <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8002cc8:	f107 030c 	add.w	r3, r7, #12
 8002ccc:	2204      	movs	r2, #4
 8002cce:	4619      	mov	r1, r3
 8002cd0:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002cd4:	f7fe ff56 	bl	8001b84 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d105      	bne.n	8002cea <socket+0x5e>
 8002cde:	f06f 0302 	mvn.w	r3, #2
 8002ce2:	e0db      	b.n	8002e9c <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8002ce4:	f06f 0304 	mvn.w	r3, #4
 8002ce8:	e0d8      	b.n	8002e9c <socket+0x210>
	    break;
 8002cea:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8002cec:	78fb      	ldrb	r3, [r7, #3]
 8002cee:	f003 0304 	and.w	r3, r3, #4
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d002      	beq.n	8002cfc <socket+0x70>
 8002cf6:	f06f 0305 	mvn.w	r3, #5
 8002cfa:	e0cf      	b.n	8002e9c <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8002cfc:	78fb      	ldrb	r3, [r7, #3]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d025      	beq.n	8002d4e <socket+0xc2>
	{
   	switch(protocol)
 8002d02:	79bb      	ldrb	r3, [r7, #6]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d002      	beq.n	8002d0e <socket+0x82>
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d008      	beq.n	8002d1e <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8002d0c:	e024      	b.n	8002d58 <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8002d0e:	78fb      	ldrb	r3, [r7, #3]
 8002d10:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d11c      	bne.n	8002d52 <socket+0xc6>
 8002d18:	f06f 0305 	mvn.w	r3, #5
 8002d1c:	e0be      	b.n	8002e9c <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 8002d1e:	78fb      	ldrb	r3, [r7, #3]
 8002d20:	f003 0320 	and.w	r3, r3, #32
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d006      	beq.n	8002d36 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8002d28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	db02      	blt.n	8002d36 <socket+0xaa>
 8002d30:	f06f 0305 	mvn.w	r3, #5
 8002d34:	e0b2      	b.n	8002e9c <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 8002d36:	78fb      	ldrb	r3, [r7, #3]
 8002d38:	f003 0310 	and.w	r3, r3, #16
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00a      	beq.n	8002d56 <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8002d40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	db06      	blt.n	8002d56 <socket+0xca>
 8002d48:	f06f 0305 	mvn.w	r3, #5
 8002d4c:	e0a6      	b.n	8002e9c <socket+0x210>
   	}
   }
 8002d4e:	bf00      	nop
 8002d50:	e002      	b.n	8002d58 <socket+0xcc>
   	      break;
 8002d52:	bf00      	nop
 8002d54:	e000      	b.n	8002d58 <socket+0xcc>
   	      break;
 8002d56:	bf00      	nop
	close(sn);
 8002d58:	79fb      	ldrb	r3, [r7, #7]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 f8ac 	bl	8002eb8 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8002d60:	79fb      	ldrb	r3, [r7, #7]
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	3301      	adds	r3, #1
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d6e:	f023 030f 	bic.w	r3, r3, #15
 8002d72:	b25a      	sxtb	r2, r3
 8002d74:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	b25b      	sxtb	r3, r3
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	4619      	mov	r1, r3
 8002d80:	f7fe feb2 	bl	8001ae8 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8002d84:	88bb      	ldrh	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d110      	bne.n	8002dac <socket+0x120>
	{
	   port = sock_any_port++;
 8002d8a:	4b46      	ldr	r3, [pc, #280]	; (8002ea4 <socket+0x218>)
 8002d8c:	881b      	ldrh	r3, [r3, #0]
 8002d8e:	1c5a      	adds	r2, r3, #1
 8002d90:	b291      	uxth	r1, r2
 8002d92:	4a44      	ldr	r2, [pc, #272]	; (8002ea4 <socket+0x218>)
 8002d94:	8011      	strh	r1, [r2, #0]
 8002d96:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8002d98:	4b42      	ldr	r3, [pc, #264]	; (8002ea4 <socket+0x218>)
 8002d9a:	881b      	ldrh	r3, [r3, #0]
 8002d9c:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d103      	bne.n	8002dac <socket+0x120>
 8002da4:	4b3f      	ldr	r3, [pc, #252]	; (8002ea4 <socket+0x218>)
 8002da6:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8002daa:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8002dac:	79fb      	ldrb	r3, [r7, #7]
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	3301      	adds	r3, #1
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002db8:	461a      	mov	r2, r3
 8002dba:	88bb      	ldrh	r3, [r7, #4]
 8002dbc:	0a1b      	lsrs	r3, r3, #8
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4610      	mov	r0, r2
 8002dc6:	f7fe fe8f 	bl	8001ae8 <WIZCHIP_WRITE>
 8002dca:	79fb      	ldrb	r3, [r7, #7]
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	3301      	adds	r3, #1
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	88bb      	ldrh	r3, [r7, #4]
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4610      	mov	r0, r2
 8002de0:	f7fe fe82 	bl	8001ae8 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8002de4:	79fb      	ldrb	r3, [r7, #7]
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	3301      	adds	r3, #1
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002df0:	2101      	movs	r1, #1
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7fe fe78 	bl	8001ae8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002df8:	bf00      	nop
 8002dfa:	79fb      	ldrb	r3, [r7, #7]
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	3301      	adds	r3, #1
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7fe fe22 	bl	8001a50 <WIZCHIP_READ>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1f3      	bne.n	8002dfa <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8002e12:	79fb      	ldrb	r3, [r7, #7]
 8002e14:	2201      	movs	r2, #1
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	b21b      	sxth	r3, r3
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	b21a      	sxth	r2, r3
 8002e20:	4b21      	ldr	r3, [pc, #132]	; (8002ea8 <socket+0x21c>)
 8002e22:	881b      	ldrh	r3, [r3, #0]
 8002e24:	b21b      	sxth	r3, r3
 8002e26:	4013      	ands	r3, r2
 8002e28:	b21b      	sxth	r3, r3
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	4b1e      	ldr	r3, [pc, #120]	; (8002ea8 <socket+0x21c>)
 8002e2e:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8002e30:	78fb      	ldrb	r3, [r7, #3]
 8002e32:	f003 0201 	and.w	r2, r3, #1
 8002e36:	79fb      	ldrb	r3, [r7, #7]
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	b21a      	sxth	r2, r3
 8002e3e:	4b1a      	ldr	r3, [pc, #104]	; (8002ea8 <socket+0x21c>)
 8002e40:	881b      	ldrh	r3, [r3, #0]
 8002e42:	b21b      	sxth	r3, r3
 8002e44:	4313      	orrs	r3, r2
 8002e46:	b21b      	sxth	r3, r3
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	4b17      	ldr	r3, [pc, #92]	; (8002ea8 <socket+0x21c>)
 8002e4c:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8002e4e:	79fb      	ldrb	r3, [r7, #7]
 8002e50:	2201      	movs	r2, #1
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	b21b      	sxth	r3, r3
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	b21a      	sxth	r2, r3
 8002e5c:	4b13      	ldr	r3, [pc, #76]	; (8002eac <socket+0x220>)
 8002e5e:	881b      	ldrh	r3, [r3, #0]
 8002e60:	b21b      	sxth	r3, r3
 8002e62:	4013      	ands	r3, r2
 8002e64:	b21b      	sxth	r3, r3
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	4b10      	ldr	r3, [pc, #64]	; (8002eac <socket+0x220>)
 8002e6a:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8002e6c:	79fb      	ldrb	r3, [r7, #7]
 8002e6e:	4a10      	ldr	r2, [pc, #64]	; (8002eb0 <socket+0x224>)
 8002e70:	2100      	movs	r1, #0
 8002e72:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8002e76:	79fb      	ldrb	r3, [r7, #7]
 8002e78:	4a0e      	ldr	r2, [pc, #56]	; (8002eb4 <socket+0x228>)
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8002e7e:	bf00      	nop
 8002e80:	79fb      	ldrb	r3, [r7, #7]
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	3301      	adds	r3, #1
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7fe fddf 	bl	8001a50 <WIZCHIP_READ>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0f3      	beq.n	8002e80 <socket+0x1f4>
   return (int8_t)sn;
 8002e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3714      	adds	r7, #20
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd90      	pop	{r4, r7, pc}
 8002ea4:	20000022 	.word	0x20000022
 8002ea8:	200041b4 	.word	0x200041b4
 8002eac:	200041b6 	.word	0x200041b6
 8002eb0:	200041b8 	.word	0x200041b8
 8002eb4:	200041c8 	.word	0x200041c8

08002eb8 <close>:

int8_t close(uint8_t sn)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8002ec2:	79fb      	ldrb	r3, [r7, #7]
 8002ec4:	2b08      	cmp	r3, #8
 8002ec6:	d902      	bls.n	8002ece <close+0x16>
 8002ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8002ecc:	e055      	b.n	8002f7a <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8002ece:	79fb      	ldrb	r3, [r7, #7]
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002eda:	2110      	movs	r1, #16
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7fe fe03 	bl	8001ae8 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8002ee2:	bf00      	nop
 8002ee4:	79fb      	ldrb	r3, [r7, #7]
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	3301      	adds	r3, #1
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7fe fdad 	bl	8001a50 <WIZCHIP_READ>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1f3      	bne.n	8002ee4 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8002efc:	79fb      	ldrb	r3, [r7, #7]
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	3301      	adds	r3, #1
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002f08:	211f      	movs	r1, #31
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7fe fdec 	bl	8001ae8 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8002f10:	79fb      	ldrb	r3, [r7, #7]
 8002f12:	2201      	movs	r2, #1
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	b21b      	sxth	r3, r3
 8002f1a:	43db      	mvns	r3, r3
 8002f1c:	b21a      	sxth	r2, r3
 8002f1e:	4b19      	ldr	r3, [pc, #100]	; (8002f84 <close+0xcc>)
 8002f20:	881b      	ldrh	r3, [r3, #0]
 8002f22:	b21b      	sxth	r3, r3
 8002f24:	4013      	ands	r3, r2
 8002f26:	b21b      	sxth	r3, r3
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	4b16      	ldr	r3, [pc, #88]	; (8002f84 <close+0xcc>)
 8002f2c:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8002f2e:	79fb      	ldrb	r3, [r7, #7]
 8002f30:	2201      	movs	r2, #1
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	b21b      	sxth	r3, r3
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	b21a      	sxth	r2, r3
 8002f3c:	4b12      	ldr	r3, [pc, #72]	; (8002f88 <close+0xd0>)
 8002f3e:	881b      	ldrh	r3, [r3, #0]
 8002f40:	b21b      	sxth	r3, r3
 8002f42:	4013      	ands	r3, r2
 8002f44:	b21b      	sxth	r3, r3
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	4b0f      	ldr	r3, [pc, #60]	; (8002f88 <close+0xd0>)
 8002f4a:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8002f4c:	79fb      	ldrb	r3, [r7, #7]
 8002f4e:	4a0f      	ldr	r2, [pc, #60]	; (8002f8c <close+0xd4>)
 8002f50:	2100      	movs	r1, #0
 8002f52:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8002f56:	79fb      	ldrb	r3, [r7, #7]
 8002f58:	4a0d      	ldr	r2, [pc, #52]	; (8002f90 <close+0xd8>)
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8002f5e:	bf00      	nop
 8002f60:	79fb      	ldrb	r3, [r7, #7]
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	3301      	adds	r3, #1
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7fe fd6f 	bl	8001a50 <WIZCHIP_READ>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1f3      	bne.n	8002f60 <close+0xa8>
	return SOCK_OK;
 8002f78:	2301      	movs	r3, #1
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	200041b4 	.word	0x200041b4
 8002f88:	200041b6 	.word	0x200041b6
 8002f8c:	200041b8 	.word	0x200041b8
 8002f90:	200041c8 	.word	0x200041c8

08002f94 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	6039      	str	r1, [r7, #0]
 8002f9e:	71fb      	strb	r3, [r7, #7]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8002fa4:	79fb      	ldrb	r3, [r7, #7]
 8002fa6:	2b08      	cmp	r3, #8
 8002fa8:	d902      	bls.n	8002fb0 <connect+0x1c>
 8002faa:	f04f 33ff 	mov.w	r3, #4294967295
 8002fae:	e0c6      	b.n	800313e <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002fb0:	79fb      	ldrb	r3, [r7, #7]
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7fe fd49 	bl	8001a50 <WIZCHIP_READ>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	f003 030f 	and.w	r3, r3, #15
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d002      	beq.n	8002fce <connect+0x3a>
 8002fc8:	f06f 0304 	mvn.w	r3, #4
 8002fcc:	e0b7      	b.n	800313e <connect+0x1aa>
   CHECK_SOCKINIT();
 8002fce:	79fb      	ldrb	r3, [r7, #7]
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fe fd38 	bl	8001a50 <WIZCHIP_READ>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b13      	cmp	r3, #19
 8002fe4:	d002      	beq.n	8002fec <connect+0x58>
 8002fe6:	f06f 0302 	mvn.w	r3, #2
 8002fea:	e0a8      	b.n	800313e <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	021b      	lsls	r3, r3, #8
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	3201      	adds	r2, #1
 8002ffa:	7812      	ldrb	r2, [r2, #0]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	021b      	lsls	r3, r3, #8
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	3202      	adds	r2, #2
 8003008:	7812      	ldrb	r2, [r2, #0]
 800300a:	4413      	add	r3, r2
 800300c:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	021b      	lsls	r3, r3, #8
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	3203      	adds	r2, #3
 8003016:	7812      	ldrb	r2, [r2, #0]
 8003018:	4413      	add	r3, r2
 800301a:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003022:	d002      	beq.n	800302a <connect+0x96>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d102      	bne.n	8003030 <connect+0x9c>
 800302a:	f06f 030b 	mvn.w	r3, #11
 800302e:	e086      	b.n	800313e <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8003030:	88bb      	ldrh	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d102      	bne.n	800303c <connect+0xa8>
 8003036:	f06f 030a 	mvn.w	r3, #10
 800303a:	e080      	b.n	800313e <connect+0x1aa>
	setSn_DIPR(sn,addr);
 800303c:	79fb      	ldrb	r3, [r7, #7]
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	3301      	adds	r3, #1
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8003048:	2204      	movs	r2, #4
 800304a:	6839      	ldr	r1, [r7, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f7fe fdf9 	bl	8001c44 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8003052:	79fb      	ldrb	r3, [r7, #7]
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	3301      	adds	r3, #1
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800305e:	461a      	mov	r2, r3
 8003060:	88bb      	ldrh	r3, [r7, #4]
 8003062:	0a1b      	lsrs	r3, r3, #8
 8003064:	b29b      	uxth	r3, r3
 8003066:	b2db      	uxtb	r3, r3
 8003068:	4619      	mov	r1, r3
 800306a:	4610      	mov	r0, r2
 800306c:	f7fe fd3c 	bl	8001ae8 <WIZCHIP_WRITE>
 8003070:	79fb      	ldrb	r3, [r7, #7]
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	3301      	adds	r3, #1
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800307c:	461a      	mov	r2, r3
 800307e:	88bb      	ldrh	r3, [r7, #4]
 8003080:	b2db      	uxtb	r3, r3
 8003082:	4619      	mov	r1, r3
 8003084:	4610      	mov	r0, r2
 8003086:	f7fe fd2f 	bl	8001ae8 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 800308a:	79fb      	ldrb	r3, [r7, #7]
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	3301      	adds	r3, #1
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003096:	2104      	movs	r1, #4
 8003098:	4618      	mov	r0, r3
 800309a:	f7fe fd25 	bl	8001ae8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800309e:	bf00      	nop
 80030a0:	79fb      	ldrb	r3, [r7, #7]
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	3301      	adds	r3, #1
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7fe fccf 	bl	8001a50 <WIZCHIP_READ>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1f3      	bne.n	80030a0 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80030b8:	4b23      	ldr	r3, [pc, #140]	; (8003148 <connect+0x1b4>)
 80030ba:	881b      	ldrh	r3, [r3, #0]
 80030bc:	461a      	mov	r2, r3
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	fa42 f303 	asr.w	r3, r2, r3
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d02b      	beq.n	8003124 <connect+0x190>
 80030cc:	2300      	movs	r3, #0
 80030ce:	e036      	b.n	800313e <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 80030d0:	79fb      	ldrb	r3, [r7, #7]
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	3301      	adds	r3, #1
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80030dc:	4618      	mov	r0, r3
 80030de:	f7fe fcb7 	bl	8001a50 <WIZCHIP_READ>
 80030e2:	4603      	mov	r3, r0
 80030e4:	f003 0308 	and.w	r3, r3, #8
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00c      	beq.n	8003106 <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 80030ec:	79fb      	ldrb	r3, [r7, #7]
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	3301      	adds	r3, #1
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80030f8:	2108      	movs	r1, #8
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7fe fcf4 	bl	8001ae8 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 8003100:	f06f 030c 	mvn.w	r3, #12
 8003104:	e01b      	b.n	800313e <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 8003106:	79fb      	ldrb	r3, [r7, #7]
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	3301      	adds	r3, #1
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003112:	4618      	mov	r0, r3
 8003114:	f7fe fc9c 	bl	8001a50 <WIZCHIP_READ>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d102      	bne.n	8003124 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 800311e:	f06f 0303 	mvn.w	r3, #3
 8003122:	e00c      	b.n	800313e <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8003124:	79fb      	ldrb	r3, [r7, #7]
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	3301      	adds	r3, #1
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003130:	4618      	mov	r0, r3
 8003132:	f7fe fc8d 	bl	8001a50 <WIZCHIP_READ>
 8003136:	4603      	mov	r3, r0
 8003138:	2b17      	cmp	r3, #23
 800313a:	d1c9      	bne.n	80030d0 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 800313c:	2301      	movs	r3, #1
}
 800313e:	4618      	mov	r0, r3
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	200041b4 	.word	0x200041b4

0800314c <disconnect>:

int8_t disconnect(uint8_t sn)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	4603      	mov	r3, r0
 8003154:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8003156:	79fb      	ldrb	r3, [r7, #7]
 8003158:	2b08      	cmp	r3, #8
 800315a:	d902      	bls.n	8003162 <disconnect+0x16>
 800315c:	f04f 33ff 	mov.w	r3, #4294967295
 8003160:	e062      	b.n	8003228 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003162:	79fb      	ldrb	r3, [r7, #7]
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	3301      	adds	r3, #1
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	4618      	mov	r0, r3
 800316c:	f7fe fc70 	bl	8001a50 <WIZCHIP_READ>
 8003170:	4603      	mov	r3, r0
 8003172:	f003 030f 	and.w	r3, r3, #15
 8003176:	2b01      	cmp	r3, #1
 8003178:	d002      	beq.n	8003180 <disconnect+0x34>
 800317a:	f06f 0304 	mvn.w	r3, #4
 800317e:	e053      	b.n	8003228 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8003180:	79fb      	ldrb	r3, [r7, #7]
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	3301      	adds	r3, #1
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800318c:	2108      	movs	r1, #8
 800318e:	4618      	mov	r0, r3
 8003190:	f7fe fcaa 	bl	8001ae8 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8003194:	bf00      	nop
 8003196:	79fb      	ldrb	r3, [r7, #7]
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	3301      	adds	r3, #1
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7fe fc54 	bl	8001a50 <WIZCHIP_READ>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1f3      	bne.n	8003196 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 80031ae:	79fb      	ldrb	r3, [r7, #7]
 80031b0:	2201      	movs	r2, #1
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	b21b      	sxth	r3, r3
 80031b8:	43db      	mvns	r3, r3
 80031ba:	b21a      	sxth	r2, r3
 80031bc:	4b1c      	ldr	r3, [pc, #112]	; (8003230 <disconnect+0xe4>)
 80031be:	881b      	ldrh	r3, [r3, #0]
 80031c0:	b21b      	sxth	r3, r3
 80031c2:	4013      	ands	r3, r2
 80031c4:	b21b      	sxth	r3, r3
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	4b19      	ldr	r3, [pc, #100]	; (8003230 <disconnect+0xe4>)
 80031ca:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80031cc:	4b19      	ldr	r3, [pc, #100]	; (8003234 <disconnect+0xe8>)
 80031ce:	881b      	ldrh	r3, [r3, #0]
 80031d0:	461a      	mov	r2, r3
 80031d2:	79fb      	ldrb	r3, [r7, #7]
 80031d4:	fa42 f303 	asr.w	r3, r2, r3
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d016      	beq.n	800320e <disconnect+0xc2>
 80031e0:	2300      	movs	r3, #0
 80031e2:	e021      	b.n	8003228 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 80031e4:	79fb      	ldrb	r3, [r7, #7]
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	3301      	adds	r3, #1
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7fe fc2d 	bl	8001a50 <WIZCHIP_READ>
 80031f6:	4603      	mov	r3, r0
 80031f8:	f003 0308 	and.w	r3, r3, #8
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d006      	beq.n	800320e <disconnect+0xc2>
	   {
	      close(sn);
 8003200:	79fb      	ldrb	r3, [r7, #7]
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff fe58 	bl	8002eb8 <close>
	      return SOCKERR_TIMEOUT;
 8003208:	f06f 030c 	mvn.w	r3, #12
 800320c:	e00c      	b.n	8003228 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 800320e:	79fb      	ldrb	r3, [r7, #7]
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	3301      	adds	r3, #1
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800321a:	4618      	mov	r0, r3
 800321c:	f7fe fc18 	bl	8001a50 <WIZCHIP_READ>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1de      	bne.n	80031e4 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 8003226:	2301      	movs	r3, #1
}
 8003228:	4618      	mov	r0, r3
 800322a:	3708      	adds	r7, #8
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	200041b6 	.word	0x200041b6
 8003234:	200041b4 	.word	0x200041b4

08003238 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	4603      	mov	r3, r0
 8003240:	6039      	str	r1, [r7, #0]
 8003242:	71fb      	strb	r3, [r7, #7]
 8003244:	4613      	mov	r3, r2
 8003246:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8003248:	2300      	movs	r3, #0
 800324a:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 800324c:	2300      	movs	r3, #0
 800324e:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8003250:	79fb      	ldrb	r3, [r7, #7]
 8003252:	2b08      	cmp	r3, #8
 8003254:	d902      	bls.n	800325c <send+0x24>
 8003256:	f04f 33ff 	mov.w	r3, #4294967295
 800325a:	e0de      	b.n	800341a <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800325c:	79fb      	ldrb	r3, [r7, #7]
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	3301      	adds	r3, #1
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	4618      	mov	r0, r3
 8003266:	f7fe fbf3 	bl	8001a50 <WIZCHIP_READ>
 800326a:	4603      	mov	r3, r0
 800326c:	f003 030f 	and.w	r3, r3, #15
 8003270:	2b01      	cmp	r3, #1
 8003272:	d002      	beq.n	800327a <send+0x42>
 8003274:	f06f 0304 	mvn.w	r3, #4
 8003278:	e0cf      	b.n	800341a <send+0x1e2>
   CHECK_SOCKDATA();
 800327a:	88bb      	ldrh	r3, [r7, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d102      	bne.n	8003286 <send+0x4e>
 8003280:	f06f 030d 	mvn.w	r3, #13
 8003284:	e0c9      	b.n	800341a <send+0x1e2>
   tmp = getSn_SR(sn);
 8003286:	79fb      	ldrb	r3, [r7, #7]
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	3301      	adds	r3, #1
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003292:	4618      	mov	r0, r3
 8003294:	f7fe fbdc 	bl	8001a50 <WIZCHIP_READ>
 8003298:	4603      	mov	r3, r0
 800329a:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 800329c:	7bfb      	ldrb	r3, [r7, #15]
 800329e:	2b17      	cmp	r3, #23
 80032a0:	d005      	beq.n	80032ae <send+0x76>
 80032a2:	7bfb      	ldrb	r3, [r7, #15]
 80032a4:	2b1c      	cmp	r3, #28
 80032a6:	d002      	beq.n	80032ae <send+0x76>
 80032a8:	f06f 0306 	mvn.w	r3, #6
 80032ac:	e0b5      	b.n	800341a <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 80032ae:	4b5d      	ldr	r3, [pc, #372]	; (8003424 <send+0x1ec>)
 80032b0:	881b      	ldrh	r3, [r3, #0]
 80032b2:	461a      	mov	r2, r3
 80032b4:	79fb      	ldrb	r3, [r7, #7]
 80032b6:	fa42 f303 	asr.w	r3, r2, r3
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d039      	beq.n	8003336 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 80032c2:	79fb      	ldrb	r3, [r7, #7]
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	3301      	adds	r3, #1
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fe fbbe 	bl	8001a50 <WIZCHIP_READ>
 80032d4:	4603      	mov	r3, r0
 80032d6:	f003 031f 	and.w	r3, r3, #31
 80032da:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 80032dc:	7bfb      	ldrb	r3, [r7, #15]
 80032de:	f003 0310 	and.w	r3, r3, #16
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d019      	beq.n	800331a <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80032e6:	79fb      	ldrb	r3, [r7, #7]
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	3301      	adds	r3, #1
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80032f2:	2110      	movs	r1, #16
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7fe fbf7 	bl	8001ae8 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 80032fa:	79fb      	ldrb	r3, [r7, #7]
 80032fc:	2201      	movs	r2, #1
 80032fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003302:	b21b      	sxth	r3, r3
 8003304:	43db      	mvns	r3, r3
 8003306:	b21a      	sxth	r2, r3
 8003308:	4b46      	ldr	r3, [pc, #280]	; (8003424 <send+0x1ec>)
 800330a:	881b      	ldrh	r3, [r3, #0]
 800330c:	b21b      	sxth	r3, r3
 800330e:	4013      	ands	r3, r2
 8003310:	b21b      	sxth	r3, r3
 8003312:	b29a      	uxth	r2, r3
 8003314:	4b43      	ldr	r3, [pc, #268]	; (8003424 <send+0x1ec>)
 8003316:	801a      	strh	r2, [r3, #0]
 8003318:	e00d      	b.n	8003336 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 800331a:	7bfb      	ldrb	r3, [r7, #15]
 800331c:	f003 0308 	and.w	r3, r3, #8
 8003320:	2b00      	cmp	r3, #0
 8003322:	d006      	beq.n	8003332 <send+0xfa>
      {
         close(sn);
 8003324:	79fb      	ldrb	r3, [r7, #7]
 8003326:	4618      	mov	r0, r3
 8003328:	f7ff fdc6 	bl	8002eb8 <close>
         return SOCKERR_TIMEOUT;
 800332c:	f06f 030c 	mvn.w	r3, #12
 8003330:	e073      	b.n	800341a <send+0x1e2>
      }
      else return SOCK_BUSY;
 8003332:	2300      	movs	r3, #0
 8003334:	e071      	b.n	800341a <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 8003336:	79fb      	ldrb	r3, [r7, #7]
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	3301      	adds	r3, #1
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8003342:	4618      	mov	r0, r3
 8003344:	f7fe fb84 	bl	8001a50 <WIZCHIP_READ>
 8003348:	4603      	mov	r3, r0
 800334a:	b29b      	uxth	r3, r3
 800334c:	029b      	lsls	r3, r3, #10
 800334e:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8003350:	88ba      	ldrh	r2, [r7, #4]
 8003352:	89bb      	ldrh	r3, [r7, #12]
 8003354:	429a      	cmp	r2, r3
 8003356:	d901      	bls.n	800335c <send+0x124>
 8003358:	89bb      	ldrh	r3, [r7, #12]
 800335a:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 800335c:	79fb      	ldrb	r3, [r7, #7]
 800335e:	4618      	mov	r0, r3
 8003360:	f7fe fcd0 	bl	8001d04 <getSn_TX_FSR>
 8003364:	4603      	mov	r3, r0
 8003366:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8003368:	79fb      	ldrb	r3, [r7, #7]
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	3301      	adds	r3, #1
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003374:	4618      	mov	r0, r3
 8003376:	f7fe fb6b 	bl	8001a50 <WIZCHIP_READ>
 800337a:	4603      	mov	r3, r0
 800337c:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 800337e:	7bfb      	ldrb	r3, [r7, #15]
 8003380:	2b17      	cmp	r3, #23
 8003382:	d009      	beq.n	8003398 <send+0x160>
 8003384:	7bfb      	ldrb	r3, [r7, #15]
 8003386:	2b1c      	cmp	r3, #28
 8003388:	d006      	beq.n	8003398 <send+0x160>
      {
         close(sn);
 800338a:	79fb      	ldrb	r3, [r7, #7]
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff fd93 	bl	8002eb8 <close>
         return SOCKERR_SOCKSTATUS;
 8003392:	f06f 0306 	mvn.w	r3, #6
 8003396:	e040      	b.n	800341a <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8003398:	4b23      	ldr	r3, [pc, #140]	; (8003428 <send+0x1f0>)
 800339a:	881b      	ldrh	r3, [r3, #0]
 800339c:	461a      	mov	r2, r3
 800339e:	79fb      	ldrb	r3, [r7, #7]
 80033a0:	fa42 f303 	asr.w	r3, r2, r3
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d005      	beq.n	80033b8 <send+0x180>
 80033ac:	88ba      	ldrh	r2, [r7, #4]
 80033ae:	89bb      	ldrh	r3, [r7, #12]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d901      	bls.n	80033b8 <send+0x180>
 80033b4:	2300      	movs	r3, #0
 80033b6:	e030      	b.n	800341a <send+0x1e2>
      if(len <= freesize) break;
 80033b8:	88ba      	ldrh	r2, [r7, #4]
 80033ba:	89bb      	ldrh	r3, [r7, #12]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d900      	bls.n	80033c2 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 80033c0:	e7cc      	b.n	800335c <send+0x124>
      if(len <= freesize) break;
 80033c2:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 80033c4:	88ba      	ldrh	r2, [r7, #4]
 80033c6:	79fb      	ldrb	r3, [r7, #7]
 80033c8:	6839      	ldr	r1, [r7, #0]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7fe fd30 	bl	8001e30 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 80033d0:	79fb      	ldrb	r3, [r7, #7]
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	3301      	adds	r3, #1
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80033dc:	2120      	movs	r1, #32
 80033de:	4618      	mov	r0, r3
 80033e0:	f7fe fb82 	bl	8001ae8 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 80033e4:	bf00      	nop
 80033e6:	79fb      	ldrb	r3, [r7, #7]
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	3301      	adds	r3, #1
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7fe fb2c 	bl	8001a50 <WIZCHIP_READ>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1f3      	bne.n	80033e6 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 80033fe:	79fb      	ldrb	r3, [r7, #7]
 8003400:	2201      	movs	r2, #1
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	b21a      	sxth	r2, r3
 8003408:	4b06      	ldr	r3, [pc, #24]	; (8003424 <send+0x1ec>)
 800340a:	881b      	ldrh	r3, [r3, #0]
 800340c:	b21b      	sxth	r3, r3
 800340e:	4313      	orrs	r3, r2
 8003410:	b21b      	sxth	r3, r3
 8003412:	b29a      	uxth	r2, r3
 8003414:	4b03      	ldr	r3, [pc, #12]	; (8003424 <send+0x1ec>)
 8003416:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8003418:	88bb      	ldrh	r3, [r7, #4]
}
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	200041b6 	.word	0x200041b6
 8003428:	200041b4 	.word	0x200041b4

0800342c <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 800342c:	b590      	push	{r4, r7, lr}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	4603      	mov	r3, r0
 8003434:	6039      	str	r1, [r7, #0]
 8003436:	71fb      	strb	r3, [r7, #7]
 8003438:	4613      	mov	r3, r2
 800343a:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 800343c:	2300      	movs	r3, #0
 800343e:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8003440:	2300      	movs	r3, #0
 8003442:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8003444:	79fb      	ldrb	r3, [r7, #7]
 8003446:	2b08      	cmp	r3, #8
 8003448:	d902      	bls.n	8003450 <recv+0x24>
 800344a:	f04f 33ff 	mov.w	r3, #4294967295
 800344e:	e09c      	b.n	800358a <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003450:	79fb      	ldrb	r3, [r7, #7]
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	3301      	adds	r3, #1
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	4618      	mov	r0, r3
 800345a:	f7fe faf9 	bl	8001a50 <WIZCHIP_READ>
 800345e:	4603      	mov	r3, r0
 8003460:	f003 030f 	and.w	r3, r3, #15
 8003464:	2b01      	cmp	r3, #1
 8003466:	d002      	beq.n	800346e <recv+0x42>
 8003468:	f06f 0304 	mvn.w	r3, #4
 800346c:	e08d      	b.n	800358a <recv+0x15e>
   CHECK_SOCKDATA();
 800346e:	88bb      	ldrh	r3, [r7, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d102      	bne.n	800347a <recv+0x4e>
 8003474:	f06f 030d 	mvn.w	r3, #13
 8003478:	e087      	b.n	800358a <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 800347a:	79fb      	ldrb	r3, [r7, #7]
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	3301      	adds	r3, #1
 8003480:	00db      	lsls	r3, r3, #3
 8003482:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8003486:	4618      	mov	r0, r3
 8003488:	f7fe fae2 	bl	8001a50 <WIZCHIP_READ>
 800348c:	4603      	mov	r3, r0
 800348e:	b29b      	uxth	r3, r3
 8003490:	029b      	lsls	r3, r3, #10
 8003492:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8003494:	89ba      	ldrh	r2, [r7, #12]
 8003496:	88bb      	ldrh	r3, [r7, #4]
 8003498:	429a      	cmp	r2, r3
 800349a:	d201      	bcs.n	80034a0 <recv+0x74>
 800349c:	89bb      	ldrh	r3, [r7, #12]
 800349e:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 80034a0:	79fb      	ldrb	r3, [r7, #7]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fe fc79 	bl	8001d9a <getSn_RX_RSR>
 80034a8:	4603      	mov	r3, r0
 80034aa:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 80034ac:	79fb      	ldrb	r3, [r7, #7]
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	3301      	adds	r3, #1
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7fe fac9 	bl	8001a50 <WIZCHIP_READ>
 80034be:	4603      	mov	r3, r0
 80034c0:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 80034c2:	7bfb      	ldrb	r3, [r7, #15]
 80034c4:	2b17      	cmp	r3, #23
 80034c6:	d026      	beq.n	8003516 <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 80034c8:	7bfb      	ldrb	r3, [r7, #15]
 80034ca:	2b1c      	cmp	r3, #28
 80034cc:	d11c      	bne.n	8003508 <recv+0xdc>
            {
               if(recvsize != 0) break;
 80034ce:	89bb      	ldrh	r3, [r7, #12]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d133      	bne.n	800353c <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 80034d4:	79fb      	ldrb	r3, [r7, #7]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fe fc14 	bl	8001d04 <getSn_TX_FSR>
 80034dc:	4603      	mov	r3, r0
 80034de:	461c      	mov	r4, r3
 80034e0:	79fb      	ldrb	r3, [r7, #7]
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	3301      	adds	r3, #1
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7fe faaf 	bl	8001a50 <WIZCHIP_READ>
 80034f2:	4603      	mov	r3, r0
 80034f4:	029b      	lsls	r3, r3, #10
 80034f6:	429c      	cmp	r4, r3
 80034f8:	d10d      	bne.n	8003516 <recv+0xea>
               {
                  close(sn);
 80034fa:	79fb      	ldrb	r3, [r7, #7]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7ff fcdb 	bl	8002eb8 <close>
                  return SOCKERR_SOCKSTATUS;
 8003502:	f06f 0306 	mvn.w	r3, #6
 8003506:	e040      	b.n	800358a <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 8003508:	79fb      	ldrb	r3, [r7, #7]
 800350a:	4618      	mov	r0, r3
 800350c:	f7ff fcd4 	bl	8002eb8 <close>
               return SOCKERR_SOCKSTATUS;
 8003510:	f06f 0306 	mvn.w	r3, #6
 8003514:	e039      	b.n	800358a <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8003516:	4b1f      	ldr	r3, [pc, #124]	; (8003594 <recv+0x168>)
 8003518:	881b      	ldrh	r3, [r3, #0]
 800351a:	461a      	mov	r2, r3
 800351c:	79fb      	ldrb	r3, [r7, #7]
 800351e:	fa42 f303 	asr.w	r3, r2, r3
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b00      	cmp	r3, #0
 8003528:	d004      	beq.n	8003534 <recv+0x108>
 800352a:	89bb      	ldrh	r3, [r7, #12]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d101      	bne.n	8003534 <recv+0x108>
 8003530:	2300      	movs	r3, #0
 8003532:	e02a      	b.n	800358a <recv+0x15e>
         if(recvsize != 0) break;
 8003534:	89bb      	ldrh	r3, [r7, #12]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d102      	bne.n	8003540 <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 800353a:	e7b1      	b.n	80034a0 <recv+0x74>
               if(recvsize != 0) break;
 800353c:	bf00      	nop
 800353e:	e000      	b.n	8003542 <recv+0x116>
         if(recvsize != 0) break;
 8003540:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8003542:	89ba      	ldrh	r2, [r7, #12]
 8003544:	88bb      	ldrh	r3, [r7, #4]
 8003546:	429a      	cmp	r2, r3
 8003548:	d201      	bcs.n	800354e <recv+0x122>
 800354a:	89bb      	ldrh	r3, [r7, #12]
 800354c:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 800354e:	88ba      	ldrh	r2, [r7, #4]
 8003550:	79fb      	ldrb	r3, [r7, #7]
 8003552:	6839      	ldr	r1, [r7, #0]
 8003554:	4618      	mov	r0, r3
 8003556:	f7fe fcc7 	bl	8001ee8 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 800355a:	79fb      	ldrb	r3, [r7, #7]
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	3301      	adds	r3, #1
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003566:	2140      	movs	r1, #64	; 0x40
 8003568:	4618      	mov	r0, r3
 800356a:	f7fe fabd 	bl	8001ae8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800356e:	bf00      	nop
 8003570:	79fb      	ldrb	r3, [r7, #7]
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	3301      	adds	r3, #1
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800357c:	4618      	mov	r0, r3
 800357e:	f7fe fa67 	bl	8001a50 <WIZCHIP_READ>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1f3      	bne.n	8003570 <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8003588:	88bb      	ldrh	r3, [r7, #4]
}
 800358a:	4618      	mov	r0, r3
 800358c:	3714      	adds	r7, #20
 800358e:	46bd      	mov	sp, r7
 8003590:	bd90      	pop	{r4, r7, pc}
 8003592:	bf00      	nop
 8003594:	200041b4 	.word	0x200041b4

08003598 <wizchip_select>:
void ethernetHTTPRoutine(void);

void initializeHttp(void);

void wizchip_select(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, W5500_CS_Pin, GPIO_PIN_RESET);
 800359c:	2200      	movs	r2, #0
 800359e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035a2:	4802      	ldr	r0, [pc, #8]	; (80035ac <wizchip_select+0x14>)
 80035a4:	f006 fc0c 	bl	8009dc0 <HAL_GPIO_WritePin>
}
 80035a8:	bf00      	nop
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	48000400 	.word	0x48000400

080035b0 <wizchip_deselect>:

void wizchip_deselect(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, W5500_CS_Pin, GPIO_PIN_SET);
 80035b4:	2201      	movs	r2, #1
 80035b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035ba:	4802      	ldr	r0, [pc, #8]	; (80035c4 <wizchip_deselect+0x14>)
 80035bc:	f006 fc00 	bl	8009dc0 <HAL_GPIO_WritePin>
}
 80035c0:	bf00      	nop
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	48000400 	.word	0x48000400

080035c8 <W5500_Spi>:
{
    HAL_SPI_Transmit(&_W5500_SPI,buff,len,HAL_MAX_DELAY) ;
}

uint8_t W5500_Spi(uint8_t Data)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af02      	add	r7, sp, #8
 80035ce:	4603      	mov	r3, r0
 80035d0:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W5500_SPI, &Data, &ret, 1, 100);
 80035d2:	f107 020f 	add.w	r2, r7, #15
 80035d6:	1df9      	adds	r1, r7, #7
 80035d8:	2364      	movs	r3, #100	; 0x64
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	2301      	movs	r3, #1
 80035de:	4804      	ldr	r0, [pc, #16]	; (80035f0 <W5500_Spi+0x28>)
 80035e0:	f007 ffc1 	bl	800b566 <HAL_SPI_TransmitReceive>
	return ret;
 80035e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	200035dc 	.word	0x200035dc

080035f4 <wiz5500Init>:
	wizchip_setnetinfo ( & net_info ) ;
}*/


void wiz5500Init(void)
{
 80035f4:	b590      	push	{r4, r7, lr}
 80035f6:	b087      	sub	sp, #28
 80035f8:	af00      	add	r7, sp, #0

	uint8_t memsize[2][8] = { {2,2,2,2,2,2,2,2},{2,2,2,2,2,2,2,2}};
 80035fa:	4b28      	ldr	r3, [pc, #160]	; (800369c <wiz5500Init+0xa8>)
 80035fc:	f107 0408 	add.w	r4, r7, #8
 8003600:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003602:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t tmp;
	//hardware reset the module
	HAL_GPIO_WritePin(W5500RST_GPIO_Port, W5500RST_Pin, GPIO_PIN_RESET);
 8003606:	2200      	movs	r2, #0
 8003608:	2180      	movs	r1, #128	; 0x80
 800360a:	4825      	ldr	r0, [pc, #148]	; (80036a0 <wiz5500Init+0xac>)
 800360c:	f006 fbd8 	bl	8009dc0 <HAL_GPIO_WritePin>
	HAL_Delay(15000);
 8003610:	f643 2098 	movw	r0, #15000	; 0x3a98
 8003614:	f006 f8a6 	bl	8009764 <HAL_Delay>
	HAL_GPIO_WritePin(W5500RST_GPIO_Port, W5500RST_Pin, GPIO_PIN_SET);
 8003618:	2201      	movs	r2, #1
 800361a:	2180      	movs	r1, #128	; 0x80
 800361c:	4820      	ldr	r0, [pc, #128]	; (80036a0 <wiz5500Init+0xac>)
 800361e:	f006 fbcf 	bl	8009dc0 <HAL_GPIO_WritePin>

	reg_wizchip_cs_cbfunc(wizchip_select,wizchip_deselect);
 8003622:	4920      	ldr	r1, [pc, #128]	; (80036a4 <wiz5500Init+0xb0>)
 8003624:	4820      	ldr	r0, [pc, #128]	; (80036a8 <wiz5500Init+0xb4>)
 8003626:	f000 fd0b 	bl	8004040 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(W5500_Spi,W5500_Spi);
 800362a:	4920      	ldr	r1, [pc, #128]	; (80036ac <wiz5500Init+0xb8>)
 800362c:	481f      	ldr	r0, [pc, #124]	; (80036ac <wiz5500Init+0xb8>)
 800362e:	f000 fd2d 	bl	800408c <reg_wizchip_spi_cbfunc>
//	reg_wizchip_spiburst_cbfunc(W5500_ReadBuff,W5500_WriteBuff);

	if(ctlwizchip(CW_INIT_WIZCHIP,(void*)memsize) == -1)
 8003632:	f107 0308 	add.w	r3, r7, #8
 8003636:	4619      	mov	r1, r3
 8003638:	2001      	movs	r0, #1
 800363a:	f000 fd53 	bl	80040e4 <ctlwizchip>
 800363e:	4603      	mov	r3, r0
 8003640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003644:	d103      	bne.n	800364e <wiz5500Init+0x5a>
	{
		statusChipInit=1;
 8003646:	4b1a      	ldr	r3, [pc, #104]	; (80036b0 <wiz5500Init+0xbc>)
 8003648:	2201      	movs	r2, #1
 800364a:	701a      	strb	r2, [r3, #0]
		return;
 800364c:	e022      	b.n	8003694 <wiz5500Init+0xa0>
	}
	/* PHY link status check */
	do
	{
		if(ctlwizchip(CW_GET_PHYSTATUS, (void*)&tmp) == -1)
 800364e:	1dfb      	adds	r3, r7, #7
 8003650:	4619      	mov	r1, r3
 8003652:	200c      	movs	r0, #12
 8003654:	f000 fd46 	bl	80040e4 <ctlwizchip>
 8003658:	4603      	mov	r3, r0
 800365a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800365e:	d103      	bne.n	8003668 <wiz5500Init+0x74>
		{
			statusPhysLink=1;
 8003660:	4b14      	ldr	r3, [pc, #80]	; (80036b4 <wiz5500Init+0xc0>)
 8003662:	2201      	movs	r2, #1
 8003664:	701a      	strb	r2, [r3, #0]
			return;
 8003666:	e015      	b.n	8003694 <wiz5500Init+0xa0>
		}
		statusPhysLink=0;
 8003668:	4b12      	ldr	r3, [pc, #72]	; (80036b4 <wiz5500Init+0xc0>)
 800366a:	2200      	movs	r2, #0
 800366c:	701a      	strb	r2, [r3, #0]
	} while (tmp == PHY_LINK_OFF);
 800366e:	79fb      	ldrb	r3, [r7, #7]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0ec      	beq.n	800364e <wiz5500Init+0x5a>
	HAL_Delay(3000);
 8003674:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003678:	f006 f874 	bl	8009764 <HAL_Delay>
	//getVERSIONR();

	wizchip_setnetinfo(&gWIZNETINFO);
 800367c:	480e      	ldr	r0, [pc, #56]	; (80036b8 <wiz5500Init+0xc4>)
 800367e:	f001 f8cd 	bl	800481c <wizchip_setnetinfo>
	HAL_Delay(1000);
 8003682:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003686:	f006 f86d 	bl	8009764 <HAL_Delay>


//	processDHCP();

	wizchip_getnetinfo(&checkgWIZNETINFO);
 800368a:	480c      	ldr	r0, [pc, #48]	; (80036bc <wiz5500Init+0xc8>)
 800368c:	f001 f906 	bl	800489c <wizchip_getnetinfo>

	initializeHttp();
 8003690:	f000 f816 	bl	80036c0 <initializeHttp>

}
 8003694:	371c      	adds	r7, #28
 8003696:	46bd      	mov	sp, r7
 8003698:	bd90      	pop	{r4, r7, pc}
 800369a:	bf00      	nop
 800369c:	0800f364 	.word	0x0800f364
 80036a0:	48000800 	.word	0x48000800
 80036a4:	080035b1 	.word	0x080035b1
 80036a8:	08003599 	.word	0x08003599
 80036ac:	080035c9 	.word	0x080035c9
 80036b0:	200053e0 	.word	0x200053e0
 80036b4:	200053e1 	.word	0x200053e1
 80036b8:	20000024 	.word	0x20000024
 80036bc:	200041d0 	.word	0x200041d0

080036c0 <initializeHttp>:
		}
	}
}

void initializeHttp(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af02      	add	r7, sp, #8
	httpc_init(0, Domain_name, 9004, g_send_buf, g_recv_buf);
 80036c6:	4b06      	ldr	r3, [pc, #24]	; (80036e0 <initializeHttp+0x20>)
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <initializeHttp+0x24>)
 80036cc:	f242 322c 	movw	r2, #9004	; 0x232c
 80036d0:	4905      	ldr	r1, [pc, #20]	; (80036e8 <initializeHttp+0x28>)
 80036d2:	2000      	movs	r0, #0
 80036d4:	f7fe fc64 	bl	8001fa0 <httpc_init>
}
 80036d8:	bf00      	nop
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	200049ec 	.word	0x200049ec
 80036e4:	200041ec 	.word	0x200041ec
 80036e8:	2000003c 	.word	0x2000003c

080036ec <ethernetHTTPRoutine>:

void ethernetHTTPRoutine(void)
{
 80036ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036ee:	b09f      	sub	sp, #124	; 0x7c
 80036f0:	af12      	add	r7, sp, #72	; 0x48

	receivehttpcheck();
 80036f2:	f7fe fe67 	bl	80023c4 <receivehttpcheck>
	httpc_connection_handler();
 80036f6:	f7fe fc91 	bl	800201c <httpc_connection_handler>

	if(httpc_isSockOpen)
 80036fa:	4bae      	ldr	r3, [pc, #696]	; (80039b4 <ethernetHTTPRoutine+0x2c8>)
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d005      	beq.n	800370e <ethernetHTTPRoutine+0x22>
	{
		connectionCheck = httpc_connect();
 8003702:	f7fe fd3d 	bl	8002180 <httpc_connect>
 8003706:	4603      	mov	r3, r0
 8003708:	461a      	mov	r2, r3
 800370a:	4bab      	ldr	r3, [pc, #684]	; (80039b8 <ethernetHTTPRoutine+0x2cc>)
 800370c:	701a      	strb	r2, [r3, #0]
	}
	if(httpc_isConnected)
 800370e:	4bab      	ldr	r3, [pc, #684]	; (80039bc <ethernetHTTPRoutine+0x2d0>)
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 8426 	beq.w	8003f64 <ethernetHTTPRoutine+0x878>
			//x++;
		}
		}
#endif

		length1 = sprintf(URI,"POST /powermeter?mid=%d&bid=2 HTTP/1.0\r\n"
 8003718:	4ba9      	ldr	r3, [pc, #676]	; (80039c0 <ethernetHTTPRoutine+0x2d4>)
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	461a      	mov	r2, r3
 800371e:	2322      	movs	r3, #34	; 0x22
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	f240 1309 	movw	r3, #265	; 0x109
 8003726:	49a7      	ldr	r1, [pc, #668]	; (80039c4 <ethernetHTTPRoutine+0x2d8>)
 8003728:	48a7      	ldr	r0, [pc, #668]	; (80039c8 <ethernetHTTPRoutine+0x2dc>)
 800372a:	f00a fc51 	bl	800dfd0 <siprintf>
 800372e:	4603      	mov	r3, r0
 8003730:	b29a      	uxth	r2, r3
 8003732:	4ba6      	ldr	r3, [pc, #664]	; (80039cc <ethernetHTTPRoutine+0x2e0>)
 8003734:	801a      	strh	r2, [r3, #0]
						"Host: isc2.power-meter.acceedo.in:9004\r\n"
						"Accept: text/html\r\n"
						"Content-Type: application/json \r\n"
						"Content-Length: %d\r\n\r\n"
						"[%c",Meter_Id,265,'"');
		length2 =  sprintf(URI+length1,"%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 8003736:	4ba5      	ldr	r3, [pc, #660]	; (80039cc <ethernetHTTPRoutine+0x2e0>)
 8003738:	881b      	ldrh	r3, [r3, #0]
 800373a:	461a      	mov	r2, r3
 800373c:	4ba2      	ldr	r3, [pc, #648]	; (80039c8 <ethernetHTTPRoutine+0x2dc>)
 800373e:	18d5      	adds	r5, r2, r3
						  PowerMeterdatabase[Meter_Id-1].loc_datastore[0][0],PowerMeterdatabase[Meter_Id-1].loc_datastore[0][1],PowerMeterdatabase[Meter_Id-1].loc_datastore[0][2],PowerMeterdatabase[Meter_Id-1].loc_datastore[0][3],
 8003740:	4b9f      	ldr	r3, [pc, #636]	; (80039c0 <ethernetHTTPRoutine+0x2d4>)
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	3b01      	subs	r3, #1
 8003746:	4aa2      	ldr	r2, [pc, #648]	; (80039d0 <ethernetHTTPRoutine+0x2e4>)
 8003748:	f44f 7149 	mov.w	r1, #804	; 0x324
 800374c:	fb01 f303 	mul.w	r3, r1, r3
 8003750:	4413      	add	r3, r2
 8003752:	781b      	ldrb	r3, [r3, #0]
		length2 =  sprintf(URI+length1,"%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 8003754:	469c      	mov	ip, r3
						  PowerMeterdatabase[Meter_Id-1].loc_datastore[0][0],PowerMeterdatabase[Meter_Id-1].loc_datastore[0][1],PowerMeterdatabase[Meter_Id-1].loc_datastore[0][2],PowerMeterdatabase[Meter_Id-1].loc_datastore[0][3],
 8003756:	4b9a      	ldr	r3, [pc, #616]	; (80039c0 <ethernetHTTPRoutine+0x2d4>)
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	3b01      	subs	r3, #1
 800375c:	4a9c      	ldr	r2, [pc, #624]	; (80039d0 <ethernetHTTPRoutine+0x2e4>)
 800375e:	f44f 7149 	mov.w	r1, #804	; 0x324
 8003762:	fb01 f303 	mul.w	r3, r1, r3
 8003766:	4413      	add	r3, r2
 8003768:	3301      	adds	r3, #1
 800376a:	781b      	ldrb	r3, [r3, #0]
		length2 =  sprintf(URI+length1,"%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 800376c:	469e      	mov	lr, r3
						  PowerMeterdatabase[Meter_Id-1].loc_datastore[0][0],PowerMeterdatabase[Meter_Id-1].loc_datastore[0][1],PowerMeterdatabase[Meter_Id-1].loc_datastore[0][2],PowerMeterdatabase[Meter_Id-1].loc_datastore[0][3],
 800376e:	4b94      	ldr	r3, [pc, #592]	; (80039c0 <ethernetHTTPRoutine+0x2d4>)
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	3b01      	subs	r3, #1
 8003774:	4a96      	ldr	r2, [pc, #600]	; (80039d0 <ethernetHTTPRoutine+0x2e4>)
 8003776:	f44f 7149 	mov.w	r1, #804	; 0x324
 800377a:	fb01 f303 	mul.w	r3, r1, r3
 800377e:	4413      	add	r3, r2
 8003780:	3302      	adds	r3, #2
 8003782:	781b      	ldrb	r3, [r3, #0]
		length2 =  sprintf(URI+length1,"%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 8003784:	62fb      	str	r3, [r7, #44]	; 0x2c
						  PowerMeterdatabase[Meter_Id-1].loc_datastore[0][0],PowerMeterdatabase[Meter_Id-1].loc_datastore[0][1],PowerMeterdatabase[Meter_Id-1].loc_datastore[0][2],PowerMeterdatabase[Meter_Id-1].loc_datastore[0][3],
 8003786:	4b8e      	ldr	r3, [pc, #568]	; (80039c0 <ethernetHTTPRoutine+0x2d4>)
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	3b01      	subs	r3, #1
 800378c:	4a90      	ldr	r2, [pc, #576]	; (80039d0 <ethernetHTTPRoutine+0x2e4>)
 800378e:	f44f 7149 	mov.w	r1, #804	; 0x324
 8003792:	fb01 f303 	mul.w	r3, r1, r3
 8003796:	4413      	add	r3, r2
 8003798:	3303      	adds	r3, #3
 800379a:	781b      	ldrb	r3, [r3, #0]
		length2 =  sprintf(URI+length1,"%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 800379c:	62bb      	str	r3, [r7, #40]	; 0x28
						  PowerMeterdatabase[Meter_Id-1].loc_datastore[0][4],PowerMeterdatabase[Meter_Id-1].loc_datastore[0][5],PowerMeterdatabase[Meter_Id-1].loc_datastore[0][6],PowerMeterdatabase[Meter_Id-1].loc_datastore[0][7],
 800379e:	4b88      	ldr	r3, [pc, #544]	; (80039c0 <ethernetHTTPRoutine+0x2d4>)
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	3b01      	subs	r3, #1
 80037a4:	4a8a      	ldr	r2, [pc, #552]	; (80039d0 <ethernetHTTPRoutine+0x2e4>)
 80037a6:	f44f 7149 	mov.w	r1, #804	; 0x324
 80037aa:	fb01 f303 	mul.w	r3, r1, r3
 80037ae:	4413      	add	r3, r2
 80037b0:	3304      	adds	r3, #4
 80037b2:	781b      	ldrb	r3, [r3, #0]
		length2 =  sprintf(URI+length1,"%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 80037b4:	627b      	str	r3, [r7, #36]	; 0x24
						  PowerMeterdatabase[Meter_Id-1].loc_datastore[0][4],PowerMeterdatabase[Meter_Id-1].loc_datastore[0][5],PowerMeterdatabase[Meter_Id-1].loc_datastore[0][6],PowerMeterdatabase[Meter_Id-1].loc_datastore[0][7],
 80037b6:	4b82      	ldr	r3, [pc, #520]	; (80039c0 <ethernetHTTPRoutine+0x2d4>)
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	3b01      	subs	r3, #1
 80037bc:	4a84      	ldr	r2, [pc, #528]	; (80039d0 <ethernetHTTPRoutine+0x2e4>)
 80037be:	f44f 7149 	mov.w	r1, #804	; 0x324
 80037c2:	fb01 f303 	mul.w	r3, r1, r3
 80037c6:	4413      	add	r3, r2
 80037c8:	3305      	adds	r3, #5
 80037ca:	781b      	ldrb	r3, [r3, #0]
		length2 =  sprintf(URI+length1,"%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 80037cc:	623b      	str	r3, [r7, #32]
						  PowerMeterdatabase[Meter_Id-1].loc_datastore[0][4],PowerMeterdatabase[Meter_Id-1].loc_datastore[0][5],PowerMeterdatabase[Meter_Id-1].loc_datastore[0][6],PowerMeterdatabase[Meter_Id-1].loc_datastore[0][7],
 80037ce:	4b7c      	ldr	r3, [pc, #496]	; (80039c0 <ethernetHTTPRoutine+0x2d4>)
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	3b01      	subs	r3, #1
 80037d4:	4a7e      	ldr	r2, [pc, #504]	; (80039d0 <ethernetHTTPRoutine+0x2e4>)
 80037d6:	f44f 7149 	mov.w	r1, #804	; 0x324
 80037da:	fb01 f303 	mul.w	r3, r1, r3
 80037de:	4413      	add	r3, r2
 80037e0:	3306      	adds	r3, #6
 80037e2:	781b      	ldrb	r3, [r3, #0]
		length2 =  sprintf(URI+length1,"%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 80037e4:	61fb      	str	r3, [r7, #28]
						  PowerMeterdatabase[Meter_Id-1].loc_datastore[0][4],PowerMeterdatabase[Meter_Id-1].loc_datastore[0][5],PowerMeterdatabase[Meter_Id-1].loc_datastore[0][6],PowerMeterdatabase[Meter_Id-1].loc_datastore[0][7],
 80037e6:	4b76      	ldr	r3, [pc, #472]	; (80039c0 <ethernetHTTPRoutine+0x2d4>)
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	3b01      	subs	r3, #1
 80037ec:	4a78      	ldr	r2, [pc, #480]	; (80039d0 <ethernetHTTPRoutine+0x2e4>)
 80037ee:	f44f 7149 	mov.w	r1, #804	; 0x324
 80037f2:	fb01 f303 	mul.w	r3, r1, r3
 80037f6:	4413      	add	r3, r2
 80037f8:	3307      	adds	r3, #7
 80037fa:	781b      	ldrb	r3, [r3, #0]
		length2 =  sprintf(URI+length1,"%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 80037fc:	61bb      	str	r3, [r7, #24]
						  PowerMeterdatabase[Meter_Id-1].loc_datastore[0][8],PowerMeterdatabase[Meter_Id-1].loc_datastore[0][9],PowerMeterdatabase[Meter_Id-1].loc_datastore[0][10],PowerMeterdatabase[Meter_Id-1].loc_datastore[0][11],
 80037fe:	4b70      	ldr	r3, [pc, #448]	; (80039c0 <ethernetHTTPRoutine+0x2d4>)
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	3b01      	subs	r3, #1
 8003804:	4a72      	ldr	r2, [pc, #456]	; (80039d0 <ethernetHTTPRoutine+0x2e4>)
 8003806:	f44f 7149 	mov.w	r1, #804	; 0x324
 800380a:	fb01 f303 	mul.w	r3, r1, r3
 800380e:	4413      	add	r3, r2
 8003810:	3308      	adds	r3, #8
 8003812:	781b      	ldrb	r3, [r3, #0]
		length2 =  sprintf(URI+length1,"%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 8003814:	617b      	str	r3, [r7, #20]
						  PowerMeterdatabase[Meter_Id-1].loc_datastore[0][8],PowerMeterdatabase[Meter_Id-1].loc_datastore[0][9],PowerMeterdatabase[Meter_Id-1].loc_datastore[0][10],PowerMeterdatabase[Meter_Id-1].loc_datastore[0][11],
 8003816:	4b6a      	ldr	r3, [pc, #424]	; (80039c0 <ethernetHTTPRoutine+0x2d4>)
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	3b01      	subs	r3, #1
 800381c:	4a6c      	ldr	r2, [pc, #432]	; (80039d0 <ethernetHTTPRoutine+0x2e4>)
 800381e:	f44f 7149 	mov.w	r1, #804	; 0x324
 8003822:	fb01 f303 	mul.w	r3, r1, r3
 8003826:	4413      	add	r3, r2
 8003828:	3309      	adds	r3, #9
 800382a:	781b      	ldrb	r3, [r3, #0]
		length2 =  sprintf(URI+length1,"%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 800382c:	613b      	str	r3, [r7, #16]
						  PowerMeterdatabase[Meter_Id-1].loc_datastore[0][8],PowerMeterdatabase[Meter_Id-1].loc_datastore[0][9],PowerMeterdatabase[Meter_Id-1].loc_datastore[0][10],PowerMeterdatabase[Meter_Id-1].loc_datastore[0][11],
 800382e:	4b64      	ldr	r3, [pc, #400]	; (80039c0 <ethernetHTTPRoutine+0x2d4>)
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	3b01      	subs	r3, #1
 8003834:	4a66      	ldr	r2, [pc, #408]	; (80039d0 <ethernetHTTPRoutine+0x2e4>)
 8003836:	f44f 7149 	mov.w	r1, #804	; 0x324
 800383a:	fb01 f303 	mul.w	r3, r1, r3
 800383e:	4413      	add	r3, r2
 8003840:	330a      	adds	r3, #10
 8003842:	781b      	ldrb	r3, [r3, #0]
		length2 =  sprintf(URI+length1,"%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 8003844:	60fb      	str	r3, [r7, #12]
						  PowerMeterdatabase[Meter_Id-1].loc_datastore[0][8],PowerMeterdatabase[Meter_Id-1].loc_datastore[0][9],PowerMeterdatabase[Meter_Id-1].loc_datastore[0][10],PowerMeterdatabase[Meter_Id-1].loc_datastore[0][11],
 8003846:	4b5e      	ldr	r3, [pc, #376]	; (80039c0 <ethernetHTTPRoutine+0x2d4>)
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	1e5a      	subs	r2, r3, #1
 800384c:	4960      	ldr	r1, [pc, #384]	; (80039d0 <ethernetHTTPRoutine+0x2e4>)
 800384e:	f44f 7349 	mov.w	r3, #804	; 0x324
 8003852:	fb02 f303 	mul.w	r3, r2, r3
 8003856:	440b      	add	r3, r1
 8003858:	330b      	adds	r3, #11
 800385a:	781b      	ldrb	r3, [r3, #0]
		length2 =  sprintf(URI+length1,"%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 800385c:	60bb      	str	r3, [r7, #8]
						  PowerMeterdatabase[Meter_Id-1].loc_datastore[0][12],PowerMeterdatabase[Meter_Id-1].loc_datastore[0][13],PowerMeterdatabase[Meter_Id-1].loc_datastore[0][14],PowerMeterdatabase[Meter_Id-1].loc_datastore[0][15],
 800385e:	4b58      	ldr	r3, [pc, #352]	; (80039c0 <ethernetHTTPRoutine+0x2d4>)
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	1e5a      	subs	r2, r3, #1
 8003864:	495a      	ldr	r1, [pc, #360]	; (80039d0 <ethernetHTTPRoutine+0x2e4>)
 8003866:	f44f 7349 	mov.w	r3, #804	; 0x324
 800386a:	fb02 f303 	mul.w	r3, r2, r3
 800386e:	440b      	add	r3, r1
 8003870:	330c      	adds	r3, #12
 8003872:	781b      	ldrb	r3, [r3, #0]
		length2 =  sprintf(URI+length1,"%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 8003874:	461e      	mov	r6, r3
						  PowerMeterdatabase[Meter_Id-1].loc_datastore[0][12],PowerMeterdatabase[Meter_Id-1].loc_datastore[0][13],PowerMeterdatabase[Meter_Id-1].loc_datastore[0][14],PowerMeterdatabase[Meter_Id-1].loc_datastore[0][15],
 8003876:	4b52      	ldr	r3, [pc, #328]	; (80039c0 <ethernetHTTPRoutine+0x2d4>)
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	1e5a      	subs	r2, r3, #1
 800387c:	4954      	ldr	r1, [pc, #336]	; (80039d0 <ethernetHTTPRoutine+0x2e4>)
 800387e:	f44f 7349 	mov.w	r3, #804	; 0x324
 8003882:	fb02 f303 	mul.w	r3, r2, r3
 8003886:	440b      	add	r3, r1
 8003888:	330d      	adds	r3, #13
 800388a:	781b      	ldrb	r3, [r3, #0]
		length2 =  sprintf(URI+length1,"%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 800388c:	461c      	mov	r4, r3
						  PowerMeterdatabase[Meter_Id-1].loc_datastore[0][12],PowerMeterdatabase[Meter_Id-1].loc_datastore[0][13],PowerMeterdatabase[Meter_Id-1].loc_datastore[0][14],PowerMeterdatabase[Meter_Id-1].loc_datastore[0][15],
 800388e:	4b4c      	ldr	r3, [pc, #304]	; (80039c0 <ethernetHTTPRoutine+0x2d4>)
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	1e5a      	subs	r2, r3, #1
 8003894:	494e      	ldr	r1, [pc, #312]	; (80039d0 <ethernetHTTPRoutine+0x2e4>)
 8003896:	f44f 7349 	mov.w	r3, #804	; 0x324
 800389a:	fb02 f303 	mul.w	r3, r2, r3
 800389e:	440b      	add	r3, r1
 80038a0:	330e      	adds	r3, #14
 80038a2:	781b      	ldrb	r3, [r3, #0]
		length2 =  sprintf(URI+length1,"%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 80038a4:	4618      	mov	r0, r3
						  PowerMeterdatabase[Meter_Id-1].loc_datastore[0][12],PowerMeterdatabase[Meter_Id-1].loc_datastore[0][13],PowerMeterdatabase[Meter_Id-1].loc_datastore[0][14],PowerMeterdatabase[Meter_Id-1].loc_datastore[0][15],
 80038a6:	4b46      	ldr	r3, [pc, #280]	; (80039c0 <ethernetHTTPRoutine+0x2d4>)
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	1e5a      	subs	r2, r3, #1
 80038ac:	4948      	ldr	r1, [pc, #288]	; (80039d0 <ethernetHTTPRoutine+0x2e4>)
 80038ae:	f44f 7349 	mov.w	r3, #804	; 0x324
 80038b2:	fb02 f303 	mul.w	r3, r2, r3
 80038b6:	440b      	add	r3, r1
 80038b8:	330f      	adds	r3, #15
 80038ba:	781b      	ldrb	r3, [r3, #0]
		length2 =  sprintf(URI+length1,"%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 80038bc:	461a      	mov	r2, r3
 80038be:	2322      	movs	r3, #34	; 0x22
 80038c0:	930e      	str	r3, [sp, #56]	; 0x38
 80038c2:	920d      	str	r2, [sp, #52]	; 0x34
 80038c4:	900c      	str	r0, [sp, #48]	; 0x30
 80038c6:	940b      	str	r4, [sp, #44]	; 0x2c
 80038c8:	960a      	str	r6, [sp, #40]	; 0x28
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	9209      	str	r2, [sp, #36]	; 0x24
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	9208      	str	r2, [sp, #32]
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	9207      	str	r2, [sp, #28]
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	9206      	str	r2, [sp, #24]
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	9205      	str	r2, [sp, #20]
 80038de:	69fa      	ldr	r2, [r7, #28]
 80038e0:	9204      	str	r2, [sp, #16]
 80038e2:	6a3a      	ldr	r2, [r7, #32]
 80038e4:	9203      	str	r2, [sp, #12]
 80038e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e8:	9202      	str	r2, [sp, #8]
 80038ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038ec:	9201      	str	r2, [sp, #4]
 80038ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f0:	9300      	str	r3, [sp, #0]
 80038f2:	4673      	mov	r3, lr
 80038f4:	4662      	mov	r2, ip
 80038f6:	4937      	ldr	r1, [pc, #220]	; (80039d4 <ethernetHTTPRoutine+0x2e8>)
 80038f8:	4628      	mov	r0, r5
 80038fa:	f00a fb69 	bl	800dfd0 <siprintf>
 80038fe:	4603      	mov	r3, r0
 8003900:	b29a      	uxth	r2, r3
 8003902:	4b35      	ldr	r3, [pc, #212]	; (80039d8 <ethernetHTTPRoutine+0x2ec>)
 8003904:	801a      	strh	r2, [r3, #0]
						  '"');//48+2+15
		length3 =  sprintf(URI+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 8003906:	4b34      	ldr	r3, [pc, #208]	; (80039d8 <ethernetHTTPRoutine+0x2ec>)
 8003908:	881b      	ldrh	r3, [r3, #0]
 800390a:	461a      	mov	r2, r3
 800390c:	4b2f      	ldr	r3, [pc, #188]	; (80039cc <ethernetHTTPRoutine+0x2e0>)
 800390e:	881b      	ldrh	r3, [r3, #0]
 8003910:	4413      	add	r3, r2
 8003912:	4a2d      	ldr	r2, [pc, #180]	; (80039c8 <ethernetHTTPRoutine+0x2dc>)
 8003914:	189d      	adds	r5, r3, r2
								 ',','"',PowerMeterdatabase[Meter_Id-1].loc_datastore[1][0],PowerMeterdatabase[Meter_Id-1].loc_datastore[1][1],PowerMeterdatabase[Meter_Id-1].loc_datastore[1][2],PowerMeterdatabase[Meter_Id-1].loc_datastore[1][3],
 8003916:	4b2a      	ldr	r3, [pc, #168]	; (80039c0 <ethernetHTTPRoutine+0x2d4>)
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	3b01      	subs	r3, #1
 800391c:	4a2c      	ldr	r2, [pc, #176]	; (80039d0 <ethernetHTTPRoutine+0x2e4>)
 800391e:	f44f 7149 	mov.w	r1, #804	; 0x324
 8003922:	fb01 f303 	mul.w	r3, r1, r3
 8003926:	4413      	add	r3, r2
 8003928:	33c8      	adds	r3, #200	; 0xc8
 800392a:	781b      	ldrb	r3, [r3, #0]
		length3 =  sprintf(URI+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 800392c:	62fb      	str	r3, [r7, #44]	; 0x2c
								 ',','"',PowerMeterdatabase[Meter_Id-1].loc_datastore[1][0],PowerMeterdatabase[Meter_Id-1].loc_datastore[1][1],PowerMeterdatabase[Meter_Id-1].loc_datastore[1][2],PowerMeterdatabase[Meter_Id-1].loc_datastore[1][3],
 800392e:	4b24      	ldr	r3, [pc, #144]	; (80039c0 <ethernetHTTPRoutine+0x2d4>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	3b01      	subs	r3, #1
 8003934:	4a26      	ldr	r2, [pc, #152]	; (80039d0 <ethernetHTTPRoutine+0x2e4>)
 8003936:	f44f 7149 	mov.w	r1, #804	; 0x324
 800393a:	fb01 f303 	mul.w	r3, r1, r3
 800393e:	4413      	add	r3, r2
 8003940:	33c9      	adds	r3, #201	; 0xc9
 8003942:	781b      	ldrb	r3, [r3, #0]
		length3 =  sprintf(URI+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 8003944:	62bb      	str	r3, [r7, #40]	; 0x28
								 ',','"',PowerMeterdatabase[Meter_Id-1].loc_datastore[1][0],PowerMeterdatabase[Meter_Id-1].loc_datastore[1][1],PowerMeterdatabase[Meter_Id-1].loc_datastore[1][2],PowerMeterdatabase[Meter_Id-1].loc_datastore[1][3],
 8003946:	4b1e      	ldr	r3, [pc, #120]	; (80039c0 <ethernetHTTPRoutine+0x2d4>)
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	3b01      	subs	r3, #1
 800394c:	4a20      	ldr	r2, [pc, #128]	; (80039d0 <ethernetHTTPRoutine+0x2e4>)
 800394e:	f44f 7149 	mov.w	r1, #804	; 0x324
 8003952:	fb01 f303 	mul.w	r3, r1, r3
 8003956:	4413      	add	r3, r2
 8003958:	33ca      	adds	r3, #202	; 0xca
 800395a:	781b      	ldrb	r3, [r3, #0]
		length3 =  sprintf(URI+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 800395c:	627b      	str	r3, [r7, #36]	; 0x24
								 ',','"',PowerMeterdatabase[Meter_Id-1].loc_datastore[1][0],PowerMeterdatabase[Meter_Id-1].loc_datastore[1][1],PowerMeterdatabase[Meter_Id-1].loc_datastore[1][2],PowerMeterdatabase[Meter_Id-1].loc_datastore[1][3],
 800395e:	4b18      	ldr	r3, [pc, #96]	; (80039c0 <ethernetHTTPRoutine+0x2d4>)
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	3b01      	subs	r3, #1
 8003964:	4a1a      	ldr	r2, [pc, #104]	; (80039d0 <ethernetHTTPRoutine+0x2e4>)
 8003966:	f44f 7149 	mov.w	r1, #804	; 0x324
 800396a:	fb01 f303 	mul.w	r3, r1, r3
 800396e:	4413      	add	r3, r2
 8003970:	33cb      	adds	r3, #203	; 0xcb
 8003972:	781b      	ldrb	r3, [r3, #0]
		length3 =  sprintf(URI+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 8003974:	623b      	str	r3, [r7, #32]
								  PowerMeterdatabase[Meter_Id-1].loc_datastore[1][4],PowerMeterdatabase[Meter_Id-1].loc_datastore[1][5],PowerMeterdatabase[Meter_Id-1].loc_datastore[1][6],PowerMeterdatabase[Meter_Id-1].loc_datastore[1][7],
 8003976:	4b12      	ldr	r3, [pc, #72]	; (80039c0 <ethernetHTTPRoutine+0x2d4>)
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	3b01      	subs	r3, #1
 800397c:	4a14      	ldr	r2, [pc, #80]	; (80039d0 <ethernetHTTPRoutine+0x2e4>)
 800397e:	f44f 7149 	mov.w	r1, #804	; 0x324
 8003982:	fb01 f303 	mul.w	r3, r1, r3
 8003986:	4413      	add	r3, r2
 8003988:	33cc      	adds	r3, #204	; 0xcc
 800398a:	781b      	ldrb	r3, [r3, #0]
		length3 =  sprintf(URI+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 800398c:	61fb      	str	r3, [r7, #28]
								  PowerMeterdatabase[Meter_Id-1].loc_datastore[1][4],PowerMeterdatabase[Meter_Id-1].loc_datastore[1][5],PowerMeterdatabase[Meter_Id-1].loc_datastore[1][6],PowerMeterdatabase[Meter_Id-1].loc_datastore[1][7],
 800398e:	4b0c      	ldr	r3, [pc, #48]	; (80039c0 <ethernetHTTPRoutine+0x2d4>)
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	3b01      	subs	r3, #1
 8003994:	4a0e      	ldr	r2, [pc, #56]	; (80039d0 <ethernetHTTPRoutine+0x2e4>)
 8003996:	f44f 7149 	mov.w	r1, #804	; 0x324
 800399a:	fb01 f303 	mul.w	r3, r1, r3
 800399e:	4413      	add	r3, r2
 80039a0:	33cd      	adds	r3, #205	; 0xcd
 80039a2:	781b      	ldrb	r3, [r3, #0]
		length3 =  sprintf(URI+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 80039a4:	61bb      	str	r3, [r7, #24]
								  PowerMeterdatabase[Meter_Id-1].loc_datastore[1][4],PowerMeterdatabase[Meter_Id-1].loc_datastore[1][5],PowerMeterdatabase[Meter_Id-1].loc_datastore[1][6],PowerMeterdatabase[Meter_Id-1].loc_datastore[1][7],
 80039a6:	4b06      	ldr	r3, [pc, #24]	; (80039c0 <ethernetHTTPRoutine+0x2d4>)
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	3b01      	subs	r3, #1
 80039ac:	4a08      	ldr	r2, [pc, #32]	; (80039d0 <ethernetHTTPRoutine+0x2e4>)
 80039ae:	f44f 7149 	mov.w	r1, #804	; 0x324
 80039b2:	e013      	b.n	80039dc <ethernetHTTPRoutine+0x2f0>
 80039b4:	200038c4 	.word	0x200038c4
 80039b8:	200041e8 	.word	0x200041e8
 80039bc:	200038c5 	.word	0x200038c5
 80039c0:	200053e2 	.word	0x200053e2
 80039c4:	0800f374 	.word	0x0800f374
 80039c8:	200051ec 	.word	0x200051ec
 80039cc:	200053e4 	.word	0x200053e4
 80039d0:	2000014c 	.word	0x2000014c
 80039d4:	0800f414 	.word	0x0800f414
 80039d8:	200053e6 	.word	0x200053e6
 80039dc:	fb01 f303 	mul.w	r3, r1, r3
 80039e0:	4413      	add	r3, r2
 80039e2:	33ce      	adds	r3, #206	; 0xce
 80039e4:	781b      	ldrb	r3, [r3, #0]
		length3 =  sprintf(URI+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 80039e6:	617b      	str	r3, [r7, #20]
								  PowerMeterdatabase[Meter_Id-1].loc_datastore[1][4],PowerMeterdatabase[Meter_Id-1].loc_datastore[1][5],PowerMeterdatabase[Meter_Id-1].loc_datastore[1][6],PowerMeterdatabase[Meter_Id-1].loc_datastore[1][7],
 80039e8:	4bb1      	ldr	r3, [pc, #708]	; (8003cb0 <ethernetHTTPRoutine+0x5c4>)
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	3b01      	subs	r3, #1
 80039ee:	4ab1      	ldr	r2, [pc, #708]	; (8003cb4 <ethernetHTTPRoutine+0x5c8>)
 80039f0:	f44f 7149 	mov.w	r1, #804	; 0x324
 80039f4:	fb01 f303 	mul.w	r3, r1, r3
 80039f8:	4413      	add	r3, r2
 80039fa:	33cf      	adds	r3, #207	; 0xcf
 80039fc:	781b      	ldrb	r3, [r3, #0]
		length3 =  sprintf(URI+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 80039fe:	613b      	str	r3, [r7, #16]
								  PowerMeterdatabase[Meter_Id-1].loc_datastore[1][8],PowerMeterdatabase[Meter_Id-1].loc_datastore[1][9],PowerMeterdatabase[Meter_Id-1].loc_datastore[1][10],PowerMeterdatabase[Meter_Id-1].loc_datastore[1][11],
 8003a00:	4bab      	ldr	r3, [pc, #684]	; (8003cb0 <ethernetHTTPRoutine+0x5c4>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	3b01      	subs	r3, #1
 8003a06:	4aab      	ldr	r2, [pc, #684]	; (8003cb4 <ethernetHTTPRoutine+0x5c8>)
 8003a08:	f44f 7149 	mov.w	r1, #804	; 0x324
 8003a0c:	fb01 f303 	mul.w	r3, r1, r3
 8003a10:	4413      	add	r3, r2
 8003a12:	33d0      	adds	r3, #208	; 0xd0
 8003a14:	781b      	ldrb	r3, [r3, #0]
		length3 =  sprintf(URI+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 8003a16:	60fb      	str	r3, [r7, #12]
								  PowerMeterdatabase[Meter_Id-1].loc_datastore[1][8],PowerMeterdatabase[Meter_Id-1].loc_datastore[1][9],PowerMeterdatabase[Meter_Id-1].loc_datastore[1][10],PowerMeterdatabase[Meter_Id-1].loc_datastore[1][11],
 8003a18:	4ba5      	ldr	r3, [pc, #660]	; (8003cb0 <ethernetHTTPRoutine+0x5c4>)
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	4aa5      	ldr	r2, [pc, #660]	; (8003cb4 <ethernetHTTPRoutine+0x5c8>)
 8003a20:	f44f 7149 	mov.w	r1, #804	; 0x324
 8003a24:	fb01 f303 	mul.w	r3, r1, r3
 8003a28:	4413      	add	r3, r2
 8003a2a:	33d1      	adds	r3, #209	; 0xd1
 8003a2c:	781b      	ldrb	r3, [r3, #0]
		length3 =  sprintf(URI+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 8003a2e:	60bb      	str	r3, [r7, #8]
								  PowerMeterdatabase[Meter_Id-1].loc_datastore[1][8],PowerMeterdatabase[Meter_Id-1].loc_datastore[1][9],PowerMeterdatabase[Meter_Id-1].loc_datastore[1][10],PowerMeterdatabase[Meter_Id-1].loc_datastore[1][11],
 8003a30:	4b9f      	ldr	r3, [pc, #636]	; (8003cb0 <ethernetHTTPRoutine+0x5c4>)
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	3b01      	subs	r3, #1
 8003a36:	4a9f      	ldr	r2, [pc, #636]	; (8003cb4 <ethernetHTTPRoutine+0x5c8>)
 8003a38:	f44f 7149 	mov.w	r1, #804	; 0x324
 8003a3c:	fb01 f303 	mul.w	r3, r1, r3
 8003a40:	4413      	add	r3, r2
 8003a42:	33d2      	adds	r3, #210	; 0xd2
 8003a44:	781b      	ldrb	r3, [r3, #0]
		length3 =  sprintf(URI+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 8003a46:	607b      	str	r3, [r7, #4]
								  PowerMeterdatabase[Meter_Id-1].loc_datastore[1][8],PowerMeterdatabase[Meter_Id-1].loc_datastore[1][9],PowerMeterdatabase[Meter_Id-1].loc_datastore[1][10],PowerMeterdatabase[Meter_Id-1].loc_datastore[1][11],
 8003a48:	4b99      	ldr	r3, [pc, #612]	; (8003cb0 <ethernetHTTPRoutine+0x5c4>)
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	1e5a      	subs	r2, r3, #1
 8003a4e:	4999      	ldr	r1, [pc, #612]	; (8003cb4 <ethernetHTTPRoutine+0x5c8>)
 8003a50:	f44f 7349 	mov.w	r3, #804	; 0x324
 8003a54:	fb02 f303 	mul.w	r3, r2, r3
 8003a58:	440b      	add	r3, r1
 8003a5a:	33d3      	adds	r3, #211	; 0xd3
 8003a5c:	781b      	ldrb	r3, [r3, #0]
		length3 =  sprintf(URI+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 8003a5e:	603b      	str	r3, [r7, #0]
								  PowerMeterdatabase[Meter_Id-1].loc_datastore[1][12],PowerMeterdatabase[Meter_Id-1].loc_datastore[1][13],PowerMeterdatabase[Meter_Id-1].loc_datastore[1][14],PowerMeterdatabase[Meter_Id-1].loc_datastore[1][15],
 8003a60:	4b93      	ldr	r3, [pc, #588]	; (8003cb0 <ethernetHTTPRoutine+0x5c4>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	1e5a      	subs	r2, r3, #1
 8003a66:	4993      	ldr	r1, [pc, #588]	; (8003cb4 <ethernetHTTPRoutine+0x5c8>)
 8003a68:	f44f 7349 	mov.w	r3, #804	; 0x324
 8003a6c:	fb02 f303 	mul.w	r3, r2, r3
 8003a70:	440b      	add	r3, r1
 8003a72:	33d4      	adds	r3, #212	; 0xd4
 8003a74:	781b      	ldrb	r3, [r3, #0]
		length3 =  sprintf(URI+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 8003a76:	461e      	mov	r6, r3
								  PowerMeterdatabase[Meter_Id-1].loc_datastore[1][12],PowerMeterdatabase[Meter_Id-1].loc_datastore[1][13],PowerMeterdatabase[Meter_Id-1].loc_datastore[1][14],PowerMeterdatabase[Meter_Id-1].loc_datastore[1][15],
 8003a78:	4b8d      	ldr	r3, [pc, #564]	; (8003cb0 <ethernetHTTPRoutine+0x5c4>)
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	1e5a      	subs	r2, r3, #1
 8003a7e:	498d      	ldr	r1, [pc, #564]	; (8003cb4 <ethernetHTTPRoutine+0x5c8>)
 8003a80:	f44f 7349 	mov.w	r3, #804	; 0x324
 8003a84:	fb02 f303 	mul.w	r3, r2, r3
 8003a88:	440b      	add	r3, r1
 8003a8a:	33d5      	adds	r3, #213	; 0xd5
 8003a8c:	781b      	ldrb	r3, [r3, #0]
		length3 =  sprintf(URI+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 8003a8e:	461c      	mov	r4, r3
								  PowerMeterdatabase[Meter_Id-1].loc_datastore[1][12],PowerMeterdatabase[Meter_Id-1].loc_datastore[1][13],PowerMeterdatabase[Meter_Id-1].loc_datastore[1][14],PowerMeterdatabase[Meter_Id-1].loc_datastore[1][15],
 8003a90:	4b87      	ldr	r3, [pc, #540]	; (8003cb0 <ethernetHTTPRoutine+0x5c4>)
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	1e5a      	subs	r2, r3, #1
 8003a96:	4987      	ldr	r1, [pc, #540]	; (8003cb4 <ethernetHTTPRoutine+0x5c8>)
 8003a98:	f44f 7349 	mov.w	r3, #804	; 0x324
 8003a9c:	fb02 f303 	mul.w	r3, r2, r3
 8003aa0:	440b      	add	r3, r1
 8003aa2:	33d6      	adds	r3, #214	; 0xd6
 8003aa4:	781b      	ldrb	r3, [r3, #0]
		length3 =  sprintf(URI+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 8003aa6:	4618      	mov	r0, r3
								  PowerMeterdatabase[Meter_Id-1].loc_datastore[1][12],PowerMeterdatabase[Meter_Id-1].loc_datastore[1][13],PowerMeterdatabase[Meter_Id-1].loc_datastore[1][14],PowerMeterdatabase[Meter_Id-1].loc_datastore[1][15],
 8003aa8:	4b81      	ldr	r3, [pc, #516]	; (8003cb0 <ethernetHTTPRoutine+0x5c4>)
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	1e5a      	subs	r2, r3, #1
 8003aae:	4981      	ldr	r1, [pc, #516]	; (8003cb4 <ethernetHTTPRoutine+0x5c8>)
 8003ab0:	f44f 7349 	mov.w	r3, #804	; 0x324
 8003ab4:	fb02 f303 	mul.w	r3, r2, r3
 8003ab8:	440b      	add	r3, r1
 8003aba:	33d7      	adds	r3, #215	; 0xd7
 8003abc:	781b      	ldrb	r3, [r3, #0]
		length3 =  sprintf(URI+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 8003abe:	461a      	mov	r2, r3
 8003ac0:	2322      	movs	r3, #34	; 0x22
 8003ac2:	9310      	str	r3, [sp, #64]	; 0x40
 8003ac4:	920f      	str	r2, [sp, #60]	; 0x3c
 8003ac6:	900e      	str	r0, [sp, #56]	; 0x38
 8003ac8:	940d      	str	r4, [sp, #52]	; 0x34
 8003aca:	960c      	str	r6, [sp, #48]	; 0x30
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	920b      	str	r2, [sp, #44]	; 0x2c
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	920a      	str	r2, [sp, #40]	; 0x28
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	9209      	str	r2, [sp, #36]	; 0x24
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	9208      	str	r2, [sp, #32]
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	9207      	str	r2, [sp, #28]
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	9206      	str	r2, [sp, #24]
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	9205      	str	r2, [sp, #20]
 8003ae8:	69fa      	ldr	r2, [r7, #28]
 8003aea:	9204      	str	r2, [sp, #16]
 8003aec:	6a3a      	ldr	r2, [r7, #32]
 8003aee:	9203      	str	r2, [sp, #12]
 8003af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003af2:	9202      	str	r2, [sp, #8]
 8003af4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003af6:	9201      	str	r2, [sp, #4]
 8003af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003afa:	9300      	str	r3, [sp, #0]
 8003afc:	2322      	movs	r3, #34	; 0x22
 8003afe:	222c      	movs	r2, #44	; 0x2c
 8003b00:	496d      	ldr	r1, [pc, #436]	; (8003cb8 <ethernetHTTPRoutine+0x5cc>)
 8003b02:	4628      	mov	r0, r5
 8003b04:	f00a fa64 	bl	800dfd0 <siprintf>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	4b6b      	ldr	r3, [pc, #428]	; (8003cbc <ethernetHTTPRoutine+0x5d0>)
 8003b0e:	801a      	strh	r2, [r3, #0]
								  '"');
		length4 =  sprintf(URI+length3+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 8003b10:	4b6a      	ldr	r3, [pc, #424]	; (8003cbc <ethernetHTTPRoutine+0x5d0>)
 8003b12:	881b      	ldrh	r3, [r3, #0]
 8003b14:	461a      	mov	r2, r3
 8003b16:	4b6a      	ldr	r3, [pc, #424]	; (8003cc0 <ethernetHTTPRoutine+0x5d4>)
 8003b18:	881b      	ldrh	r3, [r3, #0]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	4a69      	ldr	r2, [pc, #420]	; (8003cc4 <ethernetHTTPRoutine+0x5d8>)
 8003b1e:	8812      	ldrh	r2, [r2, #0]
 8003b20:	4413      	add	r3, r2
 8003b22:	4a69      	ldr	r2, [pc, #420]	; (8003cc8 <ethernetHTTPRoutine+0x5dc>)
 8003b24:	189d      	adds	r5, r3, r2
								 ',','"',PowerMeterdatabase[Meter_Id-1].loc_datastore[2][0],PowerMeterdatabase[Meter_Id-1].loc_datastore[2][1],PowerMeterdatabase[Meter_Id-1].loc_datastore[2][2],PowerMeterdatabase[Meter_Id-1].loc_datastore[2][3],
 8003b26:	4b62      	ldr	r3, [pc, #392]	; (8003cb0 <ethernetHTTPRoutine+0x5c4>)
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	4a61      	ldr	r2, [pc, #388]	; (8003cb4 <ethernetHTTPRoutine+0x5c8>)
 8003b2e:	f44f 7149 	mov.w	r1, #804	; 0x324
 8003b32:	fb01 f303 	mul.w	r3, r1, r3
 8003b36:	4413      	add	r3, r2
 8003b38:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8003b3c:	781b      	ldrb	r3, [r3, #0]
		length4 =  sprintf(URI+length3+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 8003b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
								 ',','"',PowerMeterdatabase[Meter_Id-1].loc_datastore[2][0],PowerMeterdatabase[Meter_Id-1].loc_datastore[2][1],PowerMeterdatabase[Meter_Id-1].loc_datastore[2][2],PowerMeterdatabase[Meter_Id-1].loc_datastore[2][3],
 8003b40:	4b5b      	ldr	r3, [pc, #364]	; (8003cb0 <ethernetHTTPRoutine+0x5c4>)
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	3b01      	subs	r3, #1
 8003b46:	4a5b      	ldr	r2, [pc, #364]	; (8003cb4 <ethernetHTTPRoutine+0x5c8>)
 8003b48:	f44f 7149 	mov.w	r1, #804	; 0x324
 8003b4c:	fb01 f303 	mul.w	r3, r1, r3
 8003b50:	4413      	add	r3, r2
 8003b52:	f203 1391 	addw	r3, r3, #401	; 0x191
 8003b56:	781b      	ldrb	r3, [r3, #0]
		length4 =  sprintf(URI+length3+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 8003b58:	62bb      	str	r3, [r7, #40]	; 0x28
								 ',','"',PowerMeterdatabase[Meter_Id-1].loc_datastore[2][0],PowerMeterdatabase[Meter_Id-1].loc_datastore[2][1],PowerMeterdatabase[Meter_Id-1].loc_datastore[2][2],PowerMeterdatabase[Meter_Id-1].loc_datastore[2][3],
 8003b5a:	4b55      	ldr	r3, [pc, #340]	; (8003cb0 <ethernetHTTPRoutine+0x5c4>)
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	4a54      	ldr	r2, [pc, #336]	; (8003cb4 <ethernetHTTPRoutine+0x5c8>)
 8003b62:	f44f 7149 	mov.w	r1, #804	; 0x324
 8003b66:	fb01 f303 	mul.w	r3, r1, r3
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f503 73c9 	add.w	r3, r3, #402	; 0x192
 8003b70:	781b      	ldrb	r3, [r3, #0]
		length4 =  sprintf(URI+length3+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 8003b72:	627b      	str	r3, [r7, #36]	; 0x24
								 ',','"',PowerMeterdatabase[Meter_Id-1].loc_datastore[2][0],PowerMeterdatabase[Meter_Id-1].loc_datastore[2][1],PowerMeterdatabase[Meter_Id-1].loc_datastore[2][2],PowerMeterdatabase[Meter_Id-1].loc_datastore[2][3],
 8003b74:	4b4e      	ldr	r3, [pc, #312]	; (8003cb0 <ethernetHTTPRoutine+0x5c4>)
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	4a4e      	ldr	r2, [pc, #312]	; (8003cb4 <ethernetHTTPRoutine+0x5c8>)
 8003b7c:	f44f 7149 	mov.w	r1, #804	; 0x324
 8003b80:	fb01 f303 	mul.w	r3, r1, r3
 8003b84:	4413      	add	r3, r2
 8003b86:	f203 1393 	addw	r3, r3, #403	; 0x193
 8003b8a:	781b      	ldrb	r3, [r3, #0]
		length4 =  sprintf(URI+length3+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 8003b8c:	623b      	str	r3, [r7, #32]
								  PowerMeterdatabase[Meter_Id-1].loc_datastore[2][4],PowerMeterdatabase[Meter_Id-1].loc_datastore[2][5],PowerMeterdatabase[Meter_Id-1].loc_datastore[2][6],PowerMeterdatabase[Meter_Id-1].loc_datastore[2][7],
 8003b8e:	4b48      	ldr	r3, [pc, #288]	; (8003cb0 <ethernetHTTPRoutine+0x5c4>)
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	3b01      	subs	r3, #1
 8003b94:	4a47      	ldr	r2, [pc, #284]	; (8003cb4 <ethernetHTTPRoutine+0x5c8>)
 8003b96:	f44f 7149 	mov.w	r1, #804	; 0x324
 8003b9a:	fb01 f303 	mul.w	r3, r1, r3
 8003b9e:	4413      	add	r3, r2
 8003ba0:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8003ba4:	781b      	ldrb	r3, [r3, #0]
		length4 =  sprintf(URI+length3+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 8003ba6:	61fb      	str	r3, [r7, #28]
								  PowerMeterdatabase[Meter_Id-1].loc_datastore[2][4],PowerMeterdatabase[Meter_Id-1].loc_datastore[2][5],PowerMeterdatabase[Meter_Id-1].loc_datastore[2][6],PowerMeterdatabase[Meter_Id-1].loc_datastore[2][7],
 8003ba8:	4b41      	ldr	r3, [pc, #260]	; (8003cb0 <ethernetHTTPRoutine+0x5c4>)
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	3b01      	subs	r3, #1
 8003bae:	4a41      	ldr	r2, [pc, #260]	; (8003cb4 <ethernetHTTPRoutine+0x5c8>)
 8003bb0:	f44f 7149 	mov.w	r1, #804	; 0x324
 8003bb4:	fb01 f303 	mul.w	r3, r1, r3
 8003bb8:	4413      	add	r3, r2
 8003bba:	f203 1395 	addw	r3, r3, #405	; 0x195
 8003bbe:	781b      	ldrb	r3, [r3, #0]
		length4 =  sprintf(URI+length3+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 8003bc0:	61bb      	str	r3, [r7, #24]
								  PowerMeterdatabase[Meter_Id-1].loc_datastore[2][4],PowerMeterdatabase[Meter_Id-1].loc_datastore[2][5],PowerMeterdatabase[Meter_Id-1].loc_datastore[2][6],PowerMeterdatabase[Meter_Id-1].loc_datastore[2][7],
 8003bc2:	4b3b      	ldr	r3, [pc, #236]	; (8003cb0 <ethernetHTTPRoutine+0x5c4>)
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	4a3a      	ldr	r2, [pc, #232]	; (8003cb4 <ethernetHTTPRoutine+0x5c8>)
 8003bca:	f44f 7149 	mov.w	r1, #804	; 0x324
 8003bce:	fb01 f303 	mul.w	r3, r1, r3
 8003bd2:	4413      	add	r3, r2
 8003bd4:	f503 73cb 	add.w	r3, r3, #406	; 0x196
 8003bd8:	781b      	ldrb	r3, [r3, #0]
		length4 =  sprintf(URI+length3+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 8003bda:	617b      	str	r3, [r7, #20]
								  PowerMeterdatabase[Meter_Id-1].loc_datastore[2][4],PowerMeterdatabase[Meter_Id-1].loc_datastore[2][5],PowerMeterdatabase[Meter_Id-1].loc_datastore[2][6],PowerMeterdatabase[Meter_Id-1].loc_datastore[2][7],
 8003bdc:	4b34      	ldr	r3, [pc, #208]	; (8003cb0 <ethernetHTTPRoutine+0x5c4>)
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	3b01      	subs	r3, #1
 8003be2:	4a34      	ldr	r2, [pc, #208]	; (8003cb4 <ethernetHTTPRoutine+0x5c8>)
 8003be4:	f44f 7149 	mov.w	r1, #804	; 0x324
 8003be8:	fb01 f303 	mul.w	r3, r1, r3
 8003bec:	4413      	add	r3, r2
 8003bee:	f203 1397 	addw	r3, r3, #407	; 0x197
 8003bf2:	781b      	ldrb	r3, [r3, #0]
		length4 =  sprintf(URI+length3+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 8003bf4:	613b      	str	r3, [r7, #16]
								  PowerMeterdatabase[Meter_Id-1].loc_datastore[2][8],PowerMeterdatabase[Meter_Id-1].loc_datastore[2][9],PowerMeterdatabase[Meter_Id-1].loc_datastore[2][10],PowerMeterdatabase[Meter_Id-1].loc_datastore[2][11],
 8003bf6:	4b2e      	ldr	r3, [pc, #184]	; (8003cb0 <ethernetHTTPRoutine+0x5c4>)
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	4a2d      	ldr	r2, [pc, #180]	; (8003cb4 <ethernetHTTPRoutine+0x5c8>)
 8003bfe:	f44f 7149 	mov.w	r1, #804	; 0x324
 8003c02:	fb01 f303 	mul.w	r3, r1, r3
 8003c06:	4413      	add	r3, r2
 8003c08:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8003c0c:	781b      	ldrb	r3, [r3, #0]
		length4 =  sprintf(URI+length3+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 8003c0e:	60fb      	str	r3, [r7, #12]
								  PowerMeterdatabase[Meter_Id-1].loc_datastore[2][8],PowerMeterdatabase[Meter_Id-1].loc_datastore[2][9],PowerMeterdatabase[Meter_Id-1].loc_datastore[2][10],PowerMeterdatabase[Meter_Id-1].loc_datastore[2][11],
 8003c10:	4b27      	ldr	r3, [pc, #156]	; (8003cb0 <ethernetHTTPRoutine+0x5c4>)
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	3b01      	subs	r3, #1
 8003c16:	4a27      	ldr	r2, [pc, #156]	; (8003cb4 <ethernetHTTPRoutine+0x5c8>)
 8003c18:	f44f 7149 	mov.w	r1, #804	; 0x324
 8003c1c:	fb01 f303 	mul.w	r3, r1, r3
 8003c20:	4413      	add	r3, r2
 8003c22:	f203 1399 	addw	r3, r3, #409	; 0x199
 8003c26:	781b      	ldrb	r3, [r3, #0]
		length4 =  sprintf(URI+length3+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 8003c28:	60bb      	str	r3, [r7, #8]
								  PowerMeterdatabase[Meter_Id-1].loc_datastore[2][8],PowerMeterdatabase[Meter_Id-1].loc_datastore[2][9],PowerMeterdatabase[Meter_Id-1].loc_datastore[2][10],PowerMeterdatabase[Meter_Id-1].loc_datastore[2][11],
 8003c2a:	4b21      	ldr	r3, [pc, #132]	; (8003cb0 <ethernetHTTPRoutine+0x5c4>)
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	4a20      	ldr	r2, [pc, #128]	; (8003cb4 <ethernetHTTPRoutine+0x5c8>)
 8003c32:	f44f 7149 	mov.w	r1, #804	; 0x324
 8003c36:	fb01 f303 	mul.w	r3, r1, r3
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f503 73cd 	add.w	r3, r3, #410	; 0x19a
 8003c40:	781b      	ldrb	r3, [r3, #0]
		length4 =  sprintf(URI+length3+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 8003c42:	607b      	str	r3, [r7, #4]
								  PowerMeterdatabase[Meter_Id-1].loc_datastore[2][8],PowerMeterdatabase[Meter_Id-1].loc_datastore[2][9],PowerMeterdatabase[Meter_Id-1].loc_datastore[2][10],PowerMeterdatabase[Meter_Id-1].loc_datastore[2][11],
 8003c44:	4b1a      	ldr	r3, [pc, #104]	; (8003cb0 <ethernetHTTPRoutine+0x5c4>)
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	1e5a      	subs	r2, r3, #1
 8003c4a:	491a      	ldr	r1, [pc, #104]	; (8003cb4 <ethernetHTTPRoutine+0x5c8>)
 8003c4c:	f44f 7349 	mov.w	r3, #804	; 0x324
 8003c50:	fb02 f303 	mul.w	r3, r2, r3
 8003c54:	440b      	add	r3, r1
 8003c56:	f203 139b 	addw	r3, r3, #411	; 0x19b
 8003c5a:	781b      	ldrb	r3, [r3, #0]
		length4 =  sprintf(URI+length3+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 8003c5c:	603b      	str	r3, [r7, #0]
								  PowerMeterdatabase[Meter_Id-1].loc_datastore[2][12],PowerMeterdatabase[Meter_Id-1].loc_datastore[2][13],PowerMeterdatabase[Meter_Id-1].loc_datastore[2][14],PowerMeterdatabase[Meter_Id-1].loc_datastore[2][15],
 8003c5e:	4b14      	ldr	r3, [pc, #80]	; (8003cb0 <ethernetHTTPRoutine+0x5c4>)
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	1e5a      	subs	r2, r3, #1
 8003c64:	4913      	ldr	r1, [pc, #76]	; (8003cb4 <ethernetHTTPRoutine+0x5c8>)
 8003c66:	f44f 7349 	mov.w	r3, #804	; 0x324
 8003c6a:	fb02 f303 	mul.w	r3, r2, r3
 8003c6e:	440b      	add	r3, r1
 8003c70:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8003c74:	781b      	ldrb	r3, [r3, #0]
		length4 =  sprintf(URI+length3+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 8003c76:	461e      	mov	r6, r3
								  PowerMeterdatabase[Meter_Id-1].loc_datastore[2][12],PowerMeterdatabase[Meter_Id-1].loc_datastore[2][13],PowerMeterdatabase[Meter_Id-1].loc_datastore[2][14],PowerMeterdatabase[Meter_Id-1].loc_datastore[2][15],
 8003c78:	4b0d      	ldr	r3, [pc, #52]	; (8003cb0 <ethernetHTTPRoutine+0x5c4>)
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	1e5a      	subs	r2, r3, #1
 8003c7e:	490d      	ldr	r1, [pc, #52]	; (8003cb4 <ethernetHTTPRoutine+0x5c8>)
 8003c80:	f44f 7349 	mov.w	r3, #804	; 0x324
 8003c84:	fb02 f303 	mul.w	r3, r2, r3
 8003c88:	440b      	add	r3, r1
 8003c8a:	f203 139d 	addw	r3, r3, #413	; 0x19d
 8003c8e:	781b      	ldrb	r3, [r3, #0]
		length4 =  sprintf(URI+length3+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 8003c90:	461c      	mov	r4, r3
								  PowerMeterdatabase[Meter_Id-1].loc_datastore[2][12],PowerMeterdatabase[Meter_Id-1].loc_datastore[2][13],PowerMeterdatabase[Meter_Id-1].loc_datastore[2][14],PowerMeterdatabase[Meter_Id-1].loc_datastore[2][15],
 8003c92:	4b07      	ldr	r3, [pc, #28]	; (8003cb0 <ethernetHTTPRoutine+0x5c4>)
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	1e5a      	subs	r2, r3, #1
 8003c98:	4906      	ldr	r1, [pc, #24]	; (8003cb4 <ethernetHTTPRoutine+0x5c8>)
 8003c9a:	f44f 7349 	mov.w	r3, #804	; 0x324
 8003c9e:	fb02 f303 	mul.w	r3, r2, r3
 8003ca2:	440b      	add	r3, r1
 8003ca4:	f503 73cf 	add.w	r3, r3, #414	; 0x19e
 8003ca8:	781b      	ldrb	r3, [r3, #0]
		length4 =  sprintf(URI+length3+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 8003caa:	4618      	mov	r0, r3
 8003cac:	e00e      	b.n	8003ccc <ethernetHTTPRoutine+0x5e0>
 8003cae:	bf00      	nop
 8003cb0:	200053e2 	.word	0x200053e2
 8003cb4:	2000014c 	.word	0x2000014c
 8003cb8:	0800f468 	.word	0x0800f468
 8003cbc:	200053e8 	.word	0x200053e8
 8003cc0:	200053e6 	.word	0x200053e6
 8003cc4:	200053e4 	.word	0x200053e4
 8003cc8:	200051ec 	.word	0x200051ec
								  PowerMeterdatabase[Meter_Id-1].loc_datastore[2][12],PowerMeterdatabase[Meter_Id-1].loc_datastore[2][13],PowerMeterdatabase[Meter_Id-1].loc_datastore[2][14],PowerMeterdatabase[Meter_Id-1].loc_datastore[2][15],
 8003ccc:	4ba7      	ldr	r3, [pc, #668]	; (8003f6c <ethernetHTTPRoutine+0x880>)
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	1e5a      	subs	r2, r3, #1
 8003cd2:	49a7      	ldr	r1, [pc, #668]	; (8003f70 <ethernetHTTPRoutine+0x884>)
 8003cd4:	f44f 7349 	mov.w	r3, #804	; 0x324
 8003cd8:	fb02 f303 	mul.w	r3, r2, r3
 8003cdc:	440b      	add	r3, r1
 8003cde:	f203 139f 	addw	r3, r3, #415	; 0x19f
 8003ce2:	781b      	ldrb	r3, [r3, #0]
		length4 =  sprintf(URI+length3+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c",
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	2322      	movs	r3, #34	; 0x22
 8003ce8:	9310      	str	r3, [sp, #64]	; 0x40
 8003cea:	920f      	str	r2, [sp, #60]	; 0x3c
 8003cec:	900e      	str	r0, [sp, #56]	; 0x38
 8003cee:	940d      	str	r4, [sp, #52]	; 0x34
 8003cf0:	960c      	str	r6, [sp, #48]	; 0x30
 8003cf2:	683a      	ldr	r2, [r7, #0]
 8003cf4:	920b      	str	r2, [sp, #44]	; 0x2c
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	920a      	str	r2, [sp, #40]	; 0x28
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	9209      	str	r2, [sp, #36]	; 0x24
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	9208      	str	r2, [sp, #32]
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	9207      	str	r2, [sp, #28]
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	9206      	str	r2, [sp, #24]
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	9205      	str	r2, [sp, #20]
 8003d0e:	69fa      	ldr	r2, [r7, #28]
 8003d10:	9204      	str	r2, [sp, #16]
 8003d12:	6a3a      	ldr	r2, [r7, #32]
 8003d14:	9203      	str	r2, [sp, #12]
 8003d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d18:	9202      	str	r2, [sp, #8]
 8003d1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d1c:	9201      	str	r2, [sp, #4]
 8003d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	2322      	movs	r3, #34	; 0x22
 8003d24:	222c      	movs	r2, #44	; 0x2c
 8003d26:	4993      	ldr	r1, [pc, #588]	; (8003f74 <ethernetHTTPRoutine+0x888>)
 8003d28:	4628      	mov	r0, r5
 8003d2a:	f00a f951 	bl	800dfd0 <siprintf>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	4b91      	ldr	r3, [pc, #580]	; (8003f78 <ethernetHTTPRoutine+0x88c>)
 8003d34:	801a      	strh	r2, [r3, #0]
								  '"');
		length5 = sprintf(URI+length4+length3+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c%c",
 8003d36:	4b90      	ldr	r3, [pc, #576]	; (8003f78 <ethernetHTTPRoutine+0x88c>)
 8003d38:	881b      	ldrh	r3, [r3, #0]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	4b8f      	ldr	r3, [pc, #572]	; (8003f7c <ethernetHTTPRoutine+0x890>)
 8003d3e:	881b      	ldrh	r3, [r3, #0]
 8003d40:	4413      	add	r3, r2
 8003d42:	4a8f      	ldr	r2, [pc, #572]	; (8003f80 <ethernetHTTPRoutine+0x894>)
 8003d44:	8812      	ldrh	r2, [r2, #0]
 8003d46:	4413      	add	r3, r2
 8003d48:	4a8e      	ldr	r2, [pc, #568]	; (8003f84 <ethernetHTTPRoutine+0x898>)
 8003d4a:	8812      	ldrh	r2, [r2, #0]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	4a8e      	ldr	r2, [pc, #568]	; (8003f88 <ethernetHTTPRoutine+0x89c>)
 8003d50:	189d      	adds	r5, r3, r2
										 ',','"',PowerMeterdatabase[Meter_Id-1].loc_datastore[3][0],PowerMeterdatabase[Meter_Id-1].loc_datastore[3][1],PowerMeterdatabase[Meter_Id-1].loc_datastore[3][2],PowerMeterdatabase[Meter_Id-1].loc_datastore[3][3],
 8003d52:	4b86      	ldr	r3, [pc, #536]	; (8003f6c <ethernetHTTPRoutine+0x880>)
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	3b01      	subs	r3, #1
 8003d58:	4a85      	ldr	r2, [pc, #532]	; (8003f70 <ethernetHTTPRoutine+0x884>)
 8003d5a:	f44f 7149 	mov.w	r1, #804	; 0x324
 8003d5e:	fb01 f303 	mul.w	r3, r1, r3
 8003d62:	4413      	add	r3, r2
 8003d64:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8003d68:	781b      	ldrb	r3, [r3, #0]
		length5 = sprintf(URI+length4+length3+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c%c",
 8003d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
										 ',','"',PowerMeterdatabase[Meter_Id-1].loc_datastore[3][0],PowerMeterdatabase[Meter_Id-1].loc_datastore[3][1],PowerMeterdatabase[Meter_Id-1].loc_datastore[3][2],PowerMeterdatabase[Meter_Id-1].loc_datastore[3][3],
 8003d6c:	4b7f      	ldr	r3, [pc, #508]	; (8003f6c <ethernetHTTPRoutine+0x880>)
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	3b01      	subs	r3, #1
 8003d72:	4a7f      	ldr	r2, [pc, #508]	; (8003f70 <ethernetHTTPRoutine+0x884>)
 8003d74:	f44f 7149 	mov.w	r1, #804	; 0x324
 8003d78:	fb01 f303 	mul.w	r3, r1, r3
 8003d7c:	4413      	add	r3, r2
 8003d7e:	f203 2359 	addw	r3, r3, #601	; 0x259
 8003d82:	781b      	ldrb	r3, [r3, #0]
		length5 = sprintf(URI+length4+length3+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c%c",
 8003d84:	62bb      	str	r3, [r7, #40]	; 0x28
										 ',','"',PowerMeterdatabase[Meter_Id-1].loc_datastore[3][0],PowerMeterdatabase[Meter_Id-1].loc_datastore[3][1],PowerMeterdatabase[Meter_Id-1].loc_datastore[3][2],PowerMeterdatabase[Meter_Id-1].loc_datastore[3][3],
 8003d86:	4b79      	ldr	r3, [pc, #484]	; (8003f6c <ethernetHTTPRoutine+0x880>)
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	4a78      	ldr	r2, [pc, #480]	; (8003f70 <ethernetHTTPRoutine+0x884>)
 8003d8e:	f44f 7149 	mov.w	r1, #804	; 0x324
 8003d92:	fb01 f303 	mul.w	r3, r1, r3
 8003d96:	4413      	add	r3, r2
 8003d98:	f203 235a 	addw	r3, r3, #602	; 0x25a
 8003d9c:	781b      	ldrb	r3, [r3, #0]
		length5 = sprintf(URI+length4+length3+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c%c",
 8003d9e:	627b      	str	r3, [r7, #36]	; 0x24
										 ',','"',PowerMeterdatabase[Meter_Id-1].loc_datastore[3][0],PowerMeterdatabase[Meter_Id-1].loc_datastore[3][1],PowerMeterdatabase[Meter_Id-1].loc_datastore[3][2],PowerMeterdatabase[Meter_Id-1].loc_datastore[3][3],
 8003da0:	4b72      	ldr	r3, [pc, #456]	; (8003f6c <ethernetHTTPRoutine+0x880>)
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	3b01      	subs	r3, #1
 8003da6:	4a72      	ldr	r2, [pc, #456]	; (8003f70 <ethernetHTTPRoutine+0x884>)
 8003da8:	f44f 7149 	mov.w	r1, #804	; 0x324
 8003dac:	fb01 f303 	mul.w	r3, r1, r3
 8003db0:	4413      	add	r3, r2
 8003db2:	f203 235b 	addw	r3, r3, #603	; 0x25b
 8003db6:	781b      	ldrb	r3, [r3, #0]
		length5 = sprintf(URI+length4+length3+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c%c",
 8003db8:	623b      	str	r3, [r7, #32]
										  PowerMeterdatabase[Meter_Id-1].loc_datastore[3][4],PowerMeterdatabase[Meter_Id-1].loc_datastore[3][5],PowerMeterdatabase[Meter_Id-1].loc_datastore[3][6],PowerMeterdatabase[Meter_Id-1].loc_datastore[3][7],
 8003dba:	4b6c      	ldr	r3, [pc, #432]	; (8003f6c <ethernetHTTPRoutine+0x880>)
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	4a6b      	ldr	r2, [pc, #428]	; (8003f70 <ethernetHTTPRoutine+0x884>)
 8003dc2:	f44f 7149 	mov.w	r1, #804	; 0x324
 8003dc6:	fb01 f303 	mul.w	r3, r1, r3
 8003dca:	4413      	add	r3, r2
 8003dcc:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8003dd0:	781b      	ldrb	r3, [r3, #0]
		length5 = sprintf(URI+length4+length3+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c%c",
 8003dd2:	61fb      	str	r3, [r7, #28]
										  PowerMeterdatabase[Meter_Id-1].loc_datastore[3][4],PowerMeterdatabase[Meter_Id-1].loc_datastore[3][5],PowerMeterdatabase[Meter_Id-1].loc_datastore[3][6],PowerMeterdatabase[Meter_Id-1].loc_datastore[3][7],
 8003dd4:	4b65      	ldr	r3, [pc, #404]	; (8003f6c <ethernetHTTPRoutine+0x880>)
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	4a65      	ldr	r2, [pc, #404]	; (8003f70 <ethernetHTTPRoutine+0x884>)
 8003ddc:	f44f 7149 	mov.w	r1, #804	; 0x324
 8003de0:	fb01 f303 	mul.w	r3, r1, r3
 8003de4:	4413      	add	r3, r2
 8003de6:	f203 235d 	addw	r3, r3, #605	; 0x25d
 8003dea:	781b      	ldrb	r3, [r3, #0]
		length5 = sprintf(URI+length4+length3+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c%c",
 8003dec:	61bb      	str	r3, [r7, #24]
										  PowerMeterdatabase[Meter_Id-1].loc_datastore[3][4],PowerMeterdatabase[Meter_Id-1].loc_datastore[3][5],PowerMeterdatabase[Meter_Id-1].loc_datastore[3][6],PowerMeterdatabase[Meter_Id-1].loc_datastore[3][7],
 8003dee:	4b5f      	ldr	r3, [pc, #380]	; (8003f6c <ethernetHTTPRoutine+0x880>)
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	3b01      	subs	r3, #1
 8003df4:	4a5e      	ldr	r2, [pc, #376]	; (8003f70 <ethernetHTTPRoutine+0x884>)
 8003df6:	f44f 7149 	mov.w	r1, #804	; 0x324
 8003dfa:	fb01 f303 	mul.w	r3, r1, r3
 8003dfe:	4413      	add	r3, r2
 8003e00:	f203 235e 	addw	r3, r3, #606	; 0x25e
 8003e04:	781b      	ldrb	r3, [r3, #0]
		length5 = sprintf(URI+length4+length3+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c%c",
 8003e06:	617b      	str	r3, [r7, #20]
										  PowerMeterdatabase[Meter_Id-1].loc_datastore[3][4],PowerMeterdatabase[Meter_Id-1].loc_datastore[3][5],PowerMeterdatabase[Meter_Id-1].loc_datastore[3][6],PowerMeterdatabase[Meter_Id-1].loc_datastore[3][7],
 8003e08:	4b58      	ldr	r3, [pc, #352]	; (8003f6c <ethernetHTTPRoutine+0x880>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	4a58      	ldr	r2, [pc, #352]	; (8003f70 <ethernetHTTPRoutine+0x884>)
 8003e10:	f44f 7149 	mov.w	r1, #804	; 0x324
 8003e14:	fb01 f303 	mul.w	r3, r1, r3
 8003e18:	4413      	add	r3, r2
 8003e1a:	f203 235f 	addw	r3, r3, #607	; 0x25f
 8003e1e:	781b      	ldrb	r3, [r3, #0]
		length5 = sprintf(URI+length4+length3+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c%c",
 8003e20:	613b      	str	r3, [r7, #16]
										  PowerMeterdatabase[Meter_Id-1].loc_datastore[3][8],PowerMeterdatabase[Meter_Id-1].loc_datastore[3][9],PowerMeterdatabase[Meter_Id-1].loc_datastore[3][10],PowerMeterdatabase[Meter_Id-1].loc_datastore[3][11],
 8003e22:	4b52      	ldr	r3, [pc, #328]	; (8003f6c <ethernetHTTPRoutine+0x880>)
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	3b01      	subs	r3, #1
 8003e28:	4a51      	ldr	r2, [pc, #324]	; (8003f70 <ethernetHTTPRoutine+0x884>)
 8003e2a:	f44f 7149 	mov.w	r1, #804	; 0x324
 8003e2e:	fb01 f303 	mul.w	r3, r1, r3
 8003e32:	4413      	add	r3, r2
 8003e34:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8003e38:	781b      	ldrb	r3, [r3, #0]
		length5 = sprintf(URI+length4+length3+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c%c",
 8003e3a:	60fb      	str	r3, [r7, #12]
										  PowerMeterdatabase[Meter_Id-1].loc_datastore[3][8],PowerMeterdatabase[Meter_Id-1].loc_datastore[3][9],PowerMeterdatabase[Meter_Id-1].loc_datastore[3][10],PowerMeterdatabase[Meter_Id-1].loc_datastore[3][11],
 8003e3c:	4b4b      	ldr	r3, [pc, #300]	; (8003f6c <ethernetHTTPRoutine+0x880>)
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	3b01      	subs	r3, #1
 8003e42:	4a4b      	ldr	r2, [pc, #300]	; (8003f70 <ethernetHTTPRoutine+0x884>)
 8003e44:	f44f 7149 	mov.w	r1, #804	; 0x324
 8003e48:	fb01 f303 	mul.w	r3, r1, r3
 8003e4c:	4413      	add	r3, r2
 8003e4e:	f203 2361 	addw	r3, r3, #609	; 0x261
 8003e52:	781b      	ldrb	r3, [r3, #0]
		length5 = sprintf(URI+length4+length3+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c%c",
 8003e54:	60bb      	str	r3, [r7, #8]
										  PowerMeterdatabase[Meter_Id-1].loc_datastore[3][8],PowerMeterdatabase[Meter_Id-1].loc_datastore[3][9],PowerMeterdatabase[Meter_Id-1].loc_datastore[3][10],PowerMeterdatabase[Meter_Id-1].loc_datastore[3][11],
 8003e56:	4b45      	ldr	r3, [pc, #276]	; (8003f6c <ethernetHTTPRoutine+0x880>)
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	4a44      	ldr	r2, [pc, #272]	; (8003f70 <ethernetHTTPRoutine+0x884>)
 8003e5e:	f44f 7149 	mov.w	r1, #804	; 0x324
 8003e62:	fb01 f303 	mul.w	r3, r1, r3
 8003e66:	4413      	add	r3, r2
 8003e68:	f203 2362 	addw	r3, r3, #610	; 0x262
 8003e6c:	781b      	ldrb	r3, [r3, #0]
		length5 = sprintf(URI+length4+length3+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c%c",
 8003e6e:	607b      	str	r3, [r7, #4]
										  PowerMeterdatabase[Meter_Id-1].loc_datastore[3][8],PowerMeterdatabase[Meter_Id-1].loc_datastore[3][9],PowerMeterdatabase[Meter_Id-1].loc_datastore[3][10],PowerMeterdatabase[Meter_Id-1].loc_datastore[3][11],
 8003e70:	4b3e      	ldr	r3, [pc, #248]	; (8003f6c <ethernetHTTPRoutine+0x880>)
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	1e5a      	subs	r2, r3, #1
 8003e76:	493e      	ldr	r1, [pc, #248]	; (8003f70 <ethernetHTTPRoutine+0x884>)
 8003e78:	f44f 7349 	mov.w	r3, #804	; 0x324
 8003e7c:	fb02 f303 	mul.w	r3, r2, r3
 8003e80:	440b      	add	r3, r1
 8003e82:	f203 2363 	addw	r3, r3, #611	; 0x263
 8003e86:	781b      	ldrb	r3, [r3, #0]
		length5 = sprintf(URI+length4+length3+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c%c",
 8003e88:	603b      	str	r3, [r7, #0]
										  PowerMeterdatabase[Meter_Id-1].loc_datastore[3][12],PowerMeterdatabase[Meter_Id-1].loc_datastore[3][13],PowerMeterdatabase[Meter_Id-1].loc_datastore[3][14],PowerMeterdatabase[Meter_Id-1].loc_datastore[3][15],
 8003e8a:	4b38      	ldr	r3, [pc, #224]	; (8003f6c <ethernetHTTPRoutine+0x880>)
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	1e5a      	subs	r2, r3, #1
 8003e90:	4937      	ldr	r1, [pc, #220]	; (8003f70 <ethernetHTTPRoutine+0x884>)
 8003e92:	f44f 7349 	mov.w	r3, #804	; 0x324
 8003e96:	fb02 f303 	mul.w	r3, r2, r3
 8003e9a:	440b      	add	r3, r1
 8003e9c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003ea0:	781b      	ldrb	r3, [r3, #0]
		length5 = sprintf(URI+length4+length3+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c%c",
 8003ea2:	461e      	mov	r6, r3
										  PowerMeterdatabase[Meter_Id-1].loc_datastore[3][12],PowerMeterdatabase[Meter_Id-1].loc_datastore[3][13],PowerMeterdatabase[Meter_Id-1].loc_datastore[3][14],PowerMeterdatabase[Meter_Id-1].loc_datastore[3][15],
 8003ea4:	4b31      	ldr	r3, [pc, #196]	; (8003f6c <ethernetHTTPRoutine+0x880>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	1e5a      	subs	r2, r3, #1
 8003eaa:	4931      	ldr	r1, [pc, #196]	; (8003f70 <ethernetHTTPRoutine+0x884>)
 8003eac:	f44f 7349 	mov.w	r3, #804	; 0x324
 8003eb0:	fb02 f303 	mul.w	r3, r2, r3
 8003eb4:	440b      	add	r3, r1
 8003eb6:	f203 2365 	addw	r3, r3, #613	; 0x265
 8003eba:	781b      	ldrb	r3, [r3, #0]
		length5 = sprintf(URI+length4+length3+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c%c",
 8003ebc:	461c      	mov	r4, r3
										  PowerMeterdatabase[Meter_Id-1].loc_datastore[3][12],PowerMeterdatabase[Meter_Id-1].loc_datastore[3][13],PowerMeterdatabase[Meter_Id-1].loc_datastore[3][14],PowerMeterdatabase[Meter_Id-1].loc_datastore[3][15],
 8003ebe:	4b2b      	ldr	r3, [pc, #172]	; (8003f6c <ethernetHTTPRoutine+0x880>)
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	1e5a      	subs	r2, r3, #1
 8003ec4:	492a      	ldr	r1, [pc, #168]	; (8003f70 <ethernetHTTPRoutine+0x884>)
 8003ec6:	f44f 7349 	mov.w	r3, #804	; 0x324
 8003eca:	fb02 f303 	mul.w	r3, r2, r3
 8003ece:	440b      	add	r3, r1
 8003ed0:	f203 2366 	addw	r3, r3, #614	; 0x266
 8003ed4:	781b      	ldrb	r3, [r3, #0]
		length5 = sprintf(URI+length4+length3+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c%c",
 8003ed6:	4618      	mov	r0, r3
										  PowerMeterdatabase[Meter_Id-1].loc_datastore[3][12],PowerMeterdatabase[Meter_Id-1].loc_datastore[3][13],PowerMeterdatabase[Meter_Id-1].loc_datastore[3][14],PowerMeterdatabase[Meter_Id-1].loc_datastore[3][15],
 8003ed8:	4b24      	ldr	r3, [pc, #144]	; (8003f6c <ethernetHTTPRoutine+0x880>)
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	1e5a      	subs	r2, r3, #1
 8003ede:	4924      	ldr	r1, [pc, #144]	; (8003f70 <ethernetHTTPRoutine+0x884>)
 8003ee0:	f44f 7349 	mov.w	r3, #804	; 0x324
 8003ee4:	fb02 f303 	mul.w	r3, r2, r3
 8003ee8:	440b      	add	r3, r1
 8003eea:	f203 2367 	addw	r3, r3, #615	; 0x267
 8003eee:	781b      	ldrb	r3, [r3, #0]
		length5 = sprintf(URI+length4+length3+length2+length1,"%c%c%03d,%03d,%03d,%03d,%03d,%03d,%03d%,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d%c%c",
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	235d      	movs	r3, #93	; 0x5d
 8003ef4:	9311      	str	r3, [sp, #68]	; 0x44
 8003ef6:	2322      	movs	r3, #34	; 0x22
 8003ef8:	9310      	str	r3, [sp, #64]	; 0x40
 8003efa:	920f      	str	r2, [sp, #60]	; 0x3c
 8003efc:	900e      	str	r0, [sp, #56]	; 0x38
 8003efe:	940d      	str	r4, [sp, #52]	; 0x34
 8003f00:	960c      	str	r6, [sp, #48]	; 0x30
 8003f02:	683a      	ldr	r2, [r7, #0]
 8003f04:	920b      	str	r2, [sp, #44]	; 0x2c
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	920a      	str	r2, [sp, #40]	; 0x28
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	9209      	str	r2, [sp, #36]	; 0x24
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	9208      	str	r2, [sp, #32]
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	9207      	str	r2, [sp, #28]
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	9206      	str	r2, [sp, #24]
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	9205      	str	r2, [sp, #20]
 8003f1e:	69fa      	ldr	r2, [r7, #28]
 8003f20:	9204      	str	r2, [sp, #16]
 8003f22:	6a3a      	ldr	r2, [r7, #32]
 8003f24:	9203      	str	r2, [sp, #12]
 8003f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f28:	9202      	str	r2, [sp, #8]
 8003f2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f2c:	9201      	str	r2, [sp, #4]
 8003f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f30:	9300      	str	r3, [sp, #0]
 8003f32:	2322      	movs	r3, #34	; 0x22
 8003f34:	222c      	movs	r2, #44	; 0x2c
 8003f36:	4915      	ldr	r1, [pc, #84]	; (8003f8c <ethernetHTTPRoutine+0x8a0>)
 8003f38:	4628      	mov	r0, r5
 8003f3a:	f00a f849 	bl	800dfd0 <siprintf>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	4b13      	ldr	r3, [pc, #76]	; (8003f90 <ethernetHTTPRoutine+0x8a4>)
 8003f44:	801a      	strh	r2, [r3, #0]
				"%c30,183,72,48,10,100,72,48,28,101,78,34%c,"
				"%c40,183,72,48,10,100,72,48,28,101,78,34%c,"
				"%c20,183,72,48,10,100,72,48,28,101,78,34%c]",Meter_Id,165,'"','"','"','"','"','"','"','"');
#endif
		//request.method = (uint8_t *)HTTP_POST;
		request.uri = (uint8_t *)URI;
 8003f46:	4b13      	ldr	r3, [pc, #76]	; (8003f94 <ethernetHTTPRoutine+0x8a8>)
 8003f48:	4a0f      	ldr	r2, [pc, #60]	; (8003f88 <ethernetHTTPRoutine+0x89c>)
 8003f4a:	605a      	str	r2, [r3, #4]
		//request.host = (uint8_t *)Domain_name;
	    request.connection=(uint8_t *)HTTP_CONNECTION_CLOSE;
 8003f4c:	4b11      	ldr	r3, [pc, #68]	; (8003f94 <ethernetHTTPRoutine+0x8a8>)
 8003f4e:	4a12      	ldr	r2, [pc, #72]	; (8003f98 <ethernetHTTPRoutine+0x8ac>)
 8003f50:	611a      	str	r2, [r3, #16]
	   // request.content_type = (uint8_t *)HTTP_CTYPE_TEXT_HTML;

		// HTTP client example #1: Function for send HTTP request (header and body fields are integrated)
			{
			httpc_send(&request, g_recv_buf, g_send_buf, 0);
 8003f52:	2300      	movs	r3, #0
 8003f54:	4a11      	ldr	r2, [pc, #68]	; (8003f9c <ethernetHTTPRoutine+0x8b0>)
 8003f56:	4912      	ldr	r1, [pc, #72]	; (8003fa0 <ethernetHTTPRoutine+0x8b4>)
 8003f58:	480e      	ldr	r0, [pc, #56]	; (8003f94 <ethernetHTTPRoutine+0x8a8>)
 8003f5a:	f7fe f93d 	bl	80021d8 <httpc_send>
			}
			flag_sent_http_request = ENABLE;
 8003f5e:	4b11      	ldr	r3, [pc, #68]	; (8003fa4 <ethernetHTTPRoutine+0x8b8>)
 8003f60:	2201      	movs	r2, #1
 8003f62:	701a      	strb	r2, [r3, #0]
		}
		// Recv: HTTP response

	}

}
 8003f64:	bf00      	nop
 8003f66:	3734      	adds	r7, #52	; 0x34
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f6c:	200053e2 	.word	0x200053e2
 8003f70:	2000014c 	.word	0x2000014c
 8003f74:	0800f468 	.word	0x0800f468
 8003f78:	200053ea 	.word	0x200053ea
 8003f7c:	200053e8 	.word	0x200053e8
 8003f80:	200053e6 	.word	0x200053e6
 8003f84:	200053e4 	.word	0x200053e4
 8003f88:	200051ec 	.word	0x200051ec
 8003f8c:	0800f4c0 	.word	0x0800f4c0
 8003f90:	200053ec 	.word	0x200053ec
 8003f94:	20000004 	.word	0x20000004
 8003f98:	0800f51c 	.word	0x0800f51c
 8003f9c:	200041ec 	.word	0x200041ec
 8003fa0:	200049ec 	.word	0x200049ec
 8003fa4:	200041e7 	.word	0x200041e7

08003fa8 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	bf00      	nop
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8003fb6:	b480      	push	{r7}
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	bf00      	nop
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	bf00      	nop
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8003fd2:	b480      	push	{r7}
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	bf00      	nop
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	4618      	mov	r0, r3
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8003ffa:	b480      	push	{r7}
 8003ffc:	b083      	sub	sp, #12
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
 8004002:	460b      	mov	r3, r1
 8004004:	70fb      	strb	r3, [r7, #3]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	78fa      	ldrb	r2, [r7, #3]
 800400a:	701a      	strb	r2, [r3, #0]
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8004018:	b480      	push	{r7}
 800401a:	af00      	add	r7, sp, #0
 800401c:	2300      	movs	r3, #0
 800401e:	4618      	mov	r0, r3
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	4603      	mov	r3, r0
 8004030:	71fb      	strb	r3, [r7, #7]
 8004032:	bf00      	nop
 8004034:	370c      	adds	r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
	...

08004040 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d002      	beq.n	8004056 <reg_wizchip_cs_cbfunc+0x16>
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d106      	bne.n	8004064 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8004056:	4b0a      	ldr	r3, [pc, #40]	; (8004080 <reg_wizchip_cs_cbfunc+0x40>)
 8004058:	4a0a      	ldr	r2, [pc, #40]	; (8004084 <reg_wizchip_cs_cbfunc+0x44>)
 800405a:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 800405c:	4b08      	ldr	r3, [pc, #32]	; (8004080 <reg_wizchip_cs_cbfunc+0x40>)
 800405e:	4a0a      	ldr	r2, [pc, #40]	; (8004088 <reg_wizchip_cs_cbfunc+0x48>)
 8004060:	619a      	str	r2, [r3, #24]
 8004062:	e006      	b.n	8004072 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8004064:	4a06      	ldr	r2, [pc, #24]	; (8004080 <reg_wizchip_cs_cbfunc+0x40>)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 800406a:	4a05      	ldr	r2, [pc, #20]	; (8004080 <reg_wizchip_cs_cbfunc+0x40>)
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	6193      	str	r3, [r2, #24]
   }
}
 8004070:	bf00      	nop
 8004072:	bf00      	nop
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	20000058 	.word	0x20000058
 8004084:	08003fc5 	.word	0x08003fc5
 8004088:	08003fd3 	.word	0x08003fd3

0800408c <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8004096:	bf00      	nop
 8004098:	4b0f      	ldr	r3, [pc, #60]	; (80040d8 <reg_wizchip_spi_cbfunc+0x4c>)
 800409a:	881b      	ldrh	r3, [r3, #0]
 800409c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d0f9      	beq.n	8004098 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d002      	beq.n	80040b0 <reg_wizchip_spi_cbfunc+0x24>
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d106      	bne.n	80040be <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80040b0:	4b09      	ldr	r3, [pc, #36]	; (80040d8 <reg_wizchip_spi_cbfunc+0x4c>)
 80040b2:	4a0a      	ldr	r2, [pc, #40]	; (80040dc <reg_wizchip_spi_cbfunc+0x50>)
 80040b4:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80040b6:	4b08      	ldr	r3, [pc, #32]	; (80040d8 <reg_wizchip_spi_cbfunc+0x4c>)
 80040b8:	4a09      	ldr	r2, [pc, #36]	; (80040e0 <reg_wizchip_spi_cbfunc+0x54>)
 80040ba:	621a      	str	r2, [r3, #32]
 80040bc:	e006      	b.n	80040cc <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80040be:	4a06      	ldr	r2, [pc, #24]	; (80040d8 <reg_wizchip_spi_cbfunc+0x4c>)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80040c4:	4a04      	ldr	r2, [pc, #16]	; (80040d8 <reg_wizchip_spi_cbfunc+0x4c>)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	6213      	str	r3, [r2, #32]
   }
}
 80040ca:	bf00      	nop
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr
 80040d8:	20000058 	.word	0x20000058
 80040dc:	08004019 	.word	0x08004019
 80040e0:	08004029 	.word	0x08004029

080040e4 <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 80040e4:	b590      	push	{r4, r7, lr}
 80040e6:	b087      	sub	sp, #28
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	4603      	mov	r3, r0
 80040ec:	6039      	str	r1, [r7, #0]
 80040ee:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 80040f0:	2300      	movs	r3, #0
 80040f2:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 80040f4:	2300      	movs	r3, #0
 80040f6:	60fb      	str	r3, [r7, #12]
 80040f8:	2300      	movs	r3, #0
 80040fa:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 80040fc:	79fb      	ldrb	r3, [r7, #7]
 80040fe:	2b0f      	cmp	r3, #15
 8004100:	f200 80c7 	bhi.w	8004292 <ctlwizchip+0x1ae>
 8004104:	a201      	add	r2, pc, #4	; (adr r2, 800410c <ctlwizchip+0x28>)
 8004106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410a:	bf00      	nop
 800410c:	0800414d 	.word	0x0800414d
 8004110:	08004153 	.word	0x08004153
 8004114:	0800417f 	.word	0x0800417f
 8004118:	08004173 	.word	0x08004173
 800411c:	0800418d 	.word	0x0800418d
 8004120:	08004199 	.word	0x08004199
 8004124:	080041a7 	.word	0x080041a7
 8004128:	080041cd 	.word	0x080041cd
 800412c:	080041f3 	.word	0x080041f3
 8004130:	08004237 	.word	0x08004237
 8004134:	0800423d 	.word	0x0800423d
 8004138:	08004245 	.word	0x08004245
 800413c:	08004299 	.word	0x08004299
 8004140:	0800424d 	.word	0x0800424d
 8004144:	0800425b 	.word	0x0800425b
 8004148:	08004277 	.word	0x08004277
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 800414c:	f000 f8ac 	bl	80042a8 <wizchip_sw_reset>
         break;
 8004150:	e0a3      	b.n	800429a <ctlwizchip+0x1b6>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d004      	beq.n	8004162 <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	3308      	adds	r3, #8
 8004160:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	4611      	mov	r1, r2
 8004168:	4618      	mov	r0, r3
 800416a:	f000 f8e9 	bl	8004340 <wizchip_init>
 800416e:	4603      	mov	r3, r0
 8004170:	e094      	b.n	800429c <ctlwizchip+0x1b8>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	881b      	ldrh	r3, [r3, #0]
 8004176:	4618      	mov	r0, r3
 8004178:	f000 f96e 	bl	8004458 <wizchip_clrinterrupt>
         break;
 800417c:	e08d      	b.n	800429a <ctlwizchip+0x1b6>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 800417e:	f000 f99f 	bl	80044c0 <wizchip_getinterrupt>
 8004182:	4603      	mov	r3, r0
 8004184:	461a      	mov	r2, r3
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	801a      	strh	r2, [r3, #0]
         break;
 800418a:	e086      	b.n	800429a <ctlwizchip+0x1b6>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	881b      	ldrh	r3, [r3, #0]
 8004190:	4618      	mov	r0, r3
 8004192:	f000 f9ba 	bl	800450a <wizchip_setinterruptmask>
         break;         
 8004196:	e080      	b.n	800429a <ctlwizchip+0x1b6>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8004198:	f000 f9d2 	bl	8004540 <wizchip_getinterruptmask>
 800419c:	4603      	mov	r3, r0
 800419e:	461a      	mov	r2, r3
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	801a      	strh	r2, [r3, #0]
         break;
 80041a4:	e079      	b.n	800429a <ctlwizchip+0x1b6>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	881b      	ldrh	r3, [r3, #0]
 80041aa:	0a1b      	lsrs	r3, r3, #8
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	4619      	mov	r1, r3
 80041b2:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 80041b6:	f7fd fc97 	bl	8001ae8 <WIZCHIP_WRITE>
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	881b      	ldrh	r3, [r3, #0]
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	4619      	mov	r1, r3
 80041c2:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80041c6:	f7fd fc8f 	bl	8001ae8 <WIZCHIP_WRITE>
         break;
 80041ca:	e066      	b.n	800429a <ctlwizchip+0x1b6>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 80041cc:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 80041d0:	f7fd fc3e 	bl	8001a50 <WIZCHIP_READ>
 80041d4:	4603      	mov	r3, r0
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	021b      	lsls	r3, r3, #8
 80041da:	b29c      	uxth	r4, r3
 80041dc:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80041e0:	f7fd fc36 	bl	8001a50 <WIZCHIP_READ>
 80041e4:	4603      	mov	r3, r0
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	4423      	add	r3, r4
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	801a      	strh	r2, [r3, #0]
         break;
 80041f0:	e053      	b.n	800429a <ctlwizchip+0x1b6>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 80041f2:	4b2c      	ldr	r3, [pc, #176]	; (80042a4 <ctlwizchip+0x1c0>)
 80041f4:	789a      	ldrb	r2, [r3, #2]
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	3301      	adds	r3, #1
 80041fe:	4a29      	ldr	r2, [pc, #164]	; (80042a4 <ctlwizchip+0x1c0>)
 8004200:	78d2      	ldrb	r2, [r2, #3]
 8004202:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	3302      	adds	r3, #2
 8004208:	4a26      	ldr	r2, [pc, #152]	; (80042a4 <ctlwizchip+0x1c0>)
 800420a:	7912      	ldrb	r2, [r2, #4]
 800420c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	3303      	adds	r3, #3
 8004212:	4a24      	ldr	r2, [pc, #144]	; (80042a4 <ctlwizchip+0x1c0>)
 8004214:	7952      	ldrb	r2, [r2, #5]
 8004216:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	3304      	adds	r3, #4
 800421c:	4a21      	ldr	r2, [pc, #132]	; (80042a4 <ctlwizchip+0x1c0>)
 800421e:	7992      	ldrb	r2, [r2, #6]
 8004220:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	3305      	adds	r3, #5
 8004226:	4a1f      	ldr	r2, [pc, #124]	; (80042a4 <ctlwizchip+0x1c0>)
 8004228:	79d2      	ldrb	r2, [r2, #7]
 800422a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	3306      	adds	r3, #6
 8004230:	2200      	movs	r2, #0
 8004232:	701a      	strb	r2, [r3, #0]
         break;
 8004234:	e031      	b.n	800429a <ctlwizchip+0x1b6>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8004236:	f000 f9d5 	bl	80045e4 <wizphy_reset>
         break;
 800423a:	e02e      	b.n	800429a <ctlwizchip+0x1b6>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 800423c:	6838      	ldr	r0, [r7, #0]
 800423e:	f000 f9f8 	bl	8004632 <wizphy_setphyconf>
         break;
 8004242:	e02a      	b.n	800429a <ctlwizchip+0x1b6>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8004244:	6838      	ldr	r0, [r7, #0]
 8004246:	f000 fa36 	bl	80046b6 <wizphy_getphyconf>
         break;
 800424a:	e026      	b.n	800429a <ctlwizchip+0x1b6>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	4618      	mov	r0, r3
 8004252:	f000 fa99 	bl	8004788 <wizphy_setphypmode>
 8004256:	4603      	mov	r3, r0
 8004258:	e020      	b.n	800429c <ctlwizchip+0x1b8>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 800425a:	f000 f9aa 	bl	80045b2 <wizphy_getphypmode>
 800425e:	4603      	mov	r3, r0
 8004260:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8004262:	7dfb      	ldrb	r3, [r7, #23]
 8004264:	2bff      	cmp	r3, #255	; 0xff
 8004266:	d102      	bne.n	800426e <ctlwizchip+0x18a>
 8004268:	f04f 33ff 	mov.w	r3, #4294967295
 800426c:	e016      	b.n	800429c <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	7dfa      	ldrb	r2, [r7, #23]
 8004272:	701a      	strb	r2, [r3, #0]
         break;
 8004274:	e011      	b.n	800429a <ctlwizchip+0x1b6>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8004276:	f000 f986 	bl	8004586 <wizphy_getphylink>
 800427a:	4603      	mov	r3, r0
 800427c:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 800427e:	7dfb      	ldrb	r3, [r7, #23]
 8004280:	2bff      	cmp	r3, #255	; 0xff
 8004282:	d102      	bne.n	800428a <ctlwizchip+0x1a6>
 8004284:	f04f 33ff 	mov.w	r3, #4294967295
 8004288:	e008      	b.n	800429c <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	7dfa      	ldrb	r2, [r7, #23]
 800428e:	701a      	strb	r2, [r3, #0]
         break;
 8004290:	e003      	b.n	800429a <ctlwizchip+0x1b6>
   #endif      
      default:
         return -1;
 8004292:	f04f 33ff 	mov.w	r3, #4294967295
 8004296:	e001      	b.n	800429c <ctlwizchip+0x1b8>
         break;
 8004298:	bf00      	nop
   }
   return 0;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	371c      	adds	r7, #28
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd90      	pop	{r4, r7, pc}
 80042a4:	20000058 	.word	0x20000058

080042a8 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80042ae:	1d3b      	adds	r3, r7, #4
 80042b0:	2206      	movs	r2, #6
 80042b2:	4619      	mov	r1, r3
 80042b4:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80042b8:	f7fd fc64 	bl	8001b84 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80042bc:	f107 0314 	add.w	r3, r7, #20
 80042c0:	2204      	movs	r2, #4
 80042c2:	4619      	mov	r1, r3
 80042c4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80042c8:	f7fd fc5c 	bl	8001b84 <WIZCHIP_READ_BUF>
 80042cc:	f107 0310 	add.w	r3, r7, #16
 80042d0:	2204      	movs	r2, #4
 80042d2:	4619      	mov	r1, r3
 80042d4:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80042d8:	f7fd fc54 	bl	8001b84 <WIZCHIP_READ_BUF>
 80042dc:	f107 030c 	add.w	r3, r7, #12
 80042e0:	2204      	movs	r2, #4
 80042e2:	4619      	mov	r1, r3
 80042e4:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80042e8:	f7fd fc4c 	bl	8001b84 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80042ec:	2180      	movs	r1, #128	; 0x80
 80042ee:	2000      	movs	r0, #0
 80042f0:	f7fd fbfa 	bl	8001ae8 <WIZCHIP_WRITE>
   getMR(); // for delay
 80042f4:	2000      	movs	r0, #0
 80042f6:	f7fd fbab 	bl	8001a50 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80042fa:	1d3b      	adds	r3, r7, #4
 80042fc:	2206      	movs	r2, #6
 80042fe:	4619      	mov	r1, r3
 8004300:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004304:	f7fd fc9e 	bl	8001c44 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8004308:	f107 0314 	add.w	r3, r7, #20
 800430c:	2204      	movs	r2, #4
 800430e:	4619      	mov	r1, r3
 8004310:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004314:	f7fd fc96 	bl	8001c44 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8004318:	f107 0310 	add.w	r3, r7, #16
 800431c:	2204      	movs	r2, #4
 800431e:	4619      	mov	r1, r3
 8004320:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8004324:	f7fd fc8e 	bl	8001c44 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8004328:	f107 030c 	add.w	r3, r7, #12
 800432c:	2204      	movs	r2, #4
 800432e:	4619      	mov	r1, r3
 8004330:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8004334:	f7fd fc86 	bl	8001c44 <WIZCHIP_WRITE_BUF>
}
 8004338:	bf00      	nop
 800433a:	3718      	adds	r7, #24
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800434a:	2300      	movs	r3, #0
 800434c:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 800434e:	f7ff ffab 	bl	80042a8 <wizchip_sw_reset>
   if(txsize)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d03b      	beq.n	80043d0 <wizchip_init+0x90>
   {
      tmp = 0;
 8004358:	2300      	movs	r3, #0
 800435a:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800435c:	2300      	movs	r3, #0
 800435e:	73fb      	strb	r3, [r7, #15]
 8004360:	e015      	b.n	800438e <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8004362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	4413      	add	r3, r2
 800436a:	781a      	ldrb	r2, [r3, #0]
 800436c:	7bbb      	ldrb	r3, [r7, #14]
 800436e:	4413      	add	r3, r2
 8004370:	b2db      	uxtb	r3, r3
 8004372:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8004374:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004378:	2b10      	cmp	r3, #16
 800437a:	dd02      	ble.n	8004382 <wizchip_init+0x42>
 800437c:	f04f 33ff 	mov.w	r3, #4294967295
 8004380:	e066      	b.n	8004450 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004386:	b2db      	uxtb	r3, r3
 8004388:	3301      	adds	r3, #1
 800438a:	b2db      	uxtb	r3, r3
 800438c:	73fb      	strb	r3, [r7, #15]
 800438e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004392:	2b07      	cmp	r3, #7
 8004394:	dde5      	ble.n	8004362 <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004396:	2300      	movs	r3, #0
 8004398:	73fb      	strb	r3, [r7, #15]
 800439a:	e015      	b.n	80043c8 <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 800439c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	3301      	adds	r3, #1
 80043a4:	00db      	lsls	r3, r3, #3
 80043a6:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80043aa:	4618      	mov	r0, r3
 80043ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	4413      	add	r3, r2
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	4619      	mov	r1, r3
 80043b8:	f7fd fb96 	bl	8001ae8 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80043bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	3301      	adds	r3, #1
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	73fb      	strb	r3, [r7, #15]
 80043c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043cc:	2b07      	cmp	r3, #7
 80043ce:	dde5      	ble.n	800439c <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d03b      	beq.n	800444e <wizchip_init+0x10e>
   {
      tmp = 0;
 80043d6:	2300      	movs	r3, #0
 80043d8:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80043da:	2300      	movs	r3, #0
 80043dc:	73fb      	strb	r3, [r7, #15]
 80043de:	e015      	b.n	800440c <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 80043e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	4413      	add	r3, r2
 80043e8:	781a      	ldrb	r2, [r3, #0]
 80043ea:	7bbb      	ldrb	r3, [r7, #14]
 80043ec:	4413      	add	r3, r2
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 80043f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80043f6:	2b10      	cmp	r3, #16
 80043f8:	dd02      	ble.n	8004400 <wizchip_init+0xc0>
 80043fa:	f04f 33ff 	mov.w	r3, #4294967295
 80043fe:	e027      	b.n	8004450 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004400:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004404:	b2db      	uxtb	r3, r3
 8004406:	3301      	adds	r3, #1
 8004408:	b2db      	uxtb	r3, r3
 800440a:	73fb      	strb	r3, [r7, #15]
 800440c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004410:	2b07      	cmp	r3, #7
 8004412:	dde5      	ble.n	80043e0 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004414:	2300      	movs	r3, #0
 8004416:	73fb      	strb	r3, [r7, #15]
 8004418:	e015      	b.n	8004446 <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800441a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	3301      	adds	r3, #1
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8004428:	4618      	mov	r0, r3
 800442a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800442e:	683a      	ldr	r2, [r7, #0]
 8004430:	4413      	add	r3, r2
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	4619      	mov	r1, r3
 8004436:	f7fd fb57 	bl	8001ae8 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800443a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800443e:	b2db      	uxtb	r3, r3
 8004440:	3301      	adds	r3, #1
 8004442:	b2db      	uxtb	r3, r3
 8004444:	73fb      	strb	r3, [r7, #15]
 8004446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800444a:	2b07      	cmp	r3, #7
 800444c:	dde5      	ble.n	800441a <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	4603      	mov	r3, r0
 8004460:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8004462:	88fb      	ldrh	r3, [r7, #6]
 8004464:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8004466:	88fb      	ldrh	r3, [r7, #6]
 8004468:	0a1b      	lsrs	r3, r3, #8
 800446a:	b29b      	uxth	r3, r3
 800446c:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 800446e:	7bfb      	ldrb	r3, [r7, #15]
 8004470:	f023 030f 	bic.w	r3, r3, #15
 8004474:	b2db      	uxtb	r3, r3
 8004476:	4619      	mov	r1, r3
 8004478:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 800447c:	f7fd fb34 	bl	8001ae8 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8004480:	2300      	movs	r3, #0
 8004482:	73fb      	strb	r3, [r7, #15]
 8004484:	e014      	b.n	80044b0 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 8004486:	7bba      	ldrb	r2, [r7, #14]
 8004488:	7bfb      	ldrb	r3, [r7, #15]
 800448a:	fa42 f303 	asr.w	r3, r2, r3
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	2b00      	cmp	r3, #0
 8004494:	d009      	beq.n	80044aa <wizchip_clrinterrupt+0x52>
 8004496:	7bfb      	ldrb	r3, [r7, #15]
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	3301      	adds	r3, #1
 800449c:	00db      	lsls	r3, r3, #3
 800449e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80044a2:	211f      	movs	r1, #31
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7fd fb1f 	bl	8001ae8 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 80044aa:	7bfb      	ldrb	r3, [r7, #15]
 80044ac:	3301      	adds	r3, #1
 80044ae:	73fb      	strb	r3, [r7, #15]
 80044b0:	7bfb      	ldrb	r3, [r7, #15]
 80044b2:	2b07      	cmp	r3, #7
 80044b4:	d9e7      	bls.n	8004486 <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 80044b6:	bf00      	nop
 80044b8:	bf00      	nop
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 80044c6:	2300      	movs	r3, #0
 80044c8:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 80044ca:	2300      	movs	r3, #0
 80044cc:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80044ce:	2300      	movs	r3, #0
 80044d0:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 80044d2:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 80044d6:	f7fd fabb 	bl	8001a50 <WIZCHIP_READ>
 80044da:	4603      	mov	r3, r0
 80044dc:	f023 030f 	bic.w	r3, r3, #15
 80044e0:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 80044e2:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 80044e6:	f7fd fab3 	bl	8001a50 <WIZCHIP_READ>
 80044ea:	4603      	mov	r3, r0
 80044ec:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 80044ee:	79bb      	ldrb	r3, [r7, #6]
 80044f0:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 80044f2:	88bb      	ldrh	r3, [r7, #4]
 80044f4:	021b      	lsls	r3, r3, #8
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	79fb      	ldrb	r3, [r7, #7]
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	4413      	add	r3, r2
 80044fe:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8004500:	88bb      	ldrh	r3, [r7, #4]
}
 8004502:	4618      	mov	r0, r3
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b084      	sub	sp, #16
 800450e:	af00      	add	r7, sp, #0
 8004510:	4603      	mov	r3, r0
 8004512:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8004514:	88fb      	ldrh	r3, [r7, #6]
 8004516:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8004518:	88fb      	ldrh	r3, [r7, #6]
 800451a:	0a1b      	lsrs	r3, r3, #8
 800451c:	b29b      	uxth	r3, r3
 800451e:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8004520:	7bfb      	ldrb	r3, [r7, #15]
 8004522:	4619      	mov	r1, r3
 8004524:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8004528:	f7fd fade 	bl	8001ae8 <WIZCHIP_WRITE>
   setSIMR(simr);
 800452c:	7bbb      	ldrb	r3, [r7, #14]
 800452e:	4619      	mov	r1, r3
 8004530:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8004534:	f7fd fad8 	bl	8001ae8 <WIZCHIP_WRITE>
#endif   
}
 8004538:	bf00      	nop
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8004546:	2300      	movs	r3, #0
 8004548:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 800454a:	2300      	movs	r3, #0
 800454c:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 800454e:	2300      	movs	r3, #0
 8004550:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8004552:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8004556:	f7fd fa7b 	bl	8001a50 <WIZCHIP_READ>
 800455a:	4603      	mov	r3, r0
 800455c:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 800455e:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8004562:	f7fd fa75 	bl	8001a50 <WIZCHIP_READ>
 8004566:	4603      	mov	r3, r0
 8004568:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 800456a:	79bb      	ldrb	r3, [r7, #6]
 800456c:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 800456e:	88bb      	ldrh	r3, [r7, #4]
 8004570:	021b      	lsls	r3, r3, #8
 8004572:	b29a      	uxth	r2, r3
 8004574:	79fb      	ldrb	r3, [r7, #7]
 8004576:	b29b      	uxth	r3, r3
 8004578:	4413      	add	r3, r2
 800457a:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 800457c:	88bb      	ldrh	r3, [r7, #4]
}
 800457e:	4618      	mov	r0, r3
 8004580:	3708      	adds	r7, #8
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}

08004586 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8004586:	b580      	push	{r7, lr}
 8004588:	b082      	sub	sp, #8
 800458a:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 800458c:	2300      	movs	r3, #0
 800458e:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8004590:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8004594:	f7fd fa5c 	bl	8001a50 <WIZCHIP_READ>
 8004598:	4603      	mov	r3, r0
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d001      	beq.n	80045a6 <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 80045a2:	2301      	movs	r3, #1
 80045a4:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 80045a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3708      	adds	r7, #8
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b082      	sub	sp, #8
 80045b6:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 80045b8:	2300      	movs	r3, #0
 80045ba:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 80045bc:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80045c0:	f7fd fa46 	bl	8001a50 <WIZCHIP_READ>
 80045c4:	4603      	mov	r3, r0
 80045c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045ca:	2b30      	cmp	r3, #48	; 0x30
 80045cc:	d102      	bne.n	80045d4 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 80045ce:	2301      	movs	r3, #1
 80045d0:	71fb      	strb	r3, [r7, #7]
 80045d2:	e001      	b.n	80045d8 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 80045d4:	2300      	movs	r3, #0
 80045d6:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 80045d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3708      	adds	r7, #8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 80045ea:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80045ee:	f7fd fa2f 	bl	8001a50 <WIZCHIP_READ>
 80045f2:	4603      	mov	r3, r0
 80045f4:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 80045f6:	79fb      	ldrb	r3, [r7, #7]
 80045f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045fc:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 80045fe:	79fb      	ldrb	r3, [r7, #7]
 8004600:	4619      	mov	r1, r3
 8004602:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8004606:	f7fd fa6f 	bl	8001ae8 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 800460a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800460e:	f7fd fa1f 	bl	8001a50 <WIZCHIP_READ>
 8004612:	4603      	mov	r3, r0
 8004614:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8004616:	79fb      	ldrb	r3, [r7, #7]
 8004618:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800461c:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 800461e:	79fb      	ldrb	r3, [r7, #7]
 8004620:	4619      	mov	r1, r3
 8004622:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8004626:	f7fd fa5f 	bl	8001ae8 <WIZCHIP_WRITE>
}
 800462a:	bf00      	nop
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b084      	sub	sp, #16
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 800463a:	2300      	movs	r3, #0
 800463c:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d104      	bne.n	8004650 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8004646:	7bfb      	ldrb	r3, [r7, #15]
 8004648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800464c:	73fb      	strb	r3, [r7, #15]
 800464e:	e003      	b.n	8004658 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8004650:	7bfb      	ldrb	r3, [r7, #15]
 8004652:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004656:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	785b      	ldrb	r3, [r3, #1]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d104      	bne.n	800466a <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8004660:	7bfb      	ldrb	r3, [r7, #15]
 8004662:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8004666:	73fb      	strb	r3, [r7, #15]
 8004668:	e019      	b.n	800469e <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	78db      	ldrb	r3, [r3, #3]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d10d      	bne.n	800468e <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	789b      	ldrb	r3, [r3, #2]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d104      	bne.n	8004684 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 800467a:	7bfb      	ldrb	r3, [r7, #15]
 800467c:	f043 0318 	orr.w	r3, r3, #24
 8004680:	73fb      	strb	r3, [r7, #15]
 8004682:	e00c      	b.n	800469e <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8004684:	7bfb      	ldrb	r3, [r7, #15]
 8004686:	f043 0308 	orr.w	r3, r3, #8
 800468a:	73fb      	strb	r3, [r7, #15]
 800468c:	e007      	b.n	800469e <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	789b      	ldrb	r3, [r3, #2]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d103      	bne.n	800469e <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8004696:	7bfb      	ldrb	r3, [r7, #15]
 8004698:	f043 0310 	orr.w	r3, r3, #16
 800469c:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 800469e:	7bfb      	ldrb	r3, [r7, #15]
 80046a0:	4619      	mov	r1, r3
 80046a2:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80046a6:	f7fd fa1f 	bl	8001ae8 <WIZCHIP_WRITE>
   wizphy_reset();
 80046aa:	f7ff ff9b 	bl	80045e4 <wizphy_reset>
}
 80046ae:	bf00      	nop
 80046b0:	3710      	adds	r7, #16
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b084      	sub	sp, #16
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80046be:	2300      	movs	r3, #0
 80046c0:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 80046c2:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80046c6:	f7fd f9c3 	bl	8001a50 <WIZCHIP_READ>
 80046ca:	4603      	mov	r3, r0
 80046cc:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 80046ce:	7bfb      	ldrb	r3, [r7, #15]
 80046d0:	119b      	asrs	r3, r3, #6
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	f003 0301 	and.w	r3, r3, #1
 80046d8:	b2da      	uxtb	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80046de:	7bfb      	ldrb	r3, [r7, #15]
 80046e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046e4:	2b20      	cmp	r3, #32
 80046e6:	d001      	beq.n	80046ec <wizphy_getphyconf+0x36>
 80046e8:	2b38      	cmp	r3, #56	; 0x38
 80046ea:	d103      	bne.n	80046f4 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	705a      	strb	r2, [r3, #1]
         break;
 80046f2:	e003      	b.n	80046fc <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	705a      	strb	r2, [r3, #1]
         break;
 80046fa:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80046fc:	7bfb      	ldrb	r3, [r7, #15]
 80046fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004702:	3b10      	subs	r3, #16
 8004704:	2b10      	cmp	r3, #16
 8004706:	bf8c      	ite	hi
 8004708:	2201      	movhi	r2, #1
 800470a:	2200      	movls	r2, #0
 800470c:	b2d2      	uxtb	r2, r2
 800470e:	2a00      	cmp	r2, #0
 8004710:	d111      	bne.n	8004736 <wizphy_getphyconf+0x80>
 8004712:	2201      	movs	r2, #1
 8004714:	fa02 f303 	lsl.w	r3, r2, r3
 8004718:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800471c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004720:	2b00      	cmp	r3, #0
 8004722:	bf14      	ite	ne
 8004724:	2301      	movne	r3, #1
 8004726:	2300      	moveq	r3, #0
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d003      	beq.n	8004736 <wizphy_getphyconf+0x80>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	709a      	strb	r2, [r3, #2]
         break;
 8004734:	e003      	b.n	800473e <wizphy_getphyconf+0x88>
      default:
         phyconf->speed = PHY_SPEED_10;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	709a      	strb	r2, [r3, #2]
         break;
 800473c:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800473e:	7bfb      	ldrb	r3, [r7, #15]
 8004740:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004744:	3b08      	subs	r3, #8
 8004746:	2b18      	cmp	r3, #24
 8004748:	bf8c      	ite	hi
 800474a:	2201      	movhi	r2, #1
 800474c:	2200      	movls	r2, #0
 800474e:	b2d2      	uxtb	r2, r2
 8004750:	2a00      	cmp	r2, #0
 8004752:	d111      	bne.n	8004778 <wizphy_getphyconf+0xc2>
 8004754:	2201      	movs	r2, #1
 8004756:	fa02 f303 	lsl.w	r3, r2, r3
 800475a:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800475e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004762:	2b00      	cmp	r3, #0
 8004764:	bf14      	ite	ne
 8004766:	2301      	movne	r3, #1
 8004768:	2300      	moveq	r3, #0
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b00      	cmp	r3, #0
 800476e:	d003      	beq.n	8004778 <wizphy_getphyconf+0xc2>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	70da      	strb	r2, [r3, #3]
         break;
 8004776:	e003      	b.n	8004780 <wizphy_getphyconf+0xca>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	70da      	strb	r2, [r3, #3]
         break;
 800477e:	bf00      	nop
   }
}
 8004780:	bf00      	nop
 8004782:	3710      	adds	r7, #16
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	4603      	mov	r3, r0
 8004790:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8004792:	2300      	movs	r3, #0
 8004794:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8004796:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800479a:	f7fd f959 	bl	8001a50 <WIZCHIP_READ>
 800479e:	4603      	mov	r3, r0
 80047a0:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 80047a2:	7bfb      	ldrb	r3, [r7, #15]
 80047a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d102      	bne.n	80047b2 <wizphy_setphypmode+0x2a>
 80047ac:	f04f 33ff 	mov.w	r3, #4294967295
 80047b0:	e030      	b.n	8004814 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 80047b2:	7bfb      	ldrb	r3, [r7, #15]
 80047b4:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80047b8:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80047ba:	79fb      	ldrb	r3, [r7, #7]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d104      	bne.n	80047ca <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 80047c0:	7bfb      	ldrb	r3, [r7, #15]
 80047c2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80047c6:	73fb      	strb	r3, [r7, #15]
 80047c8:	e003      	b.n	80047d2 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 80047ca:	7bfb      	ldrb	r3, [r7, #15]
 80047cc:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80047d0:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 80047d2:	7bfb      	ldrb	r3, [r7, #15]
 80047d4:	4619      	mov	r1, r3
 80047d6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80047da:	f7fd f985 	bl	8001ae8 <WIZCHIP_WRITE>
   wizphy_reset();
 80047de:	f7ff ff01 	bl	80045e4 <wizphy_reset>
   tmp = getPHYCFGR();
 80047e2:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80047e6:	f7fd f933 	bl	8001a50 <WIZCHIP_READ>
 80047ea:	4603      	mov	r3, r0
 80047ec:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80047ee:	79fb      	ldrb	r3, [r7, #7]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d106      	bne.n	8004802 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 80047f4:	7bfb      	ldrb	r3, [r7, #15]
 80047f6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d008      	beq.n	8004810 <wizphy_setphypmode+0x88>
 80047fe:	2300      	movs	r3, #0
 8004800:	e008      	b.n	8004814 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8004802:	7bfb      	ldrb	r3, [r7, #15]
 8004804:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004808:	2b00      	cmp	r3, #0
 800480a:	d001      	beq.n	8004810 <wizphy_setphypmode+0x88>
 800480c:	2300      	movs	r3, #0
 800480e:	e001      	b.n	8004814 <wizphy_setphypmode+0x8c>
   }
   return -1;
 8004810:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004814:	4618      	mov	r0, r3
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2206      	movs	r2, #6
 8004828:	4619      	mov	r1, r3
 800482a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800482e:	f7fd fa09 	bl	8001c44 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	330e      	adds	r3, #14
 8004836:	2204      	movs	r2, #4
 8004838:	4619      	mov	r1, r3
 800483a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800483e:	f7fd fa01 	bl	8001c44 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	330a      	adds	r3, #10
 8004846:	2204      	movs	r2, #4
 8004848:	4619      	mov	r1, r3
 800484a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800484e:	f7fd f9f9 	bl	8001c44 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	3306      	adds	r3, #6
 8004856:	2204      	movs	r2, #4
 8004858:	4619      	mov	r1, r3
 800485a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800485e:	f7fd f9f1 	bl	8001c44 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	7c9a      	ldrb	r2, [r3, #18]
 8004866:	4b0b      	ldr	r3, [pc, #44]	; (8004894 <wizchip_setnetinfo+0x78>)
 8004868:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	7cda      	ldrb	r2, [r3, #19]
 800486e:	4b09      	ldr	r3, [pc, #36]	; (8004894 <wizchip_setnetinfo+0x78>)
 8004870:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	7d1a      	ldrb	r2, [r3, #20]
 8004876:	4b07      	ldr	r3, [pc, #28]	; (8004894 <wizchip_setnetinfo+0x78>)
 8004878:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	7d5a      	ldrb	r2, [r3, #21]
 800487e:	4b05      	ldr	r3, [pc, #20]	; (8004894 <wizchip_setnetinfo+0x78>)
 8004880:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	7d9a      	ldrb	r2, [r3, #22]
 8004886:	4b04      	ldr	r3, [pc, #16]	; (8004898 <wizchip_setnetinfo+0x7c>)
 8004888:	701a      	strb	r2, [r3, #0]
}
 800488a:	bf00      	nop
 800488c:	3708      	adds	r7, #8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	200053f0 	.word	0x200053f0
 8004898:	200053f4 	.word	0x200053f4

0800489c <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2206      	movs	r2, #6
 80048a8:	4619      	mov	r1, r3
 80048aa:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80048ae:	f7fd f969 	bl	8001b84 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	330e      	adds	r3, #14
 80048b6:	2204      	movs	r2, #4
 80048b8:	4619      	mov	r1, r3
 80048ba:	f44f 7080 	mov.w	r0, #256	; 0x100
 80048be:	f7fd f961 	bl	8001b84 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	330a      	adds	r3, #10
 80048c6:	2204      	movs	r2, #4
 80048c8:	4619      	mov	r1, r3
 80048ca:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80048ce:	f7fd f959 	bl	8001b84 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	3306      	adds	r3, #6
 80048d6:	2204      	movs	r2, #4
 80048d8:	4619      	mov	r1, r3
 80048da:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80048de:	f7fd f951 	bl	8001b84 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 80048e2:	4b0c      	ldr	r3, [pc, #48]	; (8004914 <wizchip_getnetinfo+0x78>)
 80048e4:	781a      	ldrb	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 80048ea:	4b0a      	ldr	r3, [pc, #40]	; (8004914 <wizchip_getnetinfo+0x78>)
 80048ec:	785a      	ldrb	r2, [r3, #1]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 80048f2:	4b08      	ldr	r3, [pc, #32]	; (8004914 <wizchip_getnetinfo+0x78>)
 80048f4:	789a      	ldrb	r2, [r3, #2]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 80048fa:	4b06      	ldr	r3, [pc, #24]	; (8004914 <wizchip_getnetinfo+0x78>)
 80048fc:	78da      	ldrb	r2, [r3, #3]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8004902:	4b05      	ldr	r3, [pc, #20]	; (8004918 <wizchip_getnetinfo+0x7c>)
 8004904:	781a      	ldrb	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	759a      	strb	r2, [r3, #22]
}
 800490a:	bf00      	nop
 800490c:	3708      	adds	r7, #8
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	200053f0 	.word	0x200053f0
 8004918:	200053f4 	.word	0x200053f4

0800491c <Reset_Handler>:
 800491c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004954 <LoopForever+0x2>
 8004920:	f7fc fedc 	bl	80016dc <SystemInit>
 8004924:	480c      	ldr	r0, [pc, #48]	; (8004958 <LoopForever+0x6>)
 8004926:	490d      	ldr	r1, [pc, #52]	; (800495c <LoopForever+0xa>)
 8004928:	4a0d      	ldr	r2, [pc, #52]	; (8004960 <LoopForever+0xe>)
 800492a:	2300      	movs	r3, #0
 800492c:	e002      	b.n	8004934 <LoopCopyDataInit>

0800492e <CopyDataInit>:
 800492e:	58d4      	ldr	r4, [r2, r3]
 8004930:	50c4      	str	r4, [r0, r3]
 8004932:	3304      	adds	r3, #4

08004934 <LoopCopyDataInit>:
 8004934:	18c4      	adds	r4, r0, r3
 8004936:	428c      	cmp	r4, r1
 8004938:	d3f9      	bcc.n	800492e <CopyDataInit>
 800493a:	4a0a      	ldr	r2, [pc, #40]	; (8004964 <LoopForever+0x12>)
 800493c:	4c0a      	ldr	r4, [pc, #40]	; (8004968 <LoopForever+0x16>)
 800493e:	2300      	movs	r3, #0
 8004940:	e001      	b.n	8004946 <LoopFillZerobss>

08004942 <FillZerobss>:
 8004942:	6013      	str	r3, [r2, #0]
 8004944:	3204      	adds	r2, #4

08004946 <LoopFillZerobss>:
 8004946:	42a2      	cmp	r2, r4
 8004948:	d3fb      	bcc.n	8004942 <FillZerobss>
 800494a:	f009 f9c9 	bl	800dce0 <__libc_init_array>
 800494e:	f7fb ffab 	bl	80008a8 <main>

08004952 <LoopForever>:
 8004952:	e7fe      	b.n	8004952 <LoopForever>
 8004954:	20010000 	.word	0x20010000
 8004958:	20000000 	.word	0x20000000
 800495c:	200000f4 	.word	0x200000f4
 8004960:	0800f9f4 	.word	0x0800f9f4
 8004964:	200000f4 	.word	0x200000f4
 8004968:	20005520 	.word	0x20005520

0800496c <ADC1_IRQHandler>:
 800496c:	e7fe      	b.n	800496c <ADC1_IRQHandler>
	...

08004970 <_ZN10PowermeterC1Ev>:
uint8_t calculateDeltaWeight;
uint8_t negValue[10];
uint32_t carbonTargetWghtMem,silicaTargetWghtMem,manganeaseTargetWghtMem,copperTargetWghtMem,tinTargetWghtMem,zincTargetWghtMem;
uint32_t Carbon_calculated_Weight,Silica_calculated_Weight,manganease_calculated_Weight,Copper_calculated_Weight,Tin_calculated_Weight,Zinc_calculated_Weight;

Powermeter::Powermeter() {
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	4a04      	ldr	r2, [pc, #16]	; (800498c <_ZN10PowermeterC1Ev+0x1c>)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4618      	mov	r0, r3
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr
 800498c:	0800f7d0 	.word	0x0800f7d0

08004990 <_ZN10PowermeterD1Ev>:

Powermeter::~Powermeter() {
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	4a04      	ldr	r2, [pc, #16]	; (80049ac <_ZN10PowermeterD1Ev+0x1c>)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4618      	mov	r0, r3
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	0800f7d0 	.word	0x0800f7d0

080049b0 <_ZN10PowermeterD0Ev>:
Powermeter::~Powermeter() {
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
}
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f7ff ffe9 	bl	8004990 <_ZN10PowermeterD1Ev>
 80049be:	2108      	movs	r1, #8
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f009 f982 	bl	800dcca <_ZdlPvj>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4618      	mov	r0, r3
 80049ca:	3708      	adds	r7, #8
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <_ZN6commonC1Ev>:
 *      Author: MKS
 */

#include "common.h"

common::common() {
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	4a04      	ldr	r2, [pc, #16]	; (80049ec <_ZN6commonC1Ev+0x1c>)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4618      	mov	r0, r3
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr
 80049ec:	0800f7e0 	.word	0x0800f7e0

080049f0 <_ZN6commonD1Ev>:

common::~common() {
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	4a04      	ldr	r2, [pc, #16]	; (8004a0c <_ZN6commonD1Ev+0x1c>)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4618      	mov	r0, r3
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	0800f7e0 	.word	0x0800f7e0

08004a10 <_ZN6commonD0Ev>:
common::~common() {
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
}
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f7ff ffe9 	bl	80049f0 <_ZN6commonD1Ev>
 8004a1e:	2104      	movs	r1, #4
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f009 f952 	bl	800dcca <_ZdlPvj>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3708      	adds	r7, #8
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <_ZN14DisplayRoutineC1Ev>:
extern uint16_t MAC_Gen_Prod_Input1_Production,Production_Zeit;
extern uint16_t MAC_Gen_Rej_Input_Production,Rejection_Zeit;
extern uint16_t Manual_RejectionCount;
extern uint16_t SectorPos;

DisplayRoutine::DisplayRoutine() {
 8004a30:	b5b0      	push	{r4, r5, r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	4a26      	ldr	r2, [pc, #152]	; (8004ad4 <_ZN14DisplayRoutineC1Ev+0xa4>)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	601a      	str	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	3304      	adds	r3, #4
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 f8b2 	bl	8004bac <_ZN4GLCDC1Ev>
 8004a48:	687d      	ldr	r5, [r7, #4]
 8004a4a:	4b23      	ldr	r3, [pc, #140]	; (8004ad8 <_ZN14DisplayRoutineC1Ev+0xa8>)
 8004a4c:	f605 2408 	addw	r4, r5, #2568	; 0xa08
 8004a50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a52:	c407      	stmia	r4!, {r0, r1, r2}
 8004a54:	8023      	strh	r3, [r4, #0]
 8004a56:	2300      	movs	r3, #0
 8004a58:	f885 3a16 	strb.w	r3, [r5, #2582]	; 0xa16
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a1f      	ldr	r2, [pc, #124]	; (8004adc <_ZN14DisplayRoutineC1Ev+0xac>)
 8004a60:	f603 2317 	addw	r3, r3, #2583	; 0xa17
 8004a64:	8812      	ldrh	r2, [r2, #0]
 8004a66:	801a      	strh	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	491d      	ldr	r1, [pc, #116]	; (8004ae0 <_ZN14DisplayRoutineC1Ev+0xb0>)
 8004a6c:	f603 2219 	addw	r2, r3, #2585	; 0xa19
 8004a70:	8808      	ldrh	r0, [r1, #0]
 8004a72:	7889      	ldrb	r1, [r1, #2]
 8004a74:	8010      	strh	r0, [r2, #0]
 8004a76:	7091      	strb	r1, [r2, #2]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 2a1c 	strb.w	r2, [r3, #2588]	; 0xa1c
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a18      	ldr	r2, [pc, #96]	; (8004ae4 <_ZN14DisplayRoutineC1Ev+0xb4>)
 8004a82:	f603 231d 	addw	r3, r3, #2589	; 0xa1d
 8004a86:	8812      	ldrh	r2, [r2, #0]
 8004a88:	801a      	strh	r2, [r3, #0]
 8004a8a:	687d      	ldr	r5, [r7, #4]
 8004a8c:	4b16      	ldr	r3, [pc, #88]	; (8004ae8 <_ZN14DisplayRoutineC1Ev+0xb8>)
 8004a8e:	f605 241f 	addw	r4, r5, #2591	; 0xa1f
 8004a92:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004a94:	6020      	str	r0, [r4, #0]
 8004a96:	6061      	str	r1, [r4, #4]
 8004a98:	60a2      	str	r2, [r4, #8]
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	f885 3a2b 	strb.w	r3, [r5, #2603]	; 0xa2b
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a12      	ldr	r2, [pc, #72]	; (8004aec <_ZN14DisplayRoutineC1Ev+0xbc>)
 8004aa4:	f603 242c 	addw	r4, r3, #2604	; 0xa2c
 8004aa8:	ca07      	ldmia	r2, {r0, r1, r2}
 8004aaa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 2a38 	strb.w	r2, [r3, #2616]	; 0xa38
 8004ab4:	687d      	ldr	r5, [r7, #4]
 8004ab6:	4b0e      	ldr	r3, [pc, #56]	; (8004af0 <_ZN14DisplayRoutineC1Ev+0xc0>)
 8004ab8:	f605 2439 	addw	r4, r5, #2617	; 0xa39
 8004abc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004abe:	6020      	str	r0, [r4, #0]
 8004ac0:	6061      	str	r1, [r4, #4]
 8004ac2:	60a2      	str	r2, [r4, #8]
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	f885 3a45 	strb.w	r3, [r5, #2629]	; 0xa45
	// TODO Auto-generated constructor stub

}
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4618      	mov	r0, r3
 8004ace:	3708      	adds	r7, #8
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bdb0      	pop	{r4, r5, r7, pc}
 8004ad4:	0800f7f0 	.word	0x0800f7f0
 8004ad8:	0800f524 	.word	0x0800f524
 8004adc:	0800f534 	.word	0x0800f534
 8004ae0:	0800f538 	.word	0x0800f538
 8004ae4:	0800f53c 	.word	0x0800f53c
 8004ae8:	0800f540 	.word	0x0800f540
 8004aec:	0800f550 	.word	0x0800f550
 8004af0:	0800f560 	.word	0x0800f560

08004af4 <_ZN14DisplayRoutineD1Ev>:

DisplayRoutine::~DisplayRoutine() {
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	4a06      	ldr	r2, [pc, #24]	; (8004b18 <_ZN14DisplayRoutineD1Ev+0x24>)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	601a      	str	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	3304      	adds	r3, #4
 8004b06:	4618      	mov	r0, r3
 8004b08:	f003 ffcc 	bl	8008aa4 <_ZN4GLCDD1Ev>
	// TODO Auto-generated destructor stub
}
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3708      	adds	r7, #8
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	0800f7f0 	.word	0x0800f7f0

08004b1c <_ZN14DisplayRoutineD0Ev>:
DisplayRoutine::~DisplayRoutine() {
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
}
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f7ff ffe5 	bl	8004af4 <_ZN14DisplayRoutineD1Ev>
 8004b2a:	f640 214c 	movw	r1, #2636	; 0xa4c
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f009 f8cb 	bl	800dcca <_ZdlPvj>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4618      	mov	r0, r3
 8004b38:	3708      	adds	r7, #8
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <_ZN14DisplayRoutine4InitEv>:
	gLCDNumericArraySize_4[3] =(unsigned char)((value4dig%10)+0x30);
	m_gLCDDrive.m_lcdputs1(posCol,posLine,gLCDNumericArraySize_4);
}

void DisplayRoutine::Init()
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b082      	sub	sp, #8
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
	m_gLCDDrive.m_displayon();
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	3304      	adds	r3, #4
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f004 f88c 	bl	8008c68 <_ZN4GLCD11m_displayonEv>
	m_gLCDDrive.m_setstartline(0);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	3304      	adds	r3, #4
 8004b54:	2100      	movs	r1, #0
 8004b56:	4618      	mov	r0, r3
 8004b58:	f004 f988 	bl	8008e6c <_ZN4GLCD14m_setstartlineEh>
	m_gLCDDrive.m_clrlcd();
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	3304      	adds	r3, #4
 8004b60:	4618      	mov	r0, r3
 8004b62:	f004 fa5f 	bl	8009024 <_ZN4GLCD8m_clrlcdEv>


}
 8004b66:	bf00      	nop
 8004b68:	3708      	adds	r7, #8
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <_ZN6common26ReadtheValueAssignPinstateEhh>:

class common {
public:
	common();
	virtual ~common();
	GPIO_PinState ReadtheValueAssignPinstate(uint8_t position, uint8_t value)
 8004b6e:	b480      	push	{r7}
 8004b70:	b085      	sub	sp, #20
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
 8004b76:	460b      	mov	r3, r1
 8004b78:	70fb      	strb	r3, [r7, #3]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	70bb      	strb	r3, [r7, #2]
	{
		GPIO_PinState pinstate;
		position = 1 << position;
 8004b7e:	78fb      	ldrb	r3, [r7, #3]
 8004b80:	2201      	movs	r2, #1
 8004b82:	fa02 f303 	lsl.w	r3, r2, r3
 8004b86:	70fb      	strb	r3, [r7, #3]
		if(position & value){
 8004b88:	78fa      	ldrb	r2, [r7, #3]
 8004b8a:	78bb      	ldrb	r3, [r7, #2]
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d002      	beq.n	8004b9a <_ZN6common26ReadtheValueAssignPinstateEhh+0x2c>
			pinstate = GPIO_PIN_SET;
 8004b94:	2301      	movs	r3, #1
 8004b96:	73fb      	strb	r3, [r7, #15]
 8004b98:	e001      	b.n	8004b9e <_ZN6common26ReadtheValueAssignPinstateEhh+0x30>
		}
		else
		{
			pinstate = GPIO_PIN_RESET;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	73fb      	strb	r3, [r7, #15]
		}
		return(pinstate);
 8004b9e:	7bfb      	ldrb	r3, [r7, #15]
	}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3714      	adds	r7, #20
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <_ZN4GLCDC1Ev>:

#include "GLCD.h"
#include "main.h"
#define GLCDDELAY 10
extern TIM_HandleTypeDef htim1;
GLCD::GLCD() {
 8004bac:	b5b0      	push	{r4, r5, r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7ff ff0a 	bl	80049d0 <_ZN6commonC1Ev>
 8004bbc:	4ac8      	ldr	r2, [pc, #800]	; (8004ee0 <_ZN4GLCDC1Ev+0x334>)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	601a      	str	r2, [r3, #0]
 8004bc2:	687d      	ldr	r5, [r7, #4]
 8004bc4:	4bc7      	ldr	r3, [pc, #796]	; (8004ee4 <_ZN4GLCDC1Ev+0x338>)
 8004bc6:	1d2c      	adds	r4, r5, #4
 8004bc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004bca:	c407      	stmia	r4!, {r0, r1, r2}
 8004bcc:	8023      	strh	r3, [r4, #0]
 8004bce:	2300      	movs	r3, #0
 8004bd0:	74ab      	strb	r3, [r5, #18]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	615a      	str	r2, [r3, #20]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	619a      	str	r2, [r3, #24]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	775a      	strb	r2, [r3, #29]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	331e      	adds	r3, #30
 8004be8:	f640 0208 	movw	r2, #2056	; 0x808
 8004bec:	2100      	movs	r1, #0
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f009 f8b8 	bl	800dd64 <memset>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	227e      	movs	r2, #126	; 0x7e
 8004bf8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2281      	movs	r2, #129	; 0x81
 8004c00:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2295      	movs	r2, #149	; 0x95
 8004c08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	22b1      	movs	r2, #177	; 0xb1
 8004c10:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	22b1      	movs	r2, #177	; 0xb1
 8004c18:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2295      	movs	r2, #149	; 0x95
 8004c20:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2281      	movs	r2, #129	; 0x81
 8004c28:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	227e      	movs	r2, #126	; 0x7e
 8004c30:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	227e      	movs	r2, #126	; 0x7e
 8004c38:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	22ff      	movs	r2, #255	; 0xff
 8004c40:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	22eb      	movs	r2, #235	; 0xeb
 8004c48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	22cf      	movs	r2, #207	; 0xcf
 8004c50:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	22cf      	movs	r2, #207	; 0xcf
 8004c58:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	22eb      	movs	r2, #235	; 0xeb
 8004c60:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	22ff      	movs	r2, #255	; 0xff
 8004c68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	227e      	movs	r2, #126	; 0x7e
 8004c70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	220e      	movs	r2, #14
 8004c78:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	221f      	movs	r2, #31
 8004c80:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	223f      	movs	r2, #63	; 0x3f
 8004c88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	227e      	movs	r2, #126	; 0x7e
 8004c90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	223f      	movs	r2, #63	; 0x3f
 8004c98:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	221f      	movs	r2, #31
 8004ca0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	220e      	movs	r2, #14
 8004ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2208      	movs	r2, #8
 8004cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	221c      	movs	r2, #28
 8004cb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	223e      	movs	r2, #62	; 0x3e
 8004cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	227f      	movs	r2, #127	; 0x7f
 8004cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	223e      	movs	r2, #62	; 0x3e
 8004cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	221c      	movs	r2, #28
 8004cd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2208      	movs	r2, #8
 8004ce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2218      	movs	r2, #24
 8004ce8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	22ba      	movs	r2, #186	; 0xba
 8004cf0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	22ff      	movs	r2, #255	; 0xff
 8004cf8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	22ff      	movs	r2, #255	; 0xff
 8004d00:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	22ff      	movs	r2, #255	; 0xff
 8004d08:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	22ba      	movs	r2, #186	; 0xba
 8004d10:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2218      	movs	r2, #24
 8004d18:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2210      	movs	r2, #16
 8004d20:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	22b8      	movs	r2, #184	; 0xb8
 8004d28:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	22fc      	movs	r2, #252	; 0xfc
 8004d30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	22ff      	movs	r2, #255	; 0xff
 8004d38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	22fc      	movs	r2, #252	; 0xfc
 8004d40:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	22b8      	movs	r2, #184	; 0xb8
 8004d48:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2210      	movs	r2, #16
 8004d50:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2218      	movs	r2, #24
 8004d58:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	223c      	movs	r2, #60	; 0x3c
 8004d60:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	223c      	movs	r2, #60	; 0x3c
 8004d68:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2218      	movs	r2, #24
 8004d70:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	22ff      	movs	r2, #255	; 0xff
 8004d78:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	22ff      	movs	r2, #255	; 0xff
 8004d80:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	22e7      	movs	r2, #231	; 0xe7
 8004d88:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	22c3      	movs	r2, #195	; 0xc3
 8004d90:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	22c3      	movs	r2, #195	; 0xc3
 8004d98:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	22e7      	movs	r2, #231	; 0xe7
 8004da0:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	22ff      	movs	r2, #255	; 0xff
 8004da8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	22ff      	movs	r2, #255	; 0xff
 8004db0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	223c      	movs	r2, #60	; 0x3c
 8004db8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2266      	movs	r2, #102	; 0x66
 8004dc0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2242      	movs	r2, #66	; 0x42
 8004dc8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2242      	movs	r2, #66	; 0x42
 8004dd0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2266      	movs	r2, #102	; 0x66
 8004dd8:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	223c      	movs	r2, #60	; 0x3c
 8004de0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	22ff      	movs	r2, #255	; 0xff
 8004de8:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	22c3      	movs	r2, #195	; 0xc3
 8004df0:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2299      	movs	r2, #153	; 0x99
 8004df8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	22bd      	movs	r2, #189	; 0xbd
 8004e00:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	22bd      	movs	r2, #189	; 0xbd
 8004e08:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2299      	movs	r2, #153	; 0x99
 8004e10:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	22c3      	movs	r2, #195	; 0xc3
 8004e18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	22ff      	movs	r2, #255	; 0xff
 8004e20:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2270      	movs	r2, #112	; 0x70
 8004e28:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	22f8      	movs	r2, #248	; 0xf8
 8004e30:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2288      	movs	r2, #136	; 0x88
 8004e38:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2288      	movs	r2, #136	; 0x88
 8004e40:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	22fd      	movs	r2, #253	; 0xfd
 8004e48:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	227f      	movs	r2, #127	; 0x7f
 8004e50:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2207      	movs	r2, #7
 8004e58:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	220f      	movs	r2, #15
 8004e60:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	224e      	movs	r2, #78	; 0x4e
 8004e68:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	225f      	movs	r2, #95	; 0x5f
 8004e70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	22f1      	movs	r2, #241	; 0xf1
 8004e78:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	22f1      	movs	r2, #241	; 0xf1
 8004e80:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	225f      	movs	r2, #95	; 0x5f
 8004e88:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	224e      	movs	r2, #78	; 0x4e
 8004e90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	22c0      	movs	r2, #192	; 0xc0
 8004e98:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	22e0      	movs	r2, #224	; 0xe0
 8004ea0:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	22ff      	movs	r2, #255	; 0xff
 8004ea8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	227f      	movs	r2, #127	; 0x7f
 8004eb0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2205      	movs	r2, #5
 8004eb8:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2205      	movs	r2, #5
 8004ec0:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2207      	movs	r2, #7
 8004ec8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2207      	movs	r2, #7
 8004ed0:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	22c0      	movs	r2, #192	; 0xc0
 8004ed8:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
 8004edc:	e004      	b.n	8004ee8 <_ZN4GLCDC1Ev+0x33c>
 8004ede:	bf00      	nop
 8004ee0:	0800f800 	.word	0x0800f800
 8004ee4:	0800f570 	.word	0x0800f570
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	22ff      	movs	r2, #255	; 0xff
 8004eec:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	227f      	movs	r2, #127	; 0x7f
 8004ef4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2205      	movs	r2, #5
 8004efc:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2205      	movs	r2, #5
 8004f04:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2265      	movs	r2, #101	; 0x65
 8004f0c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	227f      	movs	r2, #127	; 0x7f
 8004f14:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	223f      	movs	r2, #63	; 0x3f
 8004f1c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2299      	movs	r2, #153	; 0x99
 8004f24:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	225a      	movs	r2, #90	; 0x5a
 8004f2c:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	223c      	movs	r2, #60	; 0x3c
 8004f34:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	22e7      	movs	r2, #231	; 0xe7
 8004f3c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	22e7      	movs	r2, #231	; 0xe7
 8004f44:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	223c      	movs	r2, #60	; 0x3c
 8004f4c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	225a      	movs	r2, #90	; 0x5a
 8004f54:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2299      	movs	r2, #153	; 0x99
 8004f5c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	227f      	movs	r2, #127	; 0x7f
 8004f64:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	223e      	movs	r2, #62	; 0x3e
 8004f6c:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	223e      	movs	r2, #62	; 0x3e
 8004f74:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	221c      	movs	r2, #28
 8004f7c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	221c      	movs	r2, #28
 8004f84:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2208      	movs	r2, #8
 8004f8c:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2208      	movs	r2, #8
 8004f94:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2208      	movs	r2, #8
 8004f9c:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2208      	movs	r2, #8
 8004fa4:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	221c      	movs	r2, #28
 8004fac:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	221c      	movs	r2, #28
 8004fb4:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	223e      	movs	r2, #62	; 0x3e
 8004fbc:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	223e      	movs	r2, #62	; 0x3e
 8004fc4:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	227f      	movs	r2, #127	; 0x7f
 8004fcc:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2224      	movs	r2, #36	; 0x24
 8004fd4:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2266      	movs	r2, #102	; 0x66
 8004fdc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	22ff      	movs	r2, #255	; 0xff
 8004fe4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	22ff      	movs	r2, #255	; 0xff
 8004fec:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2266      	movs	r2, #102	; 0x66
 8004ff4:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2224      	movs	r2, #36	; 0x24
 8004ffc:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	225f      	movs	r2, #95	; 0x5f
 8005004:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	225f      	movs	r2, #95	; 0x5f
 800500c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	225f      	movs	r2, #95	; 0x5f
 8005014:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	225f      	movs	r2, #95	; 0x5f
 800501c:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2206      	movs	r2, #6
 8005024:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	220f      	movs	r2, #15
 800502c:	f883 20bf 	strb.w	r2, [r3, #191]	; 0xbf
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2209      	movs	r2, #9
 8005034:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	227f      	movs	r2, #127	; 0x7f
 800503c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	227f      	movs	r2, #127	; 0x7f
 8005044:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	227f      	movs	r2, #127	; 0x7f
 8005054:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	227f      	movs	r2, #127	; 0x7f
 800505c:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2240      	movs	r2, #64	; 0x40
 8005064:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	22da      	movs	r2, #218	; 0xda
 800506c:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	22bf      	movs	r2, #191	; 0xbf
 8005074:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	22a5      	movs	r2, #165	; 0xa5
 800507c:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	22fd      	movs	r2, #253	; 0xfd
 8005084:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2259      	movs	r2, #89	; 0x59
 800508c:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2203      	movs	r2, #3
 8005094:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2202      	movs	r2, #2
 800509c:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2270      	movs	r2, #112	; 0x70
 80050a4:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2270      	movs	r2, #112	; 0x70
 80050ac:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2270      	movs	r2, #112	; 0x70
 80050b4:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2270      	movs	r2, #112	; 0x70
 80050bc:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2270      	movs	r2, #112	; 0x70
 80050c4:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2270      	movs	r2, #112	; 0x70
 80050cc:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2280      	movs	r2, #128	; 0x80
 80050d4:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2294      	movs	r2, #148	; 0x94
 80050dc:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	22b6      	movs	r2, #182	; 0xb6
 80050e4:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	22ff      	movs	r2, #255	; 0xff
 80050ec:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	22ff      	movs	r2, #255	; 0xff
 80050f4:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	22b6      	movs	r2, #182	; 0xb6
 80050fc:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2294      	movs	r2, #148	; 0x94
 8005104:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2280      	movs	r2, #128	; 0x80
 800510c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2204      	movs	r2, #4
 8005114:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2206      	movs	r2, #6
 800511c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	227f      	movs	r2, #127	; 0x7f
 8005124:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	227f      	movs	r2, #127	; 0x7f
 800512c:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2206      	movs	r2, #6
 8005134:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2204      	movs	r2, #4
 800513c:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2210      	movs	r2, #16
 8005144:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2230      	movs	r2, #48	; 0x30
 800514c:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	227f      	movs	r2, #127	; 0x7f
 8005154:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	227f      	movs	r2, #127	; 0x7f
 800515c:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2230      	movs	r2, #48	; 0x30
 8005164:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2210      	movs	r2, #16
 800516c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2208      	movs	r2, #8
 8005174:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2208      	movs	r2, #8
 800517c:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2208      	movs	r2, #8
 8005184:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	222a      	movs	r2, #42	; 0x2a
 800518c:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	223e      	movs	r2, #62	; 0x3e
 8005194:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	221c      	movs	r2, #28
 800519c:	f883 20f3 	strb.w	r2, [r3, #243]	; 0xf3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2208      	movs	r2, #8
 80051a4:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2208      	movs	r2, #8
 80051ac:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	221c      	movs	r2, #28
 80051b4:	f883 20f7 	strb.w	r2, [r3, #247]	; 0xf7
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	223e      	movs	r2, #62	; 0x3e
 80051bc:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	222a      	movs	r2, #42	; 0x2a
 80051c4:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2208      	movs	r2, #8
 80051cc:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2208      	movs	r2, #8
 80051d4:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2208      	movs	r2, #8
 80051dc:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	223c      	movs	r2, #60	; 0x3c
 80051e4:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	223c      	movs	r2, #60	; 0x3c
 80051ec:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2220      	movs	r2, #32
 80051f4:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2220      	movs	r2, #32
 80051fc:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2220      	movs	r2, #32
 8005204:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2220      	movs	r2, #32
 800520c:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2220      	movs	r2, #32
 8005214:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2208      	movs	r2, #8
 800521c:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	221c      	movs	r2, #28
 8005224:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	223e      	movs	r2, #62	; 0x3e
 800522c:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2208      	movs	r2, #8
 8005234:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2208      	movs	r2, #8
 800523c:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	223e      	movs	r2, #62	; 0x3e
 8005244:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	221c      	movs	r2, #28
 800524c:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2208      	movs	r2, #8
 8005254:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2230      	movs	r2, #48	; 0x30
 800525c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2238      	movs	r2, #56	; 0x38
 8005264:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	223c      	movs	r2, #60	; 0x3c
 800526c:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	223e      	movs	r2, #62	; 0x3e
 8005274:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	223e      	movs	r2, #62	; 0x3e
 800527c:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	223c      	movs	r2, #60	; 0x3c
 8005284:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2238      	movs	r2, #56	; 0x38
 800528c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2230      	movs	r2, #48	; 0x30
 8005294:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2206      	movs	r2, #6
 800529c:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	220e      	movs	r2, #14
 80052a4:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	221e      	movs	r2, #30
 80052ac:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	223e      	movs	r2, #62	; 0x3e
 80052b4:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	223e      	movs	r2, #62	; 0x3e
 80052bc:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	221e      	movs	r2, #30
 80052c4:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	220e      	movs	r2, #14
 80052cc:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2206      	movs	r2, #6
 80052d4:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2206      	movs	r2, #6
 80052dc:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	225f      	movs	r2, #95	; 0x5f
 80052e4:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	225f      	movs	r2, #95	; 0x5f
 80052ec:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2206      	movs	r2, #6
 80052f4:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2207      	movs	r2, #7
 80052fc:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2207      	movs	r2, #7
 8005304:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2207      	movs	r2, #7
 800530c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2207      	movs	r2, #7
 8005314:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2214      	movs	r2, #20
 800531c:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	227f      	movs	r2, #127	; 0x7f
 8005324:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	227f      	movs	r2, #127	; 0x7f
 800532c:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2214      	movs	r2, #20
 8005334:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	227f      	movs	r2, #127	; 0x7f
 800533c:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	227f      	movs	r2, #127	; 0x7f
 8005344:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2214      	movs	r2, #20
 800534c:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2224      	movs	r2, #36	; 0x24
 8005354:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	222e      	movs	r2, #46	; 0x2e
 800535c:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	226b      	movs	r2, #107	; 0x6b
 8005364:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	226b      	movs	r2, #107	; 0x6b
 800536c:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	223a      	movs	r2, #58	; 0x3a
 8005374:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2212      	movs	r2, #18
 800537c:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2246      	movs	r2, #70	; 0x46
 8005384:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2266      	movs	r2, #102	; 0x66
 800538c:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2230      	movs	r2, #48	; 0x30
 8005394:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2218      	movs	r2, #24
 800539c:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	220c      	movs	r2, #12
 80053a4:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2266      	movs	r2, #102	; 0x66
 80053ac:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2262      	movs	r2, #98	; 0x62
 80053b4:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2230      	movs	r2, #48	; 0x30
 80053bc:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	227a      	movs	r2, #122	; 0x7a
 80053c4:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	224f      	movs	r2, #79	; 0x4f
 80053cc:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	225d      	movs	r2, #93	; 0x5d
 80053d4:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2237      	movs	r2, #55	; 0x37
 80053dc:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	227a      	movs	r2, #122	; 0x7a
 80053e4:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2248      	movs	r2, #72	; 0x48
 80053ec:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2204      	movs	r2, #4
 80053f4:	f883 2156 	strb.w	r2, [r3, #342]	; 0x156
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2207      	movs	r2, #7
 80053fc:	f883 2157 	strb.w	r2, [r3, #343]	; 0x157
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2203      	movs	r2, #3
 8005404:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	221c      	movs	r2, #28
 800540c:	f883 215f 	strb.w	r2, [r3, #351]	; 0x15f
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	223e      	movs	r2, #62	; 0x3e
 8005414:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2263      	movs	r2, #99	; 0x63
 800541c:	f883 2161 	strb.w	r2, [r3, #353]	; 0x161
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2241      	movs	r2, #65	; 0x41
 8005424:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2241      	movs	r2, #65	; 0x41
 800542c:	f883 2167 	strb.w	r2, [r3, #359]	; 0x167
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2263      	movs	r2, #99	; 0x63
 8005434:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	223e      	movs	r2, #62	; 0x3e
 800543c:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	221c      	movs	r2, #28
 8005444:	f883 216a 	strb.w	r2, [r3, #362]	; 0x16a
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2208      	movs	r2, #8
 800544c:	f883 216e 	strb.w	r2, [r3, #366]	; 0x16e
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	222a      	movs	r2, #42	; 0x2a
 8005454:	f883 216f 	strb.w	r2, [r3, #367]	; 0x16f
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	223e      	movs	r2, #62	; 0x3e
 800545c:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	221c      	movs	r2, #28
 8005464:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	221c      	movs	r2, #28
 800546c:	f883 2172 	strb.w	r2, [r3, #370]	; 0x172
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	223e      	movs	r2, #62	; 0x3e
 8005474:	f883 2173 	strb.w	r2, [r3, #371]	; 0x173
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	222a      	movs	r2, #42	; 0x2a
 800547c:	f883 2174 	strb.w	r2, [r3, #372]	; 0x174
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2208      	movs	r2, #8
 8005484:	f883 2175 	strb.w	r2, [r3, #373]	; 0x175
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2208      	movs	r2, #8
 800548c:	f883 2176 	strb.w	r2, [r3, #374]	; 0x176
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2208      	movs	r2, #8
 8005494:	f883 2177 	strb.w	r2, [r3, #375]	; 0x177
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	223e      	movs	r2, #62	; 0x3e
 800549c:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	223e      	movs	r2, #62	; 0x3e
 80054a4:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2208      	movs	r2, #8
 80054ac:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2208      	movs	r2, #8
 80054b4:	f883 217b 	strb.w	r2, [r3, #379]	; 0x17b
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2280      	movs	r2, #128	; 0x80
 80054bc:	f883 217f 	strb.w	r2, [r3, #383]	; 0x17f
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	22e0      	movs	r2, #224	; 0xe0
 80054c4:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2260      	movs	r2, #96	; 0x60
 80054cc:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2208      	movs	r2, #8
 80054d4:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2208      	movs	r2, #8
 80054dc:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2208      	movs	r2, #8
 80054e4:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2208      	movs	r2, #8
 80054ec:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2208      	movs	r2, #8
 80054f4:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2208      	movs	r2, #8
 80054fc:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2260      	movs	r2, #96	; 0x60
 8005504:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2260      	movs	r2, #96	; 0x60
 800550c:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2260      	movs	r2, #96	; 0x60
 8005514:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2230      	movs	r2, #48	; 0x30
 800551c:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2218      	movs	r2, #24
 8005524:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	220c      	movs	r2, #12
 800552c:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2206      	movs	r2, #6
 8005534:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2203      	movs	r2, #3
 800553c:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	223e      	movs	r2, #62	; 0x3e
 800554c:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	227f      	movs	r2, #127	; 0x7f
 8005554:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2271      	movs	r2, #113	; 0x71
 800555c:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2259      	movs	r2, #89	; 0x59
 8005564:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	224d      	movs	r2, #77	; 0x4d
 800556c:	f883 21a2 	strb.w	r2, [r3, #418]	; 0x1a2
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	227f      	movs	r2, #127	; 0x7f
 8005574:	f883 21a3 	strb.w	r2, [r3, #419]	; 0x1a3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	223e      	movs	r2, #62	; 0x3e
 800557c:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2240      	movs	r2, #64	; 0x40
 8005584:	f883 21a6 	strb.w	r2, [r3, #422]	; 0x1a6
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2242      	movs	r2, #66	; 0x42
 800558c:	f883 21a7 	strb.w	r2, [r3, #423]	; 0x1a7
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	227f      	movs	r2, #127	; 0x7f
 8005594:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	227f      	movs	r2, #127	; 0x7f
 800559c:	f883 21a9 	strb.w	r2, [r3, #425]	; 0x1a9
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2240      	movs	r2, #64	; 0x40
 80055a4:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2240      	movs	r2, #64	; 0x40
 80055ac:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2262      	movs	r2, #98	; 0x62
 80055b4:	f883 21ae 	strb.w	r2, [r3, #430]	; 0x1ae
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2273      	movs	r2, #115	; 0x73
 80055bc:	f883 21af 	strb.w	r2, [r3, #431]	; 0x1af
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2259      	movs	r2, #89	; 0x59
 80055c4:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2249      	movs	r2, #73	; 0x49
 80055cc:	f883 21b1 	strb.w	r2, [r3, #433]	; 0x1b1
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	226f      	movs	r2, #111	; 0x6f
 80055d4:	f883 21b2 	strb.w	r2, [r3, #434]	; 0x1b2
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2266      	movs	r2, #102	; 0x66
 80055dc:	f883 21b3 	strb.w	r2, [r3, #435]	; 0x1b3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2222      	movs	r2, #34	; 0x22
 80055e4:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2263      	movs	r2, #99	; 0x63
 80055ec:	f883 21b7 	strb.w	r2, [r3, #439]	; 0x1b7
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2249      	movs	r2, #73	; 0x49
 80055f4:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2249      	movs	r2, #73	; 0x49
 80055fc:	f883 21b9 	strb.w	r2, [r3, #441]	; 0x1b9
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	227f      	movs	r2, #127	; 0x7f
 8005604:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2236      	movs	r2, #54	; 0x36
 800560c:	f883 21bb 	strb.w	r2, [r3, #443]	; 0x1bb
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2218      	movs	r2, #24
 8005614:	f883 21be 	strb.w	r2, [r3, #446]	; 0x1be
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	221c      	movs	r2, #28
 800561c:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2216      	movs	r2, #22
 8005624:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2253      	movs	r2, #83	; 0x53
 800562c:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	227f      	movs	r2, #127	; 0x7f
 8005634:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	227f      	movs	r2, #127	; 0x7f
 800563c:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2250      	movs	r2, #80	; 0x50
 8005644:	f883 21c4 	strb.w	r2, [r3, #452]	; 0x1c4
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2227      	movs	r2, #39	; 0x27
 800564c:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2267      	movs	r2, #103	; 0x67
 8005654:	f883 21c7 	strb.w	r2, [r3, #455]	; 0x1c7
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2245      	movs	r2, #69	; 0x45
 800565c:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2245      	movs	r2, #69	; 0x45
 8005664:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	227d      	movs	r2, #125	; 0x7d
 800566c:	f883 21ca 	strb.w	r2, [r3, #458]	; 0x1ca
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2239      	movs	r2, #57	; 0x39
 8005674:	f883 21cb 	strb.w	r2, [r3, #459]	; 0x1cb
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	223c      	movs	r2, #60	; 0x3c
 800567c:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	227e      	movs	r2, #126	; 0x7e
 8005684:	f883 21cf 	strb.w	r2, [r3, #463]	; 0x1cf
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	224b      	movs	r2, #75	; 0x4b
 800568c:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2249      	movs	r2, #73	; 0x49
 8005694:	f883 21d1 	strb.w	r2, [r3, #465]	; 0x1d1
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2279      	movs	r2, #121	; 0x79
 800569c:	f883 21d2 	strb.w	r2, [r3, #466]	; 0x1d2
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2230      	movs	r2, #48	; 0x30
 80056a4:	f883 21d3 	strb.w	r2, [r3, #467]	; 0x1d3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2203      	movs	r2, #3
 80056ac:	f883 21d6 	strb.w	r2, [r3, #470]	; 0x1d6
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2203      	movs	r2, #3
 80056b4:	f883 21d7 	strb.w	r2, [r3, #471]	; 0x1d7
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2271      	movs	r2, #113	; 0x71
 80056bc:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2279      	movs	r2, #121	; 0x79
 80056c4:	f883 21d9 	strb.w	r2, [r3, #473]	; 0x1d9
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	220f      	movs	r2, #15
 80056cc:	f883 21da 	strb.w	r2, [r3, #474]	; 0x1da
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2207      	movs	r2, #7
 80056d4:	f883 21db 	strb.w	r2, [r3, #475]	; 0x1db
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2236      	movs	r2, #54	; 0x36
 80056dc:	f883 21de 	strb.w	r2, [r3, #478]	; 0x1de
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	227f      	movs	r2, #127	; 0x7f
 80056e4:	f883 21df 	strb.w	r2, [r3, #479]	; 0x1df
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2249      	movs	r2, #73	; 0x49
 80056ec:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2249      	movs	r2, #73	; 0x49
 80056f4:	f883 21e1 	strb.w	r2, [r3, #481]	; 0x1e1
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	227f      	movs	r2, #127	; 0x7f
 80056fc:	f883 21e2 	strb.w	r2, [r3, #482]	; 0x1e2
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2236      	movs	r2, #54	; 0x36
 8005704:	f883 21e3 	strb.w	r2, [r3, #483]	; 0x1e3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2206      	movs	r2, #6
 800570c:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	224f      	movs	r2, #79	; 0x4f
 8005714:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2249      	movs	r2, #73	; 0x49
 800571c:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2269      	movs	r2, #105	; 0x69
 8005724:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	223f      	movs	r2, #63	; 0x3f
 800572c:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	221e      	movs	r2, #30
 8005734:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2266      	movs	r2, #102	; 0x66
 800573c:	f883 21f0 	strb.w	r2, [r3, #496]	; 0x1f0
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2266      	movs	r2, #102	; 0x66
 8005744:	f883 21f1 	strb.w	r2, [r3, #497]	; 0x1f1
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2280      	movs	r2, #128	; 0x80
 800574c:	f883 21f7 	strb.w	r2, [r3, #503]	; 0x1f7
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	22e6      	movs	r2, #230	; 0xe6
 8005754:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2266      	movs	r2, #102	; 0x66
 800575c:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2208      	movs	r2, #8
 8005764:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	221c      	movs	r2, #28
 800576c:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2236      	movs	r2, #54	; 0x36
 8005774:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2263      	movs	r2, #99	; 0x63
 800577c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2241      	movs	r2, #65	; 0x41
 8005784:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2224      	movs	r2, #36	; 0x24
 800578c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2224      	movs	r2, #36	; 0x24
 8005794:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2224      	movs	r2, #36	; 0x24
 800579c:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2224      	movs	r2, #36	; 0x24
 80057a4:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2224      	movs	r2, #36	; 0x24
 80057ac:	f883 220a 	strb.w	r2, [r3, #522]	; 0x20a
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2224      	movs	r2, #36	; 0x24
 80057b4:	f883 220b 	strb.w	r2, [r3, #523]	; 0x20b
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2241      	movs	r2, #65	; 0x41
 80057bc:	f883 220f 	strb.w	r2, [r3, #527]	; 0x20f
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2263      	movs	r2, #99	; 0x63
 80057c4:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2236      	movs	r2, #54	; 0x36
 80057cc:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	221c      	movs	r2, #28
 80057d4:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2208      	movs	r2, #8
 80057dc:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2202      	movs	r2, #2
 80057e4:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2203      	movs	r2, #3
 80057ec:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2251      	movs	r2, #81	; 0x51
 80057f4:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2259      	movs	r2, #89	; 0x59
 80057fc:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	220f      	movs	r2, #15
 8005804:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2206      	movs	r2, #6
 800580c:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	223e      	movs	r2, #62	; 0x3e
 8005814:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	227f      	movs	r2, #127	; 0x7f
 800581c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2241      	movs	r2, #65	; 0x41
 8005824:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	225d      	movs	r2, #93	; 0x5d
 800582c:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	225d      	movs	r2, #93	; 0x5d
 8005834:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	221f      	movs	r2, #31
 800583c:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	221e      	movs	r2, #30
 8005844:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	227c      	movs	r2, #124	; 0x7c
 800584c:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	227e      	movs	r2, #126	; 0x7e
 8005854:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2213      	movs	r2, #19
 800585c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2213      	movs	r2, #19
 8005864:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	227e      	movs	r2, #126	; 0x7e
 800586c:	f883 222a 	strb.w	r2, [r3, #554]	; 0x22a
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	227c      	movs	r2, #124	; 0x7c
 8005874:	f883 222b 	strb.w	r2, [r3, #555]	; 0x22b
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2241      	movs	r2, #65	; 0x41
 800587c:	f883 222e 	strb.w	r2, [r3, #558]	; 0x22e
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	227f      	movs	r2, #127	; 0x7f
 8005884:	f883 222f 	strb.w	r2, [r3, #559]	; 0x22f
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	227f      	movs	r2, #127	; 0x7f
 800588c:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2249      	movs	r2, #73	; 0x49
 8005894:	f883 2231 	strb.w	r2, [r3, #561]	; 0x231
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2249      	movs	r2, #73	; 0x49
 800589c:	f883 2232 	strb.w	r2, [r3, #562]	; 0x232
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	227f      	movs	r2, #127	; 0x7f
 80058a4:	f883 2233 	strb.w	r2, [r3, #563]	; 0x233
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2236      	movs	r2, #54	; 0x36
 80058ac:	f883 2234 	strb.w	r2, [r3, #564]	; 0x234
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	221c      	movs	r2, #28
 80058b4:	f883 2236 	strb.w	r2, [r3, #566]	; 0x236
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	223e      	movs	r2, #62	; 0x3e
 80058bc:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2263      	movs	r2, #99	; 0x63
 80058c4:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2241      	movs	r2, #65	; 0x41
 80058cc:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2241      	movs	r2, #65	; 0x41
 80058d4:	f883 223a 	strb.w	r2, [r3, #570]	; 0x23a
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2263      	movs	r2, #99	; 0x63
 80058dc:	f883 223b 	strb.w	r2, [r3, #571]	; 0x23b
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2222      	movs	r2, #34	; 0x22
 80058e4:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2241      	movs	r2, #65	; 0x41
 80058ec:	f883 223e 	strb.w	r2, [r3, #574]	; 0x23e
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	227f      	movs	r2, #127	; 0x7f
 80058f4:	f883 223f 	strb.w	r2, [r3, #575]	; 0x23f
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	227f      	movs	r2, #127	; 0x7f
 80058fc:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2241      	movs	r2, #65	; 0x41
 8005904:	f883 2241 	strb.w	r2, [r3, #577]	; 0x241
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2263      	movs	r2, #99	; 0x63
 800590c:	f883 2242 	strb.w	r2, [r3, #578]	; 0x242
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	223e      	movs	r2, #62	; 0x3e
 8005914:	f883 2243 	strb.w	r2, [r3, #579]	; 0x243
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	221c      	movs	r2, #28
 800591c:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2241      	movs	r2, #65	; 0x41
 8005924:	f883 2246 	strb.w	r2, [r3, #582]	; 0x246
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	227f      	movs	r2, #127	; 0x7f
 800592c:	f883 2247 	strb.w	r2, [r3, #583]	; 0x247
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	227f      	movs	r2, #127	; 0x7f
 8005934:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2249      	movs	r2, #73	; 0x49
 800593c:	f883 2249 	strb.w	r2, [r3, #585]	; 0x249
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	225d      	movs	r2, #93	; 0x5d
 8005944:	f883 224a 	strb.w	r2, [r3, #586]	; 0x24a
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2241      	movs	r2, #65	; 0x41
 800594c:	f883 224b 	strb.w	r2, [r3, #587]	; 0x24b
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2263      	movs	r2, #99	; 0x63
 8005954:	f883 224c 	strb.w	r2, [r3, #588]	; 0x24c
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2241      	movs	r2, #65	; 0x41
 800595c:	f883 224e 	strb.w	r2, [r3, #590]	; 0x24e
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	227f      	movs	r2, #127	; 0x7f
 8005964:	f883 224f 	strb.w	r2, [r3, #591]	; 0x24f
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	227f      	movs	r2, #127	; 0x7f
 800596c:	f883 2250 	strb.w	r2, [r3, #592]	; 0x250
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2249      	movs	r2, #73	; 0x49
 8005974:	f883 2251 	strb.w	r2, [r3, #593]	; 0x251
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	221d      	movs	r2, #29
 800597c:	f883 2252 	strb.w	r2, [r3, #594]	; 0x252
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2253 	strb.w	r2, [r3, #595]	; 0x253
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2203      	movs	r2, #3
 800598c:	f883 2254 	strb.w	r2, [r3, #596]	; 0x254
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	221c      	movs	r2, #28
 8005994:	f883 2256 	strb.w	r2, [r3, #598]	; 0x256
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	223e      	movs	r2, #62	; 0x3e
 800599c:	f883 2257 	strb.w	r2, [r3, #599]	; 0x257
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2263      	movs	r2, #99	; 0x63
 80059a4:	f883 2258 	strb.w	r2, [r3, #600]	; 0x258
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2241      	movs	r2, #65	; 0x41
 80059ac:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2251      	movs	r2, #81	; 0x51
 80059b4:	f883 225a 	strb.w	r2, [r3, #602]	; 0x25a
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2273      	movs	r2, #115	; 0x73
 80059bc:	f883 225b 	strb.w	r2, [r3, #603]	; 0x25b
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2272      	movs	r2, #114	; 0x72
 80059c4:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	227f      	movs	r2, #127	; 0x7f
 80059cc:	f883 225e 	strb.w	r2, [r3, #606]	; 0x25e
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	227f      	movs	r2, #127	; 0x7f
 80059d4:	f883 225f 	strb.w	r2, [r3, #607]	; 0x25f
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2208      	movs	r2, #8
 80059dc:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2208      	movs	r2, #8
 80059e4:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	227f      	movs	r2, #127	; 0x7f
 80059ec:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	227f      	movs	r2, #127	; 0x7f
 80059f4:	f883 2263 	strb.w	r2, [r3, #611]	; 0x263
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2241      	movs	r2, #65	; 0x41
 80059fc:	f883 2267 	strb.w	r2, [r3, #615]	; 0x267
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	227f      	movs	r2, #127	; 0x7f
 8005a04:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	227f      	movs	r2, #127	; 0x7f
 8005a0c:	f883 2269 	strb.w	r2, [r3, #617]	; 0x269
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2241      	movs	r2, #65	; 0x41
 8005a14:	f883 226a 	strb.w	r2, [r3, #618]	; 0x26a
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2230      	movs	r2, #48	; 0x30
 8005a1c:	f883 226e 	strb.w	r2, [r3, #622]	; 0x26e
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2270      	movs	r2, #112	; 0x70
 8005a24:	f883 226f 	strb.w	r2, [r3, #623]	; 0x26f
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2240      	movs	r2, #64	; 0x40
 8005a2c:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2241      	movs	r2, #65	; 0x41
 8005a34:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	227f      	movs	r2, #127	; 0x7f
 8005a3c:	f883 2272 	strb.w	r2, [r3, #626]	; 0x272
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	223f      	movs	r2, #63	; 0x3f
 8005a44:	f883 2273 	strb.w	r2, [r3, #627]	; 0x273
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2241      	movs	r2, #65	; 0x41
 8005a54:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	227f      	movs	r2, #127	; 0x7f
 8005a5c:	f883 2277 	strb.w	r2, [r3, #631]	; 0x277
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	227f      	movs	r2, #127	; 0x7f
 8005a64:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2208      	movs	r2, #8
 8005a6c:	f883 2279 	strb.w	r2, [r3, #633]	; 0x279
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	221c      	movs	r2, #28
 8005a74:	f883 227a 	strb.w	r2, [r3, #634]	; 0x27a
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2277      	movs	r2, #119	; 0x77
 8005a7c:	f883 227b 	strb.w	r2, [r3, #635]	; 0x27b
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2263      	movs	r2, #99	; 0x63
 8005a84:	f883 227c 	strb.w	r2, [r3, #636]	; 0x27c
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2241      	movs	r2, #65	; 0x41
 8005a8c:	f883 227e 	strb.w	r2, [r3, #638]	; 0x27e
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	227f      	movs	r2, #127	; 0x7f
 8005a94:	f883 227f 	strb.w	r2, [r3, #639]	; 0x27f
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	227f      	movs	r2, #127	; 0x7f
 8005a9c:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2241      	movs	r2, #65	; 0x41
 8005aa4:	f883 2281 	strb.w	r2, [r3, #641]	; 0x281
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2240      	movs	r2, #64	; 0x40
 8005aac:	f883 2282 	strb.w	r2, [r3, #642]	; 0x282
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2260      	movs	r2, #96	; 0x60
 8005ab4:	f883 2283 	strb.w	r2, [r3, #643]	; 0x283
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2270      	movs	r2, #112	; 0x70
 8005abc:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	227f      	movs	r2, #127	; 0x7f
 8005ac4:	f883 2286 	strb.w	r2, [r3, #646]	; 0x286
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	227f      	movs	r2, #127	; 0x7f
 8005acc:	f883 2287 	strb.w	r2, [r3, #647]	; 0x287
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	220e      	movs	r2, #14
 8005ad4:	f883 2288 	strb.w	r2, [r3, #648]	; 0x288
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	221c      	movs	r2, #28
 8005adc:	f883 2289 	strb.w	r2, [r3, #649]	; 0x289
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	220e      	movs	r2, #14
 8005ae4:	f883 228a 	strb.w	r2, [r3, #650]	; 0x28a
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	227f      	movs	r2, #127	; 0x7f
 8005aec:	f883 228b 	strb.w	r2, [r3, #651]	; 0x28b
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	227f      	movs	r2, #127	; 0x7f
 8005af4:	f883 228c 	strb.w	r2, [r3, #652]	; 0x28c
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	227f      	movs	r2, #127	; 0x7f
 8005afc:	f883 228e 	strb.w	r2, [r3, #654]	; 0x28e
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	227f      	movs	r2, #127	; 0x7f
 8005b04:	f883 228f 	strb.w	r2, [r3, #655]	; 0x28f
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2206      	movs	r2, #6
 8005b0c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	220c      	movs	r2, #12
 8005b14:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2218      	movs	r2, #24
 8005b1c:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	227f      	movs	r2, #127	; 0x7f
 8005b24:	f883 2293 	strb.w	r2, [r3, #659]	; 0x293
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	227f      	movs	r2, #127	; 0x7f
 8005b2c:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	221c      	movs	r2, #28
 8005b34:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	223e      	movs	r2, #62	; 0x3e
 8005b3c:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2263      	movs	r2, #99	; 0x63
 8005b44:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2241      	movs	r2, #65	; 0x41
 8005b4c:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2263      	movs	r2, #99	; 0x63
 8005b54:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	223e      	movs	r2, #62	; 0x3e
 8005b5c:	f883 229b 	strb.w	r2, [r3, #667]	; 0x29b
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	221c      	movs	r2, #28
 8005b64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2241      	movs	r2, #65	; 0x41
 8005b6c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	227f      	movs	r2, #127	; 0x7f
 8005b74:	f883 229f 	strb.w	r2, [r3, #671]	; 0x29f
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	227f      	movs	r2, #127	; 0x7f
 8005b7c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2249      	movs	r2, #73	; 0x49
 8005b84:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2209      	movs	r2, #9
 8005b8c:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	220f      	movs	r2, #15
 8005b94:	f883 22a3 	strb.w	r2, [r3, #675]	; 0x2a3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2206      	movs	r2, #6
 8005b9c:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	221e      	movs	r2, #30
 8005ba4:	f883 22a6 	strb.w	r2, [r3, #678]	; 0x2a6
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	223f      	movs	r2, #63	; 0x3f
 8005bac:	f883 22a7 	strb.w	r2, [r3, #679]	; 0x2a7
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2221      	movs	r2, #33	; 0x21
 8005bb4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2271      	movs	r2, #113	; 0x71
 8005bbc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	227f      	movs	r2, #127	; 0x7f
 8005bc4:	f883 22aa 	strb.w	r2, [r3, #682]	; 0x2aa
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	225e      	movs	r2, #94	; 0x5e
 8005bcc:	f883 22ab 	strb.w	r2, [r3, #683]	; 0x2ab
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2241      	movs	r2, #65	; 0x41
 8005bd4:	f883 22ae 	strb.w	r2, [r3, #686]	; 0x2ae
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	227f      	movs	r2, #127	; 0x7f
 8005bdc:	f883 22af 	strb.w	r2, [r3, #687]	; 0x2af
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	227f      	movs	r2, #127	; 0x7f
 8005be4:	f883 22b0 	strb.w	r2, [r3, #688]	; 0x2b0
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2209      	movs	r2, #9
 8005bec:	f883 22b1 	strb.w	r2, [r3, #689]	; 0x2b1
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2219      	movs	r2, #25
 8005bf4:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	227f      	movs	r2, #127	; 0x7f
 8005bfc:	f883 22b3 	strb.w	r2, [r3, #691]	; 0x2b3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2266      	movs	r2, #102	; 0x66
 8005c04:	f883 22b4 	strb.w	r2, [r3, #692]	; 0x2b4
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2226      	movs	r2, #38	; 0x26
 8005c0c:	f883 22b6 	strb.w	r2, [r3, #694]	; 0x2b6
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	226f      	movs	r2, #111	; 0x6f
 8005c14:	f883 22b7 	strb.w	r2, [r3, #695]	; 0x2b7
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	224d      	movs	r2, #77	; 0x4d
 8005c1c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2259      	movs	r2, #89	; 0x59
 8005c24:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2273      	movs	r2, #115	; 0x73
 8005c2c:	f883 22ba 	strb.w	r2, [r3, #698]	; 0x2ba
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2232      	movs	r2, #50	; 0x32
 8005c34:	f883 22bb 	strb.w	r2, [r3, #699]	; 0x2bb
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2203      	movs	r2, #3
 8005c3c:	f883 22be 	strb.w	r2, [r3, #702]	; 0x2be
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2241      	movs	r2, #65	; 0x41
 8005c44:	f883 22bf 	strb.w	r2, [r3, #703]	; 0x2bf
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	227f      	movs	r2, #127	; 0x7f
 8005c4c:	f883 22c0 	strb.w	r2, [r3, #704]	; 0x2c0
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	227f      	movs	r2, #127	; 0x7f
 8005c54:	f883 22c1 	strb.w	r2, [r3, #705]	; 0x2c1
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2241      	movs	r2, #65	; 0x41
 8005c5c:	f883 22c2 	strb.w	r2, [r3, #706]	; 0x2c2
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2203      	movs	r2, #3
 8005c64:	f883 22c3 	strb.w	r2, [r3, #707]	; 0x2c3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	227f      	movs	r2, #127	; 0x7f
 8005c6c:	f883 22c6 	strb.w	r2, [r3, #710]	; 0x2c6
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	227f      	movs	r2, #127	; 0x7f
 8005c74:	f883 22c7 	strb.w	r2, [r3, #711]	; 0x2c7
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2240      	movs	r2, #64	; 0x40
 8005c7c:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2240      	movs	r2, #64	; 0x40
 8005c84:	f883 22c9 	strb.w	r2, [r3, #713]	; 0x2c9
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	227f      	movs	r2, #127	; 0x7f
 8005c8c:	f883 22ca 	strb.w	r2, [r3, #714]	; 0x2ca
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	227f      	movs	r2, #127	; 0x7f
 8005c94:	f883 22cb 	strb.w	r2, [r3, #715]	; 0x2cb
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	221f      	movs	r2, #31
 8005c9c:	f883 22ce 	strb.w	r2, [r3, #718]	; 0x2ce
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	223f      	movs	r2, #63	; 0x3f
 8005ca4:	f883 22cf 	strb.w	r2, [r3, #719]	; 0x2cf
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2260      	movs	r2, #96	; 0x60
 8005cac:	f883 22d0 	strb.w	r2, [r3, #720]	; 0x2d0
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2260      	movs	r2, #96	; 0x60
 8005cb4:	f883 22d1 	strb.w	r2, [r3, #721]	; 0x2d1
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	223f      	movs	r2, #63	; 0x3f
 8005cbc:	f883 22d2 	strb.w	r2, [r3, #722]	; 0x2d2
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	221f      	movs	r2, #31
 8005cc4:	f883 22d3 	strb.w	r2, [r3, #723]	; 0x2d3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	227f      	movs	r2, #127	; 0x7f
 8005ccc:	f883 22d6 	strb.w	r2, [r3, #726]	; 0x2d6
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	227f      	movs	r2, #127	; 0x7f
 8005cd4:	f883 22d7 	strb.w	r2, [r3, #727]	; 0x2d7
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2230      	movs	r2, #48	; 0x30
 8005cdc:	f883 22d8 	strb.w	r2, [r3, #728]	; 0x2d8
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2218      	movs	r2, #24
 8005ce4:	f883 22d9 	strb.w	r2, [r3, #729]	; 0x2d9
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2230      	movs	r2, #48	; 0x30
 8005cec:	f883 22da 	strb.w	r2, [r3, #730]	; 0x2da
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	227f      	movs	r2, #127	; 0x7f
 8005cf4:	f883 22db 	strb.w	r2, [r3, #731]	; 0x2db
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	227f      	movs	r2, #127	; 0x7f
 8005cfc:	f883 22dc 	strb.w	r2, [r3, #732]	; 0x2dc
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2243      	movs	r2, #67	; 0x43
 8005d04:	f883 22de 	strb.w	r2, [r3, #734]	; 0x2de
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2267      	movs	r2, #103	; 0x67
 8005d0c:	f883 22df 	strb.w	r2, [r3, #735]	; 0x2df
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	223c      	movs	r2, #60	; 0x3c
 8005d14:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2218      	movs	r2, #24
 8005d1c:	f883 22e1 	strb.w	r2, [r3, #737]	; 0x2e1
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	223c      	movs	r2, #60	; 0x3c
 8005d24:	f883 22e2 	strb.w	r2, [r3, #738]	; 0x2e2
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2267      	movs	r2, #103	; 0x67
 8005d2c:	f883 22e3 	strb.w	r2, [r3, #739]	; 0x2e3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2243      	movs	r2, #67	; 0x43
 8005d34:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2207      	movs	r2, #7
 8005d3c:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	224f      	movs	r2, #79	; 0x4f
 8005d44:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2278      	movs	r2, #120	; 0x78
 8005d4c:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2278      	movs	r2, #120	; 0x78
 8005d54:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	224f      	movs	r2, #79	; 0x4f
 8005d5c:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2207      	movs	r2, #7
 8005d64:	f883 22eb 	strb.w	r2, [r3, #747]	; 0x2eb
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2247      	movs	r2, #71	; 0x47
 8005d6c:	f883 22ee 	strb.w	r2, [r3, #750]	; 0x2ee
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2263      	movs	r2, #99	; 0x63
 8005d74:	f883 22ef 	strb.w	r2, [r3, #751]	; 0x2ef
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2271      	movs	r2, #113	; 0x71
 8005d7c:	f883 22f0 	strb.w	r2, [r3, #752]	; 0x2f0
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2259      	movs	r2, #89	; 0x59
 8005d84:	f883 22f1 	strb.w	r2, [r3, #753]	; 0x2f1
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	224d      	movs	r2, #77	; 0x4d
 8005d8c:	f883 22f2 	strb.w	r2, [r3, #754]	; 0x2f2
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2267      	movs	r2, #103	; 0x67
 8005d94:	f883 22f3 	strb.w	r2, [r3, #755]	; 0x2f3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2273      	movs	r2, #115	; 0x73
 8005d9c:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	227f      	movs	r2, #127	; 0x7f
 8005da4:	f883 22f7 	strb.w	r2, [r3, #759]	; 0x2f7
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	227f      	movs	r2, #127	; 0x7f
 8005dac:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2241      	movs	r2, #65	; 0x41
 8005db4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2241      	movs	r2, #65	; 0x41
 8005dbc:	f883 22fa 	strb.w	r2, [r3, #762]	; 0x2fa
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 22fe 	strb.w	r2, [r3, #766]	; 0x2fe
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2203      	movs	r2, #3
 8005dcc:	f883 22ff 	strb.w	r2, [r3, #767]	; 0x2ff
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2206      	movs	r2, #6
 8005dd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	220c      	movs	r2, #12
 8005ddc:	f883 2301 	strb.w	r2, [r3, #769]	; 0x301
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2218      	movs	r2, #24
 8005de4:	f883 2302 	strb.w	r2, [r3, #770]	; 0x302
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2230      	movs	r2, #48	; 0x30
 8005dec:	f883 2303 	strb.w	r2, [r3, #771]	; 0x303
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2260      	movs	r2, #96	; 0x60
 8005df4:	f883 2304 	strb.w	r2, [r3, #772]	; 0x304
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2241      	movs	r2, #65	; 0x41
 8005dfc:	f883 2307 	strb.w	r2, [r3, #775]	; 0x307
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2241      	movs	r2, #65	; 0x41
 8005e04:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	227f      	movs	r2, #127	; 0x7f
 8005e0c:	f883 2309 	strb.w	r2, [r3, #777]	; 0x309
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	227f      	movs	r2, #127	; 0x7f
 8005e14:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2208      	movs	r2, #8
 8005e1c:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	220c      	movs	r2, #12
 8005e24:	f883 230f 	strb.w	r2, [r3, #783]	; 0x30f
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2206      	movs	r2, #6
 8005e2c:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2203      	movs	r2, #3
 8005e34:	f883 2311 	strb.w	r2, [r3, #785]	; 0x311
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2206      	movs	r2, #6
 8005e3c:	f883 2312 	strb.w	r2, [r3, #786]	; 0x312
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	220c      	movs	r2, #12
 8005e44:	f883 2313 	strb.w	r2, [r3, #787]	; 0x313
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2208      	movs	r2, #8
 8005e4c:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2280      	movs	r2, #128	; 0x80
 8005e54:	f883 2316 	strb.w	r2, [r3, #790]	; 0x316
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2280      	movs	r2, #128	; 0x80
 8005e5c:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2280      	movs	r2, #128	; 0x80
 8005e64:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2280      	movs	r2, #128	; 0x80
 8005e6c:	f883 2319 	strb.w	r2, [r3, #793]	; 0x319
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2280      	movs	r2, #128	; 0x80
 8005e74:	f883 231a 	strb.w	r2, [r3, #794]	; 0x31a
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2280      	movs	r2, #128	; 0x80
 8005e7c:	f883 231b 	strb.w	r2, [r3, #795]	; 0x31b
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2280      	movs	r2, #128	; 0x80
 8005e84:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2280      	movs	r2, #128	; 0x80
 8005e8c:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2203      	movs	r2, #3
 8005e94:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2207      	movs	r2, #7
 8005e9c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2204      	movs	r2, #4
 8005ea4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2220      	movs	r2, #32
 8005eac:	f883 2326 	strb.w	r2, [r3, #806]	; 0x326
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2274      	movs	r2, #116	; 0x74
 8005eb4:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2254      	movs	r2, #84	; 0x54
 8005ebc:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2254      	movs	r2, #84	; 0x54
 8005ec4:	f883 2329 	strb.w	r2, [r3, #809]	; 0x329
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	223c      	movs	r2, #60	; 0x3c
 8005ecc:	f883 232a 	strb.w	r2, [r3, #810]	; 0x32a
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2278      	movs	r2, #120	; 0x78
 8005ed4:	f883 232b 	strb.w	r2, [r3, #811]	; 0x32b
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2240      	movs	r2, #64	; 0x40
 8005edc:	f883 232c 	strb.w	r2, [r3, #812]	; 0x32c
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2241      	movs	r2, #65	; 0x41
 8005ee4:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	227f      	movs	r2, #127	; 0x7f
 8005eec:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	223f      	movs	r2, #63	; 0x3f
 8005ef4:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2248      	movs	r2, #72	; 0x48
 8005efc:	f883 2331 	strb.w	r2, [r3, #817]	; 0x331
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2248      	movs	r2, #72	; 0x48
 8005f04:	f883 2332 	strb.w	r2, [r3, #818]	; 0x332
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2278      	movs	r2, #120	; 0x78
 8005f0c:	f883 2333 	strb.w	r2, [r3, #819]	; 0x333
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2230      	movs	r2, #48	; 0x30
 8005f14:	f883 2334 	strb.w	r2, [r3, #820]	; 0x334
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2238      	movs	r2, #56	; 0x38
 8005f1c:	f883 2336 	strb.w	r2, [r3, #822]	; 0x336
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	227c      	movs	r2, #124	; 0x7c
 8005f24:	f883 2337 	strb.w	r2, [r3, #823]	; 0x337
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2244      	movs	r2, #68	; 0x44
 8005f2c:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2244      	movs	r2, #68	; 0x44
 8005f34:	f883 2339 	strb.w	r2, [r3, #825]	; 0x339
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	226c      	movs	r2, #108	; 0x6c
 8005f3c:	f883 233a 	strb.w	r2, [r3, #826]	; 0x33a
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2228      	movs	r2, #40	; 0x28
 8005f44:	f883 233b 	strb.w	r2, [r3, #827]	; 0x33b
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2230      	movs	r2, #48	; 0x30
 8005f4c:	f883 233e 	strb.w	r2, [r3, #830]	; 0x33e
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2278      	movs	r2, #120	; 0x78
 8005f54:	f883 233f 	strb.w	r2, [r3, #831]	; 0x33f
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2248      	movs	r2, #72	; 0x48
 8005f5c:	f883 2340 	strb.w	r2, [r3, #832]	; 0x340
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2249      	movs	r2, #73	; 0x49
 8005f64:	f883 2341 	strb.w	r2, [r3, #833]	; 0x341
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	223f      	movs	r2, #63	; 0x3f
 8005f6c:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	227f      	movs	r2, #127	; 0x7f
 8005f74:	f883 2343 	strb.w	r2, [r3, #835]	; 0x343
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2240      	movs	r2, #64	; 0x40
 8005f7c:	f883 2344 	strb.w	r2, [r3, #836]	; 0x344
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2238      	movs	r2, #56	; 0x38
 8005f84:	f883 2346 	strb.w	r2, [r3, #838]	; 0x346
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	227c      	movs	r2, #124	; 0x7c
 8005f8c:	f883 2347 	strb.w	r2, [r3, #839]	; 0x347
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2254      	movs	r2, #84	; 0x54
 8005f94:	f883 2348 	strb.w	r2, [r3, #840]	; 0x348
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2254      	movs	r2, #84	; 0x54
 8005f9c:	f883 2349 	strb.w	r2, [r3, #841]	; 0x349
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	225c      	movs	r2, #92	; 0x5c
 8005fa4:	f883 234a 	strb.w	r2, [r3, #842]	; 0x34a
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2218      	movs	r2, #24
 8005fac:	f883 234b 	strb.w	r2, [r3, #843]	; 0x34b
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2248      	movs	r2, #72	; 0x48
 8005fb4:	f883 234e 	strb.w	r2, [r3, #846]	; 0x34e
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	227e      	movs	r2, #126	; 0x7e
 8005fbc:	f883 234f 	strb.w	r2, [r3, #847]	; 0x34f
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	227f      	movs	r2, #127	; 0x7f
 8005fc4:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2249      	movs	r2, #73	; 0x49
 8005fcc:	f883 2351 	strb.w	r2, [r3, #849]	; 0x351
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2203      	movs	r2, #3
 8005fd4:	f883 2352 	strb.w	r2, [r3, #850]	; 0x352
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2202      	movs	r2, #2
 8005fdc:	f883 2353 	strb.w	r2, [r3, #851]	; 0x353
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2298      	movs	r2, #152	; 0x98
 8005fe4:	f883 2356 	strb.w	r2, [r3, #854]	; 0x356
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	22bc      	movs	r2, #188	; 0xbc
 8005fec:	f883 2357 	strb.w	r2, [r3, #855]	; 0x357
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	22a4      	movs	r2, #164	; 0xa4
 8005ff4:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	22a4      	movs	r2, #164	; 0xa4
 8005ffc:	f883 2359 	strb.w	r2, [r3, #857]	; 0x359
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	22f8      	movs	r2, #248	; 0xf8
 8006004:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	227c      	movs	r2, #124	; 0x7c
 800600c:	f883 235b 	strb.w	r2, [r3, #859]	; 0x35b
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2204      	movs	r2, #4
 8006014:	f883 235c 	strb.w	r2, [r3, #860]	; 0x35c
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2241      	movs	r2, #65	; 0x41
 800601c:	f883 235e 	strb.w	r2, [r3, #862]	; 0x35e
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	227f      	movs	r2, #127	; 0x7f
 8006024:	f883 235f 	strb.w	r2, [r3, #863]	; 0x35f
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	227f      	movs	r2, #127	; 0x7f
 800602c:	f883 2360 	strb.w	r2, [r3, #864]	; 0x360
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2208      	movs	r2, #8
 8006034:	f883 2361 	strb.w	r2, [r3, #865]	; 0x361
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2204      	movs	r2, #4
 800603c:	f883 2362 	strb.w	r2, [r3, #866]	; 0x362
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	227c      	movs	r2, #124	; 0x7c
 8006044:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2278      	movs	r2, #120	; 0x78
 800604c:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2244      	movs	r2, #68	; 0x44
 8006054:	f883 2367 	strb.w	r2, [r3, #871]	; 0x367
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	227d      	movs	r2, #125	; 0x7d
 800605c:	f883 2368 	strb.w	r2, [r3, #872]	; 0x368
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	227d      	movs	r2, #125	; 0x7d
 8006064:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2240      	movs	r2, #64	; 0x40
 800606c:	f883 236a 	strb.w	r2, [r3, #874]	; 0x36a
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2260      	movs	r2, #96	; 0x60
 8006074:	f883 236e 	strb.w	r2, [r3, #878]	; 0x36e
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	22e0      	movs	r2, #224	; 0xe0
 800607c:	f883 236f 	strb.w	r2, [r3, #879]	; 0x36f
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2280      	movs	r2, #128	; 0x80
 8006084:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2280      	movs	r2, #128	; 0x80
 800608c:	f883 2371 	strb.w	r2, [r3, #881]	; 0x371
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	22fd      	movs	r2, #253	; 0xfd
 8006094:	f883 2372 	strb.w	r2, [r3, #882]	; 0x372
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	227d      	movs	r2, #125	; 0x7d
 800609c:	f883 2373 	strb.w	r2, [r3, #883]	; 0x373
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2241      	movs	r2, #65	; 0x41
 80060a4:	f883 2376 	strb.w	r2, [r3, #886]	; 0x376
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	227f      	movs	r2, #127	; 0x7f
 80060ac:	f883 2377 	strb.w	r2, [r3, #887]	; 0x377
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	227f      	movs	r2, #127	; 0x7f
 80060b4:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2210      	movs	r2, #16
 80060bc:	f883 2379 	strb.w	r2, [r3, #889]	; 0x379
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2238      	movs	r2, #56	; 0x38
 80060c4:	f883 237a 	strb.w	r2, [r3, #890]	; 0x37a
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	226c      	movs	r2, #108	; 0x6c
 80060cc:	f883 237b 	strb.w	r2, [r3, #891]	; 0x37b
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2244      	movs	r2, #68	; 0x44
 80060d4:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2241      	movs	r2, #65	; 0x41
 80060dc:	f883 237f 	strb.w	r2, [r3, #895]	; 0x37f
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	227f      	movs	r2, #127	; 0x7f
 80060e4:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	227f      	movs	r2, #127	; 0x7f
 80060ec:	f883 2381 	strb.w	r2, [r3, #897]	; 0x381
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2240      	movs	r2, #64	; 0x40
 80060f4:	f883 2382 	strb.w	r2, [r3, #898]	; 0x382
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	227c      	movs	r2, #124	; 0x7c
 80060fc:	f883 2386 	strb.w	r2, [r3, #902]	; 0x386
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	227c      	movs	r2, #124	; 0x7c
 8006104:	f883 2387 	strb.w	r2, [r3, #903]	; 0x387
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2218      	movs	r2, #24
 800610c:	f883 2388 	strb.w	r2, [r3, #904]	; 0x388
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2238      	movs	r2, #56	; 0x38
 8006114:	f883 2389 	strb.w	r2, [r3, #905]	; 0x389
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	221c      	movs	r2, #28
 800611c:	f883 238a 	strb.w	r2, [r3, #906]	; 0x38a
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	227c      	movs	r2, #124	; 0x7c
 8006124:	f883 238b 	strb.w	r2, [r3, #907]	; 0x38b
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2278      	movs	r2, #120	; 0x78
 800612c:	f883 238c 	strb.w	r2, [r3, #908]	; 0x38c
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	227c      	movs	r2, #124	; 0x7c
 8006134:	f883 238e 	strb.w	r2, [r3, #910]	; 0x38e
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	227c      	movs	r2, #124	; 0x7c
 800613c:	f883 238f 	strb.w	r2, [r3, #911]	; 0x38f
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2204      	movs	r2, #4
 8006144:	f883 2390 	strb.w	r2, [r3, #912]	; 0x390
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2204      	movs	r2, #4
 800614c:	f883 2391 	strb.w	r2, [r3, #913]	; 0x391
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	227c      	movs	r2, #124	; 0x7c
 8006154:	f883 2392 	strb.w	r2, [r3, #914]	; 0x392
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2278      	movs	r2, #120	; 0x78
 800615c:	f883 2393 	strb.w	r2, [r3, #915]	; 0x393
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2238      	movs	r2, #56	; 0x38
 8006164:	f883 2396 	strb.w	r2, [r3, #918]	; 0x396
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	227c      	movs	r2, #124	; 0x7c
 800616c:	f883 2397 	strb.w	r2, [r3, #919]	; 0x397
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2244      	movs	r2, #68	; 0x44
 8006174:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2244      	movs	r2, #68	; 0x44
 800617c:	f883 2399 	strb.w	r2, [r3, #921]	; 0x399
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	227c      	movs	r2, #124	; 0x7c
 8006184:	f883 239a 	strb.w	r2, [r3, #922]	; 0x39a
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2238      	movs	r2, #56	; 0x38
 800618c:	f883 239b 	strb.w	r2, [r3, #923]	; 0x39b
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2284      	movs	r2, #132	; 0x84
 8006194:	f883 239e 	strb.w	r2, [r3, #926]	; 0x39e
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	22fc      	movs	r2, #252	; 0xfc
 800619c:	f883 239f 	strb.w	r2, [r3, #927]	; 0x39f
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	22f8      	movs	r2, #248	; 0xf8
 80061a4:	f883 23a0 	strb.w	r2, [r3, #928]	; 0x3a0
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	22a4      	movs	r2, #164	; 0xa4
 80061ac:	f883 23a1 	strb.w	r2, [r3, #929]	; 0x3a1
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2224      	movs	r2, #36	; 0x24
 80061b4:	f883 23a2 	strb.w	r2, [r3, #930]	; 0x3a2
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	223c      	movs	r2, #60	; 0x3c
 80061bc:	f883 23a3 	strb.w	r2, [r3, #931]	; 0x3a3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2218      	movs	r2, #24
 80061c4:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2218      	movs	r2, #24
 80061cc:	f883 23a6 	strb.w	r2, [r3, #934]	; 0x3a6
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	223c      	movs	r2, #60	; 0x3c
 80061d4:	f883 23a7 	strb.w	r2, [r3, #935]	; 0x3a7
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2224      	movs	r2, #36	; 0x24
 80061dc:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	22a4      	movs	r2, #164	; 0xa4
 80061e4:	f883 23a9 	strb.w	r2, [r3, #937]	; 0x3a9
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	22f8      	movs	r2, #248	; 0xf8
 80061ec:	f883 23aa 	strb.w	r2, [r3, #938]	; 0x3aa
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	22fc      	movs	r2, #252	; 0xfc
 80061f4:	f883 23ab 	strb.w	r2, [r3, #939]	; 0x3ab
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2284      	movs	r2, #132	; 0x84
 80061fc:	f883 23ac 	strb.w	r2, [r3, #940]	; 0x3ac
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2244      	movs	r2, #68	; 0x44
 8006204:	f883 23ae 	strb.w	r2, [r3, #942]	; 0x3ae
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	227c      	movs	r2, #124	; 0x7c
 800620c:	f883 23af 	strb.w	r2, [r3, #943]	; 0x3af
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2278      	movs	r2, #120	; 0x78
 8006214:	f883 23b0 	strb.w	r2, [r3, #944]	; 0x3b0
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	224c      	movs	r2, #76	; 0x4c
 800621c:	f883 23b1 	strb.w	r2, [r3, #945]	; 0x3b1
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2204      	movs	r2, #4
 8006224:	f883 23b2 	strb.w	r2, [r3, #946]	; 0x3b2
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	221c      	movs	r2, #28
 800622c:	f883 23b3 	strb.w	r2, [r3, #947]	; 0x3b3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2218      	movs	r2, #24
 8006234:	f883 23b4 	strb.w	r2, [r3, #948]	; 0x3b4
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2248      	movs	r2, #72	; 0x48
 800623c:	f883 23b6 	strb.w	r2, [r3, #950]	; 0x3b6
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	225c      	movs	r2, #92	; 0x5c
 8006244:	f883 23b7 	strb.w	r2, [r3, #951]	; 0x3b7
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2254      	movs	r2, #84	; 0x54
 800624c:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2254      	movs	r2, #84	; 0x54
 8006254:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2274      	movs	r2, #116	; 0x74
 800625c:	f883 23ba 	strb.w	r2, [r3, #954]	; 0x3ba
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2224      	movs	r2, #36	; 0x24
 8006264:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2204      	movs	r2, #4
 800626c:	f883 23bf 	strb.w	r2, [r3, #959]	; 0x3bf
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	223e      	movs	r2, #62	; 0x3e
 8006274:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	227f      	movs	r2, #127	; 0x7f
 800627c:	f883 23c1 	strb.w	r2, [r3, #961]	; 0x3c1
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2244      	movs	r2, #68	; 0x44
 8006284:	f883 23c2 	strb.w	r2, [r3, #962]	; 0x3c2
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2224      	movs	r2, #36	; 0x24
 800628c:	f883 23c3 	strb.w	r2, [r3, #963]	; 0x3c3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	223c      	movs	r2, #60	; 0x3c
 8006294:	f883 23c6 	strb.w	r2, [r3, #966]	; 0x3c6
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	227c      	movs	r2, #124	; 0x7c
 800629c:	f883 23c7 	strb.w	r2, [r3, #967]	; 0x3c7
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2240      	movs	r2, #64	; 0x40
 80062a4:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2240      	movs	r2, #64	; 0x40
 80062ac:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	223c      	movs	r2, #60	; 0x3c
 80062b4:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	227c      	movs	r2, #124	; 0x7c
 80062bc:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2240      	movs	r2, #64	; 0x40
 80062c4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	221c      	movs	r2, #28
 80062cc:	f883 23ce 	strb.w	r2, [r3, #974]	; 0x3ce
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	223c      	movs	r2, #60	; 0x3c
 80062d4:	f883 23cf 	strb.w	r2, [r3, #975]	; 0x3cf
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2260      	movs	r2, #96	; 0x60
 80062dc:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2260      	movs	r2, #96	; 0x60
 80062e4:	f883 23d1 	strb.w	r2, [r3, #977]	; 0x3d1
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	223c      	movs	r2, #60	; 0x3c
 80062ec:	f883 23d2 	strb.w	r2, [r3, #978]	; 0x3d2
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	221c      	movs	r2, #28
 80062f4:	f883 23d3 	strb.w	r2, [r3, #979]	; 0x3d3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	223c      	movs	r2, #60	; 0x3c
 80062fc:	f883 23d6 	strb.w	r2, [r3, #982]	; 0x3d6
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	227c      	movs	r2, #124	; 0x7c
 8006304:	f883 23d7 	strb.w	r2, [r3, #983]	; 0x3d7
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2270      	movs	r2, #112	; 0x70
 800630c:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2238      	movs	r2, #56	; 0x38
 8006314:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2270      	movs	r2, #112	; 0x70
 800631c:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	227c      	movs	r2, #124	; 0x7c
 8006324:	f883 23db 	strb.w	r2, [r3, #987]	; 0x3db
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	223c      	movs	r2, #60	; 0x3c
 800632c:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2244      	movs	r2, #68	; 0x44
 8006334:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	226c      	movs	r2, #108	; 0x6c
 800633c:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2238      	movs	r2, #56	; 0x38
 8006344:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2210      	movs	r2, #16
 800634c:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2238      	movs	r2, #56	; 0x38
 8006354:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	226c      	movs	r2, #108	; 0x6c
 800635c:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2244      	movs	r2, #68	; 0x44
 8006364:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	229c      	movs	r2, #156	; 0x9c
 800636c:	f883 23e6 	strb.w	r2, [r3, #998]	; 0x3e6
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	22bc      	movs	r2, #188	; 0xbc
 8006374:	f883 23e7 	strb.w	r2, [r3, #999]	; 0x3e7
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	22a0      	movs	r2, #160	; 0xa0
 800637c:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	22a0      	movs	r2, #160	; 0xa0
 8006384:	f883 23e9 	strb.w	r2, [r3, #1001]	; 0x3e9
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	22fc      	movs	r2, #252	; 0xfc
 800638c:	f883 23ea 	strb.w	r2, [r3, #1002]	; 0x3ea
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	227c      	movs	r2, #124	; 0x7c
 8006394:	f883 23eb 	strb.w	r2, [r3, #1003]	; 0x3eb
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	224c      	movs	r2, #76	; 0x4c
 800639c:	f883 23ee 	strb.w	r2, [r3, #1006]	; 0x3ee
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2264      	movs	r2, #100	; 0x64
 80063a4:	f883 23ef 	strb.w	r2, [r3, #1007]	; 0x3ef
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2274      	movs	r2, #116	; 0x74
 80063ac:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	225c      	movs	r2, #92	; 0x5c
 80063b4:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	224c      	movs	r2, #76	; 0x4c
 80063bc:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2264      	movs	r2, #100	; 0x64
 80063c4:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2208      	movs	r2, #8
 80063cc:	f883 23f6 	strb.w	r2, [r3, #1014]	; 0x3f6
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2208      	movs	r2, #8
 80063d4:	f883 23f7 	strb.w	r2, [r3, #1015]	; 0x3f7
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	223e      	movs	r2, #62	; 0x3e
 80063dc:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2277      	movs	r2, #119	; 0x77
 80063e4:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2241      	movs	r2, #65	; 0x41
 80063ec:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2241      	movs	r2, #65	; 0x41
 80063f4:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2277      	movs	r2, #119	; 0x77
 80063fc:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2277      	movs	r2, #119	; 0x77
 8006404:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2241      	movs	r2, #65	; 0x41
 800640c:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2241      	movs	r2, #65	; 0x41
 8006414:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2277      	movs	r2, #119	; 0x77
 800641c:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	223e      	movs	r2, #62	; 0x3e
 8006424:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2208      	movs	r2, #8
 800642c:	f883 240a 	strb.w	r2, [r3, #1034]	; 0x40a
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2208      	movs	r2, #8
 8006434:	f883 240b 	strb.w	r2, [r3, #1035]	; 0x40b
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2202      	movs	r2, #2
 800643c:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2203      	movs	r2, #3
 8006444:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2203      	movs	r2, #3
 8006454:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2202      	movs	r2, #2
 800645c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2203      	movs	r2, #3
 8006464:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2270      	movs	r2, #112	; 0x70
 8006474:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2278      	movs	r2, #120	; 0x78
 800647c:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	224c      	movs	r2, #76	; 0x4c
 8006484:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2246      	movs	r2, #70	; 0x46
 800648c:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	224c      	movs	r2, #76	; 0x4c
 8006494:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2278      	movs	r2, #120	; 0x78
 800649c:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2270      	movs	r2, #112	; 0x70
 80064a4:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	220e      	movs	r2, #14
 80064ac:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	229f      	movs	r2, #159	; 0x9f
 80064b4:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2291      	movs	r2, #145	; 0x91
 80064bc:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	22b1      	movs	r2, #177	; 0xb1
 80064c4:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	22fb      	movs	r2, #251	; 0xfb
 80064cc:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	224a      	movs	r2, #74	; 0x4a
 80064d4:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	223a      	movs	r2, #58	; 0x3a
 80064dc:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	227a      	movs	r2, #122	; 0x7a
 80064e4:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2240      	movs	r2, #64	; 0x40
 80064ec:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2240      	movs	r2, #64	; 0x40
 80064f4:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	227a      	movs	r2, #122	; 0x7a
 80064fc:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	227a      	movs	r2, #122	; 0x7a
 8006504:	f883 242b 	strb.w	r2, [r3, #1067]	; 0x42b
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2240      	movs	r2, #64	; 0x40
 800650c:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2238      	movs	r2, #56	; 0x38
 8006514:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	227c      	movs	r2, #124	; 0x7c
 800651c:	f883 242f 	strb.w	r2, [r3, #1071]	; 0x42f
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2254      	movs	r2, #84	; 0x54
 8006524:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2255      	movs	r2, #85	; 0x55
 800652c:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	225d      	movs	r2, #93	; 0x5d
 8006534:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2219      	movs	r2, #25
 800653c:	f883 2433 	strb.w	r2, [r3, #1075]	; 0x433
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2202      	movs	r2, #2
 8006544:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2223      	movs	r2, #35	; 0x23
 800654c:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2275      	movs	r2, #117	; 0x75
 8006554:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2255      	movs	r2, #85	; 0x55
 800655c:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2255      	movs	r2, #85	; 0x55
 8006564:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	227d      	movs	r2, #125	; 0x7d
 800656c:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	227b      	movs	r2, #123	; 0x7b
 8006574:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2242      	movs	r2, #66	; 0x42
 800657c:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2221      	movs	r2, #33	; 0x21
 8006584:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2275      	movs	r2, #117	; 0x75
 800658c:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2254      	movs	r2, #84	; 0x54
 8006594:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2254      	movs	r2, #84	; 0x54
 800659c:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	227d      	movs	r2, #125	; 0x7d
 80065a4:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2279      	movs	r2, #121	; 0x79
 80065ac:	f883 2443 	strb.w	r2, [r3, #1091]	; 0x443
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2240      	movs	r2, #64	; 0x40
 80065b4:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2221      	movs	r2, #33	; 0x21
 80065bc:	f883 2446 	strb.w	r2, [r3, #1094]	; 0x446
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2275      	movs	r2, #117	; 0x75
 80065c4:	f883 2447 	strb.w	r2, [r3, #1095]	; 0x447
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2255      	movs	r2, #85	; 0x55
 80065cc:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2254      	movs	r2, #84	; 0x54
 80065d4:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	227c      	movs	r2, #124	; 0x7c
 80065dc:	f883 244a 	strb.w	r2, [r3, #1098]	; 0x44a
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2278      	movs	r2, #120	; 0x78
 80065e4:	f883 244b 	strb.w	r2, [r3, #1099]	; 0x44b
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2240      	movs	r2, #64	; 0x40
 80065ec:	f883 244c 	strb.w	r2, [r3, #1100]	; 0x44c
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2220      	movs	r2, #32
 80065f4:	f883 244e 	strb.w	r2, [r3, #1102]	; 0x44e
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2274      	movs	r2, #116	; 0x74
 80065fc:	f883 244f 	strb.w	r2, [r3, #1103]	; 0x44f
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2257      	movs	r2, #87	; 0x57
 8006604:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2257      	movs	r2, #87	; 0x57
 800660c:	f883 2451 	strb.w	r2, [r3, #1105]	; 0x451
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	227c      	movs	r2, #124	; 0x7c
 8006614:	f883 2452 	strb.w	r2, [r3, #1106]	; 0x452
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2278      	movs	r2, #120	; 0x78
 800661c:	f883 2453 	strb.w	r2, [r3, #1107]	; 0x453
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2240      	movs	r2, #64	; 0x40
 8006624:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2218      	movs	r2, #24
 800662c:	f883 2456 	strb.w	r2, [r3, #1110]	; 0x456
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	223c      	movs	r2, #60	; 0x3c
 8006634:	f883 2457 	strb.w	r2, [r3, #1111]	; 0x457
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	22a4      	movs	r2, #164	; 0xa4
 800663c:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	22a4      	movs	r2, #164	; 0xa4
 8006644:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	22e4      	movs	r2, #228	; 0xe4
 800664c:	f883 245a 	strb.w	r2, [r3, #1114]	; 0x45a
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2240      	movs	r2, #64	; 0x40
 8006654:	f883 245b 	strb.w	r2, [r3, #1115]	; 0x45b
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2202      	movs	r2, #2
 800665c:	f883 245e 	strb.w	r2, [r3, #1118]	; 0x45e
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	223b      	movs	r2, #59	; 0x3b
 8006664:	f883 245f 	strb.w	r2, [r3, #1119]	; 0x45f
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	227d      	movs	r2, #125	; 0x7d
 800666c:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2255      	movs	r2, #85	; 0x55
 8006674:	f883 2461 	strb.w	r2, [r3, #1121]	; 0x461
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2255      	movs	r2, #85	; 0x55
 800667c:	f883 2462 	strb.w	r2, [r3, #1122]	; 0x462
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	225d      	movs	r2, #93	; 0x5d
 8006684:	f883 2463 	strb.w	r2, [r3, #1123]	; 0x463
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	221b      	movs	r2, #27
 800668c:	f883 2464 	strb.w	r2, [r3, #1124]	; 0x464
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2202      	movs	r2, #2
 8006694:	f883 2465 	strb.w	r2, [r3, #1125]	; 0x465
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2239      	movs	r2, #57	; 0x39
 800669c:	f883 2466 	strb.w	r2, [r3, #1126]	; 0x466
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	227d      	movs	r2, #125	; 0x7d
 80066a4:	f883 2467 	strb.w	r2, [r3, #1127]	; 0x467
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2254      	movs	r2, #84	; 0x54
 80066ac:	f883 2468 	strb.w	r2, [r3, #1128]	; 0x468
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2254      	movs	r2, #84	; 0x54
 80066b4:	f883 2469 	strb.w	r2, [r3, #1129]	; 0x469
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	225d      	movs	r2, #93	; 0x5d
 80066bc:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2219      	movs	r2, #25
 80066c4:	f883 246b 	strb.w	r2, [r3, #1131]	; 0x46b
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2239      	movs	r2, #57	; 0x39
 80066cc:	f883 246e 	strb.w	r2, [r3, #1134]	; 0x46e
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	227d      	movs	r2, #125	; 0x7d
 80066d4:	f883 246f 	strb.w	r2, [r3, #1135]	; 0x46f
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2255      	movs	r2, #85	; 0x55
 80066dc:	f883 2470 	strb.w	r2, [r3, #1136]	; 0x470
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2254      	movs	r2, #84	; 0x54
 80066e4:	f883 2471 	strb.w	r2, [r3, #1137]	; 0x471
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	225c      	movs	r2, #92	; 0x5c
 80066ec:	f883 2472 	strb.w	r2, [r3, #1138]	; 0x472
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2218      	movs	r2, #24
 80066f4:	f883 2473 	strb.w	r2, [r3, #1139]	; 0x473
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 2476 	strb.w	r2, [r3, #1142]	; 0x476
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2245      	movs	r2, #69	; 0x45
 8006704:	f883 2477 	strb.w	r2, [r3, #1143]	; 0x477
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	227c      	movs	r2, #124	; 0x7c
 800670c:	f883 2478 	strb.w	r2, [r3, #1144]	; 0x478
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	227c      	movs	r2, #124	; 0x7c
 8006714:	f883 2479 	strb.w	r2, [r3, #1145]	; 0x479
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2241      	movs	r2, #65	; 0x41
 800671c:	f883 247a 	strb.w	r2, [r3, #1146]	; 0x47a
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 247b 	strb.w	r2, [r3, #1147]	; 0x47b
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2202      	movs	r2, #2
 800672c:	f883 247e 	strb.w	r2, [r3, #1150]	; 0x47e
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2203      	movs	r2, #3
 8006734:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2245      	movs	r2, #69	; 0x45
 800673c:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	227d      	movs	r2, #125	; 0x7d
 8006744:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	227d      	movs	r2, #125	; 0x7d
 800674c:	f883 2482 	strb.w	r2, [r3, #1154]	; 0x482
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2243      	movs	r2, #67	; 0x43
 8006754:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2202      	movs	r2, #2
 800675c:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 2486 	strb.w	r2, [r3, #1158]	; 0x486
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2245      	movs	r2, #69	; 0x45
 800676c:	f883 2487 	strb.w	r2, [r3, #1159]	; 0x487
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	227d      	movs	r2, #125	; 0x7d
 8006774:	f883 2488 	strb.w	r2, [r3, #1160]	; 0x488
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	227c      	movs	r2, #124	; 0x7c
 800677c:	f883 2489 	strb.w	r2, [r3, #1161]	; 0x489
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2240      	movs	r2, #64	; 0x40
 8006784:	f883 248a 	strb.w	r2, [r3, #1162]	; 0x48a
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2279      	movs	r2, #121	; 0x79
 800678c:	f883 248e 	strb.w	r2, [r3, #1166]	; 0x48e
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	227d      	movs	r2, #125	; 0x7d
 8006794:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2216      	movs	r2, #22
 800679c:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2212      	movs	r2, #18
 80067a4:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2216      	movs	r2, #22
 80067ac:	f883 2492 	strb.w	r2, [r3, #1170]	; 0x492
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	227d      	movs	r2, #125	; 0x7d
 80067b4:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2279      	movs	r2, #121	; 0x79
 80067bc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2270      	movs	r2, #112	; 0x70
 80067c4:	f883 2496 	strb.w	r2, [r3, #1174]	; 0x496
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2278      	movs	r2, #120	; 0x78
 80067cc:	f883 2497 	strb.w	r2, [r3, #1175]	; 0x497
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	222b      	movs	r2, #43	; 0x2b
 80067d4:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	222b      	movs	r2, #43	; 0x2b
 80067dc:	f883 2499 	strb.w	r2, [r3, #1177]	; 0x499
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2278      	movs	r2, #120	; 0x78
 80067e4:	f883 249a 	strb.w	r2, [r3, #1178]	; 0x49a
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2270      	movs	r2, #112	; 0x70
 80067ec:	f883 249b 	strb.w	r2, [r3, #1179]	; 0x49b
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2244      	movs	r2, #68	; 0x44
 80067f4:	f883 249e 	strb.w	r2, [r3, #1182]	; 0x49e
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	227c      	movs	r2, #124	; 0x7c
 80067fc:	f883 249f 	strb.w	r2, [r3, #1183]	; 0x49f
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	227c      	movs	r2, #124	; 0x7c
 8006804:	f883 24a0 	strb.w	r2, [r3, #1184]	; 0x4a0
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2255      	movs	r2, #85	; 0x55
 800680c:	f883 24a1 	strb.w	r2, [r3, #1185]	; 0x4a1
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2255      	movs	r2, #85	; 0x55
 8006814:	f883 24a2 	strb.w	r2, [r3, #1186]	; 0x4a2
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2245      	movs	r2, #69	; 0x45
 800681c:	f883 24a3 	strb.w	r2, [r3, #1187]	; 0x4a3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2220      	movs	r2, #32
 8006824:	f883 24a6 	strb.w	r2, [r3, #1190]	; 0x4a6
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2274      	movs	r2, #116	; 0x74
 800682c:	f883 24a7 	strb.w	r2, [r3, #1191]	; 0x4a7
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2254      	movs	r2, #84	; 0x54
 8006834:	f883 24a8 	strb.w	r2, [r3, #1192]	; 0x4a8
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2254      	movs	r2, #84	; 0x54
 800683c:	f883 24a9 	strb.w	r2, [r3, #1193]	; 0x4a9
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	227c      	movs	r2, #124	; 0x7c
 8006844:	f883 24aa 	strb.w	r2, [r3, #1194]	; 0x4aa
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	227c      	movs	r2, #124	; 0x7c
 800684c:	f883 24ab 	strb.w	r2, [r3, #1195]	; 0x4ab
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2254      	movs	r2, #84	; 0x54
 8006854:	f883 24ac 	strb.w	r2, [r3, #1196]	; 0x4ac
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2254      	movs	r2, #84	; 0x54
 800685c:	f883 24ad 	strb.w	r2, [r3, #1197]	; 0x4ad
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	227c      	movs	r2, #124	; 0x7c
 8006864:	f883 24ae 	strb.w	r2, [r3, #1198]	; 0x4ae
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	227e      	movs	r2, #126	; 0x7e
 800686c:	f883 24af 	strb.w	r2, [r3, #1199]	; 0x4af
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	220b      	movs	r2, #11
 8006874:	f883 24b0 	strb.w	r2, [r3, #1200]	; 0x4b0
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2209      	movs	r2, #9
 800687c:	f883 24b1 	strb.w	r2, [r3, #1201]	; 0x4b1
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	227f      	movs	r2, #127	; 0x7f
 8006884:	f883 24b2 	strb.w	r2, [r3, #1202]	; 0x4b2
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	227f      	movs	r2, #127	; 0x7f
 800688c:	f883 24b3 	strb.w	r2, [r3, #1203]	; 0x4b3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2249      	movs	r2, #73	; 0x49
 8006894:	f883 24b4 	strb.w	r2, [r3, #1204]	; 0x4b4
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2232      	movs	r2, #50	; 0x32
 800689c:	f883 24b6 	strb.w	r2, [r3, #1206]	; 0x4b6
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	227b      	movs	r2, #123	; 0x7b
 80068a4:	f883 24b7 	strb.w	r2, [r3, #1207]	; 0x4b7
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2249      	movs	r2, #73	; 0x49
 80068ac:	f883 24b8 	strb.w	r2, [r3, #1208]	; 0x4b8
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2249      	movs	r2, #73	; 0x49
 80068b4:	f883 24b9 	strb.w	r2, [r3, #1209]	; 0x4b9
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	227b      	movs	r2, #123	; 0x7b
 80068bc:	f883 24ba 	strb.w	r2, [r3, #1210]	; 0x4ba
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2232      	movs	r2, #50	; 0x32
 80068c4:	f883 24bb 	strb.w	r2, [r3, #1211]	; 0x4bb
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2232      	movs	r2, #50	; 0x32
 80068cc:	f883 24be 	strb.w	r2, [r3, #1214]	; 0x4be
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	227a      	movs	r2, #122	; 0x7a
 80068d4:	f883 24bf 	strb.w	r2, [r3, #1215]	; 0x4bf
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2248      	movs	r2, #72	; 0x48
 80068dc:	f883 24c0 	strb.w	r2, [r3, #1216]	; 0x4c0
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2248      	movs	r2, #72	; 0x48
 80068e4:	f883 24c1 	strb.w	r2, [r3, #1217]	; 0x4c1
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	227a      	movs	r2, #122	; 0x7a
 80068ec:	f883 24c2 	strb.w	r2, [r3, #1218]	; 0x4c2
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2232      	movs	r2, #50	; 0x32
 80068f4:	f883 24c3 	strb.w	r2, [r3, #1219]	; 0x4c3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2232      	movs	r2, #50	; 0x32
 80068fc:	f883 24c6 	strb.w	r2, [r3, #1222]	; 0x4c6
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	227a      	movs	r2, #122	; 0x7a
 8006904:	f883 24c7 	strb.w	r2, [r3, #1223]	; 0x4c7
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	224a      	movs	r2, #74	; 0x4a
 800690c:	f883 24c8 	strb.w	r2, [r3, #1224]	; 0x4c8
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2248      	movs	r2, #72	; 0x48
 8006914:	f883 24c9 	strb.w	r2, [r3, #1225]	; 0x4c9
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2278      	movs	r2, #120	; 0x78
 800691c:	f883 24ca 	strb.w	r2, [r3, #1226]	; 0x4ca
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2230      	movs	r2, #48	; 0x30
 8006924:	f883 24cb 	strb.w	r2, [r3, #1227]	; 0x4cb
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	223a      	movs	r2, #58	; 0x3a
 800692c:	f883 24ce 	strb.w	r2, [r3, #1230]	; 0x4ce
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	227b      	movs	r2, #123	; 0x7b
 8006934:	f883 24cf 	strb.w	r2, [r3, #1231]	; 0x4cf
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2241      	movs	r2, #65	; 0x41
 800693c:	f883 24d0 	strb.w	r2, [r3, #1232]	; 0x4d0
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2241      	movs	r2, #65	; 0x41
 8006944:	f883 24d1 	strb.w	r2, [r3, #1233]	; 0x4d1
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	227b      	movs	r2, #123	; 0x7b
 800694c:	f883 24d2 	strb.w	r2, [r3, #1234]	; 0x4d2
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	227a      	movs	r2, #122	; 0x7a
 8006954:	f883 24d3 	strb.w	r2, [r3, #1235]	; 0x4d3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2240      	movs	r2, #64	; 0x40
 800695c:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	223a      	movs	r2, #58	; 0x3a
 8006964:	f883 24d6 	strb.w	r2, [r3, #1238]	; 0x4d6
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	227a      	movs	r2, #122	; 0x7a
 800696c:	f883 24d7 	strb.w	r2, [r3, #1239]	; 0x4d7
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2242      	movs	r2, #66	; 0x42
 8006974:	f883 24d8 	strb.w	r2, [r3, #1240]	; 0x4d8
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2240      	movs	r2, #64	; 0x40
 800697c:	f883 24d9 	strb.w	r2, [r3, #1241]	; 0x4d9
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2278      	movs	r2, #120	; 0x78
 8006984:	f883 24da 	strb.w	r2, [r3, #1242]	; 0x4da
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2278      	movs	r2, #120	; 0x78
 800698c:	f883 24db 	strb.w	r2, [r3, #1243]	; 0x4db
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2240      	movs	r2, #64	; 0x40
 8006994:	f883 24dc 	strb.w	r2, [r3, #1244]	; 0x4dc
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	229a      	movs	r2, #154	; 0x9a
 800699c:	f883 24de 	strb.w	r2, [r3, #1246]	; 0x4de
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	22ba      	movs	r2, #186	; 0xba
 80069a4:	f883 24df 	strb.w	r2, [r3, #1247]	; 0x4df
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	22a0      	movs	r2, #160	; 0xa0
 80069ac:	f883 24e0 	strb.w	r2, [r3, #1248]	; 0x4e0
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	22a0      	movs	r2, #160	; 0xa0
 80069b4:	f883 24e1 	strb.w	r2, [r3, #1249]	; 0x4e1
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	22fa      	movs	r2, #250	; 0xfa
 80069bc:	f883 24e2 	strb.w	r2, [r3, #1250]	; 0x4e2
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	227a      	movs	r2, #122	; 0x7a
 80069c4:	f883 24e3 	strb.w	r2, [r3, #1251]	; 0x4e3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 24e6 	strb.w	r2, [r3, #1254]	; 0x4e6
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2219      	movs	r2, #25
 80069d4:	f883 24e7 	strb.w	r2, [r3, #1255]	; 0x4e7
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	223c      	movs	r2, #60	; 0x3c
 80069dc:	f883 24e8 	strb.w	r2, [r3, #1256]	; 0x4e8
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2266      	movs	r2, #102	; 0x66
 80069e4:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2266      	movs	r2, #102	; 0x66
 80069ec:	f883 24ea 	strb.w	r2, [r3, #1258]	; 0x4ea
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	223c      	movs	r2, #60	; 0x3c
 80069f4:	f883 24eb 	strb.w	r2, [r3, #1259]	; 0x4eb
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2219      	movs	r2, #25
 80069fc:	f883 24ec 	strb.w	r2, [r3, #1260]	; 0x4ec
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 24ed 	strb.w	r2, [r3, #1261]	; 0x4ed
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	223d      	movs	r2, #61	; 0x3d
 8006a0c:	f883 24ee 	strb.w	r2, [r3, #1262]	; 0x4ee
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	227d      	movs	r2, #125	; 0x7d
 8006a14:	f883 24ef 	strb.w	r2, [r3, #1263]	; 0x4ef
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2240      	movs	r2, #64	; 0x40
 8006a1c:	f883 24f0 	strb.w	r2, [r3, #1264]	; 0x4f0
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2240      	movs	r2, #64	; 0x40
 8006a24:	f883 24f1 	strb.w	r2, [r3, #1265]	; 0x4f1
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	227d      	movs	r2, #125	; 0x7d
 8006a2c:	f883 24f2 	strb.w	r2, [r3, #1266]	; 0x4f2
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	223d      	movs	r2, #61	; 0x3d
 8006a34:	f883 24f3 	strb.w	r2, [r3, #1267]	; 0x4f3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2218      	movs	r2, #24
 8006a3c:	f883 24f6 	strb.w	r2, [r3, #1270]	; 0x4f6
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	223c      	movs	r2, #60	; 0x3c
 8006a44:	f883 24f7 	strb.w	r2, [r3, #1271]	; 0x4f7
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2224      	movs	r2, #36	; 0x24
 8006a4c:	f883 24f8 	strb.w	r2, [r3, #1272]	; 0x4f8
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	22e7      	movs	r2, #231	; 0xe7
 8006a54:	f883 24f9 	strb.w	r2, [r3, #1273]	; 0x4f9
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	22e7      	movs	r2, #231	; 0xe7
 8006a5c:	f883 24fa 	strb.w	r2, [r3, #1274]	; 0x4fa
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2224      	movs	r2, #36	; 0x24
 8006a64:	f883 24fb 	strb.w	r2, [r3, #1275]	; 0x4fb
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2224      	movs	r2, #36	; 0x24
 8006a6c:	f883 24fc 	strb.w	r2, [r3, #1276]	; 0x4fc
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2268      	movs	r2, #104	; 0x68
 8006a74:	f883 24fe 	strb.w	r2, [r3, #1278]	; 0x4fe
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	227e      	movs	r2, #126	; 0x7e
 8006a7c:	f883 24ff 	strb.w	r2, [r3, #1279]	; 0x4ff
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	227f      	movs	r2, #127	; 0x7f
 8006a84:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2249      	movs	r2, #73	; 0x49
 8006a8c:	f883 2501 	strb.w	r2, [r3, #1281]	; 0x501
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2243      	movs	r2, #67	; 0x43
 8006a94:	f883 2502 	strb.w	r2, [r3, #1282]	; 0x502
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2266      	movs	r2, #102	; 0x66
 8006a9c:	f883 2503 	strb.w	r2, [r3, #1283]	; 0x503
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2220      	movs	r2, #32
 8006aa4:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	222b      	movs	r2, #43	; 0x2b
 8006aac:	f883 2506 	strb.w	r2, [r3, #1286]	; 0x506
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	222f      	movs	r2, #47	; 0x2f
 8006ab4:	f883 2507 	strb.w	r2, [r3, #1287]	; 0x507
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	22fc      	movs	r2, #252	; 0xfc
 8006abc:	f883 2508 	strb.w	r2, [r3, #1288]	; 0x508
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	22fc      	movs	r2, #252	; 0xfc
 8006ac4:	f883 2509 	strb.w	r2, [r3, #1289]	; 0x509
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	222f      	movs	r2, #47	; 0x2f
 8006acc:	f883 250a 	strb.w	r2, [r3, #1290]	; 0x50a
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	222b      	movs	r2, #43	; 0x2b
 8006ad4:	f883 250b 	strb.w	r2, [r3, #1291]	; 0x50b
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	22ff      	movs	r2, #255	; 0xff
 8006adc:	f883 250e 	strb.w	r2, [r3, #1294]	; 0x50e
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	22ff      	movs	r2, #255	; 0xff
 8006ae4:	f883 250f 	strb.w	r2, [r3, #1295]	; 0x50f
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2209      	movs	r2, #9
 8006aec:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2209      	movs	r2, #9
 8006af4:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	222f      	movs	r2, #47	; 0x2f
 8006afc:	f883 2512 	strb.w	r2, [r3, #1298]	; 0x512
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	22f6      	movs	r2, #246	; 0xf6
 8006b04:	f883 2513 	strb.w	r2, [r3, #1299]	; 0x513
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	22f8      	movs	r2, #248	; 0xf8
 8006b0c:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	22a0      	movs	r2, #160	; 0xa0
 8006b14:	f883 2515 	strb.w	r2, [r3, #1301]	; 0x515
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2240      	movs	r2, #64	; 0x40
 8006b1c:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	22c0      	movs	r2, #192	; 0xc0
 8006b24:	f883 2517 	strb.w	r2, [r3, #1303]	; 0x517
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2288      	movs	r2, #136	; 0x88
 8006b2c:	f883 2518 	strb.w	r2, [r3, #1304]	; 0x518
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	22fe      	movs	r2, #254	; 0xfe
 8006b34:	f883 2519 	strb.w	r2, [r3, #1305]	; 0x519
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	227f      	movs	r2, #127	; 0x7f
 8006b3c:	f883 251a 	strb.w	r2, [r3, #1306]	; 0x51a
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2209      	movs	r2, #9
 8006b44:	f883 251b 	strb.w	r2, [r3, #1307]	; 0x51b
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2203      	movs	r2, #3
 8006b4c:	f883 251c 	strb.w	r2, [r3, #1308]	; 0x51c
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2202      	movs	r2, #2
 8006b54:	f883 251d 	strb.w	r2, [r3, #1309]	; 0x51d
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2220      	movs	r2, #32
 8006b5c:	f883 251e 	strb.w	r2, [r3, #1310]	; 0x51e
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2274      	movs	r2, #116	; 0x74
 8006b64:	f883 251f 	strb.w	r2, [r3, #1311]	; 0x51f
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2254      	movs	r2, #84	; 0x54
 8006b6c:	f883 2520 	strb.w	r2, [r3, #1312]	; 0x520
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2255      	movs	r2, #85	; 0x55
 8006b74:	f883 2521 	strb.w	r2, [r3, #1313]	; 0x521
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	227d      	movs	r2, #125	; 0x7d
 8006b7c:	f883 2522 	strb.w	r2, [r3, #1314]	; 0x522
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2279      	movs	r2, #121	; 0x79
 8006b84:	f883 2523 	strb.w	r2, [r3, #1315]	; 0x523
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2240      	movs	r2, #64	; 0x40
 8006b8c:	f883 2524 	strb.w	r2, [r3, #1316]	; 0x524
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2244      	movs	r2, #68	; 0x44
 8006b94:	f883 2527 	strb.w	r2, [r3, #1319]	; 0x527
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	227d      	movs	r2, #125	; 0x7d
 8006b9c:	f883 2528 	strb.w	r2, [r3, #1320]	; 0x528
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	227d      	movs	r2, #125	; 0x7d
 8006ba4:	f883 2529 	strb.w	r2, [r3, #1321]	; 0x529
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2241      	movs	r2, #65	; 0x41
 8006bac:	f883 252a 	strb.w	r2, [r3, #1322]	; 0x52a
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2230      	movs	r2, #48	; 0x30
 8006bb4:	f883 252e 	strb.w	r2, [r3, #1326]	; 0x52e
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2278      	movs	r2, #120	; 0x78
 8006bbc:	f883 252f 	strb.w	r2, [r3, #1327]	; 0x52f
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2248      	movs	r2, #72	; 0x48
 8006bc4:	f883 2530 	strb.w	r2, [r3, #1328]	; 0x530
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	224a      	movs	r2, #74	; 0x4a
 8006bcc:	f883 2531 	strb.w	r2, [r3, #1329]	; 0x531
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	227a      	movs	r2, #122	; 0x7a
 8006bd4:	f883 2532 	strb.w	r2, [r3, #1330]	; 0x532
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2232      	movs	r2, #50	; 0x32
 8006bdc:	f883 2533 	strb.w	r2, [r3, #1331]	; 0x533
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2238      	movs	r2, #56	; 0x38
 8006be4:	f883 2536 	strb.w	r2, [r3, #1334]	; 0x536
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2278      	movs	r2, #120	; 0x78
 8006bec:	f883 2537 	strb.w	r2, [r3, #1335]	; 0x537
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2240      	movs	r2, #64	; 0x40
 8006bf4:	f883 2538 	strb.w	r2, [r3, #1336]	; 0x538
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2242      	movs	r2, #66	; 0x42
 8006bfc:	f883 2539 	strb.w	r2, [r3, #1337]	; 0x539
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	227a      	movs	r2, #122	; 0x7a
 8006c04:	f883 253a 	strb.w	r2, [r3, #1338]	; 0x53a
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	227a      	movs	r2, #122	; 0x7a
 8006c0c:	f883 253b 	strb.w	r2, [r3, #1339]	; 0x53b
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2240      	movs	r2, #64	; 0x40
 8006c14:	f883 253c 	strb.w	r2, [r3, #1340]	; 0x53c
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	227a      	movs	r2, #122	; 0x7a
 8006c1c:	f883 253e 	strb.w	r2, [r3, #1342]	; 0x53e
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	227a      	movs	r2, #122	; 0x7a
 8006c24:	f883 253f 	strb.w	r2, [r3, #1343]	; 0x53f
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	220a      	movs	r2, #10
 8006c2c:	f883 2540 	strb.w	r2, [r3, #1344]	; 0x540
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	220a      	movs	r2, #10
 8006c34:	f883 2541 	strb.w	r2, [r3, #1345]	; 0x541
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	227a      	movs	r2, #122	; 0x7a
 8006c3c:	f883 2542 	strb.w	r2, [r3, #1346]	; 0x542
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2270      	movs	r2, #112	; 0x70
 8006c44:	f883 2543 	strb.w	r2, [r3, #1347]	; 0x543
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	227d      	movs	r2, #125	; 0x7d
 8006c4c:	f883 2546 	strb.w	r2, [r3, #1350]	; 0x546
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	227d      	movs	r2, #125	; 0x7d
 8006c54:	f883 2547 	strb.w	r2, [r3, #1351]	; 0x547
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2219      	movs	r2, #25
 8006c5c:	f883 2548 	strb.w	r2, [r3, #1352]	; 0x548
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2231      	movs	r2, #49	; 0x31
 8006c64:	f883 2549 	strb.w	r2, [r3, #1353]	; 0x549
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	227d      	movs	r2, #125	; 0x7d
 8006c6c:	f883 254a 	strb.w	r2, [r3, #1354]	; 0x54a
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	227d      	movs	r2, #125	; 0x7d
 8006c74:	f883 254b 	strb.w	r2, [r3, #1355]	; 0x54b
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2226      	movs	r2, #38	; 0x26
 8006c7c:	f883 254f 	strb.w	r2, [r3, #1359]	; 0x54f
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	222f      	movs	r2, #47	; 0x2f
 8006c84:	f883 2550 	strb.w	r2, [r3, #1360]	; 0x550
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2229      	movs	r2, #41	; 0x29
 8006c8c:	f883 2551 	strb.w	r2, [r3, #1361]	; 0x551
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	222f      	movs	r2, #47	; 0x2f
 8006c94:	f883 2552 	strb.w	r2, [r3, #1362]	; 0x552
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	222f      	movs	r2, #47	; 0x2f
 8006c9c:	f883 2553 	strb.w	r2, [r3, #1363]	; 0x553
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2228      	movs	r2, #40	; 0x28
 8006ca4:	f883 2554 	strb.w	r2, [r3, #1364]	; 0x554
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2226      	movs	r2, #38	; 0x26
 8006cac:	f883 2557 	strb.w	r2, [r3, #1367]	; 0x557
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	222f      	movs	r2, #47	; 0x2f
 8006cb4:	f883 2558 	strb.w	r2, [r3, #1368]	; 0x558
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2229      	movs	r2, #41	; 0x29
 8006cbc:	f883 2559 	strb.w	r2, [r3, #1369]	; 0x559
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	222f      	movs	r2, #47	; 0x2f
 8006cc4:	f883 255a 	strb.w	r2, [r3, #1370]	; 0x55a
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2226      	movs	r2, #38	; 0x26
 8006ccc:	f883 255b 	strb.w	r2, [r3, #1371]	; 0x55b
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2230      	movs	r2, #48	; 0x30
 8006cd4:	f883 255e 	strb.w	r2, [r3, #1374]	; 0x55e
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2278      	movs	r2, #120	; 0x78
 8006cdc:	f883 255f 	strb.w	r2, [r3, #1375]	; 0x55f
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	224d      	movs	r2, #77	; 0x4d
 8006ce4:	f883 2560 	strb.w	r2, [r3, #1376]	; 0x560
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2245      	movs	r2, #69	; 0x45
 8006cec:	f883 2561 	strb.w	r2, [r3, #1377]	; 0x561
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2260      	movs	r2, #96	; 0x60
 8006cf4:	f883 2562 	strb.w	r2, [r3, #1378]	; 0x562
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2220      	movs	r2, #32
 8006cfc:	f883 2563 	strb.w	r2, [r3, #1379]	; 0x563
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2238      	movs	r2, #56	; 0x38
 8006d04:	f883 2566 	strb.w	r2, [r3, #1382]	; 0x566
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2238      	movs	r2, #56	; 0x38
 8006d0c:	f883 2567 	strb.w	r2, [r3, #1383]	; 0x567
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2208      	movs	r2, #8
 8006d14:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2208      	movs	r2, #8
 8006d1c:	f883 2569 	strb.w	r2, [r3, #1385]	; 0x569
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2208      	movs	r2, #8
 8006d24:	f883 256a 	strb.w	r2, [r3, #1386]	; 0x56a
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2208      	movs	r2, #8
 8006d2c:	f883 256b 	strb.w	r2, [r3, #1387]	; 0x56b
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2208      	movs	r2, #8
 8006d34:	f883 256e 	strb.w	r2, [r3, #1390]	; 0x56e
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2208      	movs	r2, #8
 8006d3c:	f883 256f 	strb.w	r2, [r3, #1391]	; 0x56f
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2208      	movs	r2, #8
 8006d44:	f883 2570 	strb.w	r2, [r3, #1392]	; 0x570
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2208      	movs	r2, #8
 8006d4c:	f883 2571 	strb.w	r2, [r3, #1393]	; 0x571
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2238      	movs	r2, #56	; 0x38
 8006d54:	f883 2572 	strb.w	r2, [r3, #1394]	; 0x572
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2238      	movs	r2, #56	; 0x38
 8006d5c:	f883 2573 	strb.w	r2, [r3, #1395]	; 0x573
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	224f      	movs	r2, #79	; 0x4f
 8006d64:	f883 2576 	strb.w	r2, [r3, #1398]	; 0x576
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	226f      	movs	r2, #111	; 0x6f
 8006d6c:	f883 2577 	strb.w	r2, [r3, #1399]	; 0x577
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2230      	movs	r2, #48	; 0x30
 8006d74:	f883 2578 	strb.w	r2, [r3, #1400]	; 0x578
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2218      	movs	r2, #24
 8006d7c:	f883 2579 	strb.w	r2, [r3, #1401]	; 0x579
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	22cc      	movs	r2, #204	; 0xcc
 8006d84:	f883 257a 	strb.w	r2, [r3, #1402]	; 0x57a
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	22ee      	movs	r2, #238	; 0xee
 8006d8c:	f883 257b 	strb.w	r2, [r3, #1403]	; 0x57b
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	22bb      	movs	r2, #187	; 0xbb
 8006d94:	f883 257c 	strb.w	r2, [r3, #1404]	; 0x57c
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2291      	movs	r2, #145	; 0x91
 8006d9c:	f883 257d 	strb.w	r2, [r3, #1405]	; 0x57d
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	224f      	movs	r2, #79	; 0x4f
 8006da4:	f883 257e 	strb.w	r2, [r3, #1406]	; 0x57e
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	226f      	movs	r2, #111	; 0x6f
 8006dac:	f883 257f 	strb.w	r2, [r3, #1407]	; 0x57f
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2230      	movs	r2, #48	; 0x30
 8006db4:	f883 2580 	strb.w	r2, [r3, #1408]	; 0x580
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2218      	movs	r2, #24
 8006dbc:	f883 2581 	strb.w	r2, [r3, #1409]	; 0x581
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	226c      	movs	r2, #108	; 0x6c
 8006dc4:	f883 2582 	strb.w	r2, [r3, #1410]	; 0x582
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2276      	movs	r2, #118	; 0x76
 8006dcc:	f883 2583 	strb.w	r2, [r3, #1411]	; 0x583
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	22fb      	movs	r2, #251	; 0xfb
 8006dd4:	f883 2584 	strb.w	r2, [r3, #1412]	; 0x584
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	22f9      	movs	r2, #249	; 0xf9
 8006ddc:	f883 2585 	strb.w	r2, [r3, #1413]	; 0x585
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	227b      	movs	r2, #123	; 0x7b
 8006de4:	f883 2589 	strb.w	r2, [r3, #1417]	; 0x589
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	227b      	movs	r2, #123	; 0x7b
 8006dec:	f883 258a 	strb.w	r2, [r3, #1418]	; 0x58a
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2208      	movs	r2, #8
 8006df4:	f883 258e 	strb.w	r2, [r3, #1422]	; 0x58e
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	221c      	movs	r2, #28
 8006dfc:	f883 258f 	strb.w	r2, [r3, #1423]	; 0x58f
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2236      	movs	r2, #54	; 0x36
 8006e04:	f883 2590 	strb.w	r2, [r3, #1424]	; 0x590
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2222      	movs	r2, #34	; 0x22
 8006e0c:	f883 2591 	strb.w	r2, [r3, #1425]	; 0x591
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2208      	movs	r2, #8
 8006e14:	f883 2592 	strb.w	r2, [r3, #1426]	; 0x592
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	221c      	movs	r2, #28
 8006e1c:	f883 2593 	strb.w	r2, [r3, #1427]	; 0x593
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2236      	movs	r2, #54	; 0x36
 8006e24:	f883 2594 	strb.w	r2, [r3, #1428]	; 0x594
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2222      	movs	r2, #34	; 0x22
 8006e2c:	f883 2595 	strb.w	r2, [r3, #1429]	; 0x595
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2222      	movs	r2, #34	; 0x22
 8006e34:	f883 2596 	strb.w	r2, [r3, #1430]	; 0x596
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2236      	movs	r2, #54	; 0x36
 8006e3c:	f883 2597 	strb.w	r2, [r3, #1431]	; 0x597
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	221c      	movs	r2, #28
 8006e44:	f883 2598 	strb.w	r2, [r3, #1432]	; 0x598
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2208      	movs	r2, #8
 8006e4c:	f883 2599 	strb.w	r2, [r3, #1433]	; 0x599
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2222      	movs	r2, #34	; 0x22
 8006e54:	f883 259a 	strb.w	r2, [r3, #1434]	; 0x59a
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2236      	movs	r2, #54	; 0x36
 8006e5c:	f883 259b 	strb.w	r2, [r3, #1435]	; 0x59b
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	221c      	movs	r2, #28
 8006e64:	f883 259c 	strb.w	r2, [r3, #1436]	; 0x59c
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2208      	movs	r2, #8
 8006e6c:	f883 259d 	strb.w	r2, [r3, #1437]	; 0x59d
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	22aa      	movs	r2, #170	; 0xaa
 8006e74:	f883 259e 	strb.w	r2, [r3, #1438]	; 0x59e
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2255      	movs	r2, #85	; 0x55
 8006e7c:	f883 25a0 	strb.w	r2, [r3, #1440]	; 0x5a0
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	22aa      	movs	r2, #170	; 0xaa
 8006e84:	f883 25a2 	strb.w	r2, [r3, #1442]	; 0x5a2
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2255      	movs	r2, #85	; 0x55
 8006e8c:	f883 25a4 	strb.w	r2, [r3, #1444]	; 0x5a4
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	22aa      	movs	r2, #170	; 0xaa
 8006e94:	f883 25a6 	strb.w	r2, [r3, #1446]	; 0x5a6
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2255      	movs	r2, #85	; 0x55
 8006e9c:	f883 25a7 	strb.w	r2, [r3, #1447]	; 0x5a7
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	22aa      	movs	r2, #170	; 0xaa
 8006ea4:	f883 25a8 	strb.w	r2, [r3, #1448]	; 0x5a8
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2255      	movs	r2, #85	; 0x55
 8006eac:	f883 25a9 	strb.w	r2, [r3, #1449]	; 0x5a9
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	22aa      	movs	r2, #170	; 0xaa
 8006eb4:	f883 25aa 	strb.w	r2, [r3, #1450]	; 0x5aa
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2255      	movs	r2, #85	; 0x55
 8006ebc:	f883 25ab 	strb.w	r2, [r3, #1451]	; 0x5ab
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	22aa      	movs	r2, #170	; 0xaa
 8006ec4:	f883 25ac 	strb.w	r2, [r3, #1452]	; 0x5ac
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2255      	movs	r2, #85	; 0x55
 8006ecc:	f883 25ad 	strb.w	r2, [r3, #1453]	; 0x5ad
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	22dd      	movs	r2, #221	; 0xdd
 8006ed4:	f883 25ae 	strb.w	r2, [r3, #1454]	; 0x5ae
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	22ff      	movs	r2, #255	; 0xff
 8006edc:	f883 25af 	strb.w	r2, [r3, #1455]	; 0x5af
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	22aa      	movs	r2, #170	; 0xaa
 8006ee4:	f883 25b0 	strb.w	r2, [r3, #1456]	; 0x5b0
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2277      	movs	r2, #119	; 0x77
 8006eec:	f883 25b1 	strb.w	r2, [r3, #1457]	; 0x5b1
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	22dd      	movs	r2, #221	; 0xdd
 8006ef4:	f883 25b2 	strb.w	r2, [r3, #1458]	; 0x5b2
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	22aa      	movs	r2, #170	; 0xaa
 8006efc:	f883 25b3 	strb.w	r2, [r3, #1459]	; 0x5b3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	22ff      	movs	r2, #255	; 0xff
 8006f04:	f883 25b4 	strb.w	r2, [r3, #1460]	; 0x5b4
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2277      	movs	r2, #119	; 0x77
 8006f0c:	f883 25b5 	strb.w	r2, [r3, #1461]	; 0x5b5
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	22ff      	movs	r2, #255	; 0xff
 8006f14:	f883 25b9 	strb.w	r2, [r3, #1465]	; 0x5b9
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	22ff      	movs	r2, #255	; 0xff
 8006f1c:	f883 25ba 	strb.w	r2, [r3, #1466]	; 0x5ba
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2210      	movs	r2, #16
 8006f24:	f883 25be 	strb.w	r2, [r3, #1470]	; 0x5be
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2210      	movs	r2, #16
 8006f2c:	f883 25bf 	strb.w	r2, [r3, #1471]	; 0x5bf
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2210      	movs	r2, #16
 8006f34:	f883 25c0 	strb.w	r2, [r3, #1472]	; 0x5c0
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	22ff      	movs	r2, #255	; 0xff
 8006f3c:	f883 25c1 	strb.w	r2, [r3, #1473]	; 0x5c1
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	22ff      	movs	r2, #255	; 0xff
 8006f44:	f883 25c2 	strb.w	r2, [r3, #1474]	; 0x5c2
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2214      	movs	r2, #20
 8006f4c:	f883 25c6 	strb.w	r2, [r3, #1478]	; 0x5c6
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2214      	movs	r2, #20
 8006f54:	f883 25c7 	strb.w	r2, [r3, #1479]	; 0x5c7
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2214      	movs	r2, #20
 8006f5c:	f883 25c8 	strb.w	r2, [r3, #1480]	; 0x5c8
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	22ff      	movs	r2, #255	; 0xff
 8006f64:	f883 25c9 	strb.w	r2, [r3, #1481]	; 0x5c9
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	22ff      	movs	r2, #255	; 0xff
 8006f6c:	f883 25ca 	strb.w	r2, [r3, #1482]	; 0x5ca
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2210      	movs	r2, #16
 8006f74:	f883 25ce 	strb.w	r2, [r3, #1486]	; 0x5ce
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2210      	movs	r2, #16
 8006f7c:	f883 25cf 	strb.w	r2, [r3, #1487]	; 0x5cf
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	22ff      	movs	r2, #255	; 0xff
 8006f84:	f883 25d0 	strb.w	r2, [r3, #1488]	; 0x5d0
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	22ff      	movs	r2, #255	; 0xff
 8006f8c:	f883 25d1 	strb.w	r2, [r3, #1489]	; 0x5d1
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	22ff      	movs	r2, #255	; 0xff
 8006f94:	f883 25d3 	strb.w	r2, [r3, #1491]	; 0x5d3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	22ff      	movs	r2, #255	; 0xff
 8006f9c:	f883 25d4 	strb.w	r2, [r3, #1492]	; 0x5d4
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2210      	movs	r2, #16
 8006fa4:	f883 25d6 	strb.w	r2, [r3, #1494]	; 0x5d6
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2210      	movs	r2, #16
 8006fac:	f883 25d7 	strb.w	r2, [r3, #1495]	; 0x5d7
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	22f0      	movs	r2, #240	; 0xf0
 8006fb4:	f883 25d8 	strb.w	r2, [r3, #1496]	; 0x5d8
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	22f0      	movs	r2, #240	; 0xf0
 8006fbc:	f883 25d9 	strb.w	r2, [r3, #1497]	; 0x5d9
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2210      	movs	r2, #16
 8006fc4:	f883 25da 	strb.w	r2, [r3, #1498]	; 0x5da
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	22f0      	movs	r2, #240	; 0xf0
 8006fcc:	f883 25db 	strb.w	r2, [r3, #1499]	; 0x5db
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	22f0      	movs	r2, #240	; 0xf0
 8006fd4:	f883 25dc 	strb.w	r2, [r3, #1500]	; 0x5dc
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2214      	movs	r2, #20
 8006fdc:	f883 25de 	strb.w	r2, [r3, #1502]	; 0x5de
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2214      	movs	r2, #20
 8006fe4:	f883 25df 	strb.w	r2, [r3, #1503]	; 0x5df
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2214      	movs	r2, #20
 8006fec:	f883 25e0 	strb.w	r2, [r3, #1504]	; 0x5e0
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	22fc      	movs	r2, #252	; 0xfc
 8006ff4:	f883 25e1 	strb.w	r2, [r3, #1505]	; 0x5e1
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	22fc      	movs	r2, #252	; 0xfc
 8006ffc:	f883 25e2 	strb.w	r2, [r3, #1506]	; 0x5e2
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2214      	movs	r2, #20
 8007004:	f883 25e6 	strb.w	r2, [r3, #1510]	; 0x5e6
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2214      	movs	r2, #20
 800700c:	f883 25e7 	strb.w	r2, [r3, #1511]	; 0x5e7
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	22f7      	movs	r2, #247	; 0xf7
 8007014:	f883 25e8 	strb.w	r2, [r3, #1512]	; 0x5e8
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	22f7      	movs	r2, #247	; 0xf7
 800701c:	f883 25e9 	strb.w	r2, [r3, #1513]	; 0x5e9
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	22ff      	movs	r2, #255	; 0xff
 8007024:	f883 25eb 	strb.w	r2, [r3, #1515]	; 0x5eb
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	22ff      	movs	r2, #255	; 0xff
 800702c:	f883 25ec 	strb.w	r2, [r3, #1516]	; 0x5ec
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	22ff      	movs	r2, #255	; 0xff
 8007034:	f883 25f0 	strb.w	r2, [r3, #1520]	; 0x5f0
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	22ff      	movs	r2, #255	; 0xff
 800703c:	f883 25f1 	strb.w	r2, [r3, #1521]	; 0x5f1
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	22ff      	movs	r2, #255	; 0xff
 8007044:	f883 25f3 	strb.w	r2, [r3, #1523]	; 0x5f3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	22ff      	movs	r2, #255	; 0xff
 800704c:	f883 25f4 	strb.w	r2, [r3, #1524]	; 0x5f4
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2214      	movs	r2, #20
 8007054:	f883 25f6 	strb.w	r2, [r3, #1526]	; 0x5f6
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2214      	movs	r2, #20
 800705c:	f883 25f7 	strb.w	r2, [r3, #1527]	; 0x5f7
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	22f4      	movs	r2, #244	; 0xf4
 8007064:	f883 25f8 	strb.w	r2, [r3, #1528]	; 0x5f8
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	22f4      	movs	r2, #244	; 0xf4
 800706c:	f883 25f9 	strb.w	r2, [r3, #1529]	; 0x5f9
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2204      	movs	r2, #4
 8007074:	f883 25fa 	strb.w	r2, [r3, #1530]	; 0x5fa
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	22fc      	movs	r2, #252	; 0xfc
 800707c:	f883 25fb 	strb.w	r2, [r3, #1531]	; 0x5fb
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	22fc      	movs	r2, #252	; 0xfc
 8007084:	f883 25fc 	strb.w	r2, [r3, #1532]	; 0x5fc
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2214      	movs	r2, #20
 800708c:	f883 25fe 	strb.w	r2, [r3, #1534]	; 0x5fe
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2214      	movs	r2, #20
 8007094:	f883 25ff 	strb.w	r2, [r3, #1535]	; 0x5ff
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2217      	movs	r2, #23
 800709c:	f883 2600 	strb.w	r2, [r3, #1536]	; 0x600
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2217      	movs	r2, #23
 80070a4:	f883 2601 	strb.w	r2, [r3, #1537]	; 0x601
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2210      	movs	r2, #16
 80070ac:	f883 2602 	strb.w	r2, [r3, #1538]	; 0x602
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	221f      	movs	r2, #31
 80070b4:	f883 2603 	strb.w	r2, [r3, #1539]	; 0x603
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	221f      	movs	r2, #31
 80070bc:	f883 2604 	strb.w	r2, [r3, #1540]	; 0x604
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2210      	movs	r2, #16
 80070c4:	f883 2606 	strb.w	r2, [r3, #1542]	; 0x606
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2210      	movs	r2, #16
 80070cc:	f883 2607 	strb.w	r2, [r3, #1543]	; 0x607
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	221f      	movs	r2, #31
 80070d4:	f883 2608 	strb.w	r2, [r3, #1544]	; 0x608
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	221f      	movs	r2, #31
 80070dc:	f883 2609 	strb.w	r2, [r3, #1545]	; 0x609
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2210      	movs	r2, #16
 80070e4:	f883 260a 	strb.w	r2, [r3, #1546]	; 0x60a
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	221f      	movs	r2, #31
 80070ec:	f883 260b 	strb.w	r2, [r3, #1547]	; 0x60b
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	221f      	movs	r2, #31
 80070f4:	f883 260c 	strb.w	r2, [r3, #1548]	; 0x60c
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2214      	movs	r2, #20
 80070fc:	f883 260e 	strb.w	r2, [r3, #1550]	; 0x60e
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2214      	movs	r2, #20
 8007104:	f883 260f 	strb.w	r2, [r3, #1551]	; 0x60f
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2214      	movs	r2, #20
 800710c:	f883 2610 	strb.w	r2, [r3, #1552]	; 0x610
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	221f      	movs	r2, #31
 8007114:	f883 2611 	strb.w	r2, [r3, #1553]	; 0x611
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	221f      	movs	r2, #31
 800711c:	f883 2612 	strb.w	r2, [r3, #1554]	; 0x612
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2210      	movs	r2, #16
 8007124:	f883 2616 	strb.w	r2, [r3, #1558]	; 0x616
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2210      	movs	r2, #16
 800712c:	f883 2617 	strb.w	r2, [r3, #1559]	; 0x617
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2210      	movs	r2, #16
 8007134:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	22f0      	movs	r2, #240	; 0xf0
 800713c:	f883 2619 	strb.w	r2, [r3, #1561]	; 0x619
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	22f0      	movs	r2, #240	; 0xf0
 8007144:	f883 261a 	strb.w	r2, [r3, #1562]	; 0x61a
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	221f      	movs	r2, #31
 800714c:	f883 2621 	strb.w	r2, [r3, #1569]	; 0x621
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	221f      	movs	r2, #31
 8007154:	f883 2622 	strb.w	r2, [r3, #1570]	; 0x622
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2210      	movs	r2, #16
 800715c:	f883 2623 	strb.w	r2, [r3, #1571]	; 0x623
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2210      	movs	r2, #16
 8007164:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2210      	movs	r2, #16
 800716c:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2210      	movs	r2, #16
 8007174:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2210      	movs	r2, #16
 800717c:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2210      	movs	r2, #16
 8007184:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	221f      	movs	r2, #31
 800718c:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	221f      	movs	r2, #31
 8007194:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2210      	movs	r2, #16
 800719c:	f883 262b 	strb.w	r2, [r3, #1579]	; 0x62b
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2210      	movs	r2, #16
 80071a4:	f883 262c 	strb.w	r2, [r3, #1580]	; 0x62c
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2210      	movs	r2, #16
 80071ac:	f883 262d 	strb.w	r2, [r3, #1581]	; 0x62d
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2210      	movs	r2, #16
 80071b4:	f883 262e 	strb.w	r2, [r3, #1582]	; 0x62e
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2210      	movs	r2, #16
 80071bc:	f883 262f 	strb.w	r2, [r3, #1583]	; 0x62f
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2210      	movs	r2, #16
 80071c4:	f883 2630 	strb.w	r2, [r3, #1584]	; 0x630
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	22f0      	movs	r2, #240	; 0xf0
 80071cc:	f883 2631 	strb.w	r2, [r3, #1585]	; 0x631
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	22f0      	movs	r2, #240	; 0xf0
 80071d4:	f883 2632 	strb.w	r2, [r3, #1586]	; 0x632
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2210      	movs	r2, #16
 80071dc:	f883 2633 	strb.w	r2, [r3, #1587]	; 0x633
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2210      	movs	r2, #16
 80071e4:	f883 2634 	strb.w	r2, [r3, #1588]	; 0x634
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2210      	movs	r2, #16
 80071ec:	f883 2635 	strb.w	r2, [r3, #1589]	; 0x635
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	22ff      	movs	r2, #255	; 0xff
 80071f4:	f883 2639 	strb.w	r2, [r3, #1593]	; 0x639
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	22ff      	movs	r2, #255	; 0xff
 80071fc:	f883 263a 	strb.w	r2, [r3, #1594]	; 0x63a
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2210      	movs	r2, #16
 8007204:	f883 263b 	strb.w	r2, [r3, #1595]	; 0x63b
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2210      	movs	r2, #16
 800720c:	f883 263c 	strb.w	r2, [r3, #1596]	; 0x63c
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2210      	movs	r2, #16
 8007214:	f883 263d 	strb.w	r2, [r3, #1597]	; 0x63d
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2210      	movs	r2, #16
 800721c:	f883 263e 	strb.w	r2, [r3, #1598]	; 0x63e
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2210      	movs	r2, #16
 8007224:	f883 263f 	strb.w	r2, [r3, #1599]	; 0x63f
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2210      	movs	r2, #16
 800722c:	f883 2640 	strb.w	r2, [r3, #1600]	; 0x640
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2210      	movs	r2, #16
 8007234:	f883 2641 	strb.w	r2, [r3, #1601]	; 0x641
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2210      	movs	r2, #16
 800723c:	f883 2642 	strb.w	r2, [r3, #1602]	; 0x642
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2210      	movs	r2, #16
 8007244:	f883 2643 	strb.w	r2, [r3, #1603]	; 0x643
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2210      	movs	r2, #16
 800724c:	f883 2644 	strb.w	r2, [r3, #1604]	; 0x644
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2210      	movs	r2, #16
 8007254:	f883 2645 	strb.w	r2, [r3, #1605]	; 0x645
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2210      	movs	r2, #16
 800725c:	f883 2646 	strb.w	r2, [r3, #1606]	; 0x646
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2210      	movs	r2, #16
 8007264:	f883 2647 	strb.w	r2, [r3, #1607]	; 0x647
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2210      	movs	r2, #16
 800726c:	f883 2648 	strb.w	r2, [r3, #1608]	; 0x648
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	22ff      	movs	r2, #255	; 0xff
 8007274:	f883 2649 	strb.w	r2, [r3, #1609]	; 0x649
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	22ff      	movs	r2, #255	; 0xff
 800727c:	f883 264a 	strb.w	r2, [r3, #1610]	; 0x64a
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2210      	movs	r2, #16
 8007284:	f883 264b 	strb.w	r2, [r3, #1611]	; 0x64b
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2210      	movs	r2, #16
 800728c:	f883 264c 	strb.w	r2, [r3, #1612]	; 0x64c
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2210      	movs	r2, #16
 8007294:	f883 264d 	strb.w	r2, [r3, #1613]	; 0x64d
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	22ff      	movs	r2, #255	; 0xff
 800729c:	f883 2651 	strb.w	r2, [r3, #1617]	; 0x651
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	22ff      	movs	r2, #255	; 0xff
 80072a4:	f883 2652 	strb.w	r2, [r3, #1618]	; 0x652
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2214      	movs	r2, #20
 80072ac:	f883 2653 	strb.w	r2, [r3, #1619]	; 0x653
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2214      	movs	r2, #20
 80072b4:	f883 2654 	strb.w	r2, [r3, #1620]	; 0x654
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2214      	movs	r2, #20
 80072bc:	f883 2655 	strb.w	r2, [r3, #1621]	; 0x655
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	22ff      	movs	r2, #255	; 0xff
 80072c4:	f883 2658 	strb.w	r2, [r3, #1624]	; 0x658
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	22ff      	movs	r2, #255	; 0xff
 80072cc:	f883 2659 	strb.w	r2, [r3, #1625]	; 0x659
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	22ff      	movs	r2, #255	; 0xff
 80072d4:	f883 265b 	strb.w	r2, [r3, #1627]	; 0x65b
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	22ff      	movs	r2, #255	; 0xff
 80072dc:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2210      	movs	r2, #16
 80072e4:	f883 265d 	strb.w	r2, [r3, #1629]	; 0x65d
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	221f      	movs	r2, #31
 80072ec:	f883 2660 	strb.w	r2, [r3, #1632]	; 0x660
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	221f      	movs	r2, #31
 80072f4:	f883 2661 	strb.w	r2, [r3, #1633]	; 0x661
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2210      	movs	r2, #16
 80072fc:	f883 2662 	strb.w	r2, [r3, #1634]	; 0x662
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2217      	movs	r2, #23
 8007304:	f883 2663 	strb.w	r2, [r3, #1635]	; 0x663
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2217      	movs	r2, #23
 800730c:	f883 2664 	strb.w	r2, [r3, #1636]	; 0x664
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2214      	movs	r2, #20
 8007314:	f883 2665 	strb.w	r2, [r3, #1637]	; 0x665
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	22fc      	movs	r2, #252	; 0xfc
 800731c:	f883 2668 	strb.w	r2, [r3, #1640]	; 0x668
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	22fc      	movs	r2, #252	; 0xfc
 8007324:	f883 2669 	strb.w	r2, [r3, #1641]	; 0x669
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2204      	movs	r2, #4
 800732c:	f883 266a 	strb.w	r2, [r3, #1642]	; 0x66a
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	22f4      	movs	r2, #244	; 0xf4
 8007334:	f883 266b 	strb.w	r2, [r3, #1643]	; 0x66b
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	22f4      	movs	r2, #244	; 0xf4
 800733c:	f883 266c 	strb.w	r2, [r3, #1644]	; 0x66c
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2214      	movs	r2, #20
 8007344:	f883 266d 	strb.w	r2, [r3, #1645]	; 0x66d
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2214      	movs	r2, #20
 800734c:	f883 266e 	strb.w	r2, [r3, #1646]	; 0x66e
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2214      	movs	r2, #20
 8007354:	f883 266f 	strb.w	r2, [r3, #1647]	; 0x66f
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2217      	movs	r2, #23
 800735c:	f883 2670 	strb.w	r2, [r3, #1648]	; 0x670
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2217      	movs	r2, #23
 8007364:	f883 2671 	strb.w	r2, [r3, #1649]	; 0x671
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2210      	movs	r2, #16
 800736c:	f883 2672 	strb.w	r2, [r3, #1650]	; 0x672
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2217      	movs	r2, #23
 8007374:	f883 2673 	strb.w	r2, [r3, #1651]	; 0x673
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2217      	movs	r2, #23
 800737c:	f883 2674 	strb.w	r2, [r3, #1652]	; 0x674
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2214      	movs	r2, #20
 8007384:	f883 2675 	strb.w	r2, [r3, #1653]	; 0x675
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2214      	movs	r2, #20
 800738c:	f883 2676 	strb.w	r2, [r3, #1654]	; 0x676
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2214      	movs	r2, #20
 8007394:	f883 2677 	strb.w	r2, [r3, #1655]	; 0x677
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	22f4      	movs	r2, #244	; 0xf4
 800739c:	f883 2678 	strb.w	r2, [r3, #1656]	; 0x678
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	22f4      	movs	r2, #244	; 0xf4
 80073a4:	f883 2679 	strb.w	r2, [r3, #1657]	; 0x679
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2204      	movs	r2, #4
 80073ac:	f883 267a 	strb.w	r2, [r3, #1658]	; 0x67a
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	22f4      	movs	r2, #244	; 0xf4
 80073b4:	f883 267b 	strb.w	r2, [r3, #1659]	; 0x67b
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	22f4      	movs	r2, #244	; 0xf4
 80073bc:	f883 267c 	strb.w	r2, [r3, #1660]	; 0x67c
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2214      	movs	r2, #20
 80073c4:	f883 267d 	strb.w	r2, [r3, #1661]	; 0x67d
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	22ff      	movs	r2, #255	; 0xff
 80073cc:	f883 2680 	strb.w	r2, [r3, #1664]	; 0x680
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	22ff      	movs	r2, #255	; 0xff
 80073d4:	f883 2681 	strb.w	r2, [r3, #1665]	; 0x681
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	22f7      	movs	r2, #247	; 0xf7
 80073dc:	f883 2683 	strb.w	r2, [r3, #1667]	; 0x683
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	22f7      	movs	r2, #247	; 0xf7
 80073e4:	f883 2684 	strb.w	r2, [r3, #1668]	; 0x684
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2214      	movs	r2, #20
 80073ec:	f883 2685 	strb.w	r2, [r3, #1669]	; 0x685
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2214      	movs	r2, #20
 80073f4:	f883 2686 	strb.w	r2, [r3, #1670]	; 0x686
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2214      	movs	r2, #20
 80073fc:	f883 2687 	strb.w	r2, [r3, #1671]	; 0x687
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2214      	movs	r2, #20
 8007404:	f883 2688 	strb.w	r2, [r3, #1672]	; 0x688
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2214      	movs	r2, #20
 800740c:	f883 2689 	strb.w	r2, [r3, #1673]	; 0x689
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2214      	movs	r2, #20
 8007414:	f883 268a 	strb.w	r2, [r3, #1674]	; 0x68a
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2214      	movs	r2, #20
 800741c:	f883 268b 	strb.w	r2, [r3, #1675]	; 0x68b
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2214      	movs	r2, #20
 8007424:	f883 268c 	strb.w	r2, [r3, #1676]	; 0x68c
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2214      	movs	r2, #20
 800742c:	f883 268d 	strb.w	r2, [r3, #1677]	; 0x68d
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2214      	movs	r2, #20
 8007434:	f883 268e 	strb.w	r2, [r3, #1678]	; 0x68e
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2214      	movs	r2, #20
 800743c:	f883 268f 	strb.w	r2, [r3, #1679]	; 0x68f
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	22f7      	movs	r2, #247	; 0xf7
 8007444:	f883 2690 	strb.w	r2, [r3, #1680]	; 0x690
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	22f7      	movs	r2, #247	; 0xf7
 800744c:	f883 2691 	strb.w	r2, [r3, #1681]	; 0x691
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	22f7      	movs	r2, #247	; 0xf7
 8007454:	f883 2693 	strb.w	r2, [r3, #1683]	; 0x693
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	22f7      	movs	r2, #247	; 0xf7
 800745c:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2214      	movs	r2, #20
 8007464:	f883 2695 	strb.w	r2, [r3, #1685]	; 0x695
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2214      	movs	r2, #20
 800746c:	f883 2696 	strb.w	r2, [r3, #1686]	; 0x696
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2214      	movs	r2, #20
 8007474:	f883 2697 	strb.w	r2, [r3, #1687]	; 0x697
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2214      	movs	r2, #20
 800747c:	f883 2698 	strb.w	r2, [r3, #1688]	; 0x698
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2217      	movs	r2, #23
 8007484:	f883 2699 	strb.w	r2, [r3, #1689]	; 0x699
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2217      	movs	r2, #23
 800748c:	f883 269a 	strb.w	r2, [r3, #1690]	; 0x69a
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2214      	movs	r2, #20
 8007494:	f883 269b 	strb.w	r2, [r3, #1691]	; 0x69b
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2214      	movs	r2, #20
 800749c:	f883 269c 	strb.w	r2, [r3, #1692]	; 0x69c
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2214      	movs	r2, #20
 80074a4:	f883 269d 	strb.w	r2, [r3, #1693]	; 0x69d
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2210      	movs	r2, #16
 80074ac:	f883 269e 	strb.w	r2, [r3, #1694]	; 0x69e
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2210      	movs	r2, #16
 80074b4:	f883 269f 	strb.w	r2, [r3, #1695]	; 0x69f
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	221f      	movs	r2, #31
 80074bc:	f883 26a0 	strb.w	r2, [r3, #1696]	; 0x6a0
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	221f      	movs	r2, #31
 80074c4:	f883 26a1 	strb.w	r2, [r3, #1697]	; 0x6a1
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2210      	movs	r2, #16
 80074cc:	f883 26a2 	strb.w	r2, [r3, #1698]	; 0x6a2
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	221f      	movs	r2, #31
 80074d4:	f883 26a3 	strb.w	r2, [r3, #1699]	; 0x6a3
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	221f      	movs	r2, #31
 80074dc:	f883 26a4 	strb.w	r2, [r3, #1700]	; 0x6a4
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2210      	movs	r2, #16
 80074e4:	f883 26a5 	strb.w	r2, [r3, #1701]	; 0x6a5
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2214      	movs	r2, #20
 80074ec:	f883 26a6 	strb.w	r2, [r3, #1702]	; 0x6a6
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2214      	movs	r2, #20
 80074f4:	f883 26a7 	strb.w	r2, [r3, #1703]	; 0x6a7
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2214      	movs	r2, #20
 80074fc:	f883 26a8 	strb.w	r2, [r3, #1704]	; 0x6a8
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	22f4      	movs	r2, #244	; 0xf4
 8007504:	f883 26a9 	strb.w	r2, [r3, #1705]	; 0x6a9
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	22f4      	movs	r2, #244	; 0xf4
 800750c:	f883 26aa 	strb.w	r2, [r3, #1706]	; 0x6aa
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2214      	movs	r2, #20
 8007514:	f883 26ab 	strb.w	r2, [r3, #1707]	; 0x6ab
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2214      	movs	r2, #20
 800751c:	f883 26ac 	strb.w	r2, [r3, #1708]	; 0x6ac
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2214      	movs	r2, #20
 8007524:	f883 26ad 	strb.w	r2, [r3, #1709]	; 0x6ad
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2210      	movs	r2, #16
 800752c:	f883 26ae 	strb.w	r2, [r3, #1710]	; 0x6ae
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2210      	movs	r2, #16
 8007534:	f883 26af 	strb.w	r2, [r3, #1711]	; 0x6af
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	22f0      	movs	r2, #240	; 0xf0
 800753c:	f883 26b0 	strb.w	r2, [r3, #1712]	; 0x6b0
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	22f0      	movs	r2, #240	; 0xf0
 8007544:	f883 26b1 	strb.w	r2, [r3, #1713]	; 0x6b1
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2210      	movs	r2, #16
 800754c:	f883 26b2 	strb.w	r2, [r3, #1714]	; 0x6b2
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	22f0      	movs	r2, #240	; 0xf0
 8007554:	f883 26b3 	strb.w	r2, [r3, #1715]	; 0x6b3
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	22f0      	movs	r2, #240	; 0xf0
 800755c:	f883 26b4 	strb.w	r2, [r3, #1716]	; 0x6b4
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2210      	movs	r2, #16
 8007564:	f883 26b5 	strb.w	r2, [r3, #1717]	; 0x6b5
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	221f      	movs	r2, #31
 800756c:	f883 26b8 	strb.w	r2, [r3, #1720]	; 0x6b8
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	221f      	movs	r2, #31
 8007574:	f883 26b9 	strb.w	r2, [r3, #1721]	; 0x6b9
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2210      	movs	r2, #16
 800757c:	f883 26ba 	strb.w	r2, [r3, #1722]	; 0x6ba
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	221f      	movs	r2, #31
 8007584:	f883 26bb 	strb.w	r2, [r3, #1723]	; 0x6bb
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	221f      	movs	r2, #31
 800758c:	f883 26bc 	strb.w	r2, [r3, #1724]	; 0x6bc
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2210      	movs	r2, #16
 8007594:	f883 26bd 	strb.w	r2, [r3, #1725]	; 0x6bd
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	221f      	movs	r2, #31
 800759c:	f883 26c1 	strb.w	r2, [r3, #1729]	; 0x6c1
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	221f      	movs	r2, #31
 80075a4:	f883 26c2 	strb.w	r2, [r3, #1730]	; 0x6c2
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2214      	movs	r2, #20
 80075ac:	f883 26c3 	strb.w	r2, [r3, #1731]	; 0x6c3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2214      	movs	r2, #20
 80075b4:	f883 26c4 	strb.w	r2, [r3, #1732]	; 0x6c4
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2214      	movs	r2, #20
 80075bc:	f883 26c5 	strb.w	r2, [r3, #1733]	; 0x6c5
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	22fc      	movs	r2, #252	; 0xfc
 80075c4:	f883 26c9 	strb.w	r2, [r3, #1737]	; 0x6c9
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	22fc      	movs	r2, #252	; 0xfc
 80075cc:	f883 26ca 	strb.w	r2, [r3, #1738]	; 0x6ca
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2214      	movs	r2, #20
 80075d4:	f883 26cb 	strb.w	r2, [r3, #1739]	; 0x6cb
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2214      	movs	r2, #20
 80075dc:	f883 26cc 	strb.w	r2, [r3, #1740]	; 0x6cc
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2214      	movs	r2, #20
 80075e4:	f883 26cd 	strb.w	r2, [r3, #1741]	; 0x6cd
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	22f0      	movs	r2, #240	; 0xf0
 80075ec:	f883 26d0 	strb.w	r2, [r3, #1744]	; 0x6d0
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	22f0      	movs	r2, #240	; 0xf0
 80075f4:	f883 26d1 	strb.w	r2, [r3, #1745]	; 0x6d1
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2210      	movs	r2, #16
 80075fc:	f883 26d2 	strb.w	r2, [r3, #1746]	; 0x6d2
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	22f0      	movs	r2, #240	; 0xf0
 8007604:	f883 26d3 	strb.w	r2, [r3, #1747]	; 0x6d3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	22f0      	movs	r2, #240	; 0xf0
 800760c:	f883 26d4 	strb.w	r2, [r3, #1748]	; 0x6d4
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2210      	movs	r2, #16
 8007614:	f883 26d5 	strb.w	r2, [r3, #1749]	; 0x6d5
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2210      	movs	r2, #16
 800761c:	f883 26d6 	strb.w	r2, [r3, #1750]	; 0x6d6
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2210      	movs	r2, #16
 8007624:	f883 26d7 	strb.w	r2, [r3, #1751]	; 0x6d7
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	22ff      	movs	r2, #255	; 0xff
 800762c:	f883 26d8 	strb.w	r2, [r3, #1752]	; 0x6d8
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	22ff      	movs	r2, #255	; 0xff
 8007634:	f883 26d9 	strb.w	r2, [r3, #1753]	; 0x6d9
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2210      	movs	r2, #16
 800763c:	f883 26da 	strb.w	r2, [r3, #1754]	; 0x6da
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	22ff      	movs	r2, #255	; 0xff
 8007644:	f883 26db 	strb.w	r2, [r3, #1755]	; 0x6db
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	22ff      	movs	r2, #255	; 0xff
 800764c:	f883 26dc 	strb.w	r2, [r3, #1756]	; 0x6dc
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2210      	movs	r2, #16
 8007654:	f883 26dd 	strb.w	r2, [r3, #1757]	; 0x6dd
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2214      	movs	r2, #20
 800765c:	f883 26de 	strb.w	r2, [r3, #1758]	; 0x6de
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2214      	movs	r2, #20
 8007664:	f883 26df 	strb.w	r2, [r3, #1759]	; 0x6df
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2214      	movs	r2, #20
 800766c:	f883 26e0 	strb.w	r2, [r3, #1760]	; 0x6e0
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	22ff      	movs	r2, #255	; 0xff
 8007674:	f883 26e1 	strb.w	r2, [r3, #1761]	; 0x6e1
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	22ff      	movs	r2, #255	; 0xff
 800767c:	f883 26e2 	strb.w	r2, [r3, #1762]	; 0x6e2
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2214      	movs	r2, #20
 8007684:	f883 26e3 	strb.w	r2, [r3, #1763]	; 0x6e3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2214      	movs	r2, #20
 800768c:	f883 26e4 	strb.w	r2, [r3, #1764]	; 0x6e4
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2214      	movs	r2, #20
 8007694:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2210      	movs	r2, #16
 800769c:	f883 26e6 	strb.w	r2, [r3, #1766]	; 0x6e6
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2210      	movs	r2, #16
 80076a4:	f883 26e7 	strb.w	r2, [r3, #1767]	; 0x6e7
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2210      	movs	r2, #16
 80076ac:	f883 26e8 	strb.w	r2, [r3, #1768]	; 0x6e8
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	221f      	movs	r2, #31
 80076b4:	f883 26e9 	strb.w	r2, [r3, #1769]	; 0x6e9
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	221f      	movs	r2, #31
 80076bc:	f883 26ea 	strb.w	r2, [r3, #1770]	; 0x6ea
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	22f0      	movs	r2, #240	; 0xf0
 80076c4:	f883 26f1 	strb.w	r2, [r3, #1777]	; 0x6f1
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	22f0      	movs	r2, #240	; 0xf0
 80076cc:	f883 26f2 	strb.w	r2, [r3, #1778]	; 0x6f2
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2210      	movs	r2, #16
 80076d4:	f883 26f3 	strb.w	r2, [r3, #1779]	; 0x6f3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2210      	movs	r2, #16
 80076dc:	f883 26f4 	strb.w	r2, [r3, #1780]	; 0x6f4
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2210      	movs	r2, #16
 80076e4:	f883 26f5 	strb.w	r2, [r3, #1781]	; 0x6f5
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	22ff      	movs	r2, #255	; 0xff
 80076ec:	f883 26f6 	strb.w	r2, [r3, #1782]	; 0x6f6
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	22ff      	movs	r2, #255	; 0xff
 80076f4:	f883 26f7 	strb.w	r2, [r3, #1783]	; 0x6f7
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	22ff      	movs	r2, #255	; 0xff
 80076fc:	f883 26f8 	strb.w	r2, [r3, #1784]	; 0x6f8
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	22ff      	movs	r2, #255	; 0xff
 8007704:	f883 26f9 	strb.w	r2, [r3, #1785]	; 0x6f9
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	22ff      	movs	r2, #255	; 0xff
 800770c:	f883 26fa 	strb.w	r2, [r3, #1786]	; 0x6fa
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	22ff      	movs	r2, #255	; 0xff
 8007714:	f883 26fb 	strb.w	r2, [r3, #1787]	; 0x6fb
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	22ff      	movs	r2, #255	; 0xff
 800771c:	f883 26fc 	strb.w	r2, [r3, #1788]	; 0x6fc
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	22ff      	movs	r2, #255	; 0xff
 8007724:	f883 26fd 	strb.w	r2, [r3, #1789]	; 0x6fd
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	22f0      	movs	r2, #240	; 0xf0
 800772c:	f883 26fe 	strb.w	r2, [r3, #1790]	; 0x6fe
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	22f0      	movs	r2, #240	; 0xf0
 8007734:	f883 26ff 	strb.w	r2, [r3, #1791]	; 0x6ff
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	22f0      	movs	r2, #240	; 0xf0
 800773c:	f883 2700 	strb.w	r2, [r3, #1792]	; 0x700
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	22f0      	movs	r2, #240	; 0xf0
 8007744:	f883 2701 	strb.w	r2, [r3, #1793]	; 0x701
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	22f0      	movs	r2, #240	; 0xf0
 800774c:	f883 2702 	strb.w	r2, [r3, #1794]	; 0x702
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	22f0      	movs	r2, #240	; 0xf0
 8007754:	f883 2703 	strb.w	r2, [r3, #1795]	; 0x703
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	22f0      	movs	r2, #240	; 0xf0
 800775c:	f883 2704 	strb.w	r2, [r3, #1796]	; 0x704
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	22f0      	movs	r2, #240	; 0xf0
 8007764:	f883 2705 	strb.w	r2, [r3, #1797]	; 0x705
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	22ff      	movs	r2, #255	; 0xff
 800776c:	f883 2706 	strb.w	r2, [r3, #1798]	; 0x706
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	22ff      	movs	r2, #255	; 0xff
 8007774:	f883 2707 	strb.w	r2, [r3, #1799]	; 0x707
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	22ff      	movs	r2, #255	; 0xff
 800777c:	f883 2708 	strb.w	r2, [r3, #1800]	; 0x708
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	22ff      	movs	r2, #255	; 0xff
 8007784:	f883 2709 	strb.w	r2, [r3, #1801]	; 0x709
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	22ff      	movs	r2, #255	; 0xff
 800778c:	f883 2712 	strb.w	r2, [r3, #1810]	; 0x712
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	22ff      	movs	r2, #255	; 0xff
 8007794:	f883 2713 	strb.w	r2, [r3, #1811]	; 0x713
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	22ff      	movs	r2, #255	; 0xff
 800779c:	f883 2714 	strb.w	r2, [r3, #1812]	; 0x714
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	22ff      	movs	r2, #255	; 0xff
 80077a4:	f883 2715 	strb.w	r2, [r3, #1813]	; 0x715
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	220f      	movs	r2, #15
 80077ac:	f883 2716 	strb.w	r2, [r3, #1814]	; 0x716
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	220f      	movs	r2, #15
 80077b4:	f883 2717 	strb.w	r2, [r3, #1815]	; 0x717
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	220f      	movs	r2, #15
 80077bc:	f883 2718 	strb.w	r2, [r3, #1816]	; 0x718
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	220f      	movs	r2, #15
 80077c4:	f883 2719 	strb.w	r2, [r3, #1817]	; 0x719
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	220f      	movs	r2, #15
 80077cc:	f883 271a 	strb.w	r2, [r3, #1818]	; 0x71a
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	220f      	movs	r2, #15
 80077d4:	f883 271b 	strb.w	r2, [r3, #1819]	; 0x71b
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	220f      	movs	r2, #15
 80077dc:	f883 271c 	strb.w	r2, [r3, #1820]	; 0x71c
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	220f      	movs	r2, #15
 80077e4:	f883 271d 	strb.w	r2, [r3, #1821]	; 0x71d
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2238      	movs	r2, #56	; 0x38
 80077ec:	f883 271e 	strb.w	r2, [r3, #1822]	; 0x71e
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	227c      	movs	r2, #124	; 0x7c
 80077f4:	f883 271f 	strb.w	r2, [r3, #1823]	; 0x71f
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2244      	movs	r2, #68	; 0x44
 80077fc:	f883 2720 	strb.w	r2, [r3, #1824]	; 0x720
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	226c      	movs	r2, #108	; 0x6c
 8007804:	f883 2721 	strb.w	r2, [r3, #1825]	; 0x721
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2238      	movs	r2, #56	; 0x38
 800780c:	f883 2722 	strb.w	r2, [r3, #1826]	; 0x722
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	226c      	movs	r2, #108	; 0x6c
 8007814:	f883 2723 	strb.w	r2, [r3, #1827]	; 0x723
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2244      	movs	r2, #68	; 0x44
 800781c:	f883 2724 	strb.w	r2, [r3, #1828]	; 0x724
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	22fc      	movs	r2, #252	; 0xfc
 8007824:	f883 2726 	strb.w	r2, [r3, #1830]	; 0x726
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	22fe      	movs	r2, #254	; 0xfe
 800782c:	f883 2727 	strb.w	r2, [r3, #1831]	; 0x727
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	222a      	movs	r2, #42	; 0x2a
 8007834:	f883 2728 	strb.w	r2, [r3, #1832]	; 0x728
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	222a      	movs	r2, #42	; 0x2a
 800783c:	f883 2729 	strb.w	r2, [r3, #1833]	; 0x729
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	223e      	movs	r2, #62	; 0x3e
 8007844:	f883 272a 	strb.w	r2, [r3, #1834]	; 0x72a
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2214      	movs	r2, #20
 800784c:	f883 272b 	strb.w	r2, [r3, #1835]	; 0x72b
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	227e      	movs	r2, #126	; 0x7e
 8007854:	f883 272e 	strb.w	r2, [r3, #1838]	; 0x72e
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	227e      	movs	r2, #126	; 0x7e
 800785c:	f883 272f 	strb.w	r2, [r3, #1839]	; 0x72f
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2202      	movs	r2, #2
 8007864:	f883 2730 	strb.w	r2, [r3, #1840]	; 0x730
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2202      	movs	r2, #2
 800786c:	f883 2731 	strb.w	r2, [r3, #1841]	; 0x731
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2206      	movs	r2, #6
 8007874:	f883 2732 	strb.w	r2, [r3, #1842]	; 0x732
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2206      	movs	r2, #6
 800787c:	f883 2733 	strb.w	r2, [r3, #1843]	; 0x733
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2202      	movs	r2, #2
 8007884:	f883 2736 	strb.w	r2, [r3, #1846]	; 0x736
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	227e      	movs	r2, #126	; 0x7e
 800788c:	f883 2737 	strb.w	r2, [r3, #1847]	; 0x737
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	227e      	movs	r2, #126	; 0x7e
 8007894:	f883 2738 	strb.w	r2, [r3, #1848]	; 0x738
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2202      	movs	r2, #2
 800789c:	f883 2739 	strb.w	r2, [r3, #1849]	; 0x739
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	227e      	movs	r2, #126	; 0x7e
 80078a4:	f883 273a 	strb.w	r2, [r3, #1850]	; 0x73a
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	227e      	movs	r2, #126	; 0x7e
 80078ac:	f883 273b 	strb.w	r2, [r3, #1851]	; 0x73b
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2202      	movs	r2, #2
 80078b4:	f883 273c 	strb.w	r2, [r3, #1852]	; 0x73c
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2263      	movs	r2, #99	; 0x63
 80078bc:	f883 273e 	strb.w	r2, [r3, #1854]	; 0x73e
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2277      	movs	r2, #119	; 0x77
 80078c4:	f883 273f 	strb.w	r2, [r3, #1855]	; 0x73f
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	225d      	movs	r2, #93	; 0x5d
 80078cc:	f883 2740 	strb.w	r2, [r3, #1856]	; 0x740
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2249      	movs	r2, #73	; 0x49
 80078d4:	f883 2741 	strb.w	r2, [r3, #1857]	; 0x741
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2263      	movs	r2, #99	; 0x63
 80078dc:	f883 2742 	strb.w	r2, [r3, #1858]	; 0x742
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2263      	movs	r2, #99	; 0x63
 80078e4:	f883 2743 	strb.w	r2, [r3, #1859]	; 0x743
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2238      	movs	r2, #56	; 0x38
 80078ec:	f883 2746 	strb.w	r2, [r3, #1862]	; 0x746
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	227c      	movs	r2, #124	; 0x7c
 80078f4:	f883 2747 	strb.w	r2, [r3, #1863]	; 0x747
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2244      	movs	r2, #68	; 0x44
 80078fc:	f883 2748 	strb.w	r2, [r3, #1864]	; 0x748
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	227c      	movs	r2, #124	; 0x7c
 8007904:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	223c      	movs	r2, #60	; 0x3c
 800790c:	f883 274a 	strb.w	r2, [r3, #1866]	; 0x74a
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2204      	movs	r2, #4
 8007914:	f883 274b 	strb.w	r2, [r3, #1867]	; 0x74b
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2204      	movs	r2, #4
 800791c:	f883 274c 	strb.w	r2, [r3, #1868]	; 0x74c
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2280      	movs	r2, #128	; 0x80
 8007924:	f883 274e 	strb.w	r2, [r3, #1870]	; 0x74e
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	22fe      	movs	r2, #254	; 0xfe
 800792c:	f883 274f 	strb.w	r2, [r3, #1871]	; 0x74f
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	227e      	movs	r2, #126	; 0x7e
 8007934:	f883 2750 	strb.w	r2, [r3, #1872]	; 0x750
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2220      	movs	r2, #32
 800793c:	f883 2751 	strb.w	r2, [r3, #1873]	; 0x751
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2220      	movs	r2, #32
 8007944:	f883 2752 	strb.w	r2, [r3, #1874]	; 0x752
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	223e      	movs	r2, #62	; 0x3e
 800794c:	f883 2753 	strb.w	r2, [r3, #1875]	; 0x753
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	221e      	movs	r2, #30
 8007954:	f883 2754 	strb.w	r2, [r3, #1876]	; 0x754
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2204      	movs	r2, #4
 800795c:	f883 2756 	strb.w	r2, [r3, #1878]	; 0x756
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2206      	movs	r2, #6
 8007964:	f883 2757 	strb.w	r2, [r3, #1879]	; 0x757
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2202      	movs	r2, #2
 800796c:	f883 2758 	strb.w	r2, [r3, #1880]	; 0x758
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	227e      	movs	r2, #126	; 0x7e
 8007974:	f883 2759 	strb.w	r2, [r3, #1881]	; 0x759
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	227c      	movs	r2, #124	; 0x7c
 800797c:	f883 275a 	strb.w	r2, [r3, #1882]	; 0x75a
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2206      	movs	r2, #6
 8007984:	f883 275b 	strb.w	r2, [r3, #1883]	; 0x75b
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2202      	movs	r2, #2
 800798c:	f883 275c 	strb.w	r2, [r3, #1884]	; 0x75c
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2299      	movs	r2, #153	; 0x99
 8007994:	f883 275e 	strb.w	r2, [r3, #1886]	; 0x75e
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	22bd      	movs	r2, #189	; 0xbd
 800799c:	f883 275f 	strb.w	r2, [r3, #1887]	; 0x75f
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	22e7      	movs	r2, #231	; 0xe7
 80079a4:	f883 2760 	strb.w	r2, [r3, #1888]	; 0x760
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	22e7      	movs	r2, #231	; 0xe7
 80079ac:	f883 2761 	strb.w	r2, [r3, #1889]	; 0x761
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	22bd      	movs	r2, #189	; 0xbd
 80079b4:	f883 2762 	strb.w	r2, [r3, #1890]	; 0x762
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2299      	movs	r2, #153	; 0x99
 80079bc:	f883 2763 	strb.w	r2, [r3, #1891]	; 0x763
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	221c      	movs	r2, #28
 80079c4:	f883 2766 	strb.w	r2, [r3, #1894]	; 0x766
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	223e      	movs	r2, #62	; 0x3e
 80079cc:	f883 2767 	strb.w	r2, [r3, #1895]	; 0x767
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	226b      	movs	r2, #107	; 0x6b
 80079d4:	f883 2768 	strb.w	r2, [r3, #1896]	; 0x768
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2249      	movs	r2, #73	; 0x49
 80079dc:	f883 2769 	strb.w	r2, [r3, #1897]	; 0x769
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	226b      	movs	r2, #107	; 0x6b
 80079e4:	f883 276a 	strb.w	r2, [r3, #1898]	; 0x76a
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	223e      	movs	r2, #62	; 0x3e
 80079ec:	f883 276b 	strb.w	r2, [r3, #1899]	; 0x76b
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	221c      	movs	r2, #28
 80079f4:	f883 276c 	strb.w	r2, [r3, #1900]	; 0x76c
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	224c      	movs	r2, #76	; 0x4c
 80079fc:	f883 276e 	strb.w	r2, [r3, #1902]	; 0x76e
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	227e      	movs	r2, #126	; 0x7e
 8007a04:	f883 276f 	strb.w	r2, [r3, #1903]	; 0x76f
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2273      	movs	r2, #115	; 0x73
 8007a0c:	f883 2770 	strb.w	r2, [r3, #1904]	; 0x770
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 2771 	strb.w	r2, [r3, #1905]	; 0x771
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2273      	movs	r2, #115	; 0x73
 8007a1c:	f883 2772 	strb.w	r2, [r3, #1906]	; 0x772
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	227e      	movs	r2, #126	; 0x7e
 8007a24:	f883 2773 	strb.w	r2, [r3, #1907]	; 0x773
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	224c      	movs	r2, #76	; 0x4c
 8007a2c:	f883 2774 	strb.w	r2, [r3, #1908]	; 0x774
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2230      	movs	r2, #48	; 0x30
 8007a34:	f883 2776 	strb.w	r2, [r3, #1910]	; 0x776
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2278      	movs	r2, #120	; 0x78
 8007a3c:	f883 2777 	strb.w	r2, [r3, #1911]	; 0x777
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	224a      	movs	r2, #74	; 0x4a
 8007a44:	f883 2778 	strb.w	r2, [r3, #1912]	; 0x778
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	224f      	movs	r2, #79	; 0x4f
 8007a4c:	f883 2779 	strb.w	r2, [r3, #1913]	; 0x779
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	227d      	movs	r2, #125	; 0x7d
 8007a54:	f883 277a 	strb.w	r2, [r3, #1914]	; 0x77a
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2239      	movs	r2, #57	; 0x39
 8007a5c:	f883 277b 	strb.w	r2, [r3, #1915]	; 0x77b
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2218      	movs	r2, #24
 8007a64:	f883 277e 	strb.w	r2, [r3, #1918]	; 0x77e
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	223c      	movs	r2, #60	; 0x3c
 8007a6c:	f883 277f 	strb.w	r2, [r3, #1919]	; 0x77f
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2224      	movs	r2, #36	; 0x24
 8007a74:	f883 2780 	strb.w	r2, [r3, #1920]	; 0x780
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	223c      	movs	r2, #60	; 0x3c
 8007a7c:	f883 2781 	strb.w	r2, [r3, #1921]	; 0x781
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	223c      	movs	r2, #60	; 0x3c
 8007a84:	f883 2782 	strb.w	r2, [r3, #1922]	; 0x782
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2224      	movs	r2, #36	; 0x24
 8007a8c:	f883 2783 	strb.w	r2, [r3, #1923]	; 0x783
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	223c      	movs	r2, #60	; 0x3c
 8007a94:	f883 2784 	strb.w	r2, [r3, #1924]	; 0x784
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2218      	movs	r2, #24
 8007a9c:	f883 2785 	strb.w	r2, [r3, #1925]	; 0x785
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2298      	movs	r2, #152	; 0x98
 8007aa4:	f883 2786 	strb.w	r2, [r3, #1926]	; 0x786
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	22fc      	movs	r2, #252	; 0xfc
 8007aac:	f883 2787 	strb.w	r2, [r3, #1927]	; 0x787
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2264      	movs	r2, #100	; 0x64
 8007ab4:	f883 2788 	strb.w	r2, [r3, #1928]	; 0x788
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	223c      	movs	r2, #60	; 0x3c
 8007abc:	f883 2789 	strb.w	r2, [r3, #1929]	; 0x789
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	223e      	movs	r2, #62	; 0x3e
 8007ac4:	f883 278a 	strb.w	r2, [r3, #1930]	; 0x78a
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2227      	movs	r2, #39	; 0x27
 8007acc:	f883 278b 	strb.w	r2, [r3, #1931]	; 0x78b
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	223d      	movs	r2, #61	; 0x3d
 8007ad4:	f883 278c 	strb.w	r2, [r3, #1932]	; 0x78c
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2218      	movs	r2, #24
 8007adc:	f883 278d 	strb.w	r2, [r3, #1933]	; 0x78d
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	221c      	movs	r2, #28
 8007ae4:	f883 278e 	strb.w	r2, [r3, #1934]	; 0x78e
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	223e      	movs	r2, #62	; 0x3e
 8007aec:	f883 278f 	strb.w	r2, [r3, #1935]	; 0x78f
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	226b      	movs	r2, #107	; 0x6b
 8007af4:	f883 2790 	strb.w	r2, [r3, #1936]	; 0x790
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2249      	movs	r2, #73	; 0x49
 8007afc:	f883 2791 	strb.w	r2, [r3, #1937]	; 0x791
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2249      	movs	r2, #73	; 0x49
 8007b04:	f883 2792 	strb.w	r2, [r3, #1938]	; 0x792
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	227e      	movs	r2, #126	; 0x7e
 8007b0c:	f883 2796 	strb.w	r2, [r3, #1942]	; 0x796
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	227f      	movs	r2, #127	; 0x7f
 8007b14:	f883 2797 	strb.w	r2, [r3, #1943]	; 0x797
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	f883 2798 	strb.w	r2, [r3, #1944]	; 0x798
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 2799 	strb.w	r2, [r3, #1945]	; 0x799
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	227f      	movs	r2, #127	; 0x7f
 8007b2c:	f883 279a 	strb.w	r2, [r3, #1946]	; 0x79a
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	227e      	movs	r2, #126	; 0x7e
 8007b34:	f883 279b 	strb.w	r2, [r3, #1947]	; 0x79b
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	222a      	movs	r2, #42	; 0x2a
 8007b3c:	f883 279e 	strb.w	r2, [r3, #1950]	; 0x79e
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	222a      	movs	r2, #42	; 0x2a
 8007b44:	f883 279f 	strb.w	r2, [r3, #1951]	; 0x79f
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	222a      	movs	r2, #42	; 0x2a
 8007b4c:	f883 27a0 	strb.w	r2, [r3, #1952]	; 0x7a0
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	222a      	movs	r2, #42	; 0x2a
 8007b54:	f883 27a1 	strb.w	r2, [r3, #1953]	; 0x7a1
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	222a      	movs	r2, #42	; 0x2a
 8007b5c:	f883 27a2 	strb.w	r2, [r3, #1954]	; 0x7a2
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	222a      	movs	r2, #42	; 0x2a
 8007b64:	f883 27a3 	strb.w	r2, [r3, #1955]	; 0x7a3
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2244      	movs	r2, #68	; 0x44
 8007b6c:	f883 27a6 	strb.w	r2, [r3, #1958]	; 0x7a6
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2244      	movs	r2, #68	; 0x44
 8007b74:	f883 27a7 	strb.w	r2, [r3, #1959]	; 0x7a7
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	225f      	movs	r2, #95	; 0x5f
 8007b7c:	f883 27a8 	strb.w	r2, [r3, #1960]	; 0x7a8
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	225f      	movs	r2, #95	; 0x5f
 8007b84:	f883 27a9 	strb.w	r2, [r3, #1961]	; 0x7a9
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2244      	movs	r2, #68	; 0x44
 8007b8c:	f883 27aa 	strb.w	r2, [r3, #1962]	; 0x7aa
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2244      	movs	r2, #68	; 0x44
 8007b94:	f883 27ab 	strb.w	r2, [r3, #1963]	; 0x7ab
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2240      	movs	r2, #64	; 0x40
 8007b9c:	f883 27ae 	strb.w	r2, [r3, #1966]	; 0x7ae
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2251      	movs	r2, #81	; 0x51
 8007ba4:	f883 27af 	strb.w	r2, [r3, #1967]	; 0x7af
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	225b      	movs	r2, #91	; 0x5b
 8007bac:	f883 27b0 	strb.w	r2, [r3, #1968]	; 0x7b0
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	224e      	movs	r2, #78	; 0x4e
 8007bb4:	f883 27b1 	strb.w	r2, [r3, #1969]	; 0x7b1
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2244      	movs	r2, #68	; 0x44
 8007bbc:	f883 27b2 	strb.w	r2, [r3, #1970]	; 0x7b2
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2240      	movs	r2, #64	; 0x40
 8007bc4:	f883 27b3 	strb.w	r2, [r3, #1971]	; 0x7b3
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2240      	movs	r2, #64	; 0x40
 8007bcc:	f883 27b6 	strb.w	r2, [r3, #1974]	; 0x7b6
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2244      	movs	r2, #68	; 0x44
 8007bd4:	f883 27b7 	strb.w	r2, [r3, #1975]	; 0x7b7
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	224e      	movs	r2, #78	; 0x4e
 8007bdc:	f883 27b8 	strb.w	r2, [r3, #1976]	; 0x7b8
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	225b      	movs	r2, #91	; 0x5b
 8007be4:	f883 27b9 	strb.w	r2, [r3, #1977]	; 0x7b9
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2251      	movs	r2, #81	; 0x51
 8007bec:	f883 27ba 	strb.w	r2, [r3, #1978]	; 0x7ba
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2240      	movs	r2, #64	; 0x40
 8007bf4:	f883 27bb 	strb.w	r2, [r3, #1979]	; 0x7bb
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	22fe      	movs	r2, #254	; 0xfe
 8007bfc:	f883 27c1 	strb.w	r2, [r3, #1985]	; 0x7c1
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	22ff      	movs	r2, #255	; 0xff
 8007c04:	f883 27c2 	strb.w	r2, [r3, #1986]	; 0x7c2
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f883 27c3 	strb.w	r2, [r3, #1987]	; 0x7c3
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2207      	movs	r2, #7
 8007c14:	f883 27c4 	strb.w	r2, [r3, #1988]	; 0x7c4
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2206      	movs	r2, #6
 8007c1c:	f883 27c5 	strb.w	r2, [r3, #1989]	; 0x7c5
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2260      	movs	r2, #96	; 0x60
 8007c24:	f883 27c6 	strb.w	r2, [r3, #1990]	; 0x7c6
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	22e0      	movs	r2, #224	; 0xe0
 8007c2c:	f883 27c7 	strb.w	r2, [r3, #1991]	; 0x7c7
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2280      	movs	r2, #128	; 0x80
 8007c34:	f883 27c8 	strb.w	r2, [r3, #1992]	; 0x7c8
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	22ff      	movs	r2, #255	; 0xff
 8007c3c:	f883 27c9 	strb.w	r2, [r3, #1993]	; 0x7c9
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	227f      	movs	r2, #127	; 0x7f
 8007c44:	f883 27ca 	strb.w	r2, [r3, #1994]	; 0x7ca
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2208      	movs	r2, #8
 8007c4c:	f883 27ce 	strb.w	r2, [r3, #1998]	; 0x7ce
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2208      	movs	r2, #8
 8007c54:	f883 27cf 	strb.w	r2, [r3, #1999]	; 0x7cf
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	226b      	movs	r2, #107	; 0x6b
 8007c5c:	f883 27d0 	strb.w	r2, [r3, #2000]	; 0x7d0
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	226b      	movs	r2, #107	; 0x6b
 8007c64:	f883 27d1 	strb.w	r2, [r3, #2001]	; 0x7d1
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2208      	movs	r2, #8
 8007c6c:	f883 27d2 	strb.w	r2, [r3, #2002]	; 0x7d2
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2208      	movs	r2, #8
 8007c74:	f883 27d3 	strb.w	r2, [r3, #2003]	; 0x7d3
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2224      	movs	r2, #36	; 0x24
 8007c7c:	f883 27d6 	strb.w	r2, [r3, #2006]	; 0x7d6
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2236      	movs	r2, #54	; 0x36
 8007c84:	f883 27d7 	strb.w	r2, [r3, #2007]	; 0x7d7
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2212      	movs	r2, #18
 8007c8c:	f883 27d8 	strb.w	r2, [r3, #2008]	; 0x7d8
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2236      	movs	r2, #54	; 0x36
 8007c94:	f883 27d9 	strb.w	r2, [r3, #2009]	; 0x7d9
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2224      	movs	r2, #36	; 0x24
 8007c9c:	f883 27da 	strb.w	r2, [r3, #2010]	; 0x7da
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2236      	movs	r2, #54	; 0x36
 8007ca4:	f883 27db 	strb.w	r2, [r3, #2011]	; 0x7db
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2212      	movs	r2, #18
 8007cac:	f883 27dc 	strb.w	r2, [r3, #2012]	; 0x7dc
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2206      	movs	r2, #6
 8007cb4:	f883 27df 	strb.w	r2, [r3, #2015]	; 0x7df
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	220f      	movs	r2, #15
 8007cbc:	f883 27e0 	strb.w	r2, [r3, #2016]	; 0x7e0
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2209      	movs	r2, #9
 8007cc4:	f883 27e1 	strb.w	r2, [r3, #2017]	; 0x7e1
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	220f      	movs	r2, #15
 8007ccc:	f883 27e2 	strb.w	r2, [r3, #2018]	; 0x7e2
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2206      	movs	r2, #6
 8007cd4:	f883 27e3 	strb.w	r2, [r3, #2019]	; 0x7e3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2218      	movs	r2, #24
 8007cdc:	f883 27e9 	strb.w	r2, [r3, #2025]	; 0x7e9
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2218      	movs	r2, #24
 8007ce4:	f883 27ea 	strb.w	r2, [r3, #2026]	; 0x7ea
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2210      	movs	r2, #16
 8007cec:	f883 27f1 	strb.w	r2, [r3, #2033]	; 0x7f1
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2210      	movs	r2, #16
 8007cf4:	f883 27f2 	strb.w	r2, [r3, #2034]	; 0x7f2
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2210      	movs	r2, #16
 8007cfc:	f883 27f6 	strb.w	r2, [r3, #2038]	; 0x7f6
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2230      	movs	r2, #48	; 0x30
 8007d04:	f883 27f7 	strb.w	r2, [r3, #2039]	; 0x7f7
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2270      	movs	r2, #112	; 0x70
 8007d0c:	f883 27f8 	strb.w	r2, [r3, #2040]	; 0x7f8
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	22c0      	movs	r2, #192	; 0xc0
 8007d14:	f883 27f9 	strb.w	r2, [r3, #2041]	; 0x7f9
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	22ff      	movs	r2, #255	; 0xff
 8007d1c:	f883 27fa 	strb.w	r2, [r3, #2042]	; 0x7fa
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	22ff      	movs	r2, #255	; 0xff
 8007d24:	f883 27fb 	strb.w	r2, [r3, #2043]	; 0x7fb
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f883 27fc 	strb.w	r2, [r3, #2044]	; 0x7fc
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2201      	movs	r2, #1
 8007d34:	f883 27fd 	strb.w	r2, [r3, #2045]	; 0x7fd
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	221f      	movs	r2, #31
 8007d3c:	f883 27ff 	strb.w	r2, [r3, #2047]	; 0x7ff
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	221f      	movs	r2, #31
 8007d44:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 2801 	strb.w	r2, [r3, #2049]	; 0x801
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	221f      	movs	r2, #31
 8007d54:	f883 2802 	strb.w	r2, [r3, #2050]	; 0x802
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	221e      	movs	r2, #30
 8007d5c:	f883 2803 	strb.w	r2, [r3, #2051]	; 0x803
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2219      	movs	r2, #25
 8007d64:	f883 2807 	strb.w	r2, [r3, #2055]	; 0x807
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	221d      	movs	r2, #29
 8007d6c:	f883 2808 	strb.w	r2, [r3, #2056]	; 0x808
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2217      	movs	r2, #23
 8007d74:	f883 2809 	strb.w	r2, [r3, #2057]	; 0x809
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2212      	movs	r2, #18
 8007d7c:	f883 280a 	strb.w	r2, [r3, #2058]	; 0x80a
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	223c      	movs	r2, #60	; 0x3c
 8007d84:	f883 2810 	strb.w	r2, [r3, #2064]	; 0x810
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	223c      	movs	r2, #60	; 0x3c
 8007d8c:	f883 2811 	strb.w	r2, [r3, #2065]	; 0x811
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	223c      	movs	r2, #60	; 0x3c
 8007d94:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	223c      	movs	r2, #60	; 0x3c
 8007d9c:	f883 2813 	strb.w	r2, [r3, #2067]	; 0x813
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f603 0326 	addw	r3, r3, #2086	; 0x826
 8007da6:	f240 12db 	movw	r2, #475	; 0x1db
 8007daa:	2100      	movs	r1, #0
 8007dac:	4618      	mov	r0, r3
 8007dae:	f005 ffd9 	bl	800dd64 <memset>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	225f      	movs	r2, #95	; 0x5f
 8007db6:	f883 282d 	strb.w	r2, [r3, #2093]	; 0x82d
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2207      	movs	r2, #7
 8007dbe:	f883 2831 	strb.w	r2, [r3, #2097]	; 0x831
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2207      	movs	r2, #7
 8007dc6:	f883 2833 	strb.w	r2, [r3, #2099]	; 0x833
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2214      	movs	r2, #20
 8007dce:	f883 2835 	strb.w	r2, [r3, #2101]	; 0x835
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	227f      	movs	r2, #127	; 0x7f
 8007dd6:	f883 2836 	strb.w	r2, [r3, #2102]	; 0x836
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2214      	movs	r2, #20
 8007dde:	f883 2837 	strb.w	r2, [r3, #2103]	; 0x837
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	227f      	movs	r2, #127	; 0x7f
 8007de6:	f883 2838 	strb.w	r2, [r3, #2104]	; 0x838
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2214      	movs	r2, #20
 8007dee:	f883 2839 	strb.w	r2, [r3, #2105]	; 0x839
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2224      	movs	r2, #36	; 0x24
 8007df6:	f883 283a 	strb.w	r2, [r3, #2106]	; 0x83a
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	222a      	movs	r2, #42	; 0x2a
 8007dfe:	f883 283b 	strb.w	r2, [r3, #2107]	; 0x83b
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	227f      	movs	r2, #127	; 0x7f
 8007e06:	f883 283c 	strb.w	r2, [r3, #2108]	; 0x83c
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	222a      	movs	r2, #42	; 0x2a
 8007e0e:	f883 283d 	strb.w	r2, [r3, #2109]	; 0x83d
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2212      	movs	r2, #18
 8007e16:	f883 283e 	strb.w	r2, [r3, #2110]	; 0x83e
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2223      	movs	r2, #35	; 0x23
 8007e1e:	f883 283f 	strb.w	r2, [r3, #2111]	; 0x83f
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2213      	movs	r2, #19
 8007e26:	f883 2840 	strb.w	r2, [r3, #2112]	; 0x840
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2208      	movs	r2, #8
 8007e2e:	f883 2841 	strb.w	r2, [r3, #2113]	; 0x841
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2264      	movs	r2, #100	; 0x64
 8007e36:	f883 2842 	strb.w	r2, [r3, #2114]	; 0x842
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2262      	movs	r2, #98	; 0x62
 8007e3e:	f883 2843 	strb.w	r2, [r3, #2115]	; 0x843
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2236      	movs	r2, #54	; 0x36
 8007e46:	f883 2844 	strb.w	r2, [r3, #2116]	; 0x844
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2249      	movs	r2, #73	; 0x49
 8007e4e:	f883 2845 	strb.w	r2, [r3, #2117]	; 0x845
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2255      	movs	r2, #85	; 0x55
 8007e56:	f883 2846 	strb.w	r2, [r3, #2118]	; 0x846
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2222      	movs	r2, #34	; 0x22
 8007e5e:	f883 2847 	strb.w	r2, [r3, #2119]	; 0x847
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2250      	movs	r2, #80	; 0x50
 8007e66:	f883 2848 	strb.w	r2, [r3, #2120]	; 0x848
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2205      	movs	r2, #5
 8007e6e:	f883 284a 	strb.w	r2, [r3, #2122]	; 0x84a
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2203      	movs	r2, #3
 8007e76:	f883 284b 	strb.w	r2, [r3, #2123]	; 0x84b
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	221c      	movs	r2, #28
 8007e7e:	f883 284f 	strb.w	r2, [r3, #2127]	; 0x84f
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2222      	movs	r2, #34	; 0x22
 8007e86:	f883 2850 	strb.w	r2, [r3, #2128]	; 0x850
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2241      	movs	r2, #65	; 0x41
 8007e8e:	f883 2851 	strb.w	r2, [r3, #2129]	; 0x851
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2241      	movs	r2, #65	; 0x41
 8007e96:	f883 2854 	strb.w	r2, [r3, #2132]	; 0x854
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2222      	movs	r2, #34	; 0x22
 8007e9e:	f883 2855 	strb.w	r2, [r3, #2133]	; 0x855
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	221c      	movs	r2, #28
 8007ea6:	f883 2856 	strb.w	r2, [r3, #2134]	; 0x856
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2208      	movs	r2, #8
 8007eae:	f883 2858 	strb.w	r2, [r3, #2136]	; 0x858
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	222a      	movs	r2, #42	; 0x2a
 8007eb6:	f883 2859 	strb.w	r2, [r3, #2137]	; 0x859
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	221c      	movs	r2, #28
 8007ebe:	f883 285a 	strb.w	r2, [r3, #2138]	; 0x85a
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	222a      	movs	r2, #42	; 0x2a
 8007ec6:	f883 285b 	strb.w	r2, [r3, #2139]	; 0x85b
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2208      	movs	r2, #8
 8007ece:	f883 285c 	strb.w	r2, [r3, #2140]	; 0x85c
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2208      	movs	r2, #8
 8007ed6:	f883 285d 	strb.w	r2, [r3, #2141]	; 0x85d
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2208      	movs	r2, #8
 8007ede:	f883 285e 	strb.w	r2, [r3, #2142]	; 0x85e
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	223e      	movs	r2, #62	; 0x3e
 8007ee6:	f883 285f 	strb.w	r2, [r3, #2143]	; 0x85f
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2208      	movs	r2, #8
 8007eee:	f883 2860 	strb.w	r2, [r3, #2144]	; 0x860
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2208      	movs	r2, #8
 8007ef6:	f883 2861 	strb.w	r2, [r3, #2145]	; 0x861
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2250      	movs	r2, #80	; 0x50
 8007efe:	f883 2863 	strb.w	r2, [r3, #2147]	; 0x863
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2230      	movs	r2, #48	; 0x30
 8007f06:	f883 2864 	strb.w	r2, [r3, #2148]	; 0x864
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2208      	movs	r2, #8
 8007f0e:	f883 2867 	strb.w	r2, [r3, #2151]	; 0x867
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2208      	movs	r2, #8
 8007f16:	f883 2868 	strb.w	r2, [r3, #2152]	; 0x868
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2208      	movs	r2, #8
 8007f1e:	f883 2869 	strb.w	r2, [r3, #2153]	; 0x869
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2208      	movs	r2, #8
 8007f26:	f883 286a 	strb.w	r2, [r3, #2154]	; 0x86a
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2208      	movs	r2, #8
 8007f2e:	f883 286b 	strb.w	r2, [r3, #2155]	; 0x86b
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2230      	movs	r2, #48	; 0x30
 8007f36:	f883 286d 	strb.w	r2, [r3, #2157]	; 0x86d
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2230      	movs	r2, #48	; 0x30
 8007f3e:	f883 286e 	strb.w	r2, [r3, #2158]	; 0x86e
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2220      	movs	r2, #32
 8007f46:	f883 2871 	strb.w	r2, [r3, #2161]	; 0x871
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2210      	movs	r2, #16
 8007f4e:	f883 2872 	strb.w	r2, [r3, #2162]	; 0x872
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2208      	movs	r2, #8
 8007f56:	f883 2873 	strb.w	r2, [r3, #2163]	; 0x873
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2204      	movs	r2, #4
 8007f5e:	f883 2874 	strb.w	r2, [r3, #2164]	; 0x874
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2202      	movs	r2, #2
 8007f66:	f883 2875 	strb.w	r2, [r3, #2165]	; 0x875
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	223e      	movs	r2, #62	; 0x3e
 8007f6e:	f883 2876 	strb.w	r2, [r3, #2166]	; 0x876
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2251      	movs	r2, #81	; 0x51
 8007f76:	f883 2877 	strb.w	r2, [r3, #2167]	; 0x877
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2249      	movs	r2, #73	; 0x49
 8007f7e:	f883 2878 	strb.w	r2, [r3, #2168]	; 0x878
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2245      	movs	r2, #69	; 0x45
 8007f86:	f883 2879 	strb.w	r2, [r3, #2169]	; 0x879
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	223e      	movs	r2, #62	; 0x3e
 8007f8e:	f883 287a 	strb.w	r2, [r3, #2170]	; 0x87a
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2242      	movs	r2, #66	; 0x42
 8007f96:	f883 287c 	strb.w	r2, [r3, #2172]	; 0x87c
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	227f      	movs	r2, #127	; 0x7f
 8007f9e:	f883 287d 	strb.w	r2, [r3, #2173]	; 0x87d
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2240      	movs	r2, #64	; 0x40
 8007fa6:	f883 287e 	strb.w	r2, [r3, #2174]	; 0x87e
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2242      	movs	r2, #66	; 0x42
 8007fae:	f883 2880 	strb.w	r2, [r3, #2176]	; 0x880
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2261      	movs	r2, #97	; 0x61
 8007fb6:	f883 2881 	strb.w	r2, [r3, #2177]	; 0x881
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2251      	movs	r2, #81	; 0x51
 8007fbe:	f883 2882 	strb.w	r2, [r3, #2178]	; 0x882
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2249      	movs	r2, #73	; 0x49
 8007fc6:	f883 2883 	strb.w	r2, [r3, #2179]	; 0x883
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2246      	movs	r2, #70	; 0x46
 8007fce:	f883 2884 	strb.w	r2, [r3, #2180]	; 0x884
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2221      	movs	r2, #33	; 0x21
 8007fd6:	f883 2885 	strb.w	r2, [r3, #2181]	; 0x885
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2241      	movs	r2, #65	; 0x41
 8007fde:	f883 2886 	strb.w	r2, [r3, #2182]	; 0x886
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2245      	movs	r2, #69	; 0x45
 8007fe6:	f883 2887 	strb.w	r2, [r3, #2183]	; 0x887
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	224b      	movs	r2, #75	; 0x4b
 8007fee:	f883 2888 	strb.w	r2, [r3, #2184]	; 0x888
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2231      	movs	r2, #49	; 0x31
 8007ff6:	f883 2889 	strb.w	r2, [r3, #2185]	; 0x889
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2218      	movs	r2, #24
 8007ffe:	f883 288a 	strb.w	r2, [r3, #2186]	; 0x88a
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2214      	movs	r2, #20
 8008006:	f883 288b 	strb.w	r2, [r3, #2187]	; 0x88b
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2212      	movs	r2, #18
 800800e:	f883 288c 	strb.w	r2, [r3, #2188]	; 0x88c
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	227f      	movs	r2, #127	; 0x7f
 8008016:	f883 288d 	strb.w	r2, [r3, #2189]	; 0x88d
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2210      	movs	r2, #16
 800801e:	f883 288e 	strb.w	r2, [r3, #2190]	; 0x88e
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2227      	movs	r2, #39	; 0x27
 8008026:	f883 288f 	strb.w	r2, [r3, #2191]	; 0x88f
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2245      	movs	r2, #69	; 0x45
 800802e:	f883 2890 	strb.w	r2, [r3, #2192]	; 0x890
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2245      	movs	r2, #69	; 0x45
 8008036:	f883 2891 	strb.w	r2, [r3, #2193]	; 0x891
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2245      	movs	r2, #69	; 0x45
 800803e:	f883 2892 	strb.w	r2, [r3, #2194]	; 0x892
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2239      	movs	r2, #57	; 0x39
 8008046:	f883 2893 	strb.w	r2, [r3, #2195]	; 0x893
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	223c      	movs	r2, #60	; 0x3c
 800804e:	f883 2894 	strb.w	r2, [r3, #2196]	; 0x894
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	224a      	movs	r2, #74	; 0x4a
 8008056:	f883 2895 	strb.w	r2, [r3, #2197]	; 0x895
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2249      	movs	r2, #73	; 0x49
 800805e:	f883 2896 	strb.w	r2, [r3, #2198]	; 0x896
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2249      	movs	r2, #73	; 0x49
 8008066:	f883 2897 	strb.w	r2, [r3, #2199]	; 0x897
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2230      	movs	r2, #48	; 0x30
 800806e:	f883 2898 	strb.w	r2, [r3, #2200]	; 0x898
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2201      	movs	r2, #1
 8008076:	f883 2899 	strb.w	r2, [r3, #2201]	; 0x899
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2271      	movs	r2, #113	; 0x71
 800807e:	f883 289a 	strb.w	r2, [r3, #2202]	; 0x89a
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2209      	movs	r2, #9
 8008086:	f883 289b 	strb.w	r2, [r3, #2203]	; 0x89b
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2205      	movs	r2, #5
 800808e:	f883 289c 	strb.w	r2, [r3, #2204]	; 0x89c
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2203      	movs	r2, #3
 8008096:	f883 289d 	strb.w	r2, [r3, #2205]	; 0x89d
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2236      	movs	r2, #54	; 0x36
 800809e:	f883 289e 	strb.w	r2, [r3, #2206]	; 0x89e
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2249      	movs	r2, #73	; 0x49
 80080a6:	f883 289f 	strb.w	r2, [r3, #2207]	; 0x89f
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2249      	movs	r2, #73	; 0x49
 80080ae:	f883 28a0 	strb.w	r2, [r3, #2208]	; 0x8a0
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2249      	movs	r2, #73	; 0x49
 80080b6:	f883 28a1 	strb.w	r2, [r3, #2209]	; 0x8a1
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2236      	movs	r2, #54	; 0x36
 80080be:	f883 28a2 	strb.w	r2, [r3, #2210]	; 0x8a2
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2206      	movs	r2, #6
 80080c6:	f883 28a3 	strb.w	r2, [r3, #2211]	; 0x8a3
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2249      	movs	r2, #73	; 0x49
 80080ce:	f883 28a4 	strb.w	r2, [r3, #2212]	; 0x8a4
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2249      	movs	r2, #73	; 0x49
 80080d6:	f883 28a5 	strb.w	r2, [r3, #2213]	; 0x8a5
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2229      	movs	r2, #41	; 0x29
 80080de:	f883 28a6 	strb.w	r2, [r3, #2214]	; 0x8a6
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	221e      	movs	r2, #30
 80080e6:	f883 28a7 	strb.w	r2, [r3, #2215]	; 0x8a7
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2236      	movs	r2, #54	; 0x36
 80080ee:	f883 28a9 	strb.w	r2, [r3, #2217]	; 0x8a9
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2236      	movs	r2, #54	; 0x36
 80080f6:	f883 28aa 	strb.w	r2, [r3, #2218]	; 0x8aa
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2256      	movs	r2, #86	; 0x56
 80080fe:	f883 28ae 	strb.w	r2, [r3, #2222]	; 0x8ae
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2236      	movs	r2, #54	; 0x36
 8008106:	f883 28af 	strb.w	r2, [r3, #2223]	; 0x8af
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2208      	movs	r2, #8
 800810e:	f883 28b3 	strb.w	r2, [r3, #2227]	; 0x8b3
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2214      	movs	r2, #20
 8008116:	f883 28b4 	strb.w	r2, [r3, #2228]	; 0x8b4
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2222      	movs	r2, #34	; 0x22
 800811e:	f883 28b5 	strb.w	r2, [r3, #2229]	; 0x8b5
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2241      	movs	r2, #65	; 0x41
 8008126:	f883 28b6 	strb.w	r2, [r3, #2230]	; 0x8b6
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2214      	movs	r2, #20
 800812e:	f883 28b7 	strb.w	r2, [r3, #2231]	; 0x8b7
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2214      	movs	r2, #20
 8008136:	f883 28b8 	strb.w	r2, [r3, #2232]	; 0x8b8
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2214      	movs	r2, #20
 800813e:	f883 28b9 	strb.w	r2, [r3, #2233]	; 0x8b9
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2214      	movs	r2, #20
 8008146:	f883 28ba 	strb.w	r2, [r3, #2234]	; 0x8ba
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2214      	movs	r2, #20
 800814e:	f883 28bb 	strb.w	r2, [r3, #2235]	; 0x8bb
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2241      	movs	r2, #65	; 0x41
 8008156:	f883 28bc 	strb.w	r2, [r3, #2236]	; 0x8bc
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2222      	movs	r2, #34	; 0x22
 800815e:	f883 28bd 	strb.w	r2, [r3, #2237]	; 0x8bd
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2214      	movs	r2, #20
 8008166:	f883 28be 	strb.w	r2, [r3, #2238]	; 0x8be
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2208      	movs	r2, #8
 800816e:	f883 28bf 	strb.w	r2, [r3, #2239]	; 0x8bf
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2202      	movs	r2, #2
 8008176:	f883 28c1 	strb.w	r2, [r3, #2241]	; 0x8c1
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2201      	movs	r2, #1
 800817e:	f883 28c2 	strb.w	r2, [r3, #2242]	; 0x8c2
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2251      	movs	r2, #81	; 0x51
 8008186:	f883 28c3 	strb.w	r2, [r3, #2243]	; 0x8c3
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2209      	movs	r2, #9
 800818e:	f883 28c4 	strb.w	r2, [r3, #2244]	; 0x8c4
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2206      	movs	r2, #6
 8008196:	f883 28c5 	strb.w	r2, [r3, #2245]	; 0x8c5
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2232      	movs	r2, #50	; 0x32
 800819e:	f883 28c6 	strb.w	r2, [r3, #2246]	; 0x8c6
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2249      	movs	r2, #73	; 0x49
 80081a6:	f883 28c7 	strb.w	r2, [r3, #2247]	; 0x8c7
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2279      	movs	r2, #121	; 0x79
 80081ae:	f883 28c8 	strb.w	r2, [r3, #2248]	; 0x8c8
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2241      	movs	r2, #65	; 0x41
 80081b6:	f883 28c9 	strb.w	r2, [r3, #2249]	; 0x8c9
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	223e      	movs	r2, #62	; 0x3e
 80081be:	f883 28ca 	strb.w	r2, [r3, #2250]	; 0x8ca
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	227e      	movs	r2, #126	; 0x7e
 80081c6:	f883 28cb 	strb.w	r2, [r3, #2251]	; 0x8cb
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2211      	movs	r2, #17
 80081ce:	f883 28cc 	strb.w	r2, [r3, #2252]	; 0x8cc
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2211      	movs	r2, #17
 80081d6:	f883 28cd 	strb.w	r2, [r3, #2253]	; 0x8cd
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2211      	movs	r2, #17
 80081de:	f883 28ce 	strb.w	r2, [r3, #2254]	; 0x8ce
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	227e      	movs	r2, #126	; 0x7e
 80081e6:	f883 28cf 	strb.w	r2, [r3, #2255]	; 0x8cf
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	227f      	movs	r2, #127	; 0x7f
 80081ee:	f883 28d0 	strb.w	r2, [r3, #2256]	; 0x8d0
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2249      	movs	r2, #73	; 0x49
 80081f6:	f883 28d1 	strb.w	r2, [r3, #2257]	; 0x8d1
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2249      	movs	r2, #73	; 0x49
 80081fe:	f883 28d2 	strb.w	r2, [r3, #2258]	; 0x8d2
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2249      	movs	r2, #73	; 0x49
 8008206:	f883 28d3 	strb.w	r2, [r3, #2259]	; 0x8d3
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2236      	movs	r2, #54	; 0x36
 800820e:	f883 28d4 	strb.w	r2, [r3, #2260]	; 0x8d4
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	223e      	movs	r2, #62	; 0x3e
 8008216:	f883 28d5 	strb.w	r2, [r3, #2261]	; 0x8d5
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2241      	movs	r2, #65	; 0x41
 800821e:	f883 28d6 	strb.w	r2, [r3, #2262]	; 0x8d6
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2241      	movs	r2, #65	; 0x41
 8008226:	f883 28d7 	strb.w	r2, [r3, #2263]	; 0x8d7
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2241      	movs	r2, #65	; 0x41
 800822e:	f883 28d8 	strb.w	r2, [r3, #2264]	; 0x8d8
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2222      	movs	r2, #34	; 0x22
 8008236:	f883 28d9 	strb.w	r2, [r3, #2265]	; 0x8d9
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	227f      	movs	r2, #127	; 0x7f
 800823e:	f883 28da 	strb.w	r2, [r3, #2266]	; 0x8da
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2241      	movs	r2, #65	; 0x41
 8008246:	f883 28db 	strb.w	r2, [r3, #2267]	; 0x8db
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2241      	movs	r2, #65	; 0x41
 800824e:	f883 28dc 	strb.w	r2, [r3, #2268]	; 0x8dc
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2222      	movs	r2, #34	; 0x22
 8008256:	f883 28dd 	strb.w	r2, [r3, #2269]	; 0x8dd
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	221c      	movs	r2, #28
 800825e:	f883 28de 	strb.w	r2, [r3, #2270]	; 0x8de
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	227f      	movs	r2, #127	; 0x7f
 8008266:	f883 28df 	strb.w	r2, [r3, #2271]	; 0x8df
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2249      	movs	r2, #73	; 0x49
 800826e:	f883 28e0 	strb.w	r2, [r3, #2272]	; 0x8e0
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2249      	movs	r2, #73	; 0x49
 8008276:	f883 28e1 	strb.w	r2, [r3, #2273]	; 0x8e1
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2249      	movs	r2, #73	; 0x49
 800827e:	f883 28e2 	strb.w	r2, [r3, #2274]	; 0x8e2
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2241      	movs	r2, #65	; 0x41
 8008286:	f883 28e3 	strb.w	r2, [r3, #2275]	; 0x8e3
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	227f      	movs	r2, #127	; 0x7f
 800828e:	f883 28e4 	strb.w	r2, [r3, #2276]	; 0x8e4
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2209      	movs	r2, #9
 8008296:	f883 28e5 	strb.w	r2, [r3, #2277]	; 0x8e5
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2209      	movs	r2, #9
 800829e:	f883 28e6 	strb.w	r2, [r3, #2278]	; 0x8e6
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2201      	movs	r2, #1
 80082a6:	f883 28e7 	strb.w	r2, [r3, #2279]	; 0x8e7
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2201      	movs	r2, #1
 80082ae:	f883 28e8 	strb.w	r2, [r3, #2280]	; 0x8e8
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	223e      	movs	r2, #62	; 0x3e
 80082b6:	f883 28e9 	strb.w	r2, [r3, #2281]	; 0x8e9
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2241      	movs	r2, #65	; 0x41
 80082be:	f883 28ea 	strb.w	r2, [r3, #2282]	; 0x8ea
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2241      	movs	r2, #65	; 0x41
 80082c6:	f883 28eb 	strb.w	r2, [r3, #2283]	; 0x8eb
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2251      	movs	r2, #81	; 0x51
 80082ce:	f883 28ec 	strb.w	r2, [r3, #2284]	; 0x8ec
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2232      	movs	r2, #50	; 0x32
 80082d6:	f883 28ed 	strb.w	r2, [r3, #2285]	; 0x8ed
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	227f      	movs	r2, #127	; 0x7f
 80082de:	f883 28ee 	strb.w	r2, [r3, #2286]	; 0x8ee
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2208      	movs	r2, #8
 80082e6:	f883 28ef 	strb.w	r2, [r3, #2287]	; 0x8ef
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2208      	movs	r2, #8
 80082ee:	f883 28f0 	strb.w	r2, [r3, #2288]	; 0x8f0
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2208      	movs	r2, #8
 80082f6:	f883 28f1 	strb.w	r2, [r3, #2289]	; 0x8f1
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	227f      	movs	r2, #127	; 0x7f
 80082fe:	f883 28f2 	strb.w	r2, [r3, #2290]	; 0x8f2
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2241      	movs	r2, #65	; 0x41
 8008306:	f883 28f4 	strb.w	r2, [r3, #2292]	; 0x8f4
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	227f      	movs	r2, #127	; 0x7f
 800830e:	f883 28f5 	strb.w	r2, [r3, #2293]	; 0x8f5
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2241      	movs	r2, #65	; 0x41
 8008316:	f883 28f6 	strb.w	r2, [r3, #2294]	; 0x8f6
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2220      	movs	r2, #32
 800831e:	f883 28f8 	strb.w	r2, [r3, #2296]	; 0x8f8
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2240      	movs	r2, #64	; 0x40
 8008326:	f883 28f9 	strb.w	r2, [r3, #2297]	; 0x8f9
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2241      	movs	r2, #65	; 0x41
 800832e:	f883 28fa 	strb.w	r2, [r3, #2298]	; 0x8fa
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	223f      	movs	r2, #63	; 0x3f
 8008336:	f883 28fb 	strb.w	r2, [r3, #2299]	; 0x8fb
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2201      	movs	r2, #1
 800833e:	f883 28fc 	strb.w	r2, [r3, #2300]	; 0x8fc
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	227f      	movs	r2, #127	; 0x7f
 8008346:	f883 28fd 	strb.w	r2, [r3, #2301]	; 0x8fd
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2208      	movs	r2, #8
 800834e:	f883 28fe 	strb.w	r2, [r3, #2302]	; 0x8fe
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2214      	movs	r2, #20
 8008356:	f883 28ff 	strb.w	r2, [r3, #2303]	; 0x8ff
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2222      	movs	r2, #34	; 0x22
 800835e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2241      	movs	r2, #65	; 0x41
 8008366:	f883 2901 	strb.w	r2, [r3, #2305]	; 0x901
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	227f      	movs	r2, #127	; 0x7f
 800836e:	f883 2902 	strb.w	r2, [r3, #2306]	; 0x902
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2240      	movs	r2, #64	; 0x40
 8008376:	f883 2903 	strb.w	r2, [r3, #2307]	; 0x903
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2240      	movs	r2, #64	; 0x40
 800837e:	f883 2904 	strb.w	r2, [r3, #2308]	; 0x904
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2240      	movs	r2, #64	; 0x40
 8008386:	f883 2905 	strb.w	r2, [r3, #2309]	; 0x905
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2240      	movs	r2, #64	; 0x40
 800838e:	f883 2906 	strb.w	r2, [r3, #2310]	; 0x906
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	227f      	movs	r2, #127	; 0x7f
 8008396:	f883 2907 	strb.w	r2, [r3, #2311]	; 0x907
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2202      	movs	r2, #2
 800839e:	f883 2908 	strb.w	r2, [r3, #2312]	; 0x908
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2204      	movs	r2, #4
 80083a6:	f883 2909 	strb.w	r2, [r3, #2313]	; 0x909
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2202      	movs	r2, #2
 80083ae:	f883 290a 	strb.w	r2, [r3, #2314]	; 0x90a
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	227f      	movs	r2, #127	; 0x7f
 80083b6:	f883 290b 	strb.w	r2, [r3, #2315]	; 0x90b
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	227f      	movs	r2, #127	; 0x7f
 80083be:	f883 290c 	strb.w	r2, [r3, #2316]	; 0x90c
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2204      	movs	r2, #4
 80083c6:	f883 290d 	strb.w	r2, [r3, #2317]	; 0x90d
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2208      	movs	r2, #8
 80083ce:	f883 290e 	strb.w	r2, [r3, #2318]	; 0x90e
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2210      	movs	r2, #16
 80083d6:	f883 290f 	strb.w	r2, [r3, #2319]	; 0x90f
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	227f      	movs	r2, #127	; 0x7f
 80083de:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	223e      	movs	r2, #62	; 0x3e
 80083e6:	f883 2911 	strb.w	r2, [r3, #2321]	; 0x911
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2241      	movs	r2, #65	; 0x41
 80083ee:	f883 2912 	strb.w	r2, [r3, #2322]	; 0x912
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2241      	movs	r2, #65	; 0x41
 80083f6:	f883 2913 	strb.w	r2, [r3, #2323]	; 0x913
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2241      	movs	r2, #65	; 0x41
 80083fe:	f883 2914 	strb.w	r2, [r3, #2324]	; 0x914
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	223e      	movs	r2, #62	; 0x3e
 8008406:	f883 2915 	strb.w	r2, [r3, #2325]	; 0x915
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	227f      	movs	r2, #127	; 0x7f
 800840e:	f883 2916 	strb.w	r2, [r3, #2326]	; 0x916
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2209      	movs	r2, #9
 8008416:	f883 2917 	strb.w	r2, [r3, #2327]	; 0x917
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2209      	movs	r2, #9
 800841e:	f883 2918 	strb.w	r2, [r3, #2328]	; 0x918
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2209      	movs	r2, #9
 8008426:	f883 2919 	strb.w	r2, [r3, #2329]	; 0x919
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2206      	movs	r2, #6
 800842e:	f883 291a 	strb.w	r2, [r3, #2330]	; 0x91a
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	223e      	movs	r2, #62	; 0x3e
 8008436:	f883 291b 	strb.w	r2, [r3, #2331]	; 0x91b
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2241      	movs	r2, #65	; 0x41
 800843e:	f883 291c 	strb.w	r2, [r3, #2332]	; 0x91c
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2251      	movs	r2, #81	; 0x51
 8008446:	f883 291d 	strb.w	r2, [r3, #2333]	; 0x91d
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2221      	movs	r2, #33	; 0x21
 800844e:	f883 291e 	strb.w	r2, [r3, #2334]	; 0x91e
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	225e      	movs	r2, #94	; 0x5e
 8008456:	f883 291f 	strb.w	r2, [r3, #2335]	; 0x91f
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	227f      	movs	r2, #127	; 0x7f
 800845e:	f883 2920 	strb.w	r2, [r3, #2336]	; 0x920
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2209      	movs	r2, #9
 8008466:	f883 2921 	strb.w	r2, [r3, #2337]	; 0x921
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2219      	movs	r2, #25
 800846e:	f883 2922 	strb.w	r2, [r3, #2338]	; 0x922
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2229      	movs	r2, #41	; 0x29
 8008476:	f883 2923 	strb.w	r2, [r3, #2339]	; 0x923
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2246      	movs	r2, #70	; 0x46
 800847e:	f883 2924 	strb.w	r2, [r3, #2340]	; 0x924
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2246      	movs	r2, #70	; 0x46
 8008486:	f883 2925 	strb.w	r2, [r3, #2341]	; 0x925
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2249      	movs	r2, #73	; 0x49
 800848e:	f883 2926 	strb.w	r2, [r3, #2342]	; 0x926
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2249      	movs	r2, #73	; 0x49
 8008496:	f883 2927 	strb.w	r2, [r3, #2343]	; 0x927
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2249      	movs	r2, #73	; 0x49
 800849e:	f883 2928 	strb.w	r2, [r3, #2344]	; 0x928
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2231      	movs	r2, #49	; 0x31
 80084a6:	f883 2929 	strb.w	r2, [r3, #2345]	; 0x929
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2201      	movs	r2, #1
 80084ae:	f883 292a 	strb.w	r2, [r3, #2346]	; 0x92a
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2201      	movs	r2, #1
 80084b6:	f883 292b 	strb.w	r2, [r3, #2347]	; 0x92b
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	227f      	movs	r2, #127	; 0x7f
 80084be:	f883 292c 	strb.w	r2, [r3, #2348]	; 0x92c
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2201      	movs	r2, #1
 80084c6:	f883 292d 	strb.w	r2, [r3, #2349]	; 0x92d
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2201      	movs	r2, #1
 80084ce:	f883 292e 	strb.w	r2, [r3, #2350]	; 0x92e
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	223f      	movs	r2, #63	; 0x3f
 80084d6:	f883 292f 	strb.w	r2, [r3, #2351]	; 0x92f
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2240      	movs	r2, #64	; 0x40
 80084de:	f883 2930 	strb.w	r2, [r3, #2352]	; 0x930
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2240      	movs	r2, #64	; 0x40
 80084e6:	f883 2931 	strb.w	r2, [r3, #2353]	; 0x931
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2240      	movs	r2, #64	; 0x40
 80084ee:	f883 2932 	strb.w	r2, [r3, #2354]	; 0x932
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	223f      	movs	r2, #63	; 0x3f
 80084f6:	f883 2933 	strb.w	r2, [r3, #2355]	; 0x933
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	221f      	movs	r2, #31
 80084fe:	f883 2934 	strb.w	r2, [r3, #2356]	; 0x934
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2220      	movs	r2, #32
 8008506:	f883 2935 	strb.w	r2, [r3, #2357]	; 0x935
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2240      	movs	r2, #64	; 0x40
 800850e:	f883 2936 	strb.w	r2, [r3, #2358]	; 0x936
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2220      	movs	r2, #32
 8008516:	f883 2937 	strb.w	r2, [r3, #2359]	; 0x937
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	221f      	movs	r2, #31
 800851e:	f883 2938 	strb.w	r2, [r3, #2360]	; 0x938
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	227f      	movs	r2, #127	; 0x7f
 8008526:	f883 2939 	strb.w	r2, [r3, #2361]	; 0x939
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2220      	movs	r2, #32
 800852e:	f883 293a 	strb.w	r2, [r3, #2362]	; 0x93a
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2218      	movs	r2, #24
 8008536:	f883 293b 	strb.w	r2, [r3, #2363]	; 0x93b
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2220      	movs	r2, #32
 800853e:	f883 293c 	strb.w	r2, [r3, #2364]	; 0x93c
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	227f      	movs	r2, #127	; 0x7f
 8008546:	f883 293d 	strb.w	r2, [r3, #2365]	; 0x93d
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2263      	movs	r2, #99	; 0x63
 800854e:	f883 293e 	strb.w	r2, [r3, #2366]	; 0x93e
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2214      	movs	r2, #20
 8008556:	f883 293f 	strb.w	r2, [r3, #2367]	; 0x93f
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2208      	movs	r2, #8
 800855e:	f883 2940 	strb.w	r2, [r3, #2368]	; 0x940
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2214      	movs	r2, #20
 8008566:	f883 2941 	strb.w	r2, [r3, #2369]	; 0x941
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2263      	movs	r2, #99	; 0x63
 800856e:	f883 2942 	strb.w	r2, [r3, #2370]	; 0x942
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2203      	movs	r2, #3
 8008576:	f883 2943 	strb.w	r2, [r3, #2371]	; 0x943
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2204      	movs	r2, #4
 800857e:	f883 2944 	strb.w	r2, [r3, #2372]	; 0x944
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2278      	movs	r2, #120	; 0x78
 8008586:	f883 2945 	strb.w	r2, [r3, #2373]	; 0x945
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2204      	movs	r2, #4
 800858e:	f883 2946 	strb.w	r2, [r3, #2374]	; 0x946
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2203      	movs	r2, #3
 8008596:	f883 2947 	strb.w	r2, [r3, #2375]	; 0x947
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2261      	movs	r2, #97	; 0x61
 800859e:	f883 2948 	strb.w	r2, [r3, #2376]	; 0x948
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2251      	movs	r2, #81	; 0x51
 80085a6:	f883 2949 	strb.w	r2, [r3, #2377]	; 0x949
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2249      	movs	r2, #73	; 0x49
 80085ae:	f883 294a 	strb.w	r2, [r3, #2378]	; 0x94a
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2245      	movs	r2, #69	; 0x45
 80085b6:	f883 294b 	strb.w	r2, [r3, #2379]	; 0x94b
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2243      	movs	r2, #67	; 0x43
 80085be:	f883 294c 	strb.w	r2, [r3, #2380]	; 0x94c
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	227f      	movs	r2, #127	; 0x7f
 80085c6:	f883 294f 	strb.w	r2, [r3, #2383]	; 0x94f
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2241      	movs	r2, #65	; 0x41
 80085ce:	f883 2950 	strb.w	r2, [r3, #2384]	; 0x950
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2241      	movs	r2, #65	; 0x41
 80085d6:	f883 2951 	strb.w	r2, [r3, #2385]	; 0x951
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2202      	movs	r2, #2
 80085de:	f883 2952 	strb.w	r2, [r3, #2386]	; 0x952
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2204      	movs	r2, #4
 80085e6:	f883 2953 	strb.w	r2, [r3, #2387]	; 0x953
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2208      	movs	r2, #8
 80085ee:	f883 2954 	strb.w	r2, [r3, #2388]	; 0x954
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2210      	movs	r2, #16
 80085f6:	f883 2955 	strb.w	r2, [r3, #2389]	; 0x955
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2220      	movs	r2, #32
 80085fe:	f883 2956 	strb.w	r2, [r3, #2390]	; 0x956
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2241      	movs	r2, #65	; 0x41
 8008606:	f883 2957 	strb.w	r2, [r3, #2391]	; 0x957
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2241      	movs	r2, #65	; 0x41
 800860e:	f883 2958 	strb.w	r2, [r3, #2392]	; 0x958
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	227f      	movs	r2, #127	; 0x7f
 8008616:	f883 2959 	strb.w	r2, [r3, #2393]	; 0x959
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2204      	movs	r2, #4
 800861e:	f883 295c 	strb.w	r2, [r3, #2396]	; 0x95c
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2202      	movs	r2, #2
 8008626:	f883 295d 	strb.w	r2, [r3, #2397]	; 0x95d
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2201      	movs	r2, #1
 800862e:	f883 295e 	strb.w	r2, [r3, #2398]	; 0x95e
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2202      	movs	r2, #2
 8008636:	f883 295f 	strb.w	r2, [r3, #2399]	; 0x95f
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2204      	movs	r2, #4
 800863e:	f883 2960 	strb.w	r2, [r3, #2400]	; 0x960
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2240      	movs	r2, #64	; 0x40
 8008646:	f883 2961 	strb.w	r2, [r3, #2401]	; 0x961
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2240      	movs	r2, #64	; 0x40
 800864e:	f883 2962 	strb.w	r2, [r3, #2402]	; 0x962
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2240      	movs	r2, #64	; 0x40
 8008656:	f883 2963 	strb.w	r2, [r3, #2403]	; 0x963
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2240      	movs	r2, #64	; 0x40
 800865e:	f883 2964 	strb.w	r2, [r3, #2404]	; 0x964
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2240      	movs	r2, #64	; 0x40
 8008666:	f883 2965 	strb.w	r2, [r3, #2405]	; 0x965
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2201      	movs	r2, #1
 800866e:	f883 2967 	strb.w	r2, [r3, #2407]	; 0x967
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2202      	movs	r2, #2
 8008676:	f883 2968 	strb.w	r2, [r3, #2408]	; 0x968
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2204      	movs	r2, #4
 800867e:	f883 2969 	strb.w	r2, [r3, #2409]	; 0x969
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2220      	movs	r2, #32
 8008686:	f883 296b 	strb.w	r2, [r3, #2411]	; 0x96b
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2254      	movs	r2, #84	; 0x54
 800868e:	f883 296c 	strb.w	r2, [r3, #2412]	; 0x96c
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2254      	movs	r2, #84	; 0x54
 8008696:	f883 296d 	strb.w	r2, [r3, #2413]	; 0x96d
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2254      	movs	r2, #84	; 0x54
 800869e:	f883 296e 	strb.w	r2, [r3, #2414]	; 0x96e
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2278      	movs	r2, #120	; 0x78
 80086a6:	f883 296f 	strb.w	r2, [r3, #2415]	; 0x96f
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	227f      	movs	r2, #127	; 0x7f
 80086ae:	f883 2970 	strb.w	r2, [r3, #2416]	; 0x970
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2248      	movs	r2, #72	; 0x48
 80086b6:	f883 2971 	strb.w	r2, [r3, #2417]	; 0x971
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2244      	movs	r2, #68	; 0x44
 80086be:	f883 2972 	strb.w	r2, [r3, #2418]	; 0x972
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2244      	movs	r2, #68	; 0x44
 80086c6:	f883 2973 	strb.w	r2, [r3, #2419]	; 0x973
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2238      	movs	r2, #56	; 0x38
 80086ce:	f883 2974 	strb.w	r2, [r3, #2420]	; 0x974
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2238      	movs	r2, #56	; 0x38
 80086d6:	f883 2975 	strb.w	r2, [r3, #2421]	; 0x975
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2244      	movs	r2, #68	; 0x44
 80086de:	f883 2976 	strb.w	r2, [r3, #2422]	; 0x976
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2244      	movs	r2, #68	; 0x44
 80086e6:	f883 2977 	strb.w	r2, [r3, #2423]	; 0x977
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2244      	movs	r2, #68	; 0x44
 80086ee:	f883 2978 	strb.w	r2, [r3, #2424]	; 0x978
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2220      	movs	r2, #32
 80086f6:	f883 2979 	strb.w	r2, [r3, #2425]	; 0x979
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2238      	movs	r2, #56	; 0x38
 80086fe:	f883 297a 	strb.w	r2, [r3, #2426]	; 0x97a
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2244      	movs	r2, #68	; 0x44
 8008706:	f883 297b 	strb.w	r2, [r3, #2427]	; 0x97b
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2244      	movs	r2, #68	; 0x44
 800870e:	f883 297c 	strb.w	r2, [r3, #2428]	; 0x97c
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2248      	movs	r2, #72	; 0x48
 8008716:	f883 297d 	strb.w	r2, [r3, #2429]	; 0x97d
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	227f      	movs	r2, #127	; 0x7f
 800871e:	f883 297e 	strb.w	r2, [r3, #2430]	; 0x97e
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2238      	movs	r2, #56	; 0x38
 8008726:	f883 297f 	strb.w	r2, [r3, #2431]	; 0x97f
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2254      	movs	r2, #84	; 0x54
 800872e:	f883 2980 	strb.w	r2, [r3, #2432]	; 0x980
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2254      	movs	r2, #84	; 0x54
 8008736:	f883 2981 	strb.w	r2, [r3, #2433]	; 0x981
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2254      	movs	r2, #84	; 0x54
 800873e:	f883 2982 	strb.w	r2, [r3, #2434]	; 0x982
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2218      	movs	r2, #24
 8008746:	f883 2983 	strb.w	r2, [r3, #2435]	; 0x983
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2208      	movs	r2, #8
 800874e:	f883 2984 	strb.w	r2, [r3, #2436]	; 0x984
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	227e      	movs	r2, #126	; 0x7e
 8008756:	f883 2985 	strb.w	r2, [r3, #2437]	; 0x985
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2209      	movs	r2, #9
 800875e:	f883 2986 	strb.w	r2, [r3, #2438]	; 0x986
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2201      	movs	r2, #1
 8008766:	f883 2987 	strb.w	r2, [r3, #2439]	; 0x987
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2202      	movs	r2, #2
 800876e:	f883 2988 	strb.w	r2, [r3, #2440]	; 0x988
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2208      	movs	r2, #8
 8008776:	f883 2989 	strb.w	r2, [r3, #2441]	; 0x989
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2214      	movs	r2, #20
 800877e:	f883 298a 	strb.w	r2, [r3, #2442]	; 0x98a
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2254      	movs	r2, #84	; 0x54
 8008786:	f883 298b 	strb.w	r2, [r3, #2443]	; 0x98b
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2254      	movs	r2, #84	; 0x54
 800878e:	f883 298c 	strb.w	r2, [r3, #2444]	; 0x98c
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	223c      	movs	r2, #60	; 0x3c
 8008796:	f883 298d 	strb.w	r2, [r3, #2445]	; 0x98d
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	227f      	movs	r2, #127	; 0x7f
 800879e:	f883 298e 	strb.w	r2, [r3, #2446]	; 0x98e
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2208      	movs	r2, #8
 80087a6:	f883 298f 	strb.w	r2, [r3, #2447]	; 0x98f
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2204      	movs	r2, #4
 80087ae:	f883 2990 	strb.w	r2, [r3, #2448]	; 0x990
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2204      	movs	r2, #4
 80087b6:	f883 2991 	strb.w	r2, [r3, #2449]	; 0x991
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2278      	movs	r2, #120	; 0x78
 80087be:	f883 2992 	strb.w	r2, [r3, #2450]	; 0x992
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2244      	movs	r2, #68	; 0x44
 80087c6:	f883 2994 	strb.w	r2, [r3, #2452]	; 0x994
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	227d      	movs	r2, #125	; 0x7d
 80087ce:	f883 2995 	strb.w	r2, [r3, #2453]	; 0x995
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2240      	movs	r2, #64	; 0x40
 80087d6:	f883 2996 	strb.w	r2, [r3, #2454]	; 0x996
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2220      	movs	r2, #32
 80087de:	f883 2998 	strb.w	r2, [r3, #2456]	; 0x998
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2240      	movs	r2, #64	; 0x40
 80087e6:	f883 2999 	strb.w	r2, [r3, #2457]	; 0x999
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2244      	movs	r2, #68	; 0x44
 80087ee:	f883 299a 	strb.w	r2, [r3, #2458]	; 0x99a
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	223d      	movs	r2, #61	; 0x3d
 80087f6:	f883 299b 	strb.w	r2, [r3, #2459]	; 0x99b
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	227f      	movs	r2, #127	; 0x7f
 80087fe:	f883 299e 	strb.w	r2, [r3, #2462]	; 0x99e
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2210      	movs	r2, #16
 8008806:	f883 299f 	strb.w	r2, [r3, #2463]	; 0x99f
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2228      	movs	r2, #40	; 0x28
 800880e:	f883 29a0 	strb.w	r2, [r3, #2464]	; 0x9a0
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2244      	movs	r2, #68	; 0x44
 8008816:	f883 29a1 	strb.w	r2, [r3, #2465]	; 0x9a1
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2241      	movs	r2, #65	; 0x41
 800881e:	f883 29a3 	strb.w	r2, [r3, #2467]	; 0x9a3
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	227f      	movs	r2, #127	; 0x7f
 8008826:	f883 29a4 	strb.w	r2, [r3, #2468]	; 0x9a4
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2240      	movs	r2, #64	; 0x40
 800882e:	f883 29a5 	strb.w	r2, [r3, #2469]	; 0x9a5
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	227c      	movs	r2, #124	; 0x7c
 8008836:	f883 29a7 	strb.w	r2, [r3, #2471]	; 0x9a7
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2204      	movs	r2, #4
 800883e:	f883 29a8 	strb.w	r2, [r3, #2472]	; 0x9a8
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2218      	movs	r2, #24
 8008846:	f883 29a9 	strb.w	r2, [r3, #2473]	; 0x9a9
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2204      	movs	r2, #4
 800884e:	f883 29aa 	strb.w	r2, [r3, #2474]	; 0x9aa
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2278      	movs	r2, #120	; 0x78
 8008856:	f883 29ab 	strb.w	r2, [r3, #2475]	; 0x9ab
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	227c      	movs	r2, #124	; 0x7c
 800885e:	f883 29ac 	strb.w	r2, [r3, #2476]	; 0x9ac
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2208      	movs	r2, #8
 8008866:	f883 29ad 	strb.w	r2, [r3, #2477]	; 0x9ad
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2204      	movs	r2, #4
 800886e:	f883 29ae 	strb.w	r2, [r3, #2478]	; 0x9ae
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2204      	movs	r2, #4
 8008876:	f883 29af 	strb.w	r2, [r3, #2479]	; 0x9af
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2278      	movs	r2, #120	; 0x78
 800887e:	f883 29b0 	strb.w	r2, [r3, #2480]	; 0x9b0
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2238      	movs	r2, #56	; 0x38
 8008886:	f883 29b1 	strb.w	r2, [r3, #2481]	; 0x9b1
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2244      	movs	r2, #68	; 0x44
 800888e:	f883 29b2 	strb.w	r2, [r3, #2482]	; 0x9b2
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2244      	movs	r2, #68	; 0x44
 8008896:	f883 29b3 	strb.w	r2, [r3, #2483]	; 0x9b3
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2244      	movs	r2, #68	; 0x44
 800889e:	f883 29b4 	strb.w	r2, [r3, #2484]	; 0x9b4
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2238      	movs	r2, #56	; 0x38
 80088a6:	f883 29b5 	strb.w	r2, [r3, #2485]	; 0x9b5
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	227c      	movs	r2, #124	; 0x7c
 80088ae:	f883 29b6 	strb.w	r2, [r3, #2486]	; 0x9b6
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2214      	movs	r2, #20
 80088b6:	f883 29b7 	strb.w	r2, [r3, #2487]	; 0x9b7
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2214      	movs	r2, #20
 80088be:	f883 29b8 	strb.w	r2, [r3, #2488]	; 0x9b8
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2214      	movs	r2, #20
 80088c6:	f883 29b9 	strb.w	r2, [r3, #2489]	; 0x9b9
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2208      	movs	r2, #8
 80088ce:	f883 29ba 	strb.w	r2, [r3, #2490]	; 0x9ba
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2208      	movs	r2, #8
 80088d6:	f883 29bb 	strb.w	r2, [r3, #2491]	; 0x9bb
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2214      	movs	r2, #20
 80088de:	f883 29bc 	strb.w	r2, [r3, #2492]	; 0x9bc
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2214      	movs	r2, #20
 80088e6:	f883 29bd 	strb.w	r2, [r3, #2493]	; 0x9bd
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2218      	movs	r2, #24
 80088ee:	f883 29be 	strb.w	r2, [r3, #2494]	; 0x9be
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	227c      	movs	r2, #124	; 0x7c
 80088f6:	f883 29bf 	strb.w	r2, [r3, #2495]	; 0x9bf
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	227c      	movs	r2, #124	; 0x7c
 80088fe:	f883 29c0 	strb.w	r2, [r3, #2496]	; 0x9c0
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2208      	movs	r2, #8
 8008906:	f883 29c1 	strb.w	r2, [r3, #2497]	; 0x9c1
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2204      	movs	r2, #4
 800890e:	f883 29c2 	strb.w	r2, [r3, #2498]	; 0x9c2
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2204      	movs	r2, #4
 8008916:	f883 29c3 	strb.w	r2, [r3, #2499]	; 0x9c3
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2208      	movs	r2, #8
 800891e:	f883 29c4 	strb.w	r2, [r3, #2500]	; 0x9c4
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2248      	movs	r2, #72	; 0x48
 8008926:	f883 29c5 	strb.w	r2, [r3, #2501]	; 0x9c5
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2254      	movs	r2, #84	; 0x54
 800892e:	f883 29c6 	strb.w	r2, [r3, #2502]	; 0x9c6
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2254      	movs	r2, #84	; 0x54
 8008936:	f883 29c7 	strb.w	r2, [r3, #2503]	; 0x9c7
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2254      	movs	r2, #84	; 0x54
 800893e:	f883 29c8 	strb.w	r2, [r3, #2504]	; 0x9c8
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2220      	movs	r2, #32
 8008946:	f883 29c9 	strb.w	r2, [r3, #2505]	; 0x9c9
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2204      	movs	r2, #4
 800894e:	f883 29ca 	strb.w	r2, [r3, #2506]	; 0x9ca
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	223f      	movs	r2, #63	; 0x3f
 8008956:	f883 29cb 	strb.w	r2, [r3, #2507]	; 0x9cb
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2244      	movs	r2, #68	; 0x44
 800895e:	f883 29cc 	strb.w	r2, [r3, #2508]	; 0x9cc
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2240      	movs	r2, #64	; 0x40
 8008966:	f883 29cd 	strb.w	r2, [r3, #2509]	; 0x9cd
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2220      	movs	r2, #32
 800896e:	f883 29ce 	strb.w	r2, [r3, #2510]	; 0x9ce
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	223c      	movs	r2, #60	; 0x3c
 8008976:	f883 29cf 	strb.w	r2, [r3, #2511]	; 0x9cf
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2240      	movs	r2, #64	; 0x40
 800897e:	f883 29d0 	strb.w	r2, [r3, #2512]	; 0x9d0
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2240      	movs	r2, #64	; 0x40
 8008986:	f883 29d1 	strb.w	r2, [r3, #2513]	; 0x9d1
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2220      	movs	r2, #32
 800898e:	f883 29d2 	strb.w	r2, [r3, #2514]	; 0x9d2
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	227c      	movs	r2, #124	; 0x7c
 8008996:	f883 29d3 	strb.w	r2, [r3, #2515]	; 0x9d3
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	221c      	movs	r2, #28
 800899e:	f883 29d4 	strb.w	r2, [r3, #2516]	; 0x9d4
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2220      	movs	r2, #32
 80089a6:	f883 29d5 	strb.w	r2, [r3, #2517]	; 0x9d5
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2240      	movs	r2, #64	; 0x40
 80089ae:	f883 29d6 	strb.w	r2, [r3, #2518]	; 0x9d6
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2220      	movs	r2, #32
 80089b6:	f883 29d7 	strb.w	r2, [r3, #2519]	; 0x9d7
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	221c      	movs	r2, #28
 80089be:	f883 29d8 	strb.w	r2, [r3, #2520]	; 0x9d8
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	223c      	movs	r2, #60	; 0x3c
 80089c6:	f883 29d9 	strb.w	r2, [r3, #2521]	; 0x9d9
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2240      	movs	r2, #64	; 0x40
 80089ce:	f883 29da 	strb.w	r2, [r3, #2522]	; 0x9da
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2230      	movs	r2, #48	; 0x30
 80089d6:	f883 29db 	strb.w	r2, [r3, #2523]	; 0x9db
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2240      	movs	r2, #64	; 0x40
 80089de:	f883 29dc 	strb.w	r2, [r3, #2524]	; 0x9dc
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	223c      	movs	r2, #60	; 0x3c
 80089e6:	f883 29dd 	strb.w	r2, [r3, #2525]	; 0x9dd
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2244      	movs	r2, #68	; 0x44
 80089ee:	f883 29de 	strb.w	r2, [r3, #2526]	; 0x9de
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2228      	movs	r2, #40	; 0x28
 80089f6:	f883 29df 	strb.w	r2, [r3, #2527]	; 0x9df
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2210      	movs	r2, #16
 80089fe:	f883 29e0 	strb.w	r2, [r3, #2528]	; 0x9e0
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2228      	movs	r2, #40	; 0x28
 8008a06:	f883 29e1 	strb.w	r2, [r3, #2529]	; 0x9e1
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2244      	movs	r2, #68	; 0x44
 8008a0e:	f883 29e2 	strb.w	r2, [r3, #2530]	; 0x9e2
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	220c      	movs	r2, #12
 8008a16:	f883 29e3 	strb.w	r2, [r3, #2531]	; 0x9e3
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2250      	movs	r2, #80	; 0x50
 8008a1e:	f883 29e4 	strb.w	r2, [r3, #2532]	; 0x9e4
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2250      	movs	r2, #80	; 0x50
 8008a26:	f883 29e5 	strb.w	r2, [r3, #2533]	; 0x9e5
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2250      	movs	r2, #80	; 0x50
 8008a2e:	f883 29e6 	strb.w	r2, [r3, #2534]	; 0x9e6
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	223c      	movs	r2, #60	; 0x3c
 8008a36:	f883 29e7 	strb.w	r2, [r3, #2535]	; 0x9e7
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2244      	movs	r2, #68	; 0x44
 8008a3e:	f883 29e8 	strb.w	r2, [r3, #2536]	; 0x9e8
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2264      	movs	r2, #100	; 0x64
 8008a46:	f883 29e9 	strb.w	r2, [r3, #2537]	; 0x9e9
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2254      	movs	r2, #84	; 0x54
 8008a4e:	f883 29ea 	strb.w	r2, [r3, #2538]	; 0x9ea
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	224c      	movs	r2, #76	; 0x4c
 8008a56:	f883 29eb 	strb.w	r2, [r3, #2539]	; 0x9eb
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2244      	movs	r2, #68	; 0x44
 8008a5e:	f883 29ec 	strb.w	r2, [r3, #2540]	; 0x9ec
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2208      	movs	r2, #8
 8008a66:	f883 29ee 	strb.w	r2, [r3, #2542]	; 0x9ee
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2236      	movs	r2, #54	; 0x36
 8008a6e:	f883 29ef 	strb.w	r2, [r3, #2543]	; 0x9ef
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2241      	movs	r2, #65	; 0x41
 8008a76:	f883 29f0 	strb.w	r2, [r3, #2544]	; 0x9f0
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	227f      	movs	r2, #127	; 0x7f
 8008a7e:	f883 29f4 	strb.w	r2, [r3, #2548]	; 0x9f4
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2241      	movs	r2, #65	; 0x41
 8008a86:	f883 29f8 	strb.w	r2, [r3, #2552]	; 0x9f8
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2236      	movs	r2, #54	; 0x36
 8008a8e:	f883 29f9 	strb.w	r2, [r3, #2553]	; 0x9f9
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2208      	movs	r2, #8
 8008a96:	f883 29fa 	strb.w	r2, [r3, #2554]	; 0x9fa
	// TODO Auto-generated constructor stub

}
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3708      	adds	r7, #8
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bdb0      	pop	{r4, r5, r7, pc}

08008aa4 <_ZN4GLCDD1Ev>:

GLCD::~GLCD() {
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	4a05      	ldr	r2, [pc, #20]	; (8008ac4 <_ZN4GLCDD1Ev+0x20>)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	601a      	str	r2, [r3, #0]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f7fb ff9b 	bl	80049f0 <_ZN6commonD1Ev>
	// TODO Auto-generated destructor stub
}
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	4618      	mov	r0, r3
 8008abe:	3708      	adds	r7, #8
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}
 8008ac4:	0800f800 	.word	0x0800f800

08008ac8 <_ZN4GLCDD0Ev>:
GLCD::~GLCD() {
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
}
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f7ff ffe7 	bl	8008aa4 <_ZN4GLCDD1Ev>
 8008ad6:	f640 2104 	movw	r1, #2564	; 0xa04
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f005 f8f5 	bl	800dcca <_ZdlPvj>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3708      	adds	r7, #8
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
	...

08008aec <_ZN4GLCD9m_ctrloffEv>:

void GLCD::m_ctrloff(){
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b082      	sub	sp, #8
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 8008af4:	2200      	movs	r2, #0
 8008af6:	2110      	movs	r1, #16
 8008af8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008afc:	f001 f960 	bl	8009dc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 8008b00:	2200      	movs	r2, #0
 8008b02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008b06:	480c      	ldr	r0, [pc, #48]	; (8008b38 <_ZN4GLCD9m_ctrloffEv+0x4c>)
 8008b08:	f001 f95a 	bl	8009dc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008b12:	4809      	ldr	r0, [pc, #36]	; (8008b38 <_ZN4GLCD9m_ctrloffEv+0x4c>)
 8008b14:	f001 f954 	bl	8009dc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_RESET);
 8008b18:	2200      	movs	r2, #0
 8008b1a:	2104      	movs	r1, #4
 8008b1c:	4807      	ldr	r0, [pc, #28]	; (8008b3c <_ZN4GLCD9m_ctrloffEv+0x50>)
 8008b1e:	f001 f94f 	bl	8009dc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_RESET);
 8008b22:	2200      	movs	r2, #0
 8008b24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008b28:	4803      	ldr	r0, [pc, #12]	; (8008b38 <_ZN4GLCD9m_ctrloffEv+0x4c>)
 8008b2a:	f001 f949 	bl	8009dc0 <HAL_GPIO_WritePin>
}
 8008b2e:	bf00      	nop
 8008b30:	3708      	adds	r7, #8
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	48000800 	.word	0x48000800
 8008b3c:	48000c00 	.word	0x48000c00

08008b40 <_ZN4GLCD7m_delayEjh>:
	__HAL_TIM_SET_COUNTER(&htim1, 0);  // reset the counter
	while ((__HAL_TIM_GET_COUNTER(&htim1))<delay);  // wait for the delay to complete
}

void GLCD::m_delay(unsigned int j,uint8_t a)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b087      	sub	sp, #28
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	4613      	mov	r3, r2
 8008b4c:	71fb      	strb	r3, [r7, #7]
	unsigned int i,k;
	for(i=0;i<j;i++)
 8008b4e:	2300      	movs	r3, #0
 8008b50:	617b      	str	r3, [r7, #20]
 8008b52:	697a      	ldr	r2, [r7, #20]
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d20d      	bcs.n	8008b76 <_ZN4GLCD7m_delayEjh+0x36>
 	{for(k=0;k<a;k++);
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	613b      	str	r3, [r7, #16]
 8008b5e:	79fb      	ldrb	r3, [r7, #7]
 8008b60:	693a      	ldr	r2, [r7, #16]
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d203      	bcs.n	8008b6e <_ZN4GLCD7m_delayEjh+0x2e>
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	3301      	adds	r3, #1
 8008b6a:	613b      	str	r3, [r7, #16]
 8008b6c:	e7f7      	b.n	8008b5e <_ZN4GLCD7m_delayEjh+0x1e>
	for(i=0;i<j;i++)
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	3301      	adds	r3, #1
 8008b72:	617b      	str	r3, [r7, #20]
 8008b74:	e7ed      	b.n	8008b52 <_ZN4GLCD7m_delayEjh+0x12>
	}
}
 8008b76:	bf00      	nop
 8008b78:	371c      	adds	r7, #28
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr
	...

08008b84 <_ZN4GLCD16m_IOWritethedataEh>:

void GLCD::m_IOWritethedata(const uint8_t finput)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	460b      	mov	r3, r1
 8008b8e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOC,LCDD0_Pin,ReadtheValueAssignPinstate(0,finput));
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	78fa      	ldrb	r2, [r7, #3]
 8008b94:	2100      	movs	r1, #0
 8008b96:	4618      	mov	r0, r3
 8008b98:	f7fb ffe9 	bl	8004b6e <_ZN6common26ReadtheValueAssignPinstateEhh>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	2108      	movs	r1, #8
 8008ba2:	482f      	ldr	r0, [pc, #188]	; (8008c60 <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 8008ba4:	f001 f90c 	bl	8009dc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD1_Pin,ReadtheValueAssignPinstate(1,finput));
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	78fa      	ldrb	r2, [r7, #3]
 8008bac:	2101      	movs	r1, #1
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f7fb ffdd 	bl	8004b6e <_ZN6common26ReadtheValueAssignPinstateEhh>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	2104      	movs	r1, #4
 8008bba:	4829      	ldr	r0, [pc, #164]	; (8008c60 <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 8008bbc:	f001 f900 	bl	8009dc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD2_Pin,ReadtheValueAssignPinstate(2,finput));
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	78fa      	ldrb	r2, [r7, #3]
 8008bc4:	2102      	movs	r1, #2
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7fb ffd1 	bl	8004b6e <_ZN6common26ReadtheValueAssignPinstateEhh>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	461a      	mov	r2, r3
 8008bd0:	2102      	movs	r1, #2
 8008bd2:	4823      	ldr	r0, [pc, #140]	; (8008c60 <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 8008bd4:	f001 f8f4 	bl	8009dc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD3_Pin,ReadtheValueAssignPinstate(3,finput));
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	78fa      	ldrb	r2, [r7, #3]
 8008bdc:	2103      	movs	r1, #3
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7fb ffc5 	bl	8004b6e <_ZN6common26ReadtheValueAssignPinstateEhh>
 8008be4:	4603      	mov	r3, r0
 8008be6:	461a      	mov	r2, r3
 8008be8:	2101      	movs	r1, #1
 8008bea:	481d      	ldr	r0, [pc, #116]	; (8008c60 <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 8008bec:	f001 f8e8 	bl	8009dc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD4_Pin,ReadtheValueAssignPinstate(4,finput));
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	78fa      	ldrb	r2, [r7, #3]
 8008bf4:	2104      	movs	r1, #4
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f7fb ffb9 	bl	8004b6e <_ZN6common26ReadtheValueAssignPinstateEhh>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	461a      	mov	r2, r3
 8008c00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008c04:	4816      	ldr	r0, [pc, #88]	; (8008c60 <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 8008c06:	f001 f8db 	bl	8009dc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD5_Pin,ReadtheValueAssignPinstate(5,finput));
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	78fa      	ldrb	r2, [r7, #3]
 8008c0e:	2105      	movs	r1, #5
 8008c10:	4618      	mov	r0, r3
 8008c12:	f7fb ffac 	bl	8004b6e <_ZN6common26ReadtheValueAssignPinstateEhh>
 8008c16:	4603      	mov	r3, r0
 8008c18:	461a      	mov	r2, r3
 8008c1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008c1e:	4810      	ldr	r0, [pc, #64]	; (8008c60 <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 8008c20:	f001 f8ce 	bl	8009dc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD6_Pin,ReadtheValueAssignPinstate(6,finput));
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	78fa      	ldrb	r2, [r7, #3]
 8008c28:	2106      	movs	r1, #6
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7fb ff9f 	bl	8004b6e <_ZN6common26ReadtheValueAssignPinstateEhh>
 8008c30:	4603      	mov	r3, r0
 8008c32:	461a      	mov	r2, r3
 8008c34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008c38:	4809      	ldr	r0, [pc, #36]	; (8008c60 <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 8008c3a:	f001 f8c1 	bl	8009dc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,LCDD7_Pin, ReadtheValueAssignPinstate(7,finput));
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	78fa      	ldrb	r2, [r7, #3]
 8008c42:	2107      	movs	r1, #7
 8008c44:	4618      	mov	r0, r3
 8008c46:	f7fb ff92 	bl	8004b6e <_ZN6common26ReadtheValueAssignPinstateEhh>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	2120      	movs	r1, #32
 8008c50:	4804      	ldr	r0, [pc, #16]	; (8008c64 <_ZN4GLCD16m_IOWritethedataEh+0xe0>)
 8008c52:	f001 f8b5 	bl	8009dc0 <HAL_GPIO_WritePin>
}
 8008c56:	bf00      	nop
 8008c58:	3708      	adds	r7, #8
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	48000800 	.word	0x48000800
 8008c64:	48000400 	.word	0x48000400

08008c68 <_ZN4GLCD11m_displayonEv>:

void GLCD::m_displayon(){
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
	m_ctrloff();
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f7ff ff3b 	bl	8008aec <_ZN4GLCD9m_ctrloffEv>
	m_IOWritethedata(0x3f);
 8008c76:	213f      	movs	r1, #63	; 0x3f
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f7ff ff83 	bl	8008b84 <_ZN4GLCD16m_IOWritethedataEh>
	HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 8008c7e:	2201      	movs	r2, #1
 8008c80:	2104      	movs	r1, #4
 8008c82:	4815      	ldr	r0, [pc, #84]	; (8008cd8 <_ZN4GLCD11m_displayonEv+0x70>)
 8008c84:	f001 f89c 	bl	8009dc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 8008c88:	2201      	movs	r2, #1
 8008c8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008c8e:	4813      	ldr	r0, [pc, #76]	; (8008cdc <_ZN4GLCD11m_displayonEv+0x74>)
 8008c90:	f001 f896 	bl	8009dc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 8008c94:	2200      	movs	r2, #0
 8008c96:	2110      	movs	r1, #16
 8008c98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008c9c:	f001 f890 	bl	8009dc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008ca6:	480d      	ldr	r0, [pc, #52]	; (8008cdc <_ZN4GLCD11m_displayonEv+0x74>)
 8008ca8:	f001 f88a 	bl	8009dc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 8008cac:	2201      	movs	r2, #1
 8008cae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008cb2:	480a      	ldr	r0, [pc, #40]	; (8008cdc <_ZN4GLCD11m_displayonEv+0x74>)
 8008cb4:	f001 f884 	bl	8009dc0 <HAL_GPIO_WritePin>
	//m_delay(GLCDDELAY);
	m_delay(10,100);
 8008cb8:	2264      	movs	r2, #100	; 0x64
 8008cba:	210a      	movs	r1, #10
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f7ff ff3f 	bl	8008b40 <_ZN4GLCD7m_delayEjh>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008cc8:	4804      	ldr	r0, [pc, #16]	; (8008cdc <_ZN4GLCD11m_displayonEv+0x74>)
 8008cca:	f001 f879 	bl	8009dc0 <HAL_GPIO_WritePin>
}
 8008cce:	bf00      	nop
 8008cd0:	3708      	adds	r7, #8
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	48000c00 	.word	0x48000c00
 8008cdc:	48000800 	.word	0x48000800

08008ce0 <_ZN4GLCD11m_setcolumnEh>:
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
}


void GLCD::m_setcolumn(uint8_t Columvalue)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b084      	sub	sp, #16
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	460b      	mov	r3, r1
 8008cea:	70fb      	strb	r3, [r7, #3]
	uint8_t dport;
	if(Columvalue <64)
 8008cec:	78fb      	ldrb	r3, [r7, #3]
 8008cee:	2b3f      	cmp	r3, #63	; 0x3f
 8008cf0:	d839      	bhi.n	8008d66 <_ZN4GLCD11m_setcolumnEh+0x86>
	{
		m_ctrloff();
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f7ff fefa 	bl	8008aec <_ZN4GLCD9m_ctrloffEv>
		c=Columvalue;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	78fa      	ldrb	r2, [r7, #3]
 8008cfc:	771a      	strb	r2, [r3, #28]
		m_IOWritethedata((0x40|(Columvalue&63)));
 8008cfe:	78fb      	ldrb	r3, [r7, #3]
 8008d00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d04:	b2db      	uxtb	r3, r3
 8008d06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f7ff ff38 	bl	8008b84 <_ZN4GLCD16m_IOWritethedataEh>
		HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 8008d14:	2201      	movs	r2, #1
 8008d16:	2104      	movs	r1, #4
 8008d18:	4831      	ldr	r0, [pc, #196]	; (8008de0 <_ZN4GLCD11m_setcolumnEh+0x100>)
 8008d1a:	f001 f851 	bl	8009dc0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_RESET);
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008d24:	482f      	ldr	r0, [pc, #188]	; (8008de4 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8008d26:	f001 f84b 	bl	8009dc0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	2110      	movs	r1, #16
 8008d2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008d32:	f001 f845 	bl	8009dc0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 8008d36:	2200      	movs	r2, #0
 8008d38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008d3c:	4829      	ldr	r0, [pc, #164]	; (8008de4 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8008d3e:	f001 f83f 	bl	8009dc0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 8008d42:	2201      	movs	r2, #1
 8008d44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008d48:	4826      	ldr	r0, [pc, #152]	; (8008de4 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8008d4a:	f001 f839 	bl	8009dc0 <HAL_GPIO_WritePin>
		//m_delay(GLCDDELAY);
		m_delay(10,100);
 8008d4e:	2264      	movs	r2, #100	; 0x64
 8008d50:	210a      	movs	r1, #10
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f7ff fef4 	bl	8008b40 <_ZN4GLCD7m_delayEjh>
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008d5e:	4821      	ldr	r0, [pc, #132]	; (8008de4 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8008d60:	f001 f82e 	bl	8009dc0 <HAL_GPIO_WritePin>
		//m_delay(GLCDDELAY);
		m_delay(10,100);
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);

	}
}
 8008d64:	e038      	b.n	8008dd8 <_ZN4GLCD11m_setcolumnEh+0xf8>
		c=Columvalue;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	78fa      	ldrb	r2, [r7, #3]
 8008d6a:	771a      	strb	r2, [r3, #28]
		dport=0x40|((Columvalue-64)&63);	  //0x40 represents Column 0
 8008d6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d74:	b25b      	sxtb	r3, r3
 8008d76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d7a:	b25b      	sxtb	r3, r3
 8008d7c:	73fb      	strb	r3, [r7, #15]
		m_IOWritethedata(dport);
 8008d7e:	7bfb      	ldrb	r3, [r7, #15]
 8008d80:	4619      	mov	r1, r3
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f7ff fefe 	bl	8008b84 <_ZN4GLCD16m_IOWritethedataEh>
		HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_RESET);
 8008d88:	2200      	movs	r2, #0
 8008d8a:	2104      	movs	r1, #4
 8008d8c:	4814      	ldr	r0, [pc, #80]	; (8008de0 <_ZN4GLCD11m_setcolumnEh+0x100>)
 8008d8e:	f001 f817 	bl	8009dc0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 8008d92:	2201      	movs	r2, #1
 8008d94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008d98:	4812      	ldr	r0, [pc, #72]	; (8008de4 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8008d9a:	f001 f811 	bl	8009dc0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 8008d9e:	2200      	movs	r2, #0
 8008da0:	2110      	movs	r1, #16
 8008da2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008da6:	f001 f80b 	bl	8009dc0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 8008daa:	2200      	movs	r2, #0
 8008dac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008db0:	480c      	ldr	r0, [pc, #48]	; (8008de4 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8008db2:	f001 f805 	bl	8009dc0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 8008db6:	2201      	movs	r2, #1
 8008db8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008dbc:	4809      	ldr	r0, [pc, #36]	; (8008de4 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8008dbe:	f000 ffff 	bl	8009dc0 <HAL_GPIO_WritePin>
		m_delay(10,100);
 8008dc2:	2264      	movs	r2, #100	; 0x64
 8008dc4:	210a      	movs	r1, #10
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f7ff feba 	bl	8008b40 <_ZN4GLCD7m_delayEjh>
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8008dcc:	2200      	movs	r2, #0
 8008dce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008dd2:	4804      	ldr	r0, [pc, #16]	; (8008de4 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8008dd4:	f000 fff4 	bl	8009dc0 <HAL_GPIO_WritePin>
}
 8008dd8:	bf00      	nop
 8008dda:	3710      	adds	r7, #16
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}
 8008de0:	48000c00 	.word	0x48000c00
 8008de4:	48000800 	.word	0x48000800

08008de8 <_ZN4GLCD9m_setpageEh>:

void GLCD::m_setpage(uint8_t x)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	460b      	mov	r3, r1
 8008df2:	70fb      	strb	r3, [r7, #3]
	uint8_t dport;
	m_ctrloff();
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f7ff fe79 	bl	8008aec <_ZN4GLCD9m_ctrloffEv>
	dport= 0xb8|x;	   //0xb8 represents Page 0
 8008dfa:	78fb      	ldrb	r3, [r7, #3]
 8008dfc:	f063 0347 	orn	r3, r3, #71	; 0x47
 8008e00:	73fb      	strb	r3, [r7, #15]
	m_IOWritethedata(dport);
 8008e02:	7bfb      	ldrb	r3, [r7, #15]
 8008e04:	4619      	mov	r1, r3
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f7ff febc 	bl	8008b84 <_ZN4GLCD16m_IOWritethedataEh>
	HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	2104      	movs	r1, #4
 8008e10:	4814      	ldr	r0, [pc, #80]	; (8008e64 <_ZN4GLCD9m_setpageEh+0x7c>)
 8008e12:	f000 ffd5 	bl	8009dc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 8008e16:	2201      	movs	r2, #1
 8008e18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008e1c:	4812      	ldr	r0, [pc, #72]	; (8008e68 <_ZN4GLCD9m_setpageEh+0x80>)
 8008e1e:	f000 ffcf 	bl	8009dc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 8008e22:	2200      	movs	r2, #0
 8008e24:	2110      	movs	r1, #16
 8008e26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008e2a:	f000 ffc9 	bl	8009dc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 8008e2e:	2200      	movs	r2, #0
 8008e30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008e34:	480c      	ldr	r0, [pc, #48]	; (8008e68 <_ZN4GLCD9m_setpageEh+0x80>)
 8008e36:	f000 ffc3 	bl	8009dc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008e40:	4809      	ldr	r0, [pc, #36]	; (8008e68 <_ZN4GLCD9m_setpageEh+0x80>)
 8008e42:	f000 ffbd 	bl	8009dc0 <HAL_GPIO_WritePin>
	//m_delay(GLCDDELAY);
	m_delay(10,100);
 8008e46:	2264      	movs	r2, #100	; 0x64
 8008e48:	210a      	movs	r1, #10
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f7ff fe78 	bl	8008b40 <_ZN4GLCD7m_delayEjh>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8008e50:	2200      	movs	r2, #0
 8008e52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008e56:	4804      	ldr	r0, [pc, #16]	; (8008e68 <_ZN4GLCD9m_setpageEh+0x80>)
 8008e58:	f000 ffb2 	bl	8009dc0 <HAL_GPIO_WritePin>
}
 8008e5c:	bf00      	nop
 8008e5e:	3710      	adds	r7, #16
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}
 8008e64:	48000c00 	.word	0x48000c00
 8008e68:	48000800 	.word	0x48000800

08008e6c <_ZN4GLCD14m_setstartlineEh>:

void GLCD::m_setstartline(uint8_t z)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b084      	sub	sp, #16
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	460b      	mov	r3, r1
 8008e76:	70fb      	strb	r3, [r7, #3]
	uint8_t dport;
	m_ctrloff();
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f7ff fe37 	bl	8008aec <_ZN4GLCD9m_ctrloffEv>
	dport=0xc0|z;	   //0xc0 represents Line 0
 8008e7e:	78fb      	ldrb	r3, [r7, #3]
 8008e80:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8008e84:	73fb      	strb	r3, [r7, #15]
	m_IOWritethedata(dport);
 8008e86:	7bfb      	ldrb	r3, [r7, #15]
 8008e88:	4619      	mov	r1, r3
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f7ff fe7a 	bl	8008b84 <_ZN4GLCD16m_IOWritethedataEh>
	HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 8008e90:	2201      	movs	r2, #1
 8008e92:	2104      	movs	r1, #4
 8008e94:	4814      	ldr	r0, [pc, #80]	; (8008ee8 <_ZN4GLCD14m_setstartlineEh+0x7c>)
 8008e96:	f000 ff93 	bl	8009dc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008ea0:	4812      	ldr	r0, [pc, #72]	; (8008eec <_ZN4GLCD14m_setstartlineEh+0x80>)
 8008ea2:	f000 ff8d 	bl	8009dc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	2110      	movs	r1, #16
 8008eaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008eae:	f000 ff87 	bl	8009dc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008eb8:	480c      	ldr	r0, [pc, #48]	; (8008eec <_ZN4GLCD14m_setstartlineEh+0x80>)
 8008eba:	f000 ff81 	bl	8009dc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008ec4:	4809      	ldr	r0, [pc, #36]	; (8008eec <_ZN4GLCD14m_setstartlineEh+0x80>)
 8008ec6:	f000 ff7b 	bl	8009dc0 <HAL_GPIO_WritePin>
	//m_delay(GLCDDELAY);
	m_delay(10,100);
 8008eca:	2264      	movs	r2, #100	; 0x64
 8008ecc:	210a      	movs	r1, #10
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f7ff fe36 	bl	8008b40 <_ZN4GLCD7m_delayEjh>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008eda:	4804      	ldr	r0, [pc, #16]	; (8008eec <_ZN4GLCD14m_setstartlineEh+0x80>)
 8008edc:	f000 ff70 	bl	8009dc0 <HAL_GPIO_WritePin>
}
 8008ee0:	bf00      	nop
 8008ee2:	3710      	adds	r7, #16
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}
 8008ee8:	48000c00 	.word	0x48000c00
 8008eec:	48000800 	.word	0x48000800

08008ef0 <_ZN4GLCD9m_lcddataEPht>:

void GLCD::m_lcddata(uint8_t *value,uint16_t limit)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b086      	sub	sp, #24
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	60f8      	str	r0, [r7, #12]
 8008ef8:	60b9      	str	r1, [r7, #8]
 8008efa:	4613      	mov	r3, r2
 8008efc:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	uint8_t dport;
	for(i=0;i<limit;i++)
 8008efe:	2300      	movs	r3, #0
 8008f00:	82fb      	strh	r3, [r7, #22]
 8008f02:	8afa      	ldrh	r2, [r7, #22]
 8008f04:	88fb      	ldrh	r3, [r7, #6]
 8008f06:	429a      	cmp	r2, r3
 8008f08:	f080 8085 	bcs.w	8009016 <_ZN4GLCD9m_lcddataEPht+0x126>
	{
		if(c<64)
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	7f1b      	ldrb	r3, [r3, #28]
 8008f10:	2b3f      	cmp	r3, #63	; 0x3f
 8008f12:	d838      	bhi.n	8008f86 <_ZN4GLCD9m_lcddataEPht+0x96>
		{
			dport=value[i];
 8008f14:	8afb      	ldrh	r3, [r7, #22]
 8008f16:	68ba      	ldr	r2, [r7, #8]
 8008f18:	4413      	add	r3, r2
 8008f1a:	781b      	ldrb	r3, [r3, #0]
 8008f1c:	757b      	strb	r3, [r7, #21]
			m_IOWritethedata(dport);
 8008f1e:	7d7b      	ldrb	r3, [r7, #21]
 8008f20:	4619      	mov	r1, r3
 8008f22:	68f8      	ldr	r0, [r7, #12]
 8008f24:	f7ff fe2e 	bl	8008b84 <_ZN4GLCD16m_IOWritethedataEh>
			HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 8008f28:	2201      	movs	r2, #1
 8008f2a:	2104      	movs	r1, #4
 8008f2c:	483b      	ldr	r0, [pc, #236]	; (800901c <_ZN4GLCD9m_lcddataEPht+0x12c>)
 8008f2e:	f000 ff47 	bl	8009dc0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_RESET);
 8008f32:	2200      	movs	r2, #0
 8008f34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008f38:	4839      	ldr	r0, [pc, #228]	; (8009020 <_ZN4GLCD9m_lcddataEPht+0x130>)
 8008f3a:	f000 ff41 	bl	8009dc0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_SET);
 8008f3e:	2201      	movs	r2, #1
 8008f40:	2110      	movs	r1, #16
 8008f42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008f46:	f000 ff3b 	bl	8009dc0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008f50:	4833      	ldr	r0, [pc, #204]	; (8009020 <_ZN4GLCD9m_lcddataEPht+0x130>)
 8008f52:	f000 ff35 	bl	8009dc0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 8008f56:	2201      	movs	r2, #1
 8008f58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008f5c:	4830      	ldr	r0, [pc, #192]	; (8009020 <_ZN4GLCD9m_lcddataEPht+0x130>)
 8008f5e:	f000 ff2f 	bl	8009dc0 <HAL_GPIO_WritePin>
			//m_delay(GLCDDELAY);
			m_delay(10,100);
 8008f62:	2264      	movs	r2, #100	; 0x64
 8008f64:	210a      	movs	r1, #10
 8008f66:	68f8      	ldr	r0, [r7, #12]
 8008f68:	f7ff fdea 	bl	8008b40 <_ZN4GLCD7m_delayEjh>
			HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008f72:	482b      	ldr	r0, [pc, #172]	; (8009020 <_ZN4GLCD9m_lcddataEPht+0x130>)
 8008f74:	f000 ff24 	bl	8009dc0 <HAL_GPIO_WritePin>
			c++;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	7f1b      	ldrb	r3, [r3, #28]
 8008f7c:	3301      	adds	r3, #1
 8008f7e:	b2da      	uxtb	r2, r3
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	771a      	strb	r2, [r3, #28]
 8008f84:	e03d      	b.n	8009002 <_ZN4GLCD9m_lcddataEPht+0x112>
		}
		else
		{
			m_setcolumn(c);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	7f1b      	ldrb	r3, [r3, #28]
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	68f8      	ldr	r0, [r7, #12]
 8008f8e:	f7ff fea7 	bl	8008ce0 <_ZN4GLCD11m_setcolumnEh>
			dport=value[i];
 8008f92:	8afb      	ldrh	r3, [r7, #22]
 8008f94:	68ba      	ldr	r2, [r7, #8]
 8008f96:	4413      	add	r3, r2
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	757b      	strb	r3, [r7, #21]
			m_IOWritethedata(dport);
 8008f9c:	7d7b      	ldrb	r3, [r7, #21]
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	68f8      	ldr	r0, [r7, #12]
 8008fa2:	f7ff fdef 	bl	8008b84 <_ZN4GLCD16m_IOWritethedataEh>
			HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_RESET);
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	2104      	movs	r1, #4
 8008faa:	481c      	ldr	r0, [pc, #112]	; (800901c <_ZN4GLCD9m_lcddataEPht+0x12c>)
 8008fac:	f000 ff08 	bl	8009dc0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008fb6:	481a      	ldr	r0, [pc, #104]	; (8009020 <_ZN4GLCD9m_lcddataEPht+0x130>)
 8008fb8:	f000 ff02 	bl	8009dc0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_SET);
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	2110      	movs	r1, #16
 8008fc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008fc4:	f000 fefc 	bl	8009dc0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 8008fc8:	2200      	movs	r2, #0
 8008fca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008fce:	4814      	ldr	r0, [pc, #80]	; (8009020 <_ZN4GLCD9m_lcddataEPht+0x130>)
 8008fd0:	f000 fef6 	bl	8009dc0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008fda:	4811      	ldr	r0, [pc, #68]	; (8009020 <_ZN4GLCD9m_lcddataEPht+0x130>)
 8008fdc:	f000 fef0 	bl	8009dc0 <HAL_GPIO_WritePin>
			//m_delay(GLCDDELAY);
			m_delay(10,100);
 8008fe0:	2264      	movs	r2, #100	; 0x64
 8008fe2:	210a      	movs	r1, #10
 8008fe4:	68f8      	ldr	r0, [r7, #12]
 8008fe6:	f7ff fdab 	bl	8008b40 <_ZN4GLCD7m_delayEjh>
			HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8008fea:	2200      	movs	r2, #0
 8008fec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008ff0:	480b      	ldr	r0, [pc, #44]	; (8009020 <_ZN4GLCD9m_lcddataEPht+0x130>)
 8008ff2:	f000 fee5 	bl	8009dc0 <HAL_GPIO_WritePin>
			c++;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	7f1b      	ldrb	r3, [r3, #28]
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	b2da      	uxtb	r2, r3
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	771a      	strb	r2, [r3, #28]
		}
		if(c>127)
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	7f1b      	ldrb	r3, [r3, #28]
 8009006:	b25b      	sxtb	r3, r3
 8009008:	2b00      	cmp	r3, #0
 800900a:	db03      	blt.n	8009014 <_ZN4GLCD9m_lcddataEPht+0x124>
	for(i=0;i<limit;i++)
 800900c:	8afb      	ldrh	r3, [r7, #22]
 800900e:	3301      	adds	r3, #1
 8009010:	82fb      	strh	r3, [r7, #22]
 8009012:	e776      	b.n	8008f02 <_ZN4GLCD9m_lcddataEPht+0x12>
	           return;
 8009014:	bf00      	nop
	}
}
 8009016:	3718      	adds	r7, #24
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}
 800901c:	48000c00 	.word	0x48000c00
 8009020:	48000800 	.word	0x48000800

08009024 <_ZN4GLCD8m_clrlcdEv>:
		m_lcddata(&font5x7[a],5);
	}
}

void GLCD::m_clrlcd(void)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
    uint8_t i,j;
    for (i=0;i < 8;i++)
 800902c:	2300      	movs	r3, #0
 800902e:	73fb      	strb	r3, [r7, #15]
 8009030:	7bfb      	ldrb	r3, [r7, #15]
 8009032:	2b07      	cmp	r3, #7
 8009034:	d81d      	bhi.n	8009072 <_ZN4GLCD8m_clrlcdEv+0x4e>
    {
    m_setpage(i);
 8009036:	7bfb      	ldrb	r3, [r7, #15]
 8009038:	4619      	mov	r1, r3
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f7ff fed4 	bl	8008de8 <_ZN4GLCD9m_setpageEh>
    m_setcolumn(0);
 8009040:	2100      	movs	r1, #0
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f7ff fe4c 	bl	8008ce0 <_ZN4GLCD11m_setcolumnEh>
        for (j= 0 ;j < 128; j++)
 8009048:	2300      	movs	r3, #0
 800904a:	73bb      	strb	r3, [r7, #14]
 800904c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009050:	2b00      	cmp	r3, #0
 8009052:	db0a      	blt.n	800906a <_ZN4GLCD8m_clrlcdEv+0x46>
        	m_lcddata(&z,1);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	331d      	adds	r3, #29
 8009058:	2201      	movs	r2, #1
 800905a:	4619      	mov	r1, r3
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f7ff ff47 	bl	8008ef0 <_ZN4GLCD9m_lcddataEPht>
        for (j= 0 ;j < 128; j++)
 8009062:	7bbb      	ldrb	r3, [r7, #14]
 8009064:	3301      	adds	r3, #1
 8009066:	73bb      	strb	r3, [r7, #14]
 8009068:	e7f0      	b.n	800904c <_ZN4GLCD8m_clrlcdEv+0x28>
    for (i=0;i < 8;i++)
 800906a:	7bfb      	ldrb	r3, [r7, #15]
 800906c:	3301      	adds	r3, #1
 800906e:	73fb      	strb	r3, [r7, #15]
 8009070:	e7de      	b.n	8009030 <_ZN4GLCD8m_clrlcdEv+0xc>
    }
}
 8009072:	bf00      	nop
 8009074:	3710      	adds	r7, #16
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
	...

0800907c <_ZN10W5500ClassC1Ev>:
// SPI details
//SPISettings wiznet_SPI_settings(8000000, MSBFIRST, SPI_MODE0);
uint8_t SPI_CS;


W5500Class::W5500Class() {
 800907c:	b480      	push	{r7}
 800907e:	b083      	sub	sp, #12
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	4a04      	ldr	r2, [pc, #16]	; (8009098 <_ZN10W5500ClassC1Ev+0x1c>)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	4618      	mov	r0, r3
 800908e:	370c      	adds	r7, #12
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr
 8009098:	0800f810 	.word	0x0800f810

0800909c <_ZN10W5500ClassD1Ev>:

W5500Class::~W5500Class() {
 800909c:	b480      	push	{r7}
 800909e:	b083      	sub	sp, #12
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	4a04      	ldr	r2, [pc, #16]	; (80090b8 <_ZN10W5500ClassD1Ev+0x1c>)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	4618      	mov	r0, r3
 80090ae:	370c      	adds	r7, #12
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr
 80090b8:	0800f810 	.word	0x0800f810

080090bc <_ZN10W5500ClassD0Ev>:
W5500Class::~W5500Class() {
 80090bc:	b580      	push	{r7, lr}
 80090be:	b082      	sub	sp, #8
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
}
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f7ff ffe9 	bl	800909c <_ZN10W5500ClassD1Ev>
 80090ca:	2104      	movs	r1, #4
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f004 fdfc 	bl	800dcca <_ZdlPvj>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	4618      	mov	r0, r3
 80090d6:	3708      	adds	r7, #8
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <_Z41__static_initialization_and_destruction_0ii>:
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	6039      	str	r1, [r7, #0]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d107      	bne.n	80090fc <_Z41__static_initialization_and_destruction_0ii+0x20>
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d102      	bne.n	80090fc <_Z41__static_initialization_and_destruction_0ii+0x20>
W5500Class w5500;
 80090f6:	4809      	ldr	r0, [pc, #36]	; (800911c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80090f8:	f7ff ffc0 	bl	800907c <_ZN10W5500ClassC1Ev>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d107      	bne.n	8009112 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009108:	4293      	cmp	r3, r2
 800910a:	d102      	bne.n	8009112 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800910c:	4803      	ldr	r0, [pc, #12]	; (800911c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800910e:	f7ff ffc5 	bl	800909c <_ZN10W5500ClassD1Ev>
}
 8009112:	bf00      	nop
 8009114:	3708      	adds	r7, #8
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
 800911a:	bf00      	nop
 800911c:	200053f8 	.word	0x200053f8

08009120 <_GLOBAL__sub_I_w5500>:
 8009120:	b580      	push	{r7, lr}
 8009122:	af00      	add	r7, sp, #0
 8009124:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009128:	2001      	movs	r0, #1
 800912a:	f7ff ffd7 	bl	80090dc <_Z41__static_initialization_and_destruction_0ii>
 800912e:	bd80      	pop	{r7, pc}

08009130 <_GLOBAL__sub_D_w5500>:
 8009130:	b580      	push	{r7, lr}
 8009132:	af00      	add	r7, sp, #0
 8009134:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009138:	2000      	movs	r0, #0
 800913a:	f7ff ffcf 	bl	80090dc <_Z41__static_initialization_and_destruction_0ii>
 800913e:	bd80      	pop	{r7, pc}

08009140 <_ZN9ModbusrtuC1Ev>:
uint8_t CurrentFrame=1;
uint8_t noOfDataDwin;
uint16_t RxNoOfData;
uint16_t Valid_No_Of_Data;

Modbusrtu::Modbusrtu() {
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	4a0f      	ldr	r2, [pc, #60]	; (8009188 <_ZN9ModbusrtuC1Ev+0x48>)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	601a      	str	r2, [r3, #0]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2201      	movs	r2, #1
 8009152:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	4a0c      	ldr	r2, [pc, #48]	; (800918c <_ZN9ModbusrtuC1Ev+0x4c>)
 800915a:	3325      	adds	r3, #37	; 0x25
 800915c:	4611      	mov	r1, r2
 800915e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009162:	4618      	mov	r0, r3
 8009164:	f004 fdf0 	bl	800dd48 <memcpy>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	4a09      	ldr	r2, [pc, #36]	; (8009190 <_ZN9ModbusrtuC1Ev+0x50>)
 800916c:	f203 1325 	addw	r3, r3, #293	; 0x125
 8009170:	4611      	mov	r1, r2
 8009172:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009176:	4618      	mov	r0, r3
 8009178:	f004 fde6 	bl	800dd48 <memcpy>
	// TODO Auto-generated constructor stub

}
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	4618      	mov	r0, r3
 8009180:	3708      	adds	r7, #8
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	0800f820 	.word	0x0800f820
 800918c:	0800f580 	.word	0x0800f580
 8009190:	0800f680 	.word	0x0800f680

08009194 <_ZN9ModbusrtuD1Ev>:

Modbusrtu::~Modbusrtu() {
 8009194:	b480      	push	{r7}
 8009196:	b083      	sub	sp, #12
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	4a04      	ldr	r2, [pc, #16]	; (80091b0 <_ZN9ModbusrtuD1Ev+0x1c>)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	4618      	mov	r0, r3
 80091a6:	370c      	adds	r7, #12
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr
 80091b0:	0800f820 	.word	0x0800f820

080091b4 <_ZN9ModbusrtuD0Ev>:
Modbusrtu::~Modbusrtu() {
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b082      	sub	sp, #8
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
}
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f7ff ffe9 	bl	8009194 <_ZN9ModbusrtuD1Ev>
 80091c2:	f44f 710a 	mov.w	r1, #552	; 0x228
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f004 fd7f 	bl	800dcca <_ZdlPvj>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	4618      	mov	r0, r3
 80091d0:	3708      	adds	r7, #8
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
	...

080091d8 <_ZN9Modbusrtu21ModbusReadTransactionEv>:
{
	return NOOFDATA;
}

void Modbusrtu::ModbusReadTransaction(void)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b082      	sub	sp, #8
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
	switch(Seqcntrl){
 80091e0:	4b69      	ldr	r3, [pc, #420]	; (8009388 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1b0>)
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d002      	beq.n	80091ee <_ZN9Modbusrtu21ModbusReadTransactionEv+0x16>
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d00a      	beq.n	8009202 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x2a>
			CurrentFrame=1;
		}
		Seqcntrl=1;
	break;
	default:
	break;
 80091ec:	e035      	b.n	800925a <_ZN9Modbusrtu21ModbusReadTransactionEv+0x82>
			CurrentMeter=1;
 80091ee:	4b67      	ldr	r3, [pc, #412]	; (800938c <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1b4>)
 80091f0:	2201      	movs	r2, #1
 80091f2:	701a      	strb	r2, [r3, #0]
			CurrentFrame=1;
 80091f4:	4b66      	ldr	r3, [pc, #408]	; (8009390 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1b8>)
 80091f6:	2201      	movs	r2, #1
 80091f8:	701a      	strb	r2, [r3, #0]
			Seqcntrl=1;
 80091fa:	4b63      	ldr	r3, [pc, #396]	; (8009388 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1b0>)
 80091fc:	2201      	movs	r2, #1
 80091fe:	701a      	strb	r2, [r3, #0]
	break;
 8009200:	e02b      	b.n	800925a <_ZN9Modbusrtu21ModbusReadTransactionEv+0x82>
		++CurrentFrame;
 8009202:	4b63      	ldr	r3, [pc, #396]	; (8009390 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1b8>)
 8009204:	781b      	ldrb	r3, [r3, #0]
 8009206:	3301      	adds	r3, #1
 8009208:	b2da      	uxtb	r2, r3
 800920a:	4b61      	ldr	r3, [pc, #388]	; (8009390 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1b8>)
 800920c:	701a      	strb	r2, [r3, #0]
		if(CurrentFrame > MeterInfo[CurrentMeter-1].NoOfFrame){
 800920e:	4b5f      	ldr	r3, [pc, #380]	; (800938c <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1b4>)
 8009210:	781b      	ldrb	r3, [r3, #0]
 8009212:	3b01      	subs	r3, #1
 8009214:	4a5f      	ldr	r2, [pc, #380]	; (8009394 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1bc>)
 8009216:	2116      	movs	r1, #22
 8009218:	fb01 f303 	mul.w	r3, r1, r3
 800921c:	4413      	add	r3, r2
 800921e:	781a      	ldrb	r2, [r3, #0]
 8009220:	4b5b      	ldr	r3, [pc, #364]	; (8009390 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1b8>)
 8009222:	781b      	ldrb	r3, [r3, #0]
 8009224:	429a      	cmp	r2, r3
 8009226:	d208      	bcs.n	800923a <_ZN9Modbusrtu21ModbusReadTransactionEv+0x62>
			CurrentMeter++;
 8009228:	4b58      	ldr	r3, [pc, #352]	; (800938c <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1b4>)
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	3301      	adds	r3, #1
 800922e:	b2da      	uxtb	r2, r3
 8009230:	4b56      	ldr	r3, [pc, #344]	; (800938c <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1b4>)
 8009232:	701a      	strb	r2, [r3, #0]
			CurrentFrame=1;
 8009234:	4b56      	ldr	r3, [pc, #344]	; (8009390 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1b8>)
 8009236:	2201      	movs	r2, #1
 8009238:	701a      	strb	r2, [r3, #0]
		if(CurrentMeter > Total_No_Of_Meter){
 800923a:	4b54      	ldr	r3, [pc, #336]	; (800938c <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1b4>)
 800923c:	781a      	ldrb	r2, [r3, #0]
 800923e:	4b56      	ldr	r3, [pc, #344]	; (8009398 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1c0>)
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	429a      	cmp	r2, r3
 8009244:	d905      	bls.n	8009252 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x7a>
			CurrentMeter=1;
 8009246:	4b51      	ldr	r3, [pc, #324]	; (800938c <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1b4>)
 8009248:	2201      	movs	r2, #1
 800924a:	701a      	strb	r2, [r3, #0]
			CurrentFrame=1;
 800924c:	4b50      	ldr	r3, [pc, #320]	; (8009390 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1b8>)
 800924e:	2201      	movs	r2, #1
 8009250:	701a      	strb	r2, [r3, #0]
		Seqcntrl=1;
 8009252:	4b4d      	ldr	r3, [pc, #308]	; (8009388 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1b0>)
 8009254:	2201      	movs	r2, #1
 8009256:	701a      	strb	r2, [r3, #0]
	break;
 8009258:	bf00      	nop
	}

	u8ModbusReg[0] = CurrentMeter;
 800925a:	4b4c      	ldr	r3, [pc, #304]	; (800938c <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1b4>)
 800925c:	781a      	ldrb	r2, [r3, #0]
 800925e:	4b4f      	ldr	r3, [pc, #316]	; (800939c <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1c4>)
 8009260:	701a      	strb	r2, [r3, #0]
	u8ModbusReg[1] = 0x03;
 8009262:	4b4e      	ldr	r3, [pc, #312]	; (800939c <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1c4>)
 8009264:	2203      	movs	r2, #3
 8009266:	705a      	strb	r2, [r3, #1]
	u8ModbusReg[2] = static_cast<uint8_t>((MeterInfo[CurrentMeter-1].ModbusFrameRegInfo[CurrentFrame-1].FrameStartAddress& 0xff00)>>8);
 8009268:	4b48      	ldr	r3, [pc, #288]	; (800938c <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1b4>)
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	3b01      	subs	r3, #1
 800926e:	4a48      	ldr	r2, [pc, #288]	; (8009390 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1b8>)
 8009270:	7812      	ldrb	r2, [r2, #0]
 8009272:	3a01      	subs	r2, #1
 8009274:	4947      	ldr	r1, [pc, #284]	; (8009394 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1bc>)
 8009276:	0092      	lsls	r2, r2, #2
 8009278:	2016      	movs	r0, #22
 800927a:	fb00 f303 	mul.w	r3, r0, r3
 800927e:	4413      	add	r3, r2
 8009280:	440b      	add	r3, r1
 8009282:	3302      	adds	r3, #2
 8009284:	881b      	ldrh	r3, [r3, #0]
 8009286:	0a1b      	lsrs	r3, r3, #8
 8009288:	b29b      	uxth	r3, r3
 800928a:	b2da      	uxtb	r2, r3
 800928c:	4b43      	ldr	r3, [pc, #268]	; (800939c <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1c4>)
 800928e:	709a      	strb	r2, [r3, #2]
	u8ModbusReg[3] = static_cast<uint8_t>(MeterInfo[CurrentMeter-1].ModbusFrameRegInfo[CurrentFrame-1].FrameStartAddress & 0x00ff);
 8009290:	4b3e      	ldr	r3, [pc, #248]	; (800938c <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1b4>)
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	3b01      	subs	r3, #1
 8009296:	4a3e      	ldr	r2, [pc, #248]	; (8009390 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1b8>)
 8009298:	7812      	ldrb	r2, [r2, #0]
 800929a:	3a01      	subs	r2, #1
 800929c:	493d      	ldr	r1, [pc, #244]	; (8009394 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1bc>)
 800929e:	0092      	lsls	r2, r2, #2
 80092a0:	2016      	movs	r0, #22
 80092a2:	fb00 f303 	mul.w	r3, r0, r3
 80092a6:	4413      	add	r3, r2
 80092a8:	440b      	add	r3, r1
 80092aa:	3302      	adds	r3, #2
 80092ac:	881b      	ldrh	r3, [r3, #0]
 80092ae:	b2da      	uxtb	r2, r3
 80092b0:	4b3a      	ldr	r3, [pc, #232]	; (800939c <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1c4>)
 80092b2:	70da      	strb	r2, [r3, #3]
	u8ModbusReg[4] = static_cast<uint8_t>((MeterInfo[CurrentMeter-1].ModbusFrameRegInfo[CurrentFrame-1].FrameNoOfData & 0xff00)>>8);
 80092b4:	4b35      	ldr	r3, [pc, #212]	; (800938c <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1b4>)
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	3b01      	subs	r3, #1
 80092ba:	4a35      	ldr	r2, [pc, #212]	; (8009390 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1b8>)
 80092bc:	7812      	ldrb	r2, [r2, #0]
 80092be:	3a01      	subs	r2, #1
 80092c0:	4934      	ldr	r1, [pc, #208]	; (8009394 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1bc>)
 80092c2:	0092      	lsls	r2, r2, #2
 80092c4:	2016      	movs	r0, #22
 80092c6:	fb00 f303 	mul.w	r3, r0, r3
 80092ca:	4413      	add	r3, r2
 80092cc:	440b      	add	r3, r1
 80092ce:	3304      	adds	r3, #4
 80092d0:	881b      	ldrh	r3, [r3, #0]
 80092d2:	0a1b      	lsrs	r3, r3, #8
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	b2da      	uxtb	r2, r3
 80092d8:	4b30      	ldr	r3, [pc, #192]	; (800939c <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1c4>)
 80092da:	711a      	strb	r2, [r3, #4]
	u8ModbusReg[5] = static_cast<uint8_t>(MeterInfo[CurrentMeter-1].ModbusFrameRegInfo[CurrentFrame-1].FrameNoOfData & 0x00ff);
 80092dc:	4b2b      	ldr	r3, [pc, #172]	; (800938c <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1b4>)
 80092de:	781b      	ldrb	r3, [r3, #0]
 80092e0:	3b01      	subs	r3, #1
 80092e2:	4a2b      	ldr	r2, [pc, #172]	; (8009390 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1b8>)
 80092e4:	7812      	ldrb	r2, [r2, #0]
 80092e6:	3a01      	subs	r2, #1
 80092e8:	492a      	ldr	r1, [pc, #168]	; (8009394 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1bc>)
 80092ea:	0092      	lsls	r2, r2, #2
 80092ec:	2016      	movs	r0, #22
 80092ee:	fb00 f303 	mul.w	r3, r0, r3
 80092f2:	4413      	add	r3, r2
 80092f4:	440b      	add	r3, r1
 80092f6:	3304      	adds	r3, #4
 80092f8:	881b      	ldrh	r3, [r3, #0]
 80092fa:	b2da      	uxtb	r2, r3
 80092fc:	4b27      	ldr	r3, [pc, #156]	; (800939c <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1c4>)
 80092fe:	715a      	strb	r2, [r3, #5]
	Valid_No_Of_Data = MeterInfo[CurrentMeter-1].ModbusFrameRegInfo[CurrentFrame-1].FrameNoOfData;
 8009300:	4b22      	ldr	r3, [pc, #136]	; (800938c <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1b4>)
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	3b01      	subs	r3, #1
 8009306:	4a22      	ldr	r2, [pc, #136]	; (8009390 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1b8>)
 8009308:	7812      	ldrb	r2, [r2, #0]
 800930a:	3a01      	subs	r2, #1
 800930c:	4921      	ldr	r1, [pc, #132]	; (8009394 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1bc>)
 800930e:	0092      	lsls	r2, r2, #2
 8009310:	2016      	movs	r0, #22
 8009312:	fb00 f303 	mul.w	r3, r0, r3
 8009316:	4413      	add	r3, r2
 8009318:	440b      	add	r3, r1
 800931a:	3304      	adds	r3, #4
 800931c:	881a      	ldrh	r2, [r3, #0]
 800931e:	4b20      	ldr	r3, [pc, #128]	; (80093a0 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1c8>)
 8009320:	801a      	strh	r2, [r3, #0]
	u16CRC 		   = ASCChecksum(u8ModbusReg,6);
 8009322:	2206      	movs	r2, #6
 8009324:	491d      	ldr	r1, [pc, #116]	; (800939c <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1c4>)
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 f840 	bl	80093ac <_ZN9Modbusrtu11ASCChecksumEPhh>
 800932c:	4603      	mov	r3, r0
 800932e:	461a      	mov	r2, r3
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	80da      	strh	r2, [r3, #6]
	u8ModbusReg[6] = static_cast<uint8_t>(u16CRC & 0x00ff);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	88db      	ldrh	r3, [r3, #6]
 8009338:	b2da      	uxtb	r2, r3
 800933a:	4b18      	ldr	r3, [pc, #96]	; (800939c <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1c4>)
 800933c:	719a      	strb	r2, [r3, #6]
	u8ModbusReg[7] = static_cast<uint8_t>((u16CRC & 0xff00)>>8);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	88db      	ldrh	r3, [r3, #6]
 8009342:	0a1b      	lsrs	r3, r3, #8
 8009344:	b29b      	uxth	r3, r3
 8009346:	b2da      	uxtb	r2, r3
 8009348:	4b14      	ldr	r3, [pc, #80]	; (800939c <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1c4>)
 800934a:	71da      	strb	r2, [r3, #7]
	RxNoOfData = 5+(MeterInfo[CurrentMeter-1].ModbusFrameRegInfo[CurrentFrame-1].FrameNoOfData*2);
 800934c:	4b0f      	ldr	r3, [pc, #60]	; (800938c <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1b4>)
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	3b01      	subs	r3, #1
 8009352:	4a0f      	ldr	r2, [pc, #60]	; (8009390 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1b8>)
 8009354:	7812      	ldrb	r2, [r2, #0]
 8009356:	3a01      	subs	r2, #1
 8009358:	490e      	ldr	r1, [pc, #56]	; (8009394 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1bc>)
 800935a:	0092      	lsls	r2, r2, #2
 800935c:	2016      	movs	r0, #22
 800935e:	fb00 f303 	mul.w	r3, r0, r3
 8009362:	4413      	add	r3, r2
 8009364:	440b      	add	r3, r1
 8009366:	3304      	adds	r3, #4
 8009368:	881b      	ldrh	r3, [r3, #0]
 800936a:	005b      	lsls	r3, r3, #1
 800936c:	b29b      	uxth	r3, r3
 800936e:	3305      	adds	r3, #5
 8009370:	b29a      	uxth	r2, r3
 8009372:	4b0c      	ldr	r3, [pc, #48]	; (80093a4 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1cc>)
 8009374:	801a      	strh	r2, [r3, #0]
	//memset(u8rxbuf,0,sizeof(u8rxbuf));
	//memset(RxDatabuf,0,sizeof(RxDatabuf));

	HAL_UART_Transmit_IT(&huart1,u8ModbusReg,sizeof(u8ModbusReg));
 8009376:	2208      	movs	r2, #8
 8009378:	4908      	ldr	r1, [pc, #32]	; (800939c <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1c4>)
 800937a:	480b      	ldr	r0, [pc, #44]	; (80093a8 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1d0>)
 800937c:	f003 f942 	bl	800c604 <HAL_UART_Transmit_IT>

}
 8009380:	bf00      	nop
 8009382:	3708      	adds	r7, #8
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}
 8009388:	20005504 	.word	0x20005504
 800938c:	20000084 	.word	0x20000084
 8009390:	20000085 	.word	0x20000085
 8009394:	20003758 	.word	0x20003758
 8009398:	200041b0 	.word	0x200041b0
 800939c:	200054fc 	.word	0x200054fc
 80093a0:	2000550a 	.word	0x2000550a
 80093a4:	20005508 	.word	0x20005508
 80093a8:	20003470 	.word	0x20003470

080093ac <_ZN9Modbusrtu11ASCChecksumEPhh>:
{
	HAL_UART_Receive_IT(&huart1,u8rxbuf,RxNoOfData);
}*/

uint16_t Modbusrtu::ASCChecksum(uint8_t *ASCSrc, uint8_t NoOfBytes)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b087      	sub	sp, #28
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	60f8      	str	r0, [r7, #12]
 80093b4:	60b9      	str	r1, [r7, #8]
 80093b6:	4613      	mov	r3, r2
 80093b8:	71fb      	strb	r3, [r7, #7]
	uint8_t i, CheckSumBytes;
	uint8_t CRCRegLow = 0xff;
 80093ba:	23ff      	movs	r3, #255	; 0xff
 80093bc:	75bb      	strb	r3, [r7, #22]
	uint8_t CRCRegHigh = 0xff;
 80093be:	23ff      	movs	r3, #255	; 0xff
 80093c0:	757b      	strb	r3, [r7, #21]
	uint8_t CRCIndex;

	CheckSumBytes = NoOfBytes;
 80093c2:	79fb      	ldrb	r3, [r7, #7]
 80093c4:	753b      	strb	r3, [r7, #20]
   	for(i=0;i < CheckSumBytes;i++)
 80093c6:	2300      	movs	r3, #0
 80093c8:	75fb      	strb	r3, [r7, #23]
 80093ca:	7dfa      	ldrb	r2, [r7, #23]
 80093cc:	7d3b      	ldrb	r3, [r7, #20]
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d218      	bcs.n	8009404 <_ZN9Modbusrtu11ASCChecksumEPhh+0x58>
   	{
	    CRCIndex = CRCRegLow ^ *ASCSrc++; 				//TransmittingData[i];
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	1c5a      	adds	r2, r3, #1
 80093d6:	60ba      	str	r2, [r7, #8]
 80093d8:	781a      	ldrb	r2, [r3, #0]
 80093da:	7dbb      	ldrb	r3, [r7, #22]
 80093dc:	4053      	eors	r3, r2
 80093de:	74fb      	strb	r3, [r7, #19]
		CRCRegLow = CRCRegHigh ^ CRCArrayHigh[CRCIndex];
 80093e0:	7cfb      	ldrb	r3, [r7, #19]
 80093e2:	68fa      	ldr	r2, [r7, #12]
 80093e4:	4413      	add	r3, r2
 80093e6:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80093ea:	7d7b      	ldrb	r3, [r7, #21]
 80093ec:	4053      	eors	r3, r2
 80093ee:	75bb      	strb	r3, [r7, #22]
		CRCRegHigh = CRCArrayLow[CRCIndex];
 80093f0:	7cfb      	ldrb	r3, [r7, #19]
 80093f2:	68fa      	ldr	r2, [r7, #12]
 80093f4:	4413      	add	r3, r2
 80093f6:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 80093fa:	757b      	strb	r3, [r7, #21]
   	for(i=0;i < CheckSumBytes;i++)
 80093fc:	7dfb      	ldrb	r3, [r7, #23]
 80093fe:	3301      	adds	r3, #1
 8009400:	75fb      	strb	r3, [r7, #23]
 8009402:	e7e2      	b.n	80093ca <_ZN9Modbusrtu11ASCChecksumEPhh+0x1e>

	}
	return (CRCRegHigh << 8 | CRCRegLow );
 8009404:	7d7b      	ldrb	r3, [r7, #21]
 8009406:	021b      	lsls	r3, r3, #8
 8009408:	b21a      	sxth	r2, r3
 800940a:	7dbb      	ldrb	r3, [r7, #22]
 800940c:	b21b      	sxth	r3, r3
 800940e:	4313      	orrs	r3, r2
 8009410:	b21b      	sxth	r3, r3
 8009412:	b29b      	uxth	r3, r3
}
 8009414:	4618      	mov	r0, r3
 8009416:	371c      	adds	r7, #28
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr

08009420 <_ZN9Modbusrtu9dwinFrameEv>:

void Modbusrtu::dwinFrame(void)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
	test=test+1;
 8009428:	4b4d      	ldr	r3, [pc, #308]	; (8009560 <_ZN9Modbusrtu9dwinFrameEv+0x140>)
 800942a:	781b      	ldrb	r3, [r3, #0]
 800942c:	3301      	adds	r3, #1
 800942e:	b2da      	uxtb	r2, r3
 8009430:	4b4b      	ldr	r3, [pc, #300]	; (8009560 <_ZN9Modbusrtu9dwinFrameEv+0x140>)
 8009432:	701a      	strb	r2, [r3, #0]
	switch(cntIdDwin)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	795b      	ldrb	r3, [r3, #5]
 8009438:	2b02      	cmp	r3, #2
 800943a:	d060      	beq.n	80094fe <_ZN9Modbusrtu9dwinFrameEv+0xde>
 800943c:	2b02      	cmp	r3, #2
 800943e:	dc7d      	bgt.n	800953c <_ZN9Modbusrtu9dwinFrameEv+0x11c>
 8009440:	2b00      	cmp	r3, #0
 8009442:	d002      	beq.n	800944a <_ZN9Modbusrtu9dwinFrameEv+0x2a>
 8009444:	2b01      	cmp	r3, #1
 8009446:	d02d      	beq.n	80094a4 <_ZN9Modbusrtu9dwinFrameEv+0x84>
 8009448:	e078      	b.n	800953c <_ZN9Modbusrtu9dwinFrameEv+0x11c>
	{
	case 0:
		u8DwinRegister[0] = START_BYTE_1;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	225a      	movs	r2, #90	; 0x5a
 800944e:	741a      	strb	r2, [r3, #16]
		u8DwinRegister[1] = START_BYTE_2;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	22a5      	movs	r2, #165	; 0xa5
 8009454:	745a      	strb	r2, [r3, #17]
		u8DwinRegister[2] = multipleWriteRequestH;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	220b      	movs	r2, #11
 800945a:	749a      	strb	r2, [r3, #18]
		u8DwinRegister[3] = multipleWriteRequestL;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2282      	movs	r2, #130	; 0x82
 8009460:	74da      	strb	r2, [r3, #19]
		u8DwinRegister[4] = 0x20;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2220      	movs	r2, #32
 8009466:	751a      	strb	r2, [r3, #20]
		u8DwinRegister[5] = 0x00;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2200      	movs	r2, #0
 800946c:	755a      	strb	r2, [r3, #21]
		u8DwinRegister[6] = 0x00;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2200      	movs	r2, #0
 8009472:	759a      	strb	r2, [r3, #22]
		u8DwinRegister[7] = test;
 8009474:	4b3a      	ldr	r3, [pc, #232]	; (8009560 <_ZN9Modbusrtu9dwinFrameEv+0x140>)
 8009476:	781a      	ldrb	r2, [r3, #0]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	75da      	strb	r2, [r3, #23]
		u8DwinRegister[8] = 0;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2200      	movs	r2, #0
 8009480:	761a      	strb	r2, [r3, #24]
		u8DwinRegister[9] = httpc_isConnected;
 8009482:	4b38      	ldr	r3, [pc, #224]	; (8009564 <_ZN9Modbusrtu9dwinFrameEv+0x144>)
 8009484:	781a      	ldrb	r2, [r3, #0]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	765a      	strb	r2, [r3, #25]
		u8DwinRegister[10] = 0;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2200      	movs	r2, #0
 800948e:	769a      	strb	r2, [r3, #26]
		u8DwinRegister[11] = 1;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2201      	movs	r2, #1
 8009494:	76da      	strb	r2, [r3, #27]
		noOfDataDwin=12;
 8009496:	4b34      	ldr	r3, [pc, #208]	; (8009568 <_ZN9Modbusrtu9dwinFrameEv+0x148>)
 8009498:	220c      	movs	r2, #12
 800949a:	701a      	strb	r2, [r3, #0]
		cntIdDwin=1;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2201      	movs	r2, #1
 80094a0:	715a      	strb	r2, [r3, #5]
	break;
 80094a2:	e04f      	b.n	8009544 <_ZN9Modbusrtu9dwinFrameEv+0x124>
	case 1:
		u8DwinRegister[0] = START_BYTE_1;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	225a      	movs	r2, #90	; 0x5a
 80094a8:	741a      	strb	r2, [r3, #16]
		u8DwinRegister[1] = START_BYTE_2;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	22a5      	movs	r2, #165	; 0xa5
 80094ae:	745a      	strb	r2, [r3, #17]
		u8DwinRegister[2] = multipleWriteRequestH;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	220b      	movs	r2, #11
 80094b4:	749a      	strb	r2, [r3, #18]
		u8DwinRegister[3] = multipleWriteRequestL;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2282      	movs	r2, #130	; 0x82
 80094ba:	74da      	strb	r2, [r3, #19]
		u8DwinRegister[4] = 0x20;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2220      	movs	r2, #32
 80094c0:	751a      	strb	r2, [r3, #20]
		u8DwinRegister[5] = 0x00;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2200      	movs	r2, #0
 80094c6:	755a      	strb	r2, [r3, #21]
		u8DwinRegister[6] = 0x00;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2200      	movs	r2, #0
 80094cc:	759a      	strb	r2, [r3, #22]
		u8DwinRegister[7] = test;
 80094ce:	4b24      	ldr	r3, [pc, #144]	; (8009560 <_ZN9Modbusrtu9dwinFrameEv+0x140>)
 80094d0:	781a      	ldrb	r2, [r3, #0]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	75da      	strb	r2, [r3, #23]
		u8DwinRegister[8] = 0;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2200      	movs	r2, #0
 80094da:	761a      	strb	r2, [r3, #24]
		u8DwinRegister[9] = httpc_isConnected;
 80094dc:	4b21      	ldr	r3, [pc, #132]	; (8009564 <_ZN9Modbusrtu9dwinFrameEv+0x144>)
 80094de:	781a      	ldrb	r2, [r3, #0]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	765a      	strb	r2, [r3, #25]
		u8DwinRegister[10] = 0;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2200      	movs	r2, #0
 80094e8:	769a      	strb	r2, [r3, #26]
		u8DwinRegister[11] = 1;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2201      	movs	r2, #1
 80094ee:	76da      	strb	r2, [r3, #27]
		noOfDataDwin=12;
 80094f0:	4b1d      	ldr	r3, [pc, #116]	; (8009568 <_ZN9Modbusrtu9dwinFrameEv+0x148>)
 80094f2:	220c      	movs	r2, #12
 80094f4:	701a      	strb	r2, [r3, #0]
		cntIdDwin=2;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2202      	movs	r2, #2
 80094fa:	715a      	strb	r2, [r3, #5]
	break;
 80094fc:	e022      	b.n	8009544 <_ZN9Modbusrtu9dwinFrameEv+0x124>
	case 2:
		u8DwinRegister[0] = START_BYTE_1;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	225a      	movs	r2, #90	; 0x5a
 8009502:	741a      	strb	r2, [r3, #16]
		u8DwinRegister[1] = START_BYTE_2;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	22a5      	movs	r2, #165	; 0xa5
 8009508:	745a      	strb	r2, [r3, #17]
		u8DwinRegister[2] = multipleReadRequestH;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2204      	movs	r2, #4
 800950e:	749a      	strb	r2, [r3, #18]
		u8DwinRegister[3] = multipleReadRequestL;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2283      	movs	r2, #131	; 0x83
 8009514:	74da      	strb	r2, [r3, #19]
		u8DwinRegister[4] = 0x30;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2230      	movs	r2, #48	; 0x30
 800951a:	751a      	strb	r2, [r3, #20]
		u8DwinRegister[5] = 0x00;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2200      	movs	r2, #0
 8009520:	755a      	strb	r2, [r3, #21]
		u8DwinRegister[6] = 0x16;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2216      	movs	r2, #22
 8009526:	759a      	strb	r2, [r3, #22]
		Rx_Dwin_Point=0;
 8009528:	4b10      	ldr	r3, [pc, #64]	; (800956c <_ZN9Modbusrtu9dwinFrameEv+0x14c>)
 800952a:	2200      	movs	r2, #0
 800952c:	701a      	strb	r2, [r3, #0]
		noOfDataDwin=7;
 800952e:	4b0e      	ldr	r3, [pc, #56]	; (8009568 <_ZN9Modbusrtu9dwinFrameEv+0x148>)
 8009530:	2207      	movs	r2, #7
 8009532:	701a      	strb	r2, [r3, #0]
		cntIdDwin=0;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2200      	movs	r2, #0
 8009538:	715a      	strb	r2, [r3, #5]
	break;
 800953a:	e003      	b.n	8009544 <_ZN9Modbusrtu9dwinFrameEv+0x124>
	default:
		cntIdDwin=0;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2200      	movs	r2, #0
 8009540:	715a      	strb	r2, [r3, #5]
	break;
 8009542:	bf00      	nop
	}
	//out_read_rxint_set.Noofbytesrx = (_u16ReadQty*2)+5;
	HAL_UART_Transmit_IT(&hlpuart1,u8DwinRegister,noOfDataDwin);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	3310      	adds	r3, #16
 8009548:	4a07      	ldr	r2, [pc, #28]	; (8009568 <_ZN9Modbusrtu9dwinFrameEv+0x148>)
 800954a:	7812      	ldrb	r2, [r2, #0]
 800954c:	b292      	uxth	r2, r2
 800954e:	4619      	mov	r1, r3
 8009550:	4807      	ldr	r0, [pc, #28]	; (8009570 <_ZN9Modbusrtu9dwinFrameEv+0x150>)
 8009552:	f003 f857 	bl	800c604 <HAL_UART_Transmit_IT>
}
 8009556:	bf00      	nop
 8009558:	3708      	adds	r7, #8
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	200054fb 	.word	0x200054fb
 8009564:	200038c5 	.word	0x200038c5
 8009568:	20005506 	.word	0x20005506
 800956c:	20000142 	.word	0x20000142
 8009570:	200033ec 	.word	0x200033ec

08009574 <_ZN14OfflineStorageC1Ev>:

/*check for change in data*/
uint16_t rxReqCarbon_K1,rxReqSilica_K1,rxReqMn_K1,rxReqCu_K1,rxReqSn_K1,rxReqZn_K1;


OfflineStorage::OfflineStorage() {
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	4a04      	ldr	r2, [pc, #16]	; (8009590 <_ZN14OfflineStorageC1Ev+0x1c>)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	4618      	mov	r0, r3
 8009586:	370c      	adds	r7, #12
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr
 8009590:	0800f830 	.word	0x0800f830

08009594 <_ZN14OfflineStorageD1Ev>:

OfflineStorage::~OfflineStorage() {
 8009594:	b480      	push	{r7}
 8009596:	b083      	sub	sp, #12
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	4a04      	ldr	r2, [pc, #16]	; (80095b0 <_ZN14OfflineStorageD1Ev+0x1c>)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	4618      	mov	r0, r3
 80095a6:	370c      	adds	r7, #12
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr
 80095b0:	0800f830 	.word	0x0800f830

080095b4 <_ZN14OfflineStorageD0Ev>:
OfflineStorage::~OfflineStorage() {
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
}
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f7ff ffe9 	bl	8009594 <_ZN14OfflineStorageD1Ev>
 80095c2:	212c      	movs	r1, #44	; 0x2c
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f004 fb80 	bl	800dcca <_ZdlPvj>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	4618      	mov	r0, r3
 80095ce:	3708      	adds	r7, #8
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <cppMain>:
  * @brief  The application entry point for cpp
  * @retval int
  */
//TIM_HandleTypeDef htim6;
void cppMain()
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	f5ad 5db5 	sub.w	sp, sp, #5792	; 0x16a0
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
	GLCD glcd;
 80095de:	f607 43ac 	addw	r3, r7, #3244	; 0xcac
 80095e2:	4618      	mov	r0, r3
 80095e4:	f7fb fae2 	bl	8004bac <_ZN4GLCDC1Ev>
	Modbusrtu ModbusInst;
 80095e8:	f607 2384 	addw	r3, r7, #2692	; 0xa84
 80095ec:	4618      	mov	r0, r3
 80095ee:	f7ff fda7 	bl	8009140 <_ZN9ModbusrtuC1Ev>
	DisplayRoutine displayRoutineInst;
 80095f2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80095f6:	3b18      	subs	r3, #24
 80095f8:	4618      	mov	r0, r3
 80095fa:	f7fb fa19 	bl	8004a30 <_ZN14DisplayRoutineC1Ev>
	Powermeter powermeterInst;
 80095fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009602:	4618      	mov	r0, r3
 8009604:	f7fb f9b4 	bl	8004970 <_ZN10PowermeterC1Ev>
	OfflineStorage offlineStorageInst;
 8009608:	f107 0310 	add.w	r3, r7, #16
 800960c:	3b0c      	subs	r3, #12
 800960e:	4618      	mov	r0, r3
 8009610:	f7ff ffb0 	bl	8009574 <_ZN14OfflineStorageC1Ev>
//	ESP8266 esp8266Inst;
//	SHIFT shiftInst;

	displayRoutineInst.Init();
 8009614:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009618:	3b18      	subs	r3, #24
 800961a:	4618      	mov	r0, r3
 800961c:	f7fb fa8f 	bl	8004b3e <_ZN14DisplayRoutine4InitEv>
//	offlineStorageInst.ReadOfflinedataInit();
//	esp8266Inst.Init();
//	ReadOnlineData();
	TxSeqComplete=1;
 8009620:	4b12      	ldr	r3, [pc, #72]	; (800966c <cppMain+0x98>)
 8009622:	2201      	movs	r2, #1
 8009624:	701a      	strb	r2, [r3, #0]


	while(1)
	{

		if(Flag1MS)
 8009626:	4b12      	ldr	r3, [pc, #72]	; (8009670 <cppMain+0x9c>)
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d002      	beq.n	8009634 <cppMain+0x60>
		{
			Flag1MS=0;
 800962e:	4b10      	ldr	r3, [pc, #64]	; (8009670 <cppMain+0x9c>)
 8009630:	2200      	movs	r2, #0
 8009632:	701a      	strb	r2, [r3, #0]

		}
		if(Flag100milliSeconds)
 8009634:	4b0f      	ldr	r3, [pc, #60]	; (8009674 <cppMain+0xa0>)
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d007      	beq.n	800964c <cppMain+0x78>
		{
			Flag100milliSeconds=0;
 800963c:	4b0d      	ldr	r3, [pc, #52]	; (8009674 <cppMain+0xa0>)
 800963e:	2200      	movs	r2, #0
 8009640:	701a      	strb	r2, [r3, #0]
			//offlineStorageInst.run();
			ModbusInst.ModbusReadTransaction();
 8009642:	f607 2384 	addw	r3, r7, #2692	; 0xa84
 8009646:	4618      	mov	r0, r3
 8009648:	f7ff fdc6 	bl	80091d8 <_ZN9Modbusrtu21ModbusReadTransactionEv>
		}
		if(Flag1Second)
 800964c:	4b0a      	ldr	r3, [pc, #40]	; (8009678 <cppMain+0xa4>)
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d0e8      	beq.n	8009626 <cppMain+0x52>
		{
			Flag1Second=0;
 8009654:	4b08      	ldr	r3, [pc, #32]	; (8009678 <cppMain+0xa4>)
 8009656:	2200      	movs	r2, #0
 8009658:	701a      	strb	r2, [r3, #0]
			ModbusInst.dwinFrame();
 800965a:	f607 2384 	addw	r3, r7, #2692	; 0xa84
 800965e:	4618      	mov	r0, r3
 8009660:	f7ff fede 	bl	8009420 <_ZN9Modbusrtu9dwinFrameEv>
			ethernetHTTPRoutine();
 8009664:	f7fa f842 	bl	80036ec <ethernetHTTPRoutine>
		if(Flag1MS)
 8009668:	e7dd      	b.n	8009626 <cppMain+0x52>
 800966a:	bf00      	nop
 800966c:	20005505 	.word	0x20005505
 8009670:	20000146 	.word	0x20000146
 8009674:	20000148 	.word	0x20000148
 8009678:	20000147 	.word	0x20000147

0800967c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009682:	2300      	movs	r3, #0
 8009684:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009686:	2003      	movs	r0, #3
 8009688:	f000 f960 	bl	800994c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800968c:	200f      	movs	r0, #15
 800968e:	f000 f80d 	bl	80096ac <HAL_InitTick>
 8009692:	4603      	mov	r3, r0
 8009694:	2b00      	cmp	r3, #0
 8009696:	d002      	beq.n	800969e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8009698:	2301      	movs	r3, #1
 800969a:	71fb      	strb	r3, [r7, #7]
 800969c:	e001      	b.n	80096a2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800969e:	f7f7 fcc3 	bl	8001028 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80096a2:	79fb      	ldrb	r3, [r7, #7]
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3708      	adds	r7, #8
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b084      	sub	sp, #16
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80096b4:	2300      	movs	r3, #0
 80096b6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80096b8:	4b17      	ldr	r3, [pc, #92]	; (8009718 <HAL_InitTick+0x6c>)
 80096ba:	781b      	ldrb	r3, [r3, #0]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d023      	beq.n	8009708 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80096c0:	4b16      	ldr	r3, [pc, #88]	; (800971c <HAL_InitTick+0x70>)
 80096c2:	681a      	ldr	r2, [r3, #0]
 80096c4:	4b14      	ldr	r3, [pc, #80]	; (8009718 <HAL_InitTick+0x6c>)
 80096c6:	781b      	ldrb	r3, [r3, #0]
 80096c8:	4619      	mov	r1, r3
 80096ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80096ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80096d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80096d6:	4618      	mov	r0, r3
 80096d8:	f000 f96d 	bl	80099b6 <HAL_SYSTICK_Config>
 80096dc:	4603      	mov	r3, r0
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d10f      	bne.n	8009702 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2b0f      	cmp	r3, #15
 80096e6:	d809      	bhi.n	80096fc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80096e8:	2200      	movs	r2, #0
 80096ea:	6879      	ldr	r1, [r7, #4]
 80096ec:	f04f 30ff 	mov.w	r0, #4294967295
 80096f0:	f000 f937 	bl	8009962 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80096f4:	4a0a      	ldr	r2, [pc, #40]	; (8009720 <HAL_InitTick+0x74>)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6013      	str	r3, [r2, #0]
 80096fa:	e007      	b.n	800970c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80096fc:	2301      	movs	r3, #1
 80096fe:	73fb      	strb	r3, [r7, #15]
 8009700:	e004      	b.n	800970c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8009702:	2301      	movs	r3, #1
 8009704:	73fb      	strb	r3, [r7, #15]
 8009706:	e001      	b.n	800970c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8009708:	2301      	movs	r3, #1
 800970a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800970c:	7bfb      	ldrb	r3, [r7, #15]
}
 800970e:	4618      	mov	r0, r3
 8009710:	3710      	adds	r7, #16
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
 8009716:	bf00      	nop
 8009718:	2000008c 	.word	0x2000008c
 800971c:	20000000 	.word	0x20000000
 8009720:	20000088 	.word	0x20000088

08009724 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009724:	b480      	push	{r7}
 8009726:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8009728:	4b06      	ldr	r3, [pc, #24]	; (8009744 <HAL_IncTick+0x20>)
 800972a:	781b      	ldrb	r3, [r3, #0]
 800972c:	461a      	mov	r2, r3
 800972e:	4b06      	ldr	r3, [pc, #24]	; (8009748 <HAL_IncTick+0x24>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4413      	add	r3, r2
 8009734:	4a04      	ldr	r2, [pc, #16]	; (8009748 <HAL_IncTick+0x24>)
 8009736:	6013      	str	r3, [r2, #0]
}
 8009738:	bf00      	nop
 800973a:	46bd      	mov	sp, r7
 800973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009740:	4770      	bx	lr
 8009742:	bf00      	nop
 8009744:	2000008c 	.word	0x2000008c
 8009748:	2000550c 	.word	0x2000550c

0800974c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800974c:	b480      	push	{r7}
 800974e:	af00      	add	r7, sp, #0
  return uwTick;
 8009750:	4b03      	ldr	r3, [pc, #12]	; (8009760 <HAL_GetTick+0x14>)
 8009752:	681b      	ldr	r3, [r3, #0]
}
 8009754:	4618      	mov	r0, r3
 8009756:	46bd      	mov	sp, r7
 8009758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975c:	4770      	bx	lr
 800975e:	bf00      	nop
 8009760:	2000550c 	.word	0x2000550c

08009764 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800976c:	f7ff ffee 	bl	800974c <HAL_GetTick>
 8009770:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800977c:	d005      	beq.n	800978a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800977e:	4b0a      	ldr	r3, [pc, #40]	; (80097a8 <HAL_Delay+0x44>)
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	461a      	mov	r2, r3
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	4413      	add	r3, r2
 8009788:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800978a:	bf00      	nop
 800978c:	f7ff ffde 	bl	800974c <HAL_GetTick>
 8009790:	4602      	mov	r2, r0
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	1ad3      	subs	r3, r2, r3
 8009796:	68fa      	ldr	r2, [r7, #12]
 8009798:	429a      	cmp	r2, r3
 800979a:	d8f7      	bhi.n	800978c <HAL_Delay+0x28>
  {
  }
}
 800979c:	bf00      	nop
 800979e:	bf00      	nop
 80097a0:	3710      	adds	r7, #16
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop
 80097a8:	2000008c 	.word	0x2000008c

080097ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b085      	sub	sp, #20
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f003 0307 	and.w	r3, r3, #7
 80097ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80097bc:	4b0c      	ldr	r3, [pc, #48]	; (80097f0 <__NVIC_SetPriorityGrouping+0x44>)
 80097be:	68db      	ldr	r3, [r3, #12]
 80097c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80097c2:	68ba      	ldr	r2, [r7, #8]
 80097c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80097c8:	4013      	ands	r3, r2
 80097ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80097d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80097d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80097de:	4a04      	ldr	r2, [pc, #16]	; (80097f0 <__NVIC_SetPriorityGrouping+0x44>)
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	60d3      	str	r3, [r2, #12]
}
 80097e4:	bf00      	nop
 80097e6:	3714      	adds	r7, #20
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr
 80097f0:	e000ed00 	.word	0xe000ed00

080097f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80097f4:	b480      	push	{r7}
 80097f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80097f8:	4b04      	ldr	r3, [pc, #16]	; (800980c <__NVIC_GetPriorityGrouping+0x18>)
 80097fa:	68db      	ldr	r3, [r3, #12]
 80097fc:	0a1b      	lsrs	r3, r3, #8
 80097fe:	f003 0307 	and.w	r3, r3, #7
}
 8009802:	4618      	mov	r0, r3
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr
 800980c:	e000ed00 	.word	0xe000ed00

08009810 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009810:	b480      	push	{r7}
 8009812:	b083      	sub	sp, #12
 8009814:	af00      	add	r7, sp, #0
 8009816:	4603      	mov	r3, r0
 8009818:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800981a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800981e:	2b00      	cmp	r3, #0
 8009820:	db0b      	blt.n	800983a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009822:	79fb      	ldrb	r3, [r7, #7]
 8009824:	f003 021f 	and.w	r2, r3, #31
 8009828:	4907      	ldr	r1, [pc, #28]	; (8009848 <__NVIC_EnableIRQ+0x38>)
 800982a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800982e:	095b      	lsrs	r3, r3, #5
 8009830:	2001      	movs	r0, #1
 8009832:	fa00 f202 	lsl.w	r2, r0, r2
 8009836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800983a:	bf00      	nop
 800983c:	370c      	adds	r7, #12
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr
 8009846:	bf00      	nop
 8009848:	e000e100 	.word	0xe000e100

0800984c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
 8009852:	4603      	mov	r3, r0
 8009854:	6039      	str	r1, [r7, #0]
 8009856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800985c:	2b00      	cmp	r3, #0
 800985e:	db0a      	blt.n	8009876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	b2da      	uxtb	r2, r3
 8009864:	490c      	ldr	r1, [pc, #48]	; (8009898 <__NVIC_SetPriority+0x4c>)
 8009866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800986a:	0112      	lsls	r2, r2, #4
 800986c:	b2d2      	uxtb	r2, r2
 800986e:	440b      	add	r3, r1
 8009870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009874:	e00a      	b.n	800988c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	b2da      	uxtb	r2, r3
 800987a:	4908      	ldr	r1, [pc, #32]	; (800989c <__NVIC_SetPriority+0x50>)
 800987c:	79fb      	ldrb	r3, [r7, #7]
 800987e:	f003 030f 	and.w	r3, r3, #15
 8009882:	3b04      	subs	r3, #4
 8009884:	0112      	lsls	r2, r2, #4
 8009886:	b2d2      	uxtb	r2, r2
 8009888:	440b      	add	r3, r1
 800988a:	761a      	strb	r2, [r3, #24]
}
 800988c:	bf00      	nop
 800988e:	370c      	adds	r7, #12
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr
 8009898:	e000e100 	.word	0xe000e100
 800989c:	e000ed00 	.word	0xe000ed00

080098a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b089      	sub	sp, #36	; 0x24
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	60f8      	str	r0, [r7, #12]
 80098a8:	60b9      	str	r1, [r7, #8]
 80098aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f003 0307 	and.w	r3, r3, #7
 80098b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80098b4:	69fb      	ldr	r3, [r7, #28]
 80098b6:	f1c3 0307 	rsb	r3, r3, #7
 80098ba:	2b04      	cmp	r3, #4
 80098bc:	bf28      	it	cs
 80098be:	2304      	movcs	r3, #4
 80098c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80098c2:	69fb      	ldr	r3, [r7, #28]
 80098c4:	3304      	adds	r3, #4
 80098c6:	2b06      	cmp	r3, #6
 80098c8:	d902      	bls.n	80098d0 <NVIC_EncodePriority+0x30>
 80098ca:	69fb      	ldr	r3, [r7, #28]
 80098cc:	3b03      	subs	r3, #3
 80098ce:	e000      	b.n	80098d2 <NVIC_EncodePriority+0x32>
 80098d0:	2300      	movs	r3, #0
 80098d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80098d4:	f04f 32ff 	mov.w	r2, #4294967295
 80098d8:	69bb      	ldr	r3, [r7, #24]
 80098da:	fa02 f303 	lsl.w	r3, r2, r3
 80098de:	43da      	mvns	r2, r3
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	401a      	ands	r2, r3
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80098e8:	f04f 31ff 	mov.w	r1, #4294967295
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	fa01 f303 	lsl.w	r3, r1, r3
 80098f2:	43d9      	mvns	r1, r3
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80098f8:	4313      	orrs	r3, r2
         );
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3724      	adds	r7, #36	; 0x24
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr
	...

08009908 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	3b01      	subs	r3, #1
 8009914:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009918:	d301      	bcc.n	800991e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800991a:	2301      	movs	r3, #1
 800991c:	e00f      	b.n	800993e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800991e:	4a0a      	ldr	r2, [pc, #40]	; (8009948 <SysTick_Config+0x40>)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	3b01      	subs	r3, #1
 8009924:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009926:	210f      	movs	r1, #15
 8009928:	f04f 30ff 	mov.w	r0, #4294967295
 800992c:	f7ff ff8e 	bl	800984c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009930:	4b05      	ldr	r3, [pc, #20]	; (8009948 <SysTick_Config+0x40>)
 8009932:	2200      	movs	r2, #0
 8009934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009936:	4b04      	ldr	r3, [pc, #16]	; (8009948 <SysTick_Config+0x40>)
 8009938:	2207      	movs	r2, #7
 800993a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800993c:	2300      	movs	r3, #0
}
 800993e:	4618      	mov	r0, r3
 8009940:	3708      	adds	r7, #8
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
 8009946:	bf00      	nop
 8009948:	e000e010 	.word	0xe000e010

0800994c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b082      	sub	sp, #8
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f7ff ff29 	bl	80097ac <__NVIC_SetPriorityGrouping>
}
 800995a:	bf00      	nop
 800995c:	3708      	adds	r7, #8
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}

08009962 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009962:	b580      	push	{r7, lr}
 8009964:	b086      	sub	sp, #24
 8009966:	af00      	add	r7, sp, #0
 8009968:	4603      	mov	r3, r0
 800996a:	60b9      	str	r1, [r7, #8]
 800996c:	607a      	str	r2, [r7, #4]
 800996e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8009970:	2300      	movs	r3, #0
 8009972:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009974:	f7ff ff3e 	bl	80097f4 <__NVIC_GetPriorityGrouping>
 8009978:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	68b9      	ldr	r1, [r7, #8]
 800997e:	6978      	ldr	r0, [r7, #20]
 8009980:	f7ff ff8e 	bl	80098a0 <NVIC_EncodePriority>
 8009984:	4602      	mov	r2, r0
 8009986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800998a:	4611      	mov	r1, r2
 800998c:	4618      	mov	r0, r3
 800998e:	f7ff ff5d 	bl	800984c <__NVIC_SetPriority>
}
 8009992:	bf00      	nop
 8009994:	3718      	adds	r7, #24
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}

0800999a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800999a:	b580      	push	{r7, lr}
 800999c:	b082      	sub	sp, #8
 800999e:	af00      	add	r7, sp, #0
 80099a0:	4603      	mov	r3, r0
 80099a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80099a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099a8:	4618      	mov	r0, r3
 80099aa:	f7ff ff31 	bl	8009810 <__NVIC_EnableIRQ>
}
 80099ae:	bf00      	nop
 80099b0:	3708      	adds	r7, #8
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}

080099b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80099b6:	b580      	push	{r7, lr}
 80099b8:	b082      	sub	sp, #8
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f7ff ffa2 	bl	8009908 <SysTick_Config>
 80099c4:	4603      	mov	r3, r0
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3708      	adds	r7, #8
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}

080099ce <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80099ce:	b480      	push	{r7}
 80099d0:	b085      	sub	sp, #20
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80099d6:	2300      	movs	r3, #0
 80099d8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80099e0:	b2db      	uxtb	r3, r3
 80099e2:	2b02      	cmp	r3, #2
 80099e4:	d008      	beq.n	80099f8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2204      	movs	r2, #4
 80099ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2200      	movs	r2, #0
 80099f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80099f4:	2301      	movs	r3, #1
 80099f6:	e022      	b.n	8009a3e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	681a      	ldr	r2, [r3, #0]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f022 020e 	bic.w	r2, r2, #14
 8009a06:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	681a      	ldr	r2, [r3, #0]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f022 0201 	bic.w	r2, r2, #1
 8009a16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a1c:	f003 021c 	and.w	r2, r3, #28
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a24:	2101      	movs	r1, #1
 8009a26:	fa01 f202 	lsl.w	r2, r1, r2
 8009a2a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2201      	movs	r2, #1
 8009a30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2200      	movs	r2, #0
 8009a38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8009a3c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3714      	adds	r7, #20
 8009a42:	46bd      	mov	sp, r7
 8009a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a48:	4770      	bx	lr

08009a4a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009a4a:	b580      	push	{r7, lr}
 8009a4c:	b084      	sub	sp, #16
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a52:	2300      	movs	r3, #0
 8009a54:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	2b02      	cmp	r3, #2
 8009a60:	d005      	beq.n	8009a6e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2204      	movs	r2, #4
 8009a66:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	73fb      	strb	r3, [r7, #15]
 8009a6c:	e029      	b.n	8009ac2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	681a      	ldr	r2, [r3, #0]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f022 020e 	bic.w	r2, r2, #14
 8009a7c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f022 0201 	bic.w	r2, r2, #1
 8009a8c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a92:	f003 021c 	and.w	r2, r3, #28
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a9a:	2101      	movs	r1, #1
 8009a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8009aa0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2201      	movs	r2, #1
 8009aa6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d003      	beq.n	8009ac2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	4798      	blx	r3
    }
  }
  return status;
 8009ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3710      	adds	r7, #16
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b087      	sub	sp, #28
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009ada:	e154      	b.n	8009d86 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	2101      	movs	r1, #1
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8009ae8:	4013      	ands	r3, r2
 8009aea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	f000 8146 	beq.w	8009d80 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	f003 0303 	and.w	r3, r3, #3
 8009afc:	2b01      	cmp	r3, #1
 8009afe:	d005      	beq.n	8009b0c <HAL_GPIO_Init+0x40>
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	f003 0303 	and.w	r3, r3, #3
 8009b08:	2b02      	cmp	r3, #2
 8009b0a:	d130      	bne.n	8009b6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	689b      	ldr	r3, [r3, #8]
 8009b10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	005b      	lsls	r3, r3, #1
 8009b16:	2203      	movs	r2, #3
 8009b18:	fa02 f303 	lsl.w	r3, r2, r3
 8009b1c:	43db      	mvns	r3, r3
 8009b1e:	693a      	ldr	r2, [r7, #16]
 8009b20:	4013      	ands	r3, r2
 8009b22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	68da      	ldr	r2, [r3, #12]
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	005b      	lsls	r3, r3, #1
 8009b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b30:	693a      	ldr	r2, [r7, #16]
 8009b32:	4313      	orrs	r3, r2
 8009b34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	693a      	ldr	r2, [r7, #16]
 8009b3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	685b      	ldr	r3, [r3, #4]
 8009b40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009b42:	2201      	movs	r2, #1
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	fa02 f303 	lsl.w	r3, r2, r3
 8009b4a:	43db      	mvns	r3, r3
 8009b4c:	693a      	ldr	r2, [r7, #16]
 8009b4e:	4013      	ands	r3, r2
 8009b50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	685b      	ldr	r3, [r3, #4]
 8009b56:	091b      	lsrs	r3, r3, #4
 8009b58:	f003 0201 	and.w	r2, r3, #1
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8009b62:	693a      	ldr	r2, [r7, #16]
 8009b64:	4313      	orrs	r3, r2
 8009b66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	693a      	ldr	r2, [r7, #16]
 8009b6c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	f003 0303 	and.w	r3, r3, #3
 8009b76:	2b03      	cmp	r3, #3
 8009b78:	d017      	beq.n	8009baa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	68db      	ldr	r3, [r3, #12]
 8009b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	005b      	lsls	r3, r3, #1
 8009b84:	2203      	movs	r2, #3
 8009b86:	fa02 f303 	lsl.w	r3, r2, r3
 8009b8a:	43db      	mvns	r3, r3
 8009b8c:	693a      	ldr	r2, [r7, #16]
 8009b8e:	4013      	ands	r3, r2
 8009b90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	689a      	ldr	r2, [r3, #8]
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	005b      	lsls	r3, r3, #1
 8009b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b9e:	693a      	ldr	r2, [r7, #16]
 8009ba0:	4313      	orrs	r3, r2
 8009ba2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	693a      	ldr	r2, [r7, #16]
 8009ba8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	f003 0303 	and.w	r3, r3, #3
 8009bb2:	2b02      	cmp	r3, #2
 8009bb4:	d123      	bne.n	8009bfe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	08da      	lsrs	r2, r3, #3
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	3208      	adds	r2, #8
 8009bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	f003 0307 	and.w	r3, r3, #7
 8009bca:	009b      	lsls	r3, r3, #2
 8009bcc:	220f      	movs	r2, #15
 8009bce:	fa02 f303 	lsl.w	r3, r2, r3
 8009bd2:	43db      	mvns	r3, r3
 8009bd4:	693a      	ldr	r2, [r7, #16]
 8009bd6:	4013      	ands	r3, r2
 8009bd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	691a      	ldr	r2, [r3, #16]
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	f003 0307 	and.w	r3, r3, #7
 8009be4:	009b      	lsls	r3, r3, #2
 8009be6:	fa02 f303 	lsl.w	r3, r2, r3
 8009bea:	693a      	ldr	r2, [r7, #16]
 8009bec:	4313      	orrs	r3, r2
 8009bee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	08da      	lsrs	r2, r3, #3
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	3208      	adds	r2, #8
 8009bf8:	6939      	ldr	r1, [r7, #16]
 8009bfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	005b      	lsls	r3, r3, #1
 8009c08:	2203      	movs	r2, #3
 8009c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8009c0e:	43db      	mvns	r3, r3
 8009c10:	693a      	ldr	r2, [r7, #16]
 8009c12:	4013      	ands	r3, r2
 8009c14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	f003 0203 	and.w	r2, r3, #3
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	005b      	lsls	r3, r3, #1
 8009c22:	fa02 f303 	lsl.w	r3, r2, r3
 8009c26:	693a      	ldr	r2, [r7, #16]
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	693a      	ldr	r2, [r7, #16]
 8009c30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	f000 80a0 	beq.w	8009d80 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009c40:	4b58      	ldr	r3, [pc, #352]	; (8009da4 <HAL_GPIO_Init+0x2d8>)
 8009c42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c44:	4a57      	ldr	r2, [pc, #348]	; (8009da4 <HAL_GPIO_Init+0x2d8>)
 8009c46:	f043 0301 	orr.w	r3, r3, #1
 8009c4a:	6613      	str	r3, [r2, #96]	; 0x60
 8009c4c:	4b55      	ldr	r3, [pc, #340]	; (8009da4 <HAL_GPIO_Init+0x2d8>)
 8009c4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c50:	f003 0301 	and.w	r3, r3, #1
 8009c54:	60bb      	str	r3, [r7, #8]
 8009c56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8009c58:	4a53      	ldr	r2, [pc, #332]	; (8009da8 <HAL_GPIO_Init+0x2dc>)
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	089b      	lsrs	r3, r3, #2
 8009c5e:	3302      	adds	r3, #2
 8009c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	f003 0303 	and.w	r3, r3, #3
 8009c6c:	009b      	lsls	r3, r3, #2
 8009c6e:	220f      	movs	r2, #15
 8009c70:	fa02 f303 	lsl.w	r3, r2, r3
 8009c74:	43db      	mvns	r3, r3
 8009c76:	693a      	ldr	r2, [r7, #16]
 8009c78:	4013      	ands	r3, r2
 8009c7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8009c82:	d019      	beq.n	8009cb8 <HAL_GPIO_Init+0x1ec>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	4a49      	ldr	r2, [pc, #292]	; (8009dac <HAL_GPIO_Init+0x2e0>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d013      	beq.n	8009cb4 <HAL_GPIO_Init+0x1e8>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	4a48      	ldr	r2, [pc, #288]	; (8009db0 <HAL_GPIO_Init+0x2e4>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d00d      	beq.n	8009cb0 <HAL_GPIO_Init+0x1e4>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	4a47      	ldr	r2, [pc, #284]	; (8009db4 <HAL_GPIO_Init+0x2e8>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d007      	beq.n	8009cac <HAL_GPIO_Init+0x1e0>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	4a46      	ldr	r2, [pc, #280]	; (8009db8 <HAL_GPIO_Init+0x2ec>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d101      	bne.n	8009ca8 <HAL_GPIO_Init+0x1dc>
 8009ca4:	2304      	movs	r3, #4
 8009ca6:	e008      	b.n	8009cba <HAL_GPIO_Init+0x1ee>
 8009ca8:	2307      	movs	r3, #7
 8009caa:	e006      	b.n	8009cba <HAL_GPIO_Init+0x1ee>
 8009cac:	2303      	movs	r3, #3
 8009cae:	e004      	b.n	8009cba <HAL_GPIO_Init+0x1ee>
 8009cb0:	2302      	movs	r3, #2
 8009cb2:	e002      	b.n	8009cba <HAL_GPIO_Init+0x1ee>
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	e000      	b.n	8009cba <HAL_GPIO_Init+0x1ee>
 8009cb8:	2300      	movs	r3, #0
 8009cba:	697a      	ldr	r2, [r7, #20]
 8009cbc:	f002 0203 	and.w	r2, r2, #3
 8009cc0:	0092      	lsls	r2, r2, #2
 8009cc2:	4093      	lsls	r3, r2
 8009cc4:	693a      	ldr	r2, [r7, #16]
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8009cca:	4937      	ldr	r1, [pc, #220]	; (8009da8 <HAL_GPIO_Init+0x2dc>)
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	089b      	lsrs	r3, r3, #2
 8009cd0:	3302      	adds	r3, #2
 8009cd2:	693a      	ldr	r2, [r7, #16]
 8009cd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009cd8:	4b38      	ldr	r3, [pc, #224]	; (8009dbc <HAL_GPIO_Init+0x2f0>)
 8009cda:	689b      	ldr	r3, [r3, #8]
 8009cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	43db      	mvns	r3, r3
 8009ce2:	693a      	ldr	r2, [r7, #16]
 8009ce4:	4013      	ands	r3, r2
 8009ce6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	685b      	ldr	r3, [r3, #4]
 8009cec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d003      	beq.n	8009cfc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8009cf4:	693a      	ldr	r2, [r7, #16]
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	4313      	orrs	r3, r2
 8009cfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009cfc:	4a2f      	ldr	r2, [pc, #188]	; (8009dbc <HAL_GPIO_Init+0x2f0>)
 8009cfe:	693b      	ldr	r3, [r7, #16]
 8009d00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8009d02:	4b2e      	ldr	r3, [pc, #184]	; (8009dbc <HAL_GPIO_Init+0x2f0>)
 8009d04:	68db      	ldr	r3, [r3, #12]
 8009d06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	43db      	mvns	r3, r3
 8009d0c:	693a      	ldr	r2, [r7, #16]
 8009d0e:	4013      	ands	r3, r2
 8009d10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d003      	beq.n	8009d26 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8009d1e:	693a      	ldr	r2, [r7, #16]
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	4313      	orrs	r3, r2
 8009d24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009d26:	4a25      	ldr	r2, [pc, #148]	; (8009dbc <HAL_GPIO_Init+0x2f0>)
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8009d2c:	4b23      	ldr	r3, [pc, #140]	; (8009dbc <HAL_GPIO_Init+0x2f0>)
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	43db      	mvns	r3, r3
 8009d36:	693a      	ldr	r2, [r7, #16]
 8009d38:	4013      	ands	r3, r2
 8009d3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d003      	beq.n	8009d50 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8009d48:	693a      	ldr	r2, [r7, #16]
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009d50:	4a1a      	ldr	r2, [pc, #104]	; (8009dbc <HAL_GPIO_Init+0x2f0>)
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8009d56:	4b19      	ldr	r3, [pc, #100]	; (8009dbc <HAL_GPIO_Init+0x2f0>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	43db      	mvns	r3, r3
 8009d60:	693a      	ldr	r2, [r7, #16]
 8009d62:	4013      	ands	r3, r2
 8009d64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d003      	beq.n	8009d7a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8009d72:	693a      	ldr	r2, [r7, #16]
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	4313      	orrs	r3, r2
 8009d78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009d7a:	4a10      	ldr	r2, [pc, #64]	; (8009dbc <HAL_GPIO_Init+0x2f0>)
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	3301      	adds	r3, #1
 8009d84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	681a      	ldr	r2, [r3, #0]
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	f47f aea3 	bne.w	8009adc <HAL_GPIO_Init+0x10>
  }
}
 8009d96:	bf00      	nop
 8009d98:	bf00      	nop
 8009d9a:	371c      	adds	r7, #28
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr
 8009da4:	40021000 	.word	0x40021000
 8009da8:	40010000 	.word	0x40010000
 8009dac:	48000400 	.word	0x48000400
 8009db0:	48000800 	.word	0x48000800
 8009db4:	48000c00 	.word	0x48000c00
 8009db8:	48001000 	.word	0x48001000
 8009dbc:	40010400 	.word	0x40010400

08009dc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b083      	sub	sp, #12
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	460b      	mov	r3, r1
 8009dca:	807b      	strh	r3, [r7, #2]
 8009dcc:	4613      	mov	r3, r2
 8009dce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009dd0:	787b      	ldrb	r3, [r7, #1]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d003      	beq.n	8009dde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009dd6:	887a      	ldrh	r2, [r7, #2]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009ddc:	e002      	b.n	8009de4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009dde:	887a      	ldrh	r2, [r7, #2]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009de4:	bf00      	nop
 8009de6:	370c      	adds	r7, #12
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr

08009df0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b085      	sub	sp, #20
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	460b      	mov	r3, r1
 8009dfa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	695b      	ldr	r3, [r3, #20]
 8009e00:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009e02:	887a      	ldrh	r2, [r7, #2]
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	4013      	ands	r3, r2
 8009e08:	041a      	lsls	r2, r3, #16
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	43d9      	mvns	r1, r3
 8009e0e:	887b      	ldrh	r3, [r7, #2]
 8009e10:	400b      	ands	r3, r1
 8009e12:	431a      	orrs	r2, r3
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	619a      	str	r2, [r3, #24]
}
 8009e18:	bf00      	nop
 8009e1a:	3714      	adds	r7, #20
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e22:	4770      	bx	lr

08009e24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b082      	sub	sp, #8
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d101      	bne.n	8009e36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009e32:	2301      	movs	r3, #1
 8009e34:	e081      	b.n	8009f3a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e3c:	b2db      	uxtb	r3, r3
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d106      	bne.n	8009e50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2200      	movs	r2, #0
 8009e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f7f7 f910 	bl	8001070 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2224      	movs	r2, #36	; 0x24
 8009e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	681a      	ldr	r2, [r3, #0]
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f022 0201 	bic.w	r2, r2, #1
 8009e66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	685a      	ldr	r2, [r3, #4]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009e74:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	689a      	ldr	r2, [r3, #8]
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009e84:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	68db      	ldr	r3, [r3, #12]
 8009e8a:	2b01      	cmp	r3, #1
 8009e8c:	d107      	bne.n	8009e9e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	689a      	ldr	r2, [r3, #8]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e9a:	609a      	str	r2, [r3, #8]
 8009e9c:	e006      	b.n	8009eac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	689a      	ldr	r2, [r3, #8]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009eaa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	68db      	ldr	r3, [r3, #12]
 8009eb0:	2b02      	cmp	r3, #2
 8009eb2:	d104      	bne.n	8009ebe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009ebc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	687a      	ldr	r2, [r7, #4]
 8009ec6:	6812      	ldr	r2, [r2, #0]
 8009ec8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009ecc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ed0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	68da      	ldr	r2, [r3, #12]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009ee0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	691a      	ldr	r2, [r3, #16]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	695b      	ldr	r3, [r3, #20]
 8009eea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	699b      	ldr	r3, [r3, #24]
 8009ef2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	430a      	orrs	r2, r1
 8009efa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	69d9      	ldr	r1, [r3, #28]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6a1a      	ldr	r2, [r3, #32]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	430a      	orrs	r2, r1
 8009f0a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	681a      	ldr	r2, [r3, #0]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f042 0201 	orr.w	r2, r2, #1
 8009f1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2220      	movs	r2, #32
 8009f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2200      	movs	r2, #0
 8009f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009f38:	2300      	movs	r3, #0
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3708      	adds	r7, #8
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}

08009f42 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009f42:	b480      	push	{r7}
 8009f44:	b083      	sub	sp, #12
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
 8009f4a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	2b20      	cmp	r3, #32
 8009f56:	d138      	bne.n	8009fca <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009f5e:	2b01      	cmp	r3, #1
 8009f60:	d101      	bne.n	8009f66 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009f62:	2302      	movs	r3, #2
 8009f64:	e032      	b.n	8009fcc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2201      	movs	r2, #1
 8009f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2224      	movs	r2, #36	; 0x24
 8009f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	681a      	ldr	r2, [r3, #0]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f022 0201 	bic.w	r2, r2, #1
 8009f84:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	681a      	ldr	r2, [r3, #0]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009f94:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	6819      	ldr	r1, [r3, #0]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	683a      	ldr	r2, [r7, #0]
 8009fa2:	430a      	orrs	r2, r1
 8009fa4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	681a      	ldr	r2, [r3, #0]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f042 0201 	orr.w	r2, r2, #1
 8009fb4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2220      	movs	r2, #32
 8009fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	e000      	b.n	8009fcc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009fca:	2302      	movs	r3, #2
  }
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	370c      	adds	r7, #12
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr

08009fd8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b085      	sub	sp, #20
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009fe8:	b2db      	uxtb	r3, r3
 8009fea:	2b20      	cmp	r3, #32
 8009fec:	d139      	bne.n	800a062 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009ff4:	2b01      	cmp	r3, #1
 8009ff6:	d101      	bne.n	8009ffc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009ff8:	2302      	movs	r3, #2
 8009ffa:	e033      	b.n	800a064 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2201      	movs	r2, #1
 800a000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2224      	movs	r2, #36	; 0x24
 800a008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	681a      	ldr	r2, [r3, #0]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f022 0201 	bic.w	r2, r2, #1
 800a01a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a02a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	021b      	lsls	r3, r3, #8
 800a030:	68fa      	ldr	r2, [r7, #12]
 800a032:	4313      	orrs	r3, r2
 800a034:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	68fa      	ldr	r2, [r7, #12]
 800a03c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f042 0201 	orr.w	r2, r2, #1
 800a04c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2220      	movs	r2, #32
 800a052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2200      	movs	r2, #0
 800a05a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a05e:	2300      	movs	r3, #0
 800a060:	e000      	b.n	800a064 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a062:	2302      	movs	r3, #2
  }
}
 800a064:	4618      	mov	r0, r3
 800a066:	3714      	adds	r7, #20
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr

0800a070 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a070:	b480      	push	{r7}
 800a072:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800a074:	4b04      	ldr	r3, [pc, #16]	; (800a088 <HAL_PWREx_GetVoltageRange+0x18>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	46bd      	mov	sp, r7
 800a080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a084:	4770      	bx	lr
 800a086:	bf00      	nop
 800a088:	40007000 	.word	0x40007000

0800a08c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b085      	sub	sp, #20
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a09a:	d130      	bne.n	800a0fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800a09c:	4b23      	ldr	r3, [pc, #140]	; (800a12c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a0a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0a8:	d038      	beq.n	800a11c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a0aa:	4b20      	ldr	r3, [pc, #128]	; (800a12c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a0b2:	4a1e      	ldr	r2, [pc, #120]	; (800a12c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a0b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a0b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a0ba:	4b1d      	ldr	r3, [pc, #116]	; (800a130 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	2232      	movs	r2, #50	; 0x32
 800a0c0:	fb02 f303 	mul.w	r3, r2, r3
 800a0c4:	4a1b      	ldr	r2, [pc, #108]	; (800a134 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800a0c6:	fba2 2303 	umull	r2, r3, r2, r3
 800a0ca:	0c9b      	lsrs	r3, r3, #18
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a0d0:	e002      	b.n	800a0d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	3b01      	subs	r3, #1
 800a0d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a0d8:	4b14      	ldr	r3, [pc, #80]	; (800a12c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a0da:	695b      	ldr	r3, [r3, #20]
 800a0dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a0e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0e4:	d102      	bne.n	800a0ec <HAL_PWREx_ControlVoltageScaling+0x60>
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d1f2      	bne.n	800a0d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a0ec:	4b0f      	ldr	r3, [pc, #60]	; (800a12c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a0ee:	695b      	ldr	r3, [r3, #20]
 800a0f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a0f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0f8:	d110      	bne.n	800a11c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800a0fa:	2303      	movs	r3, #3
 800a0fc:	e00f      	b.n	800a11e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800a0fe:	4b0b      	ldr	r3, [pc, #44]	; (800a12c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a10a:	d007      	beq.n	800a11c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a10c:	4b07      	ldr	r3, [pc, #28]	; (800a12c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a114:	4a05      	ldr	r2, [pc, #20]	; (800a12c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a116:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a11a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800a11c:	2300      	movs	r3, #0
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3714      	adds	r7, #20
 800a122:	46bd      	mov	sp, r7
 800a124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a128:	4770      	bx	lr
 800a12a:	bf00      	nop
 800a12c:	40007000 	.word	0x40007000
 800a130:	20000000 	.word	0x20000000
 800a134:	431bde83 	.word	0x431bde83

0800a138 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b088      	sub	sp, #32
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d102      	bne.n	800a14c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a146:	2301      	movs	r3, #1
 800a148:	f000 bc02 	b.w	800a950 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a14c:	4b96      	ldr	r3, [pc, #600]	; (800a3a8 <HAL_RCC_OscConfig+0x270>)
 800a14e:	689b      	ldr	r3, [r3, #8]
 800a150:	f003 030c 	and.w	r3, r3, #12
 800a154:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a156:	4b94      	ldr	r3, [pc, #592]	; (800a3a8 <HAL_RCC_OscConfig+0x270>)
 800a158:	68db      	ldr	r3, [r3, #12]
 800a15a:	f003 0303 	and.w	r3, r3, #3
 800a15e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f003 0310 	and.w	r3, r3, #16
 800a168:	2b00      	cmp	r3, #0
 800a16a:	f000 80e4 	beq.w	800a336 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a16e:	69bb      	ldr	r3, [r7, #24]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d007      	beq.n	800a184 <HAL_RCC_OscConfig+0x4c>
 800a174:	69bb      	ldr	r3, [r7, #24]
 800a176:	2b0c      	cmp	r3, #12
 800a178:	f040 808b 	bne.w	800a292 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	2b01      	cmp	r3, #1
 800a180:	f040 8087 	bne.w	800a292 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a184:	4b88      	ldr	r3, [pc, #544]	; (800a3a8 <HAL_RCC_OscConfig+0x270>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f003 0302 	and.w	r3, r3, #2
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d005      	beq.n	800a19c <HAL_RCC_OscConfig+0x64>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	699b      	ldr	r3, [r3, #24]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d101      	bne.n	800a19c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800a198:	2301      	movs	r3, #1
 800a19a:	e3d9      	b.n	800a950 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6a1a      	ldr	r2, [r3, #32]
 800a1a0:	4b81      	ldr	r3, [pc, #516]	; (800a3a8 <HAL_RCC_OscConfig+0x270>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f003 0308 	and.w	r3, r3, #8
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d004      	beq.n	800a1b6 <HAL_RCC_OscConfig+0x7e>
 800a1ac:	4b7e      	ldr	r3, [pc, #504]	; (800a3a8 <HAL_RCC_OscConfig+0x270>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a1b4:	e005      	b.n	800a1c2 <HAL_RCC_OscConfig+0x8a>
 800a1b6:	4b7c      	ldr	r3, [pc, #496]	; (800a3a8 <HAL_RCC_OscConfig+0x270>)
 800a1b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a1bc:	091b      	lsrs	r3, r3, #4
 800a1be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d223      	bcs.n	800a20e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6a1b      	ldr	r3, [r3, #32]
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f000 fd8c 	bl	800ace8 <RCC_SetFlashLatencyFromMSIRange>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d001      	beq.n	800a1da <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	e3ba      	b.n	800a950 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a1da:	4b73      	ldr	r3, [pc, #460]	; (800a3a8 <HAL_RCC_OscConfig+0x270>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4a72      	ldr	r2, [pc, #456]	; (800a3a8 <HAL_RCC_OscConfig+0x270>)
 800a1e0:	f043 0308 	orr.w	r3, r3, #8
 800a1e4:	6013      	str	r3, [r2, #0]
 800a1e6:	4b70      	ldr	r3, [pc, #448]	; (800a3a8 <HAL_RCC_OscConfig+0x270>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6a1b      	ldr	r3, [r3, #32]
 800a1f2:	496d      	ldr	r1, [pc, #436]	; (800a3a8 <HAL_RCC_OscConfig+0x270>)
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a1f8:	4b6b      	ldr	r3, [pc, #428]	; (800a3a8 <HAL_RCC_OscConfig+0x270>)
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	69db      	ldr	r3, [r3, #28]
 800a204:	021b      	lsls	r3, r3, #8
 800a206:	4968      	ldr	r1, [pc, #416]	; (800a3a8 <HAL_RCC_OscConfig+0x270>)
 800a208:	4313      	orrs	r3, r2
 800a20a:	604b      	str	r3, [r1, #4]
 800a20c:	e025      	b.n	800a25a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a20e:	4b66      	ldr	r3, [pc, #408]	; (800a3a8 <HAL_RCC_OscConfig+0x270>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	4a65      	ldr	r2, [pc, #404]	; (800a3a8 <HAL_RCC_OscConfig+0x270>)
 800a214:	f043 0308 	orr.w	r3, r3, #8
 800a218:	6013      	str	r3, [r2, #0]
 800a21a:	4b63      	ldr	r3, [pc, #396]	; (800a3a8 <HAL_RCC_OscConfig+0x270>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6a1b      	ldr	r3, [r3, #32]
 800a226:	4960      	ldr	r1, [pc, #384]	; (800a3a8 <HAL_RCC_OscConfig+0x270>)
 800a228:	4313      	orrs	r3, r2
 800a22a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a22c:	4b5e      	ldr	r3, [pc, #376]	; (800a3a8 <HAL_RCC_OscConfig+0x270>)
 800a22e:	685b      	ldr	r3, [r3, #4]
 800a230:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	69db      	ldr	r3, [r3, #28]
 800a238:	021b      	lsls	r3, r3, #8
 800a23a:	495b      	ldr	r1, [pc, #364]	; (800a3a8 <HAL_RCC_OscConfig+0x270>)
 800a23c:	4313      	orrs	r3, r2
 800a23e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a240:	69bb      	ldr	r3, [r7, #24]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d109      	bne.n	800a25a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6a1b      	ldr	r3, [r3, #32]
 800a24a:	4618      	mov	r0, r3
 800a24c:	f000 fd4c 	bl	800ace8 <RCC_SetFlashLatencyFromMSIRange>
 800a250:	4603      	mov	r3, r0
 800a252:	2b00      	cmp	r3, #0
 800a254:	d001      	beq.n	800a25a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800a256:	2301      	movs	r3, #1
 800a258:	e37a      	b.n	800a950 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a25a:	f000 fc81 	bl	800ab60 <HAL_RCC_GetSysClockFreq>
 800a25e:	4602      	mov	r2, r0
 800a260:	4b51      	ldr	r3, [pc, #324]	; (800a3a8 <HAL_RCC_OscConfig+0x270>)
 800a262:	689b      	ldr	r3, [r3, #8]
 800a264:	091b      	lsrs	r3, r3, #4
 800a266:	f003 030f 	and.w	r3, r3, #15
 800a26a:	4950      	ldr	r1, [pc, #320]	; (800a3ac <HAL_RCC_OscConfig+0x274>)
 800a26c:	5ccb      	ldrb	r3, [r1, r3]
 800a26e:	f003 031f 	and.w	r3, r3, #31
 800a272:	fa22 f303 	lsr.w	r3, r2, r3
 800a276:	4a4e      	ldr	r2, [pc, #312]	; (800a3b0 <HAL_RCC_OscConfig+0x278>)
 800a278:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800a27a:	4b4e      	ldr	r3, [pc, #312]	; (800a3b4 <HAL_RCC_OscConfig+0x27c>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	4618      	mov	r0, r3
 800a280:	f7ff fa14 	bl	80096ac <HAL_InitTick>
 800a284:	4603      	mov	r3, r0
 800a286:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800a288:	7bfb      	ldrb	r3, [r7, #15]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d052      	beq.n	800a334 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800a28e:	7bfb      	ldrb	r3, [r7, #15]
 800a290:	e35e      	b.n	800a950 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	699b      	ldr	r3, [r3, #24]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d032      	beq.n	800a300 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800a29a:	4b43      	ldr	r3, [pc, #268]	; (800a3a8 <HAL_RCC_OscConfig+0x270>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4a42      	ldr	r2, [pc, #264]	; (800a3a8 <HAL_RCC_OscConfig+0x270>)
 800a2a0:	f043 0301 	orr.w	r3, r3, #1
 800a2a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a2a6:	f7ff fa51 	bl	800974c <HAL_GetTick>
 800a2aa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a2ac:	e008      	b.n	800a2c0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a2ae:	f7ff fa4d 	bl	800974c <HAL_GetTick>
 800a2b2:	4602      	mov	r2, r0
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	1ad3      	subs	r3, r2, r3
 800a2b8:	2b02      	cmp	r3, #2
 800a2ba:	d901      	bls.n	800a2c0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800a2bc:	2303      	movs	r3, #3
 800a2be:	e347      	b.n	800a950 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a2c0:	4b39      	ldr	r3, [pc, #228]	; (800a3a8 <HAL_RCC_OscConfig+0x270>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f003 0302 	and.w	r3, r3, #2
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d0f0      	beq.n	800a2ae <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a2cc:	4b36      	ldr	r3, [pc, #216]	; (800a3a8 <HAL_RCC_OscConfig+0x270>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4a35      	ldr	r2, [pc, #212]	; (800a3a8 <HAL_RCC_OscConfig+0x270>)
 800a2d2:	f043 0308 	orr.w	r3, r3, #8
 800a2d6:	6013      	str	r3, [r2, #0]
 800a2d8:	4b33      	ldr	r3, [pc, #204]	; (800a3a8 <HAL_RCC_OscConfig+0x270>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6a1b      	ldr	r3, [r3, #32]
 800a2e4:	4930      	ldr	r1, [pc, #192]	; (800a3a8 <HAL_RCC_OscConfig+0x270>)
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a2ea:	4b2f      	ldr	r3, [pc, #188]	; (800a3a8 <HAL_RCC_OscConfig+0x270>)
 800a2ec:	685b      	ldr	r3, [r3, #4]
 800a2ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	69db      	ldr	r3, [r3, #28]
 800a2f6:	021b      	lsls	r3, r3, #8
 800a2f8:	492b      	ldr	r1, [pc, #172]	; (800a3a8 <HAL_RCC_OscConfig+0x270>)
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	604b      	str	r3, [r1, #4]
 800a2fe:	e01a      	b.n	800a336 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800a300:	4b29      	ldr	r3, [pc, #164]	; (800a3a8 <HAL_RCC_OscConfig+0x270>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4a28      	ldr	r2, [pc, #160]	; (800a3a8 <HAL_RCC_OscConfig+0x270>)
 800a306:	f023 0301 	bic.w	r3, r3, #1
 800a30a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a30c:	f7ff fa1e 	bl	800974c <HAL_GetTick>
 800a310:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a312:	e008      	b.n	800a326 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a314:	f7ff fa1a 	bl	800974c <HAL_GetTick>
 800a318:	4602      	mov	r2, r0
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	1ad3      	subs	r3, r2, r3
 800a31e:	2b02      	cmp	r3, #2
 800a320:	d901      	bls.n	800a326 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800a322:	2303      	movs	r3, #3
 800a324:	e314      	b.n	800a950 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a326:	4b20      	ldr	r3, [pc, #128]	; (800a3a8 <HAL_RCC_OscConfig+0x270>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f003 0302 	and.w	r3, r3, #2
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d1f0      	bne.n	800a314 <HAL_RCC_OscConfig+0x1dc>
 800a332:	e000      	b.n	800a336 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a334:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f003 0301 	and.w	r3, r3, #1
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d073      	beq.n	800a42a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800a342:	69bb      	ldr	r3, [r7, #24]
 800a344:	2b08      	cmp	r3, #8
 800a346:	d005      	beq.n	800a354 <HAL_RCC_OscConfig+0x21c>
 800a348:	69bb      	ldr	r3, [r7, #24]
 800a34a:	2b0c      	cmp	r3, #12
 800a34c:	d10e      	bne.n	800a36c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	2b03      	cmp	r3, #3
 800a352:	d10b      	bne.n	800a36c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a354:	4b14      	ldr	r3, [pc, #80]	; (800a3a8 <HAL_RCC_OscConfig+0x270>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d063      	beq.n	800a428 <HAL_RCC_OscConfig+0x2f0>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	685b      	ldr	r3, [r3, #4]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d15f      	bne.n	800a428 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800a368:	2301      	movs	r3, #1
 800a36a:	e2f1      	b.n	800a950 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a374:	d106      	bne.n	800a384 <HAL_RCC_OscConfig+0x24c>
 800a376:	4b0c      	ldr	r3, [pc, #48]	; (800a3a8 <HAL_RCC_OscConfig+0x270>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4a0b      	ldr	r2, [pc, #44]	; (800a3a8 <HAL_RCC_OscConfig+0x270>)
 800a37c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a380:	6013      	str	r3, [r2, #0]
 800a382:	e025      	b.n	800a3d0 <HAL_RCC_OscConfig+0x298>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	685b      	ldr	r3, [r3, #4]
 800a388:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a38c:	d114      	bne.n	800a3b8 <HAL_RCC_OscConfig+0x280>
 800a38e:	4b06      	ldr	r3, [pc, #24]	; (800a3a8 <HAL_RCC_OscConfig+0x270>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	4a05      	ldr	r2, [pc, #20]	; (800a3a8 <HAL_RCC_OscConfig+0x270>)
 800a394:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a398:	6013      	str	r3, [r2, #0]
 800a39a:	4b03      	ldr	r3, [pc, #12]	; (800a3a8 <HAL_RCC_OscConfig+0x270>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	4a02      	ldr	r2, [pc, #8]	; (800a3a8 <HAL_RCC_OscConfig+0x270>)
 800a3a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a3a4:	6013      	str	r3, [r2, #0]
 800a3a6:	e013      	b.n	800a3d0 <HAL_RCC_OscConfig+0x298>
 800a3a8:	40021000 	.word	0x40021000
 800a3ac:	0800f780 	.word	0x0800f780
 800a3b0:	20000000 	.word	0x20000000
 800a3b4:	20000088 	.word	0x20000088
 800a3b8:	4ba0      	ldr	r3, [pc, #640]	; (800a63c <HAL_RCC_OscConfig+0x504>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4a9f      	ldr	r2, [pc, #636]	; (800a63c <HAL_RCC_OscConfig+0x504>)
 800a3be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a3c2:	6013      	str	r3, [r2, #0]
 800a3c4:	4b9d      	ldr	r3, [pc, #628]	; (800a63c <HAL_RCC_OscConfig+0x504>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	4a9c      	ldr	r2, [pc, #624]	; (800a63c <HAL_RCC_OscConfig+0x504>)
 800a3ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a3ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	685b      	ldr	r3, [r3, #4]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d013      	beq.n	800a400 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3d8:	f7ff f9b8 	bl	800974c <HAL_GetTick>
 800a3dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a3de:	e008      	b.n	800a3f2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a3e0:	f7ff f9b4 	bl	800974c <HAL_GetTick>
 800a3e4:	4602      	mov	r2, r0
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	1ad3      	subs	r3, r2, r3
 800a3ea:	2b64      	cmp	r3, #100	; 0x64
 800a3ec:	d901      	bls.n	800a3f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800a3ee:	2303      	movs	r3, #3
 800a3f0:	e2ae      	b.n	800a950 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a3f2:	4b92      	ldr	r3, [pc, #584]	; (800a63c <HAL_RCC_OscConfig+0x504>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d0f0      	beq.n	800a3e0 <HAL_RCC_OscConfig+0x2a8>
 800a3fe:	e014      	b.n	800a42a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a400:	f7ff f9a4 	bl	800974c <HAL_GetTick>
 800a404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a406:	e008      	b.n	800a41a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a408:	f7ff f9a0 	bl	800974c <HAL_GetTick>
 800a40c:	4602      	mov	r2, r0
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	1ad3      	subs	r3, r2, r3
 800a412:	2b64      	cmp	r3, #100	; 0x64
 800a414:	d901      	bls.n	800a41a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a416:	2303      	movs	r3, #3
 800a418:	e29a      	b.n	800a950 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a41a:	4b88      	ldr	r3, [pc, #544]	; (800a63c <HAL_RCC_OscConfig+0x504>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a422:	2b00      	cmp	r3, #0
 800a424:	d1f0      	bne.n	800a408 <HAL_RCC_OscConfig+0x2d0>
 800a426:	e000      	b.n	800a42a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f003 0302 	and.w	r3, r3, #2
 800a432:	2b00      	cmp	r3, #0
 800a434:	d060      	beq.n	800a4f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800a436:	69bb      	ldr	r3, [r7, #24]
 800a438:	2b04      	cmp	r3, #4
 800a43a:	d005      	beq.n	800a448 <HAL_RCC_OscConfig+0x310>
 800a43c:	69bb      	ldr	r3, [r7, #24]
 800a43e:	2b0c      	cmp	r3, #12
 800a440:	d119      	bne.n	800a476 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	2b02      	cmp	r3, #2
 800a446:	d116      	bne.n	800a476 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a448:	4b7c      	ldr	r3, [pc, #496]	; (800a63c <HAL_RCC_OscConfig+0x504>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a450:	2b00      	cmp	r3, #0
 800a452:	d005      	beq.n	800a460 <HAL_RCC_OscConfig+0x328>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	68db      	ldr	r3, [r3, #12]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d101      	bne.n	800a460 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800a45c:	2301      	movs	r3, #1
 800a45e:	e277      	b.n	800a950 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a460:	4b76      	ldr	r3, [pc, #472]	; (800a63c <HAL_RCC_OscConfig+0x504>)
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	691b      	ldr	r3, [r3, #16]
 800a46c:	061b      	lsls	r3, r3, #24
 800a46e:	4973      	ldr	r1, [pc, #460]	; (800a63c <HAL_RCC_OscConfig+0x504>)
 800a470:	4313      	orrs	r3, r2
 800a472:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a474:	e040      	b.n	800a4f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	68db      	ldr	r3, [r3, #12]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d023      	beq.n	800a4c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a47e:	4b6f      	ldr	r3, [pc, #444]	; (800a63c <HAL_RCC_OscConfig+0x504>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4a6e      	ldr	r2, [pc, #440]	; (800a63c <HAL_RCC_OscConfig+0x504>)
 800a484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a488:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a48a:	f7ff f95f 	bl	800974c <HAL_GetTick>
 800a48e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a490:	e008      	b.n	800a4a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a492:	f7ff f95b 	bl	800974c <HAL_GetTick>
 800a496:	4602      	mov	r2, r0
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	1ad3      	subs	r3, r2, r3
 800a49c:	2b02      	cmp	r3, #2
 800a49e:	d901      	bls.n	800a4a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800a4a0:	2303      	movs	r3, #3
 800a4a2:	e255      	b.n	800a950 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a4a4:	4b65      	ldr	r3, [pc, #404]	; (800a63c <HAL_RCC_OscConfig+0x504>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d0f0      	beq.n	800a492 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a4b0:	4b62      	ldr	r3, [pc, #392]	; (800a63c <HAL_RCC_OscConfig+0x504>)
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	691b      	ldr	r3, [r3, #16]
 800a4bc:	061b      	lsls	r3, r3, #24
 800a4be:	495f      	ldr	r1, [pc, #380]	; (800a63c <HAL_RCC_OscConfig+0x504>)
 800a4c0:	4313      	orrs	r3, r2
 800a4c2:	604b      	str	r3, [r1, #4]
 800a4c4:	e018      	b.n	800a4f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a4c6:	4b5d      	ldr	r3, [pc, #372]	; (800a63c <HAL_RCC_OscConfig+0x504>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	4a5c      	ldr	r2, [pc, #368]	; (800a63c <HAL_RCC_OscConfig+0x504>)
 800a4cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a4d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4d2:	f7ff f93b 	bl	800974c <HAL_GetTick>
 800a4d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a4d8:	e008      	b.n	800a4ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a4da:	f7ff f937 	bl	800974c <HAL_GetTick>
 800a4de:	4602      	mov	r2, r0
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	1ad3      	subs	r3, r2, r3
 800a4e4:	2b02      	cmp	r3, #2
 800a4e6:	d901      	bls.n	800a4ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800a4e8:	2303      	movs	r3, #3
 800a4ea:	e231      	b.n	800a950 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a4ec:	4b53      	ldr	r3, [pc, #332]	; (800a63c <HAL_RCC_OscConfig+0x504>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d1f0      	bne.n	800a4da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f003 0308 	and.w	r3, r3, #8
 800a500:	2b00      	cmp	r3, #0
 800a502:	d03c      	beq.n	800a57e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	695b      	ldr	r3, [r3, #20]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d01c      	beq.n	800a546 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a50c:	4b4b      	ldr	r3, [pc, #300]	; (800a63c <HAL_RCC_OscConfig+0x504>)
 800a50e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a512:	4a4a      	ldr	r2, [pc, #296]	; (800a63c <HAL_RCC_OscConfig+0x504>)
 800a514:	f043 0301 	orr.w	r3, r3, #1
 800a518:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a51c:	f7ff f916 	bl	800974c <HAL_GetTick>
 800a520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a522:	e008      	b.n	800a536 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a524:	f7ff f912 	bl	800974c <HAL_GetTick>
 800a528:	4602      	mov	r2, r0
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	1ad3      	subs	r3, r2, r3
 800a52e:	2b02      	cmp	r3, #2
 800a530:	d901      	bls.n	800a536 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800a532:	2303      	movs	r3, #3
 800a534:	e20c      	b.n	800a950 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a536:	4b41      	ldr	r3, [pc, #260]	; (800a63c <HAL_RCC_OscConfig+0x504>)
 800a538:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a53c:	f003 0302 	and.w	r3, r3, #2
 800a540:	2b00      	cmp	r3, #0
 800a542:	d0ef      	beq.n	800a524 <HAL_RCC_OscConfig+0x3ec>
 800a544:	e01b      	b.n	800a57e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a546:	4b3d      	ldr	r3, [pc, #244]	; (800a63c <HAL_RCC_OscConfig+0x504>)
 800a548:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a54c:	4a3b      	ldr	r2, [pc, #236]	; (800a63c <HAL_RCC_OscConfig+0x504>)
 800a54e:	f023 0301 	bic.w	r3, r3, #1
 800a552:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a556:	f7ff f8f9 	bl	800974c <HAL_GetTick>
 800a55a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a55c:	e008      	b.n	800a570 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a55e:	f7ff f8f5 	bl	800974c <HAL_GetTick>
 800a562:	4602      	mov	r2, r0
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	1ad3      	subs	r3, r2, r3
 800a568:	2b02      	cmp	r3, #2
 800a56a:	d901      	bls.n	800a570 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800a56c:	2303      	movs	r3, #3
 800a56e:	e1ef      	b.n	800a950 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a570:	4b32      	ldr	r3, [pc, #200]	; (800a63c <HAL_RCC_OscConfig+0x504>)
 800a572:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a576:	f003 0302 	and.w	r3, r3, #2
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d1ef      	bne.n	800a55e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f003 0304 	and.w	r3, r3, #4
 800a586:	2b00      	cmp	r3, #0
 800a588:	f000 80a6 	beq.w	800a6d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a58c:	2300      	movs	r3, #0
 800a58e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800a590:	4b2a      	ldr	r3, [pc, #168]	; (800a63c <HAL_RCC_OscConfig+0x504>)
 800a592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d10d      	bne.n	800a5b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a59c:	4b27      	ldr	r3, [pc, #156]	; (800a63c <HAL_RCC_OscConfig+0x504>)
 800a59e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5a0:	4a26      	ldr	r2, [pc, #152]	; (800a63c <HAL_RCC_OscConfig+0x504>)
 800a5a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a5a6:	6593      	str	r3, [r2, #88]	; 0x58
 800a5a8:	4b24      	ldr	r3, [pc, #144]	; (800a63c <HAL_RCC_OscConfig+0x504>)
 800a5aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a5b0:	60bb      	str	r3, [r7, #8]
 800a5b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a5b8:	4b21      	ldr	r3, [pc, #132]	; (800a640 <HAL_RCC_OscConfig+0x508>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d118      	bne.n	800a5f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a5c4:	4b1e      	ldr	r3, [pc, #120]	; (800a640 <HAL_RCC_OscConfig+0x508>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	4a1d      	ldr	r2, [pc, #116]	; (800a640 <HAL_RCC_OscConfig+0x508>)
 800a5ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a5d0:	f7ff f8bc 	bl	800974c <HAL_GetTick>
 800a5d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a5d6:	e008      	b.n	800a5ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a5d8:	f7ff f8b8 	bl	800974c <HAL_GetTick>
 800a5dc:	4602      	mov	r2, r0
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	1ad3      	subs	r3, r2, r3
 800a5e2:	2b02      	cmp	r3, #2
 800a5e4:	d901      	bls.n	800a5ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800a5e6:	2303      	movs	r3, #3
 800a5e8:	e1b2      	b.n	800a950 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a5ea:	4b15      	ldr	r3, [pc, #84]	; (800a640 <HAL_RCC_OscConfig+0x508>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d0f0      	beq.n	800a5d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	689b      	ldr	r3, [r3, #8]
 800a5fa:	2b01      	cmp	r3, #1
 800a5fc:	d108      	bne.n	800a610 <HAL_RCC_OscConfig+0x4d8>
 800a5fe:	4b0f      	ldr	r3, [pc, #60]	; (800a63c <HAL_RCC_OscConfig+0x504>)
 800a600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a604:	4a0d      	ldr	r2, [pc, #52]	; (800a63c <HAL_RCC_OscConfig+0x504>)
 800a606:	f043 0301 	orr.w	r3, r3, #1
 800a60a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a60e:	e029      	b.n	800a664 <HAL_RCC_OscConfig+0x52c>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	689b      	ldr	r3, [r3, #8]
 800a614:	2b05      	cmp	r3, #5
 800a616:	d115      	bne.n	800a644 <HAL_RCC_OscConfig+0x50c>
 800a618:	4b08      	ldr	r3, [pc, #32]	; (800a63c <HAL_RCC_OscConfig+0x504>)
 800a61a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a61e:	4a07      	ldr	r2, [pc, #28]	; (800a63c <HAL_RCC_OscConfig+0x504>)
 800a620:	f043 0304 	orr.w	r3, r3, #4
 800a624:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a628:	4b04      	ldr	r3, [pc, #16]	; (800a63c <HAL_RCC_OscConfig+0x504>)
 800a62a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a62e:	4a03      	ldr	r2, [pc, #12]	; (800a63c <HAL_RCC_OscConfig+0x504>)
 800a630:	f043 0301 	orr.w	r3, r3, #1
 800a634:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a638:	e014      	b.n	800a664 <HAL_RCC_OscConfig+0x52c>
 800a63a:	bf00      	nop
 800a63c:	40021000 	.word	0x40021000
 800a640:	40007000 	.word	0x40007000
 800a644:	4b9a      	ldr	r3, [pc, #616]	; (800a8b0 <HAL_RCC_OscConfig+0x778>)
 800a646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a64a:	4a99      	ldr	r2, [pc, #612]	; (800a8b0 <HAL_RCC_OscConfig+0x778>)
 800a64c:	f023 0301 	bic.w	r3, r3, #1
 800a650:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a654:	4b96      	ldr	r3, [pc, #600]	; (800a8b0 <HAL_RCC_OscConfig+0x778>)
 800a656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a65a:	4a95      	ldr	r2, [pc, #596]	; (800a8b0 <HAL_RCC_OscConfig+0x778>)
 800a65c:	f023 0304 	bic.w	r3, r3, #4
 800a660:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	689b      	ldr	r3, [r3, #8]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d016      	beq.n	800a69a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a66c:	f7ff f86e 	bl	800974c <HAL_GetTick>
 800a670:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a672:	e00a      	b.n	800a68a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a674:	f7ff f86a 	bl	800974c <HAL_GetTick>
 800a678:	4602      	mov	r2, r0
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	1ad3      	subs	r3, r2, r3
 800a67e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a682:	4293      	cmp	r3, r2
 800a684:	d901      	bls.n	800a68a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800a686:	2303      	movs	r3, #3
 800a688:	e162      	b.n	800a950 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a68a:	4b89      	ldr	r3, [pc, #548]	; (800a8b0 <HAL_RCC_OscConfig+0x778>)
 800a68c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a690:	f003 0302 	and.w	r3, r3, #2
 800a694:	2b00      	cmp	r3, #0
 800a696:	d0ed      	beq.n	800a674 <HAL_RCC_OscConfig+0x53c>
 800a698:	e015      	b.n	800a6c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a69a:	f7ff f857 	bl	800974c <HAL_GetTick>
 800a69e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a6a0:	e00a      	b.n	800a6b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a6a2:	f7ff f853 	bl	800974c <HAL_GetTick>
 800a6a6:	4602      	mov	r2, r0
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	1ad3      	subs	r3, r2, r3
 800a6ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d901      	bls.n	800a6b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800a6b4:	2303      	movs	r3, #3
 800a6b6:	e14b      	b.n	800a950 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a6b8:	4b7d      	ldr	r3, [pc, #500]	; (800a8b0 <HAL_RCC_OscConfig+0x778>)
 800a6ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6be:	f003 0302 	and.w	r3, r3, #2
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d1ed      	bne.n	800a6a2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a6c6:	7ffb      	ldrb	r3, [r7, #31]
 800a6c8:	2b01      	cmp	r3, #1
 800a6ca:	d105      	bne.n	800a6d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a6cc:	4b78      	ldr	r3, [pc, #480]	; (800a8b0 <HAL_RCC_OscConfig+0x778>)
 800a6ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6d0:	4a77      	ldr	r2, [pc, #476]	; (800a8b0 <HAL_RCC_OscConfig+0x778>)
 800a6d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a6d6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f003 0320 	and.w	r3, r3, #32
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d03c      	beq.n	800a75e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d01c      	beq.n	800a726 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a6ec:	4b70      	ldr	r3, [pc, #448]	; (800a8b0 <HAL_RCC_OscConfig+0x778>)
 800a6ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a6f2:	4a6f      	ldr	r2, [pc, #444]	; (800a8b0 <HAL_RCC_OscConfig+0x778>)
 800a6f4:	f043 0301 	orr.w	r3, r3, #1
 800a6f8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a6fc:	f7ff f826 	bl	800974c <HAL_GetTick>
 800a700:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a702:	e008      	b.n	800a716 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a704:	f7ff f822 	bl	800974c <HAL_GetTick>
 800a708:	4602      	mov	r2, r0
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	1ad3      	subs	r3, r2, r3
 800a70e:	2b02      	cmp	r3, #2
 800a710:	d901      	bls.n	800a716 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800a712:	2303      	movs	r3, #3
 800a714:	e11c      	b.n	800a950 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a716:	4b66      	ldr	r3, [pc, #408]	; (800a8b0 <HAL_RCC_OscConfig+0x778>)
 800a718:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a71c:	f003 0302 	and.w	r3, r3, #2
 800a720:	2b00      	cmp	r3, #0
 800a722:	d0ef      	beq.n	800a704 <HAL_RCC_OscConfig+0x5cc>
 800a724:	e01b      	b.n	800a75e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a726:	4b62      	ldr	r3, [pc, #392]	; (800a8b0 <HAL_RCC_OscConfig+0x778>)
 800a728:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a72c:	4a60      	ldr	r2, [pc, #384]	; (800a8b0 <HAL_RCC_OscConfig+0x778>)
 800a72e:	f023 0301 	bic.w	r3, r3, #1
 800a732:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a736:	f7ff f809 	bl	800974c <HAL_GetTick>
 800a73a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a73c:	e008      	b.n	800a750 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a73e:	f7ff f805 	bl	800974c <HAL_GetTick>
 800a742:	4602      	mov	r2, r0
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	1ad3      	subs	r3, r2, r3
 800a748:	2b02      	cmp	r3, #2
 800a74a:	d901      	bls.n	800a750 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800a74c:	2303      	movs	r3, #3
 800a74e:	e0ff      	b.n	800a950 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a750:	4b57      	ldr	r3, [pc, #348]	; (800a8b0 <HAL_RCC_OscConfig+0x778>)
 800a752:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a756:	f003 0302 	and.w	r3, r3, #2
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d1ef      	bne.n	800a73e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a762:	2b00      	cmp	r3, #0
 800a764:	f000 80f3 	beq.w	800a94e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a76c:	2b02      	cmp	r3, #2
 800a76e:	f040 80c9 	bne.w	800a904 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800a772:	4b4f      	ldr	r3, [pc, #316]	; (800a8b0 <HAL_RCC_OscConfig+0x778>)
 800a774:	68db      	ldr	r3, [r3, #12]
 800a776:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a778:	697b      	ldr	r3, [r7, #20]
 800a77a:	f003 0203 	and.w	r2, r3, #3
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a782:	429a      	cmp	r2, r3
 800a784:	d12c      	bne.n	800a7e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a790:	3b01      	subs	r3, #1
 800a792:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a794:	429a      	cmp	r2, r3
 800a796:	d123      	bne.n	800a7e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7a2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d11b      	bne.n	800a7e0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7b2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d113      	bne.n	800a7e0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a7b8:	697b      	ldr	r3, [r7, #20]
 800a7ba:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7c2:	085b      	lsrs	r3, r3, #1
 800a7c4:	3b01      	subs	r3, #1
 800a7c6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d109      	bne.n	800a7e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7d6:	085b      	lsrs	r3, r3, #1
 800a7d8:	3b01      	subs	r3, #1
 800a7da:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d06b      	beq.n	800a8b8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a7e0:	69bb      	ldr	r3, [r7, #24]
 800a7e2:	2b0c      	cmp	r3, #12
 800a7e4:	d062      	beq.n	800a8ac <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800a7e6:	4b32      	ldr	r3, [pc, #200]	; (800a8b0 <HAL_RCC_OscConfig+0x778>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d001      	beq.n	800a7f6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	e0ac      	b.n	800a950 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800a7f6:	4b2e      	ldr	r3, [pc, #184]	; (800a8b0 <HAL_RCC_OscConfig+0x778>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	4a2d      	ldr	r2, [pc, #180]	; (800a8b0 <HAL_RCC_OscConfig+0x778>)
 800a7fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a800:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a802:	f7fe ffa3 	bl	800974c <HAL_GetTick>
 800a806:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a808:	e008      	b.n	800a81c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a80a:	f7fe ff9f 	bl	800974c <HAL_GetTick>
 800a80e:	4602      	mov	r2, r0
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	1ad3      	subs	r3, r2, r3
 800a814:	2b02      	cmp	r3, #2
 800a816:	d901      	bls.n	800a81c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800a818:	2303      	movs	r3, #3
 800a81a:	e099      	b.n	800a950 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a81c:	4b24      	ldr	r3, [pc, #144]	; (800a8b0 <HAL_RCC_OscConfig+0x778>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a824:	2b00      	cmp	r3, #0
 800a826:	d1f0      	bne.n	800a80a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a828:	4b21      	ldr	r3, [pc, #132]	; (800a8b0 <HAL_RCC_OscConfig+0x778>)
 800a82a:	68da      	ldr	r2, [r3, #12]
 800a82c:	4b21      	ldr	r3, [pc, #132]	; (800a8b4 <HAL_RCC_OscConfig+0x77c>)
 800a82e:	4013      	ands	r3, r2
 800a830:	687a      	ldr	r2, [r7, #4]
 800a832:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800a834:	687a      	ldr	r2, [r7, #4]
 800a836:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a838:	3a01      	subs	r2, #1
 800a83a:	0112      	lsls	r2, r2, #4
 800a83c:	4311      	orrs	r1, r2
 800a83e:	687a      	ldr	r2, [r7, #4]
 800a840:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a842:	0212      	lsls	r2, r2, #8
 800a844:	4311      	orrs	r1, r2
 800a846:	687a      	ldr	r2, [r7, #4]
 800a848:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a84a:	0852      	lsrs	r2, r2, #1
 800a84c:	3a01      	subs	r2, #1
 800a84e:	0552      	lsls	r2, r2, #21
 800a850:	4311      	orrs	r1, r2
 800a852:	687a      	ldr	r2, [r7, #4]
 800a854:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a856:	0852      	lsrs	r2, r2, #1
 800a858:	3a01      	subs	r2, #1
 800a85a:	0652      	lsls	r2, r2, #25
 800a85c:	4311      	orrs	r1, r2
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a862:	06d2      	lsls	r2, r2, #27
 800a864:	430a      	orrs	r2, r1
 800a866:	4912      	ldr	r1, [pc, #72]	; (800a8b0 <HAL_RCC_OscConfig+0x778>)
 800a868:	4313      	orrs	r3, r2
 800a86a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800a86c:	4b10      	ldr	r3, [pc, #64]	; (800a8b0 <HAL_RCC_OscConfig+0x778>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4a0f      	ldr	r2, [pc, #60]	; (800a8b0 <HAL_RCC_OscConfig+0x778>)
 800a872:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a876:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a878:	4b0d      	ldr	r3, [pc, #52]	; (800a8b0 <HAL_RCC_OscConfig+0x778>)
 800a87a:	68db      	ldr	r3, [r3, #12]
 800a87c:	4a0c      	ldr	r2, [pc, #48]	; (800a8b0 <HAL_RCC_OscConfig+0x778>)
 800a87e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a882:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a884:	f7fe ff62 	bl	800974c <HAL_GetTick>
 800a888:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a88a:	e008      	b.n	800a89e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a88c:	f7fe ff5e 	bl	800974c <HAL_GetTick>
 800a890:	4602      	mov	r2, r0
 800a892:	693b      	ldr	r3, [r7, #16]
 800a894:	1ad3      	subs	r3, r2, r3
 800a896:	2b02      	cmp	r3, #2
 800a898:	d901      	bls.n	800a89e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800a89a:	2303      	movs	r3, #3
 800a89c:	e058      	b.n	800a950 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a89e:	4b04      	ldr	r3, [pc, #16]	; (800a8b0 <HAL_RCC_OscConfig+0x778>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d0f0      	beq.n	800a88c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a8aa:	e050      	b.n	800a94e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	e04f      	b.n	800a950 <HAL_RCC_OscConfig+0x818>
 800a8b0:	40021000 	.word	0x40021000
 800a8b4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a8b8:	4b27      	ldr	r3, [pc, #156]	; (800a958 <HAL_RCC_OscConfig+0x820>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d144      	bne.n	800a94e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800a8c4:	4b24      	ldr	r3, [pc, #144]	; (800a958 <HAL_RCC_OscConfig+0x820>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	4a23      	ldr	r2, [pc, #140]	; (800a958 <HAL_RCC_OscConfig+0x820>)
 800a8ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a8ce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a8d0:	4b21      	ldr	r3, [pc, #132]	; (800a958 <HAL_RCC_OscConfig+0x820>)
 800a8d2:	68db      	ldr	r3, [r3, #12]
 800a8d4:	4a20      	ldr	r2, [pc, #128]	; (800a958 <HAL_RCC_OscConfig+0x820>)
 800a8d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a8da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a8dc:	f7fe ff36 	bl	800974c <HAL_GetTick>
 800a8e0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a8e2:	e008      	b.n	800a8f6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a8e4:	f7fe ff32 	bl	800974c <HAL_GetTick>
 800a8e8:	4602      	mov	r2, r0
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	1ad3      	subs	r3, r2, r3
 800a8ee:	2b02      	cmp	r3, #2
 800a8f0:	d901      	bls.n	800a8f6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800a8f2:	2303      	movs	r3, #3
 800a8f4:	e02c      	b.n	800a950 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a8f6:	4b18      	ldr	r3, [pc, #96]	; (800a958 <HAL_RCC_OscConfig+0x820>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d0f0      	beq.n	800a8e4 <HAL_RCC_OscConfig+0x7ac>
 800a902:	e024      	b.n	800a94e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a904:	69bb      	ldr	r3, [r7, #24]
 800a906:	2b0c      	cmp	r3, #12
 800a908:	d01f      	beq.n	800a94a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a90a:	4b13      	ldr	r3, [pc, #76]	; (800a958 <HAL_RCC_OscConfig+0x820>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	4a12      	ldr	r2, [pc, #72]	; (800a958 <HAL_RCC_OscConfig+0x820>)
 800a910:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a914:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a916:	f7fe ff19 	bl	800974c <HAL_GetTick>
 800a91a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a91c:	e008      	b.n	800a930 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a91e:	f7fe ff15 	bl	800974c <HAL_GetTick>
 800a922:	4602      	mov	r2, r0
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	1ad3      	subs	r3, r2, r3
 800a928:	2b02      	cmp	r3, #2
 800a92a:	d901      	bls.n	800a930 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800a92c:	2303      	movs	r3, #3
 800a92e:	e00f      	b.n	800a950 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a930:	4b09      	ldr	r3, [pc, #36]	; (800a958 <HAL_RCC_OscConfig+0x820>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d1f0      	bne.n	800a91e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800a93c:	4b06      	ldr	r3, [pc, #24]	; (800a958 <HAL_RCC_OscConfig+0x820>)
 800a93e:	68da      	ldr	r2, [r3, #12]
 800a940:	4905      	ldr	r1, [pc, #20]	; (800a958 <HAL_RCC_OscConfig+0x820>)
 800a942:	4b06      	ldr	r3, [pc, #24]	; (800a95c <HAL_RCC_OscConfig+0x824>)
 800a944:	4013      	ands	r3, r2
 800a946:	60cb      	str	r3, [r1, #12]
 800a948:	e001      	b.n	800a94e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800a94a:	2301      	movs	r3, #1
 800a94c:	e000      	b.n	800a950 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800a94e:	2300      	movs	r3, #0
}
 800a950:	4618      	mov	r0, r3
 800a952:	3720      	adds	r7, #32
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}
 800a958:	40021000 	.word	0x40021000
 800a95c:	feeefffc 	.word	0xfeeefffc

0800a960 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b084      	sub	sp, #16
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
 800a968:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d101      	bne.n	800a974 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a970:	2301      	movs	r3, #1
 800a972:	e0e7      	b.n	800ab44 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a974:	4b75      	ldr	r3, [pc, #468]	; (800ab4c <HAL_RCC_ClockConfig+0x1ec>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f003 0307 	and.w	r3, r3, #7
 800a97c:	683a      	ldr	r2, [r7, #0]
 800a97e:	429a      	cmp	r2, r3
 800a980:	d910      	bls.n	800a9a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a982:	4b72      	ldr	r3, [pc, #456]	; (800ab4c <HAL_RCC_ClockConfig+0x1ec>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f023 0207 	bic.w	r2, r3, #7
 800a98a:	4970      	ldr	r1, [pc, #448]	; (800ab4c <HAL_RCC_ClockConfig+0x1ec>)
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	4313      	orrs	r3, r2
 800a990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a992:	4b6e      	ldr	r3, [pc, #440]	; (800ab4c <HAL_RCC_ClockConfig+0x1ec>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f003 0307 	and.w	r3, r3, #7
 800a99a:	683a      	ldr	r2, [r7, #0]
 800a99c:	429a      	cmp	r2, r3
 800a99e:	d001      	beq.n	800a9a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	e0cf      	b.n	800ab44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f003 0302 	and.w	r3, r3, #2
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d010      	beq.n	800a9d2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	689a      	ldr	r2, [r3, #8]
 800a9b4:	4b66      	ldr	r3, [pc, #408]	; (800ab50 <HAL_RCC_ClockConfig+0x1f0>)
 800a9b6:	689b      	ldr	r3, [r3, #8]
 800a9b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a9bc:	429a      	cmp	r2, r3
 800a9be:	d908      	bls.n	800a9d2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a9c0:	4b63      	ldr	r3, [pc, #396]	; (800ab50 <HAL_RCC_ClockConfig+0x1f0>)
 800a9c2:	689b      	ldr	r3, [r3, #8]
 800a9c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	689b      	ldr	r3, [r3, #8]
 800a9cc:	4960      	ldr	r1, [pc, #384]	; (800ab50 <HAL_RCC_ClockConfig+0x1f0>)
 800a9ce:	4313      	orrs	r3, r2
 800a9d0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f003 0301 	and.w	r3, r3, #1
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d04c      	beq.n	800aa78 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	2b03      	cmp	r3, #3
 800a9e4:	d107      	bne.n	800a9f6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a9e6:	4b5a      	ldr	r3, [pc, #360]	; (800ab50 <HAL_RCC_ClockConfig+0x1f0>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d121      	bne.n	800aa36 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	e0a6      	b.n	800ab44 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	685b      	ldr	r3, [r3, #4]
 800a9fa:	2b02      	cmp	r3, #2
 800a9fc:	d107      	bne.n	800aa0e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a9fe:	4b54      	ldr	r3, [pc, #336]	; (800ab50 <HAL_RCC_ClockConfig+0x1f0>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d115      	bne.n	800aa36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	e09a      	b.n	800ab44 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d107      	bne.n	800aa26 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800aa16:	4b4e      	ldr	r3, [pc, #312]	; (800ab50 <HAL_RCC_ClockConfig+0x1f0>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f003 0302 	and.w	r3, r3, #2
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d109      	bne.n	800aa36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800aa22:	2301      	movs	r3, #1
 800aa24:	e08e      	b.n	800ab44 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800aa26:	4b4a      	ldr	r3, [pc, #296]	; (800ab50 <HAL_RCC_ClockConfig+0x1f0>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d101      	bne.n	800aa36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800aa32:	2301      	movs	r3, #1
 800aa34:	e086      	b.n	800ab44 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800aa36:	4b46      	ldr	r3, [pc, #280]	; (800ab50 <HAL_RCC_ClockConfig+0x1f0>)
 800aa38:	689b      	ldr	r3, [r3, #8]
 800aa3a:	f023 0203 	bic.w	r2, r3, #3
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	4943      	ldr	r1, [pc, #268]	; (800ab50 <HAL_RCC_ClockConfig+0x1f0>)
 800aa44:	4313      	orrs	r3, r2
 800aa46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa48:	f7fe fe80 	bl	800974c <HAL_GetTick>
 800aa4c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aa4e:	e00a      	b.n	800aa66 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aa50:	f7fe fe7c 	bl	800974c <HAL_GetTick>
 800aa54:	4602      	mov	r2, r0
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	1ad3      	subs	r3, r2, r3
 800aa5a:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d901      	bls.n	800aa66 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800aa62:	2303      	movs	r3, #3
 800aa64:	e06e      	b.n	800ab44 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aa66:	4b3a      	ldr	r3, [pc, #232]	; (800ab50 <HAL_RCC_ClockConfig+0x1f0>)
 800aa68:	689b      	ldr	r3, [r3, #8]
 800aa6a:	f003 020c 	and.w	r2, r3, #12
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	685b      	ldr	r3, [r3, #4]
 800aa72:	009b      	lsls	r3, r3, #2
 800aa74:	429a      	cmp	r2, r3
 800aa76:	d1eb      	bne.n	800aa50 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f003 0302 	and.w	r3, r3, #2
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d010      	beq.n	800aaa6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	689a      	ldr	r2, [r3, #8]
 800aa88:	4b31      	ldr	r3, [pc, #196]	; (800ab50 <HAL_RCC_ClockConfig+0x1f0>)
 800aa8a:	689b      	ldr	r3, [r3, #8]
 800aa8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d208      	bcs.n	800aaa6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aa94:	4b2e      	ldr	r3, [pc, #184]	; (800ab50 <HAL_RCC_ClockConfig+0x1f0>)
 800aa96:	689b      	ldr	r3, [r3, #8]
 800aa98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	689b      	ldr	r3, [r3, #8]
 800aaa0:	492b      	ldr	r1, [pc, #172]	; (800ab50 <HAL_RCC_ClockConfig+0x1f0>)
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800aaa6:	4b29      	ldr	r3, [pc, #164]	; (800ab4c <HAL_RCC_ClockConfig+0x1ec>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f003 0307 	and.w	r3, r3, #7
 800aaae:	683a      	ldr	r2, [r7, #0]
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d210      	bcs.n	800aad6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aab4:	4b25      	ldr	r3, [pc, #148]	; (800ab4c <HAL_RCC_ClockConfig+0x1ec>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f023 0207 	bic.w	r2, r3, #7
 800aabc:	4923      	ldr	r1, [pc, #140]	; (800ab4c <HAL_RCC_ClockConfig+0x1ec>)
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	4313      	orrs	r3, r2
 800aac2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800aac4:	4b21      	ldr	r3, [pc, #132]	; (800ab4c <HAL_RCC_ClockConfig+0x1ec>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f003 0307 	and.w	r3, r3, #7
 800aacc:	683a      	ldr	r2, [r7, #0]
 800aace:	429a      	cmp	r2, r3
 800aad0:	d001      	beq.n	800aad6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800aad2:	2301      	movs	r3, #1
 800aad4:	e036      	b.n	800ab44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f003 0304 	and.w	r3, r3, #4
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d008      	beq.n	800aaf4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800aae2:	4b1b      	ldr	r3, [pc, #108]	; (800ab50 <HAL_RCC_ClockConfig+0x1f0>)
 800aae4:	689b      	ldr	r3, [r3, #8]
 800aae6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	68db      	ldr	r3, [r3, #12]
 800aaee:	4918      	ldr	r1, [pc, #96]	; (800ab50 <HAL_RCC_ClockConfig+0x1f0>)
 800aaf0:	4313      	orrs	r3, r2
 800aaf2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f003 0308 	and.w	r3, r3, #8
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d009      	beq.n	800ab14 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ab00:	4b13      	ldr	r3, [pc, #76]	; (800ab50 <HAL_RCC_ClockConfig+0x1f0>)
 800ab02:	689b      	ldr	r3, [r3, #8]
 800ab04:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	691b      	ldr	r3, [r3, #16]
 800ab0c:	00db      	lsls	r3, r3, #3
 800ab0e:	4910      	ldr	r1, [pc, #64]	; (800ab50 <HAL_RCC_ClockConfig+0x1f0>)
 800ab10:	4313      	orrs	r3, r2
 800ab12:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800ab14:	f000 f824 	bl	800ab60 <HAL_RCC_GetSysClockFreq>
 800ab18:	4602      	mov	r2, r0
 800ab1a:	4b0d      	ldr	r3, [pc, #52]	; (800ab50 <HAL_RCC_ClockConfig+0x1f0>)
 800ab1c:	689b      	ldr	r3, [r3, #8]
 800ab1e:	091b      	lsrs	r3, r3, #4
 800ab20:	f003 030f 	and.w	r3, r3, #15
 800ab24:	490b      	ldr	r1, [pc, #44]	; (800ab54 <HAL_RCC_ClockConfig+0x1f4>)
 800ab26:	5ccb      	ldrb	r3, [r1, r3]
 800ab28:	f003 031f 	and.w	r3, r3, #31
 800ab2c:	fa22 f303 	lsr.w	r3, r2, r3
 800ab30:	4a09      	ldr	r2, [pc, #36]	; (800ab58 <HAL_RCC_ClockConfig+0x1f8>)
 800ab32:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800ab34:	4b09      	ldr	r3, [pc, #36]	; (800ab5c <HAL_RCC_ClockConfig+0x1fc>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f7fe fdb7 	bl	80096ac <HAL_InitTick>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	72fb      	strb	r3, [r7, #11]

  return status;
 800ab42:	7afb      	ldrb	r3, [r7, #11]
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3710      	adds	r7, #16
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}
 800ab4c:	40022000 	.word	0x40022000
 800ab50:	40021000 	.word	0x40021000
 800ab54:	0800f780 	.word	0x0800f780
 800ab58:	20000000 	.word	0x20000000
 800ab5c:	20000088 	.word	0x20000088

0800ab60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b089      	sub	sp, #36	; 0x24
 800ab64:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800ab66:	2300      	movs	r3, #0
 800ab68:	61fb      	str	r3, [r7, #28]
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ab6e:	4b3e      	ldr	r3, [pc, #248]	; (800ac68 <HAL_RCC_GetSysClockFreq+0x108>)
 800ab70:	689b      	ldr	r3, [r3, #8]
 800ab72:	f003 030c 	and.w	r3, r3, #12
 800ab76:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ab78:	4b3b      	ldr	r3, [pc, #236]	; (800ac68 <HAL_RCC_GetSysClockFreq+0x108>)
 800ab7a:	68db      	ldr	r3, [r3, #12]
 800ab7c:	f003 0303 	and.w	r3, r3, #3
 800ab80:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d005      	beq.n	800ab94 <HAL_RCC_GetSysClockFreq+0x34>
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	2b0c      	cmp	r3, #12
 800ab8c:	d121      	bne.n	800abd2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	2b01      	cmp	r3, #1
 800ab92:	d11e      	bne.n	800abd2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800ab94:	4b34      	ldr	r3, [pc, #208]	; (800ac68 <HAL_RCC_GetSysClockFreq+0x108>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f003 0308 	and.w	r3, r3, #8
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d107      	bne.n	800abb0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800aba0:	4b31      	ldr	r3, [pc, #196]	; (800ac68 <HAL_RCC_GetSysClockFreq+0x108>)
 800aba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aba6:	0a1b      	lsrs	r3, r3, #8
 800aba8:	f003 030f 	and.w	r3, r3, #15
 800abac:	61fb      	str	r3, [r7, #28]
 800abae:	e005      	b.n	800abbc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800abb0:	4b2d      	ldr	r3, [pc, #180]	; (800ac68 <HAL_RCC_GetSysClockFreq+0x108>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	091b      	lsrs	r3, r3, #4
 800abb6:	f003 030f 	and.w	r3, r3, #15
 800abba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800abbc:	4a2b      	ldr	r2, [pc, #172]	; (800ac6c <HAL_RCC_GetSysClockFreq+0x10c>)
 800abbe:	69fb      	ldr	r3, [r7, #28]
 800abc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800abc4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800abc6:	693b      	ldr	r3, [r7, #16]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d10d      	bne.n	800abe8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800abcc:	69fb      	ldr	r3, [r7, #28]
 800abce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800abd0:	e00a      	b.n	800abe8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	2b04      	cmp	r3, #4
 800abd6:	d102      	bne.n	800abde <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800abd8:	4b25      	ldr	r3, [pc, #148]	; (800ac70 <HAL_RCC_GetSysClockFreq+0x110>)
 800abda:	61bb      	str	r3, [r7, #24]
 800abdc:	e004      	b.n	800abe8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	2b08      	cmp	r3, #8
 800abe2:	d101      	bne.n	800abe8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800abe4:	4b23      	ldr	r3, [pc, #140]	; (800ac74 <HAL_RCC_GetSysClockFreq+0x114>)
 800abe6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	2b0c      	cmp	r3, #12
 800abec:	d134      	bne.n	800ac58 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800abee:	4b1e      	ldr	r3, [pc, #120]	; (800ac68 <HAL_RCC_GetSysClockFreq+0x108>)
 800abf0:	68db      	ldr	r3, [r3, #12]
 800abf2:	f003 0303 	and.w	r3, r3, #3
 800abf6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	2b02      	cmp	r3, #2
 800abfc:	d003      	beq.n	800ac06 <HAL_RCC_GetSysClockFreq+0xa6>
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	2b03      	cmp	r3, #3
 800ac02:	d003      	beq.n	800ac0c <HAL_RCC_GetSysClockFreq+0xac>
 800ac04:	e005      	b.n	800ac12 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800ac06:	4b1a      	ldr	r3, [pc, #104]	; (800ac70 <HAL_RCC_GetSysClockFreq+0x110>)
 800ac08:	617b      	str	r3, [r7, #20]
      break;
 800ac0a:	e005      	b.n	800ac18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800ac0c:	4b19      	ldr	r3, [pc, #100]	; (800ac74 <HAL_RCC_GetSysClockFreq+0x114>)
 800ac0e:	617b      	str	r3, [r7, #20]
      break;
 800ac10:	e002      	b.n	800ac18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800ac12:	69fb      	ldr	r3, [r7, #28]
 800ac14:	617b      	str	r3, [r7, #20]
      break;
 800ac16:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ac18:	4b13      	ldr	r3, [pc, #76]	; (800ac68 <HAL_RCC_GetSysClockFreq+0x108>)
 800ac1a:	68db      	ldr	r3, [r3, #12]
 800ac1c:	091b      	lsrs	r3, r3, #4
 800ac1e:	f003 0307 	and.w	r3, r3, #7
 800ac22:	3301      	adds	r3, #1
 800ac24:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800ac26:	4b10      	ldr	r3, [pc, #64]	; (800ac68 <HAL_RCC_GetSysClockFreq+0x108>)
 800ac28:	68db      	ldr	r3, [r3, #12]
 800ac2a:	0a1b      	lsrs	r3, r3, #8
 800ac2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac30:	697a      	ldr	r2, [r7, #20]
 800ac32:	fb03 f202 	mul.w	r2, r3, r2
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac3c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ac3e:	4b0a      	ldr	r3, [pc, #40]	; (800ac68 <HAL_RCC_GetSysClockFreq+0x108>)
 800ac40:	68db      	ldr	r3, [r3, #12]
 800ac42:	0e5b      	lsrs	r3, r3, #25
 800ac44:	f003 0303 	and.w	r3, r3, #3
 800ac48:	3301      	adds	r3, #1
 800ac4a:	005b      	lsls	r3, r3, #1
 800ac4c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800ac4e:	697a      	ldr	r2, [r7, #20]
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac56:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800ac58:	69bb      	ldr	r3, [r7, #24]
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3724      	adds	r7, #36	; 0x24
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac64:	4770      	bx	lr
 800ac66:	bf00      	nop
 800ac68:	40021000 	.word	0x40021000
 800ac6c:	0800f798 	.word	0x0800f798
 800ac70:	00f42400 	.word	0x00f42400
 800ac74:	007a1200 	.word	0x007a1200

0800ac78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ac7c:	4b03      	ldr	r3, [pc, #12]	; (800ac8c <HAL_RCC_GetHCLKFreq+0x14>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	46bd      	mov	sp, r7
 800ac84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac88:	4770      	bx	lr
 800ac8a:	bf00      	nop
 800ac8c:	20000000 	.word	0x20000000

0800ac90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800ac94:	f7ff fff0 	bl	800ac78 <HAL_RCC_GetHCLKFreq>
 800ac98:	4602      	mov	r2, r0
 800ac9a:	4b06      	ldr	r3, [pc, #24]	; (800acb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ac9c:	689b      	ldr	r3, [r3, #8]
 800ac9e:	0a1b      	lsrs	r3, r3, #8
 800aca0:	f003 0307 	and.w	r3, r3, #7
 800aca4:	4904      	ldr	r1, [pc, #16]	; (800acb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800aca6:	5ccb      	ldrb	r3, [r1, r3]
 800aca8:	f003 031f 	and.w	r3, r3, #31
 800acac:	fa22 f303 	lsr.w	r3, r2, r3
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	bd80      	pop	{r7, pc}
 800acb4:	40021000 	.word	0x40021000
 800acb8:	0800f790 	.word	0x0800f790

0800acbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800acc0:	f7ff ffda 	bl	800ac78 <HAL_RCC_GetHCLKFreq>
 800acc4:	4602      	mov	r2, r0
 800acc6:	4b06      	ldr	r3, [pc, #24]	; (800ace0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800acc8:	689b      	ldr	r3, [r3, #8]
 800acca:	0adb      	lsrs	r3, r3, #11
 800accc:	f003 0307 	and.w	r3, r3, #7
 800acd0:	4904      	ldr	r1, [pc, #16]	; (800ace4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800acd2:	5ccb      	ldrb	r3, [r1, r3]
 800acd4:	f003 031f 	and.w	r3, r3, #31
 800acd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800acdc:	4618      	mov	r0, r3
 800acde:	bd80      	pop	{r7, pc}
 800ace0:	40021000 	.word	0x40021000
 800ace4:	0800f790 	.word	0x0800f790

0800ace8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b086      	sub	sp, #24
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800acf0:	2300      	movs	r3, #0
 800acf2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800acf4:	4b2a      	ldr	r3, [pc, #168]	; (800ada0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800acf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d003      	beq.n	800ad08 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800ad00:	f7ff f9b6 	bl	800a070 <HAL_PWREx_GetVoltageRange>
 800ad04:	6178      	str	r0, [r7, #20]
 800ad06:	e014      	b.n	800ad32 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800ad08:	4b25      	ldr	r3, [pc, #148]	; (800ada0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ad0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad0c:	4a24      	ldr	r2, [pc, #144]	; (800ada0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ad0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad12:	6593      	str	r3, [r2, #88]	; 0x58
 800ad14:	4b22      	ldr	r3, [pc, #136]	; (800ada0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ad16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad1c:	60fb      	str	r3, [r7, #12]
 800ad1e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800ad20:	f7ff f9a6 	bl	800a070 <HAL_PWREx_GetVoltageRange>
 800ad24:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800ad26:	4b1e      	ldr	r3, [pc, #120]	; (800ada0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ad28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad2a:	4a1d      	ldr	r2, [pc, #116]	; (800ada0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ad2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ad30:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad38:	d10b      	bne.n	800ad52 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2b80      	cmp	r3, #128	; 0x80
 800ad3e:	d919      	bls.n	800ad74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2ba0      	cmp	r3, #160	; 0xa0
 800ad44:	d902      	bls.n	800ad4c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800ad46:	2302      	movs	r3, #2
 800ad48:	613b      	str	r3, [r7, #16]
 800ad4a:	e013      	b.n	800ad74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	613b      	str	r3, [r7, #16]
 800ad50:	e010      	b.n	800ad74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2b80      	cmp	r3, #128	; 0x80
 800ad56:	d902      	bls.n	800ad5e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800ad58:	2303      	movs	r3, #3
 800ad5a:	613b      	str	r3, [r7, #16]
 800ad5c:	e00a      	b.n	800ad74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2b80      	cmp	r3, #128	; 0x80
 800ad62:	d102      	bne.n	800ad6a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800ad64:	2302      	movs	r3, #2
 800ad66:	613b      	str	r3, [r7, #16]
 800ad68:	e004      	b.n	800ad74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2b70      	cmp	r3, #112	; 0x70
 800ad6e:	d101      	bne.n	800ad74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800ad70:	2301      	movs	r3, #1
 800ad72:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800ad74:	4b0b      	ldr	r3, [pc, #44]	; (800ada4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f023 0207 	bic.w	r2, r3, #7
 800ad7c:	4909      	ldr	r1, [pc, #36]	; (800ada4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	4313      	orrs	r3, r2
 800ad82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800ad84:	4b07      	ldr	r3, [pc, #28]	; (800ada4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f003 0307 	and.w	r3, r3, #7
 800ad8c:	693a      	ldr	r2, [r7, #16]
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	d001      	beq.n	800ad96 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800ad92:	2301      	movs	r3, #1
 800ad94:	e000      	b.n	800ad98 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800ad96:	2300      	movs	r3, #0
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	3718      	adds	r7, #24
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}
 800ada0:	40021000 	.word	0x40021000
 800ada4:	40022000 	.word	0x40022000

0800ada8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b086      	sub	sp, #24
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800adb0:	2300      	movs	r3, #0
 800adb2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800adb4:	2300      	movs	r3, #0
 800adb6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d031      	beq.n	800ae28 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adc8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800adcc:	d01a      	beq.n	800ae04 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800adce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800add2:	d814      	bhi.n	800adfe <HAL_RCCEx_PeriphCLKConfig+0x56>
 800add4:	2b00      	cmp	r3, #0
 800add6:	d009      	beq.n	800adec <HAL_RCCEx_PeriphCLKConfig+0x44>
 800add8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800addc:	d10f      	bne.n	800adfe <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800adde:	4b5d      	ldr	r3, [pc, #372]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ade0:	68db      	ldr	r3, [r3, #12]
 800ade2:	4a5c      	ldr	r2, [pc, #368]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ade4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ade8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800adea:	e00c      	b.n	800ae06 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	3304      	adds	r3, #4
 800adf0:	2100      	movs	r1, #0
 800adf2:	4618      	mov	r0, r3
 800adf4:	f000 fa22 	bl	800b23c <RCCEx_PLLSAI1_Config>
 800adf8:	4603      	mov	r3, r0
 800adfa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800adfc:	e003      	b.n	800ae06 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800adfe:	2301      	movs	r3, #1
 800ae00:	74fb      	strb	r3, [r7, #19]
      break;
 800ae02:	e000      	b.n	800ae06 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800ae04:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae06:	7cfb      	ldrb	r3, [r7, #19]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d10b      	bne.n	800ae24 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ae0c:	4b51      	ldr	r3, [pc, #324]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ae0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae12:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae1a:	494e      	ldr	r1, [pc, #312]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ae1c:	4313      	orrs	r3, r2
 800ae1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800ae22:	e001      	b.n	800ae28 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae24:	7cfb      	ldrb	r3, [r7, #19]
 800ae26:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	f000 809e 	beq.w	800af72 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ae36:	2300      	movs	r3, #0
 800ae38:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800ae3a:	4b46      	ldr	r3, [pc, #280]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ae3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d101      	bne.n	800ae4a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800ae46:	2301      	movs	r3, #1
 800ae48:	e000      	b.n	800ae4c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d00d      	beq.n	800ae6c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ae50:	4b40      	ldr	r3, [pc, #256]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ae52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae54:	4a3f      	ldr	r2, [pc, #252]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ae56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae5a:	6593      	str	r3, [r2, #88]	; 0x58
 800ae5c:	4b3d      	ldr	r3, [pc, #244]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ae5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae64:	60bb      	str	r3, [r7, #8]
 800ae66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ae68:	2301      	movs	r3, #1
 800ae6a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ae6c:	4b3a      	ldr	r3, [pc, #232]	; (800af58 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	4a39      	ldr	r2, [pc, #228]	; (800af58 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800ae72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae76:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ae78:	f7fe fc68 	bl	800974c <HAL_GetTick>
 800ae7c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800ae7e:	e009      	b.n	800ae94 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ae80:	f7fe fc64 	bl	800974c <HAL_GetTick>
 800ae84:	4602      	mov	r2, r0
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	1ad3      	subs	r3, r2, r3
 800ae8a:	2b02      	cmp	r3, #2
 800ae8c:	d902      	bls.n	800ae94 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800ae8e:	2303      	movs	r3, #3
 800ae90:	74fb      	strb	r3, [r7, #19]
        break;
 800ae92:	e005      	b.n	800aea0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800ae94:	4b30      	ldr	r3, [pc, #192]	; (800af58 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d0ef      	beq.n	800ae80 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800aea0:	7cfb      	ldrb	r3, [r7, #19]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d15a      	bne.n	800af5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800aea6:	4b2b      	ldr	r3, [pc, #172]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800aea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aeac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aeb0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d01e      	beq.n	800aef6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aebc:	697a      	ldr	r2, [r7, #20]
 800aebe:	429a      	cmp	r2, r3
 800aec0:	d019      	beq.n	800aef6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800aec2:	4b24      	ldr	r3, [pc, #144]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800aec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aecc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800aece:	4b21      	ldr	r3, [pc, #132]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800aed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aed4:	4a1f      	ldr	r2, [pc, #124]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800aed6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aeda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800aede:	4b1d      	ldr	r3, [pc, #116]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800aee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aee4:	4a1b      	ldr	r2, [pc, #108]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800aee6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aeea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800aeee:	4a19      	ldr	r2, [pc, #100]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	f003 0301 	and.w	r3, r3, #1
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d016      	beq.n	800af2e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af00:	f7fe fc24 	bl	800974c <HAL_GetTick>
 800af04:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800af06:	e00b      	b.n	800af20 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af08:	f7fe fc20 	bl	800974c <HAL_GetTick>
 800af0c:	4602      	mov	r2, r0
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	1ad3      	subs	r3, r2, r3
 800af12:	f241 3288 	movw	r2, #5000	; 0x1388
 800af16:	4293      	cmp	r3, r2
 800af18:	d902      	bls.n	800af20 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800af1a:	2303      	movs	r3, #3
 800af1c:	74fb      	strb	r3, [r7, #19]
            break;
 800af1e:	e006      	b.n	800af2e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800af20:	4b0c      	ldr	r3, [pc, #48]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800af22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af26:	f003 0302 	and.w	r3, r3, #2
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d0ec      	beq.n	800af08 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800af2e:	7cfb      	ldrb	r3, [r7, #19]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d10b      	bne.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800af34:	4b07      	ldr	r3, [pc, #28]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800af36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af42:	4904      	ldr	r1, [pc, #16]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800af44:	4313      	orrs	r3, r2
 800af46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800af4a:	e009      	b.n	800af60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800af4c:	7cfb      	ldrb	r3, [r7, #19]
 800af4e:	74bb      	strb	r3, [r7, #18]
 800af50:	e006      	b.n	800af60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800af52:	bf00      	nop
 800af54:	40021000 	.word	0x40021000
 800af58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af5c:	7cfb      	ldrb	r3, [r7, #19]
 800af5e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800af60:	7c7b      	ldrb	r3, [r7, #17]
 800af62:	2b01      	cmp	r3, #1
 800af64:	d105      	bne.n	800af72 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800af66:	4b8d      	ldr	r3, [pc, #564]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800af68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af6a:	4a8c      	ldr	r2, [pc, #560]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800af6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800af70:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f003 0301 	and.w	r3, r3, #1
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d00a      	beq.n	800af94 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800af7e:	4b87      	ldr	r3, [pc, #540]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800af80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af84:	f023 0203 	bic.w	r2, r3, #3
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6a1b      	ldr	r3, [r3, #32]
 800af8c:	4983      	ldr	r1, [pc, #524]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800af8e:	4313      	orrs	r3, r2
 800af90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f003 0302 	and.w	r3, r3, #2
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d00a      	beq.n	800afb6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800afa0:	4b7e      	ldr	r3, [pc, #504]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800afa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afa6:	f023 020c 	bic.w	r2, r3, #12
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afae:	497b      	ldr	r1, [pc, #492]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800afb0:	4313      	orrs	r3, r2
 800afb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f003 0304 	and.w	r3, r3, #4
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d00a      	beq.n	800afd8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800afc2:	4b76      	ldr	r3, [pc, #472]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800afc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afc8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afd0:	4972      	ldr	r1, [pc, #456]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800afd2:	4313      	orrs	r3, r2
 800afd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	f003 0320 	and.w	r3, r3, #32
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d00a      	beq.n	800affa <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800afe4:	4b6d      	ldr	r3, [pc, #436]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800afe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aff2:	496a      	ldr	r1, [pc, #424]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800aff4:	4313      	orrs	r3, r2
 800aff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b002:	2b00      	cmp	r3, #0
 800b004:	d00a      	beq.n	800b01c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b006:	4b65      	ldr	r3, [pc, #404]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b00c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b014:	4961      	ldr	r1, [pc, #388]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b016:	4313      	orrs	r3, r2
 800b018:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b024:	2b00      	cmp	r3, #0
 800b026:	d00a      	beq.n	800b03e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b028:	4b5c      	ldr	r3, [pc, #368]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b02a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b02e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b036:	4959      	ldr	r1, [pc, #356]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b038:	4313      	orrs	r3, r2
 800b03a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b046:	2b00      	cmp	r3, #0
 800b048:	d00a      	beq.n	800b060 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b04a:	4b54      	ldr	r3, [pc, #336]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b04c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b050:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b058:	4950      	ldr	r1, [pc, #320]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b05a:	4313      	orrs	r3, r2
 800b05c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d00a      	beq.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b06c:	4b4b      	ldr	r3, [pc, #300]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b06e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b072:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b07a:	4948      	ldr	r1, [pc, #288]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b07c:	4313      	orrs	r3, r2
 800b07e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d00a      	beq.n	800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b08e:	4b43      	ldr	r3, [pc, #268]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b094:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b09c:	493f      	ldr	r1, [pc, #252]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d028      	beq.n	800b102 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b0b0:	4b3a      	ldr	r3, [pc, #232]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b0b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b0be:	4937      	ldr	r1, [pc, #220]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b0c0:	4313      	orrs	r3, r2
 800b0c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b0ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b0ce:	d106      	bne.n	800b0de <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b0d0:	4b32      	ldr	r3, [pc, #200]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b0d2:	68db      	ldr	r3, [r3, #12]
 800b0d4:	4a31      	ldr	r2, [pc, #196]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b0d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b0da:	60d3      	str	r3, [r2, #12]
 800b0dc:	e011      	b.n	800b102 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b0e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b0e6:	d10c      	bne.n	800b102 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	3304      	adds	r3, #4
 800b0ec:	2101      	movs	r1, #1
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f000 f8a4 	bl	800b23c <RCCEx_PLLSAI1_Config>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800b0f8:	7cfb      	ldrb	r3, [r7, #19]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d001      	beq.n	800b102 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 800b0fe:	7cfb      	ldrb	r3, [r7, #19]
 800b100:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d028      	beq.n	800b160 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b10e:	4b23      	ldr	r3, [pc, #140]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b114:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b11c:	491f      	ldr	r1, [pc, #124]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b11e:	4313      	orrs	r3, r2
 800b120:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b128:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b12c:	d106      	bne.n	800b13c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b12e:	4b1b      	ldr	r3, [pc, #108]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b130:	68db      	ldr	r3, [r3, #12]
 800b132:	4a1a      	ldr	r2, [pc, #104]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b134:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b138:	60d3      	str	r3, [r2, #12]
 800b13a:	e011      	b.n	800b160 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b140:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b144:	d10c      	bne.n	800b160 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	3304      	adds	r3, #4
 800b14a:	2101      	movs	r1, #1
 800b14c:	4618      	mov	r0, r3
 800b14e:	f000 f875 	bl	800b23c <RCCEx_PLLSAI1_Config>
 800b152:	4603      	mov	r3, r0
 800b154:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b156:	7cfb      	ldrb	r3, [r7, #19]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d001      	beq.n	800b160 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800b15c:	7cfb      	ldrb	r3, [r7, #19]
 800b15e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d02b      	beq.n	800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b16c:	4b0b      	ldr	r3, [pc, #44]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b16e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b172:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b17a:	4908      	ldr	r1, [pc, #32]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b17c:	4313      	orrs	r3, r2
 800b17e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b186:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b18a:	d109      	bne.n	800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b18c:	4b03      	ldr	r3, [pc, #12]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b18e:	68db      	ldr	r3, [r3, #12]
 800b190:	4a02      	ldr	r2, [pc, #8]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b192:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b196:	60d3      	str	r3, [r2, #12]
 800b198:	e014      	b.n	800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800b19a:	bf00      	nop
 800b19c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b1a8:	d10c      	bne.n	800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	3304      	adds	r3, #4
 800b1ae:	2101      	movs	r1, #1
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f000 f843 	bl	800b23c <RCCEx_PLLSAI1_Config>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b1ba:	7cfb      	ldrb	r3, [r7, #19]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d001      	beq.n	800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 800b1c0:	7cfb      	ldrb	r3, [r7, #19]
 800b1c2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d01c      	beq.n	800b20a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b1d0:	4b19      	ldr	r3, [pc, #100]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b1d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1de:	4916      	ldr	r1, [pc, #88]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b1e0:	4313      	orrs	r3, r2
 800b1e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b1ee:	d10c      	bne.n	800b20a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	3304      	adds	r3, #4
 800b1f4:	2102      	movs	r1, #2
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f000 f820 	bl	800b23c <RCCEx_PLLSAI1_Config>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b200:	7cfb      	ldrb	r3, [r7, #19]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d001      	beq.n	800b20a <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 800b206:	7cfb      	ldrb	r3, [r7, #19]
 800b208:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b212:	2b00      	cmp	r3, #0
 800b214:	d00a      	beq.n	800b22c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b216:	4b08      	ldr	r3, [pc, #32]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b21c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b224:	4904      	ldr	r1, [pc, #16]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b226:	4313      	orrs	r3, r2
 800b228:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800b22c:	7cbb      	ldrb	r3, [r7, #18]
}
 800b22e:	4618      	mov	r0, r3
 800b230:	3718      	adds	r7, #24
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}
 800b236:	bf00      	nop
 800b238:	40021000 	.word	0x40021000

0800b23c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b084      	sub	sp, #16
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b246:	2300      	movs	r3, #0
 800b248:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b24a:	4b74      	ldr	r3, [pc, #464]	; (800b41c <RCCEx_PLLSAI1_Config+0x1e0>)
 800b24c:	68db      	ldr	r3, [r3, #12]
 800b24e:	f003 0303 	and.w	r3, r3, #3
 800b252:	2b00      	cmp	r3, #0
 800b254:	d018      	beq.n	800b288 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800b256:	4b71      	ldr	r3, [pc, #452]	; (800b41c <RCCEx_PLLSAI1_Config+0x1e0>)
 800b258:	68db      	ldr	r3, [r3, #12]
 800b25a:	f003 0203 	and.w	r2, r3, #3
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	429a      	cmp	r2, r3
 800b264:	d10d      	bne.n	800b282 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
       ||
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d009      	beq.n	800b282 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800b26e:	4b6b      	ldr	r3, [pc, #428]	; (800b41c <RCCEx_PLLSAI1_Config+0x1e0>)
 800b270:	68db      	ldr	r3, [r3, #12]
 800b272:	091b      	lsrs	r3, r3, #4
 800b274:	f003 0307 	and.w	r3, r3, #7
 800b278:	1c5a      	adds	r2, r3, #1
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	685b      	ldr	r3, [r3, #4]
       ||
 800b27e:	429a      	cmp	r2, r3
 800b280:	d047      	beq.n	800b312 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800b282:	2301      	movs	r3, #1
 800b284:	73fb      	strb	r3, [r7, #15]
 800b286:	e044      	b.n	800b312 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	2b03      	cmp	r3, #3
 800b28e:	d018      	beq.n	800b2c2 <RCCEx_PLLSAI1_Config+0x86>
 800b290:	2b03      	cmp	r3, #3
 800b292:	d825      	bhi.n	800b2e0 <RCCEx_PLLSAI1_Config+0xa4>
 800b294:	2b01      	cmp	r3, #1
 800b296:	d002      	beq.n	800b29e <RCCEx_PLLSAI1_Config+0x62>
 800b298:	2b02      	cmp	r3, #2
 800b29a:	d009      	beq.n	800b2b0 <RCCEx_PLLSAI1_Config+0x74>
 800b29c:	e020      	b.n	800b2e0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b29e:	4b5f      	ldr	r3, [pc, #380]	; (800b41c <RCCEx_PLLSAI1_Config+0x1e0>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f003 0302 	and.w	r3, r3, #2
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d11d      	bne.n	800b2e6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b2ae:	e01a      	b.n	800b2e6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b2b0:	4b5a      	ldr	r3, [pc, #360]	; (800b41c <RCCEx_PLLSAI1_Config+0x1e0>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d116      	bne.n	800b2ea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800b2bc:	2301      	movs	r3, #1
 800b2be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b2c0:	e013      	b.n	800b2ea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b2c2:	4b56      	ldr	r3, [pc, #344]	; (800b41c <RCCEx_PLLSAI1_Config+0x1e0>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d10f      	bne.n	800b2ee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b2ce:	4b53      	ldr	r3, [pc, #332]	; (800b41c <RCCEx_PLLSAI1_Config+0x1e0>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d109      	bne.n	800b2ee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800b2da:	2301      	movs	r3, #1
 800b2dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b2de:	e006      	b.n	800b2ee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	73fb      	strb	r3, [r7, #15]
      break;
 800b2e4:	e004      	b.n	800b2f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b2e6:	bf00      	nop
 800b2e8:	e002      	b.n	800b2f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b2ea:	bf00      	nop
 800b2ec:	e000      	b.n	800b2f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b2ee:	bf00      	nop
    }

    if(status == HAL_OK)
 800b2f0:	7bfb      	ldrb	r3, [r7, #15]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d10d      	bne.n	800b312 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800b2f6:	4b49      	ldr	r3, [pc, #292]	; (800b41c <RCCEx_PLLSAI1_Config+0x1e0>)
 800b2f8:	68db      	ldr	r3, [r3, #12]
 800b2fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6819      	ldr	r1, [r3, #0]
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	685b      	ldr	r3, [r3, #4]
 800b306:	3b01      	subs	r3, #1
 800b308:	011b      	lsls	r3, r3, #4
 800b30a:	430b      	orrs	r3, r1
 800b30c:	4943      	ldr	r1, [pc, #268]	; (800b41c <RCCEx_PLLSAI1_Config+0x1e0>)
 800b30e:	4313      	orrs	r3, r2
 800b310:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800b312:	7bfb      	ldrb	r3, [r7, #15]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d17c      	bne.n	800b412 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800b318:	4b40      	ldr	r3, [pc, #256]	; (800b41c <RCCEx_PLLSAI1_Config+0x1e0>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	4a3f      	ldr	r2, [pc, #252]	; (800b41c <RCCEx_PLLSAI1_Config+0x1e0>)
 800b31e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b322:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b324:	f7fe fa12 	bl	800974c <HAL_GetTick>
 800b328:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b32a:	e009      	b.n	800b340 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b32c:	f7fe fa0e 	bl	800974c <HAL_GetTick>
 800b330:	4602      	mov	r2, r0
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	1ad3      	subs	r3, r2, r3
 800b336:	2b02      	cmp	r3, #2
 800b338:	d902      	bls.n	800b340 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800b33a:	2303      	movs	r3, #3
 800b33c:	73fb      	strb	r3, [r7, #15]
        break;
 800b33e:	e005      	b.n	800b34c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b340:	4b36      	ldr	r3, [pc, #216]	; (800b41c <RCCEx_PLLSAI1_Config+0x1e0>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d1ef      	bne.n	800b32c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800b34c:	7bfb      	ldrb	r3, [r7, #15]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d15f      	bne.n	800b412 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d110      	bne.n	800b37a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b358:	4b30      	ldr	r3, [pc, #192]	; (800b41c <RCCEx_PLLSAI1_Config+0x1e0>)
 800b35a:	691b      	ldr	r3, [r3, #16]
 800b35c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800b360:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b364:	687a      	ldr	r2, [r7, #4]
 800b366:	6892      	ldr	r2, [r2, #8]
 800b368:	0211      	lsls	r1, r2, #8
 800b36a:	687a      	ldr	r2, [r7, #4]
 800b36c:	68d2      	ldr	r2, [r2, #12]
 800b36e:	06d2      	lsls	r2, r2, #27
 800b370:	430a      	orrs	r2, r1
 800b372:	492a      	ldr	r1, [pc, #168]	; (800b41c <RCCEx_PLLSAI1_Config+0x1e0>)
 800b374:	4313      	orrs	r3, r2
 800b376:	610b      	str	r3, [r1, #16]
 800b378:	e027      	b.n	800b3ca <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	d112      	bne.n	800b3a6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b380:	4b26      	ldr	r3, [pc, #152]	; (800b41c <RCCEx_PLLSAI1_Config+0x1e0>)
 800b382:	691b      	ldr	r3, [r3, #16]
 800b384:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800b388:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b38c:	687a      	ldr	r2, [r7, #4]
 800b38e:	6892      	ldr	r2, [r2, #8]
 800b390:	0211      	lsls	r1, r2, #8
 800b392:	687a      	ldr	r2, [r7, #4]
 800b394:	6912      	ldr	r2, [r2, #16]
 800b396:	0852      	lsrs	r2, r2, #1
 800b398:	3a01      	subs	r2, #1
 800b39a:	0552      	lsls	r2, r2, #21
 800b39c:	430a      	orrs	r2, r1
 800b39e:	491f      	ldr	r1, [pc, #124]	; (800b41c <RCCEx_PLLSAI1_Config+0x1e0>)
 800b3a0:	4313      	orrs	r3, r2
 800b3a2:	610b      	str	r3, [r1, #16]
 800b3a4:	e011      	b.n	800b3ca <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b3a6:	4b1d      	ldr	r3, [pc, #116]	; (800b41c <RCCEx_PLLSAI1_Config+0x1e0>)
 800b3a8:	691b      	ldr	r3, [r3, #16]
 800b3aa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800b3ae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b3b2:	687a      	ldr	r2, [r7, #4]
 800b3b4:	6892      	ldr	r2, [r2, #8]
 800b3b6:	0211      	lsls	r1, r2, #8
 800b3b8:	687a      	ldr	r2, [r7, #4]
 800b3ba:	6952      	ldr	r2, [r2, #20]
 800b3bc:	0852      	lsrs	r2, r2, #1
 800b3be:	3a01      	subs	r2, #1
 800b3c0:	0652      	lsls	r2, r2, #25
 800b3c2:	430a      	orrs	r2, r1
 800b3c4:	4915      	ldr	r1, [pc, #84]	; (800b41c <RCCEx_PLLSAI1_Config+0x1e0>)
 800b3c6:	4313      	orrs	r3, r2
 800b3c8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800b3ca:	4b14      	ldr	r3, [pc, #80]	; (800b41c <RCCEx_PLLSAI1_Config+0x1e0>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	4a13      	ldr	r2, [pc, #76]	; (800b41c <RCCEx_PLLSAI1_Config+0x1e0>)
 800b3d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b3d4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b3d6:	f7fe f9b9 	bl	800974c <HAL_GetTick>
 800b3da:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b3dc:	e009      	b.n	800b3f2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b3de:	f7fe f9b5 	bl	800974c <HAL_GetTick>
 800b3e2:	4602      	mov	r2, r0
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	1ad3      	subs	r3, r2, r3
 800b3e8:	2b02      	cmp	r3, #2
 800b3ea:	d902      	bls.n	800b3f2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800b3ec:	2303      	movs	r3, #3
 800b3ee:	73fb      	strb	r3, [r7, #15]
          break;
 800b3f0:	e005      	b.n	800b3fe <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b3f2:	4b0a      	ldr	r3, [pc, #40]	; (800b41c <RCCEx_PLLSAI1_Config+0x1e0>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d0ef      	beq.n	800b3de <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800b3fe:	7bfb      	ldrb	r3, [r7, #15]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d106      	bne.n	800b412 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800b404:	4b05      	ldr	r3, [pc, #20]	; (800b41c <RCCEx_PLLSAI1_Config+0x1e0>)
 800b406:	691a      	ldr	r2, [r3, #16]
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	699b      	ldr	r3, [r3, #24]
 800b40c:	4903      	ldr	r1, [pc, #12]	; (800b41c <RCCEx_PLLSAI1_Config+0x1e0>)
 800b40e:	4313      	orrs	r3, r2
 800b410:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800b412:	7bfb      	ldrb	r3, [r7, #15]
}
 800b414:	4618      	mov	r0, r3
 800b416:	3710      	adds	r7, #16
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}
 800b41c:	40021000 	.word	0x40021000

0800b420 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b084      	sub	sp, #16
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d101      	bne.n	800b432 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b42e:	2301      	movs	r3, #1
 800b430:	e095      	b.n	800b55e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b436:	2b00      	cmp	r3, #0
 800b438:	d108      	bne.n	800b44c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	685b      	ldr	r3, [r3, #4]
 800b43e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b442:	d009      	beq.n	800b458 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2200      	movs	r2, #0
 800b448:	61da      	str	r2, [r3, #28]
 800b44a:	e005      	b.n	800b458 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2200      	movs	r2, #0
 800b450:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2200      	movs	r2, #0
 800b456:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2200      	movs	r2, #0
 800b45c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b464:	b2db      	uxtb	r3, r3
 800b466:	2b00      	cmp	r3, #0
 800b468:	d106      	bne.n	800b478 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2200      	movs	r2, #0
 800b46e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f7f5 ff4e 	bl	8001314 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2202      	movs	r2, #2
 800b47c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	681a      	ldr	r2, [r3, #0]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b48e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	68db      	ldr	r3, [r3, #12]
 800b494:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b498:	d902      	bls.n	800b4a0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b49a:	2300      	movs	r3, #0
 800b49c:	60fb      	str	r3, [r7, #12]
 800b49e:	e002      	b.n	800b4a6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b4a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4a4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	68db      	ldr	r3, [r3, #12]
 800b4aa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b4ae:	d007      	beq.n	800b4c0 <HAL_SPI_Init+0xa0>
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	68db      	ldr	r3, [r3, #12]
 800b4b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b4b8:	d002      	beq.n	800b4c0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2200      	movs	r2, #0
 800b4be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	685b      	ldr	r3, [r3, #4]
 800b4c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	689b      	ldr	r3, [r3, #8]
 800b4cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b4d0:	431a      	orrs	r2, r3
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	691b      	ldr	r3, [r3, #16]
 800b4d6:	f003 0302 	and.w	r3, r3, #2
 800b4da:	431a      	orrs	r2, r3
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	695b      	ldr	r3, [r3, #20]
 800b4e0:	f003 0301 	and.w	r3, r3, #1
 800b4e4:	431a      	orrs	r2, r3
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	699b      	ldr	r3, [r3, #24]
 800b4ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b4ee:	431a      	orrs	r2, r3
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	69db      	ldr	r3, [r3, #28]
 800b4f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b4f8:	431a      	orrs	r2, r3
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6a1b      	ldr	r3, [r3, #32]
 800b4fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b502:	ea42 0103 	orr.w	r1, r2, r3
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b50a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	430a      	orrs	r2, r1
 800b514:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	699b      	ldr	r3, [r3, #24]
 800b51a:	0c1b      	lsrs	r3, r3, #16
 800b51c:	f003 0204 	and.w	r2, r3, #4
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b524:	f003 0310 	and.w	r3, r3, #16
 800b528:	431a      	orrs	r2, r3
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b52e:	f003 0308 	and.w	r3, r3, #8
 800b532:	431a      	orrs	r2, r3
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	68db      	ldr	r3, [r3, #12]
 800b538:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b53c:	ea42 0103 	orr.w	r1, r2, r3
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	430a      	orrs	r2, r1
 800b54c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2200      	movs	r2, #0
 800b552:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2201      	movs	r2, #1
 800b558:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800b55c:	2300      	movs	r3, #0
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3710      	adds	r7, #16
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}

0800b566 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b566:	b580      	push	{r7, lr}
 800b568:	b08a      	sub	sp, #40	; 0x28
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	60f8      	str	r0, [r7, #12]
 800b56e:	60b9      	str	r1, [r7, #8]
 800b570:	607a      	str	r2, [r7, #4]
 800b572:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b574:	2301      	movs	r3, #1
 800b576:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b578:	2300      	movs	r3, #0
 800b57a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b584:	2b01      	cmp	r3, #1
 800b586:	d101      	bne.n	800b58c <HAL_SPI_TransmitReceive+0x26>
 800b588:	2302      	movs	r3, #2
 800b58a:	e1fb      	b.n	800b984 <HAL_SPI_TransmitReceive+0x41e>
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	2201      	movs	r2, #1
 800b590:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b594:	f7fe f8da 	bl	800974c <HAL_GetTick>
 800b598:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b5a0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800b5a8:	887b      	ldrh	r3, [r7, #2]
 800b5aa:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800b5ac:	887b      	ldrh	r3, [r7, #2]
 800b5ae:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b5b0:	7efb      	ldrb	r3, [r7, #27]
 800b5b2:	2b01      	cmp	r3, #1
 800b5b4:	d00e      	beq.n	800b5d4 <HAL_SPI_TransmitReceive+0x6e>
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b5bc:	d106      	bne.n	800b5cc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	689b      	ldr	r3, [r3, #8]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d102      	bne.n	800b5cc <HAL_SPI_TransmitReceive+0x66>
 800b5c6:	7efb      	ldrb	r3, [r7, #27]
 800b5c8:	2b04      	cmp	r3, #4
 800b5ca:	d003      	beq.n	800b5d4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800b5cc:	2302      	movs	r3, #2
 800b5ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800b5d2:	e1cd      	b.n	800b970 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d005      	beq.n	800b5e6 <HAL_SPI_TransmitReceive+0x80>
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d002      	beq.n	800b5e6 <HAL_SPI_TransmitReceive+0x80>
 800b5e0:	887b      	ldrh	r3, [r7, #2]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d103      	bne.n	800b5ee <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800b5ec:	e1c0      	b.n	800b970 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b5f4:	b2db      	uxtb	r3, r3
 800b5f6:	2b04      	cmp	r3, #4
 800b5f8:	d003      	beq.n	800b602 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	2205      	movs	r2, #5
 800b5fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	2200      	movs	r2, #0
 800b606:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	687a      	ldr	r2, [r7, #4]
 800b60c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	887a      	ldrh	r2, [r7, #2]
 800b612:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	887a      	ldrh	r2, [r7, #2]
 800b61a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	68ba      	ldr	r2, [r7, #8]
 800b622:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	887a      	ldrh	r2, [r7, #2]
 800b628:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	887a      	ldrh	r2, [r7, #2]
 800b62e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	2200      	movs	r2, #0
 800b634:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	2200      	movs	r2, #0
 800b63a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	68db      	ldr	r3, [r3, #12]
 800b640:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b644:	d802      	bhi.n	800b64c <HAL_SPI_TransmitReceive+0xe6>
 800b646:	8a3b      	ldrh	r3, [r7, #16]
 800b648:	2b01      	cmp	r3, #1
 800b64a:	d908      	bls.n	800b65e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	685a      	ldr	r2, [r3, #4]
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b65a:	605a      	str	r2, [r3, #4]
 800b65c:	e007      	b.n	800b66e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	685a      	ldr	r2, [r3, #4]
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b66c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b678:	2b40      	cmp	r3, #64	; 0x40
 800b67a:	d007      	beq.n	800b68c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	681a      	ldr	r2, [r3, #0]
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b68a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	68db      	ldr	r3, [r3, #12]
 800b690:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b694:	d97c      	bls.n	800b790 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	685b      	ldr	r3, [r3, #4]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d002      	beq.n	800b6a4 <HAL_SPI_TransmitReceive+0x13e>
 800b69e:	8a7b      	ldrh	r3, [r7, #18]
 800b6a0:	2b01      	cmp	r3, #1
 800b6a2:	d169      	bne.n	800b778 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6a8:	881a      	ldrh	r2, [r3, #0]
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6b4:	1c9a      	adds	r2, r3, #2
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b6be:	b29b      	uxth	r3, r3
 800b6c0:	3b01      	subs	r3, #1
 800b6c2:	b29a      	uxth	r2, r3
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b6c8:	e056      	b.n	800b778 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	689b      	ldr	r3, [r3, #8]
 800b6d0:	f003 0302 	and.w	r3, r3, #2
 800b6d4:	2b02      	cmp	r3, #2
 800b6d6:	d11b      	bne.n	800b710 <HAL_SPI_TransmitReceive+0x1aa>
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b6dc:	b29b      	uxth	r3, r3
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d016      	beq.n	800b710 <HAL_SPI_TransmitReceive+0x1aa>
 800b6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e4:	2b01      	cmp	r3, #1
 800b6e6:	d113      	bne.n	800b710 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6ec:	881a      	ldrh	r2, [r3, #0]
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6f8:	1c9a      	adds	r2, r3, #2
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b702:	b29b      	uxth	r3, r3
 800b704:	3b01      	subs	r3, #1
 800b706:	b29a      	uxth	r2, r3
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b70c:	2300      	movs	r3, #0
 800b70e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	689b      	ldr	r3, [r3, #8]
 800b716:	f003 0301 	and.w	r3, r3, #1
 800b71a:	2b01      	cmp	r3, #1
 800b71c:	d11c      	bne.n	800b758 <HAL_SPI_TransmitReceive+0x1f2>
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b724:	b29b      	uxth	r3, r3
 800b726:	2b00      	cmp	r3, #0
 800b728:	d016      	beq.n	800b758 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	68da      	ldr	r2, [r3, #12]
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b734:	b292      	uxth	r2, r2
 800b736:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b73c:	1c9a      	adds	r2, r3, #2
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b748:	b29b      	uxth	r3, r3
 800b74a:	3b01      	subs	r3, #1
 800b74c:	b29a      	uxth	r2, r3
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b754:	2301      	movs	r3, #1
 800b756:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b758:	f7fd fff8 	bl	800974c <HAL_GetTick>
 800b75c:	4602      	mov	r2, r0
 800b75e:	69fb      	ldr	r3, [r7, #28]
 800b760:	1ad3      	subs	r3, r2, r3
 800b762:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b764:	429a      	cmp	r2, r3
 800b766:	d807      	bhi.n	800b778 <HAL_SPI_TransmitReceive+0x212>
 800b768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b76a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b76e:	d003      	beq.n	800b778 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800b770:	2303      	movs	r3, #3
 800b772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800b776:	e0fb      	b.n	800b970 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b77c:	b29b      	uxth	r3, r3
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d1a3      	bne.n	800b6ca <HAL_SPI_TransmitReceive+0x164>
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b788:	b29b      	uxth	r3, r3
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d19d      	bne.n	800b6ca <HAL_SPI_TransmitReceive+0x164>
 800b78e:	e0df      	b.n	800b950 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	685b      	ldr	r3, [r3, #4]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d003      	beq.n	800b7a0 <HAL_SPI_TransmitReceive+0x23a>
 800b798:	8a7b      	ldrh	r3, [r7, #18]
 800b79a:	2b01      	cmp	r3, #1
 800b79c:	f040 80cb 	bne.w	800b936 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b7a4:	b29b      	uxth	r3, r3
 800b7a6:	2b01      	cmp	r3, #1
 800b7a8:	d912      	bls.n	800b7d0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ae:	881a      	ldrh	r2, [r3, #0]
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ba:	1c9a      	adds	r2, r3, #2
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b7c4:	b29b      	uxth	r3, r3
 800b7c6:	3b02      	subs	r3, #2
 800b7c8:	b29a      	uxth	r2, r3
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b7ce:	e0b2      	b.n	800b936 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	330c      	adds	r3, #12
 800b7da:	7812      	ldrb	r2, [r2, #0]
 800b7dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7e2:	1c5a      	adds	r2, r3, #1
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b7ec:	b29b      	uxth	r3, r3
 800b7ee:	3b01      	subs	r3, #1
 800b7f0:	b29a      	uxth	r2, r3
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b7f6:	e09e      	b.n	800b936 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	689b      	ldr	r3, [r3, #8]
 800b7fe:	f003 0302 	and.w	r3, r3, #2
 800b802:	2b02      	cmp	r3, #2
 800b804:	d134      	bne.n	800b870 <HAL_SPI_TransmitReceive+0x30a>
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b80a:	b29b      	uxth	r3, r3
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d02f      	beq.n	800b870 <HAL_SPI_TransmitReceive+0x30a>
 800b810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b812:	2b01      	cmp	r3, #1
 800b814:	d12c      	bne.n	800b870 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b81a:	b29b      	uxth	r3, r3
 800b81c:	2b01      	cmp	r3, #1
 800b81e:	d912      	bls.n	800b846 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b824:	881a      	ldrh	r2, [r3, #0]
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b830:	1c9a      	adds	r2, r3, #2
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b83a:	b29b      	uxth	r3, r3
 800b83c:	3b02      	subs	r3, #2
 800b83e:	b29a      	uxth	r2, r3
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b844:	e012      	b.n	800b86c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	330c      	adds	r3, #12
 800b850:	7812      	ldrb	r2, [r2, #0]
 800b852:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b858:	1c5a      	adds	r2, r3, #1
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b862:	b29b      	uxth	r3, r3
 800b864:	3b01      	subs	r3, #1
 800b866:	b29a      	uxth	r2, r3
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b86c:	2300      	movs	r3, #0
 800b86e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	689b      	ldr	r3, [r3, #8]
 800b876:	f003 0301 	and.w	r3, r3, #1
 800b87a:	2b01      	cmp	r3, #1
 800b87c:	d148      	bne.n	800b910 <HAL_SPI_TransmitReceive+0x3aa>
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b884:	b29b      	uxth	r3, r3
 800b886:	2b00      	cmp	r3, #0
 800b888:	d042      	beq.n	800b910 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b890:	b29b      	uxth	r3, r3
 800b892:	2b01      	cmp	r3, #1
 800b894:	d923      	bls.n	800b8de <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	68da      	ldr	r2, [r3, #12]
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8a0:	b292      	uxth	r2, r2
 800b8a2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8a8:	1c9a      	adds	r2, r3, #2
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b8b4:	b29b      	uxth	r3, r3
 800b8b6:	3b02      	subs	r3, #2
 800b8b8:	b29a      	uxth	r2, r3
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b8c6:	b29b      	uxth	r3, r3
 800b8c8:	2b01      	cmp	r3, #1
 800b8ca:	d81f      	bhi.n	800b90c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	685a      	ldr	r2, [r3, #4]
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b8da:	605a      	str	r2, [r3, #4]
 800b8dc:	e016      	b.n	800b90c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	f103 020c 	add.w	r2, r3, #12
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8ea:	7812      	ldrb	r2, [r2, #0]
 800b8ec:	b2d2      	uxtb	r2, r2
 800b8ee:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8f4:	1c5a      	adds	r2, r3, #1
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b900:	b29b      	uxth	r3, r3
 800b902:	3b01      	subs	r3, #1
 800b904:	b29a      	uxth	r2, r3
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b90c:	2301      	movs	r3, #1
 800b90e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b910:	f7fd ff1c 	bl	800974c <HAL_GetTick>
 800b914:	4602      	mov	r2, r0
 800b916:	69fb      	ldr	r3, [r7, #28]
 800b918:	1ad3      	subs	r3, r2, r3
 800b91a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d803      	bhi.n	800b928 <HAL_SPI_TransmitReceive+0x3c2>
 800b920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b922:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b926:	d102      	bne.n	800b92e <HAL_SPI_TransmitReceive+0x3c8>
 800b928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d103      	bne.n	800b936 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800b92e:	2303      	movs	r3, #3
 800b930:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800b934:	e01c      	b.n	800b970 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b93a:	b29b      	uxth	r3, r3
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	f47f af5b 	bne.w	800b7f8 <HAL_SPI_TransmitReceive+0x292>
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b948:	b29b      	uxth	r3, r3
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	f47f af54 	bne.w	800b7f8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b950:	69fa      	ldr	r2, [r7, #28]
 800b952:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b954:	68f8      	ldr	r0, [r7, #12]
 800b956:	f000 f937 	bl	800bbc8 <SPI_EndRxTxTransaction>
 800b95a:	4603      	mov	r3, r0
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d006      	beq.n	800b96e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800b960:	2301      	movs	r3, #1
 800b962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	2220      	movs	r2, #32
 800b96a:	661a      	str	r2, [r3, #96]	; 0x60
 800b96c:	e000      	b.n	800b970 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800b96e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	2201      	movs	r2, #1
 800b974:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	2200      	movs	r2, #0
 800b97c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b980:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800b984:	4618      	mov	r0, r3
 800b986:	3728      	adds	r7, #40	; 0x28
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}

0800b98c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b088      	sub	sp, #32
 800b990:	af00      	add	r7, sp, #0
 800b992:	60f8      	str	r0, [r7, #12]
 800b994:	60b9      	str	r1, [r7, #8]
 800b996:	603b      	str	r3, [r7, #0]
 800b998:	4613      	mov	r3, r2
 800b99a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b99c:	f7fd fed6 	bl	800974c <HAL_GetTick>
 800b9a0:	4602      	mov	r2, r0
 800b9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a4:	1a9b      	subs	r3, r3, r2
 800b9a6:	683a      	ldr	r2, [r7, #0]
 800b9a8:	4413      	add	r3, r2
 800b9aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b9ac:	f7fd fece 	bl	800974c <HAL_GetTick>
 800b9b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b9b2:	4b39      	ldr	r3, [pc, #228]	; (800ba98 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	015b      	lsls	r3, r3, #5
 800b9b8:	0d1b      	lsrs	r3, r3, #20
 800b9ba:	69fa      	ldr	r2, [r7, #28]
 800b9bc:	fb02 f303 	mul.w	r3, r2, r3
 800b9c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b9c2:	e054      	b.n	800ba6e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9ca:	d050      	beq.n	800ba6e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b9cc:	f7fd febe 	bl	800974c <HAL_GetTick>
 800b9d0:	4602      	mov	r2, r0
 800b9d2:	69bb      	ldr	r3, [r7, #24]
 800b9d4:	1ad3      	subs	r3, r2, r3
 800b9d6:	69fa      	ldr	r2, [r7, #28]
 800b9d8:	429a      	cmp	r2, r3
 800b9da:	d902      	bls.n	800b9e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b9dc:	69fb      	ldr	r3, [r7, #28]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d13d      	bne.n	800ba5e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	685a      	ldr	r2, [r3, #4]
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b9f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	685b      	ldr	r3, [r3, #4]
 800b9f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b9fa:	d111      	bne.n	800ba20 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	689b      	ldr	r3, [r3, #8]
 800ba00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba04:	d004      	beq.n	800ba10 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	689b      	ldr	r3, [r3, #8]
 800ba0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba0e:	d107      	bne.n	800ba20 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	681a      	ldr	r2, [r3, #0]
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ba1e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba28:	d10f      	bne.n	800ba4a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	681a      	ldr	r2, [r3, #0]
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ba38:	601a      	str	r2, [r3, #0]
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	681a      	ldr	r2, [r3, #0]
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ba48:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	2201      	movs	r2, #1
 800ba4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	2200      	movs	r2, #0
 800ba56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800ba5a:	2303      	movs	r3, #3
 800ba5c:	e017      	b.n	800ba8e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d101      	bne.n	800ba68 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ba64:	2300      	movs	r3, #0
 800ba66:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ba68:	697b      	ldr	r3, [r7, #20]
 800ba6a:	3b01      	subs	r3, #1
 800ba6c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	689a      	ldr	r2, [r3, #8]
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	4013      	ands	r3, r2
 800ba78:	68ba      	ldr	r2, [r7, #8]
 800ba7a:	429a      	cmp	r2, r3
 800ba7c:	bf0c      	ite	eq
 800ba7e:	2301      	moveq	r3, #1
 800ba80:	2300      	movne	r3, #0
 800ba82:	b2db      	uxtb	r3, r3
 800ba84:	461a      	mov	r2, r3
 800ba86:	79fb      	ldrb	r3, [r7, #7]
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	d19b      	bne.n	800b9c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ba8c:	2300      	movs	r3, #0
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3720      	adds	r7, #32
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}
 800ba96:	bf00      	nop
 800ba98:	20000000 	.word	0x20000000

0800ba9c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b08a      	sub	sp, #40	; 0x28
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	60f8      	str	r0, [r7, #12]
 800baa4:	60b9      	str	r1, [r7, #8]
 800baa6:	607a      	str	r2, [r7, #4]
 800baa8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800baaa:	2300      	movs	r3, #0
 800baac:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800baae:	f7fd fe4d 	bl	800974c <HAL_GetTick>
 800bab2:	4602      	mov	r2, r0
 800bab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab6:	1a9b      	subs	r3, r3, r2
 800bab8:	683a      	ldr	r2, [r7, #0]
 800baba:	4413      	add	r3, r2
 800babc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800babe:	f7fd fe45 	bl	800974c <HAL_GetTick>
 800bac2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	330c      	adds	r3, #12
 800baca:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800bacc:	4b3d      	ldr	r3, [pc, #244]	; (800bbc4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800bace:	681a      	ldr	r2, [r3, #0]
 800bad0:	4613      	mov	r3, r2
 800bad2:	009b      	lsls	r3, r3, #2
 800bad4:	4413      	add	r3, r2
 800bad6:	00da      	lsls	r2, r3, #3
 800bad8:	1ad3      	subs	r3, r2, r3
 800bada:	0d1b      	lsrs	r3, r3, #20
 800badc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bade:	fb02 f303 	mul.w	r3, r2, r3
 800bae2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800bae4:	e060      	b.n	800bba8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800baec:	d107      	bne.n	800bafe <SPI_WaitFifoStateUntilTimeout+0x62>
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d104      	bne.n	800bafe <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800baf4:	69fb      	ldr	r3, [r7, #28]
 800baf6:	781b      	ldrb	r3, [r3, #0]
 800baf8:	b2db      	uxtb	r3, r3
 800bafa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800bafc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb04:	d050      	beq.n	800bba8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bb06:	f7fd fe21 	bl	800974c <HAL_GetTick>
 800bb0a:	4602      	mov	r2, r0
 800bb0c:	6a3b      	ldr	r3, [r7, #32]
 800bb0e:	1ad3      	subs	r3, r2, r3
 800bb10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d902      	bls.n	800bb1c <SPI_WaitFifoStateUntilTimeout+0x80>
 800bb16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d13d      	bne.n	800bb98 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	685a      	ldr	r2, [r3, #4]
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bb2a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	685b      	ldr	r3, [r3, #4]
 800bb30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bb34:	d111      	bne.n	800bb5a <SPI_WaitFifoStateUntilTimeout+0xbe>
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	689b      	ldr	r3, [r3, #8]
 800bb3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb3e:	d004      	beq.n	800bb4a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	689b      	ldr	r3, [r3, #8]
 800bb44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb48:	d107      	bne.n	800bb5a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	681a      	ldr	r2, [r3, #0]
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb58:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb62:	d10f      	bne.n	800bb84 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	681a      	ldr	r2, [r3, #0]
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bb72:	601a      	str	r2, [r3, #0]
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	681a      	ldr	r2, [r3, #0]
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bb82:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	2201      	movs	r2, #1
 800bb88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	2200      	movs	r2, #0
 800bb90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800bb94:	2303      	movs	r3, #3
 800bb96:	e010      	b.n	800bbba <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800bb98:	69bb      	ldr	r3, [r7, #24]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d101      	bne.n	800bba2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800bba2:	69bb      	ldr	r3, [r7, #24]
 800bba4:	3b01      	subs	r3, #1
 800bba6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	689a      	ldr	r2, [r3, #8]
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	4013      	ands	r3, r2
 800bbb2:	687a      	ldr	r2, [r7, #4]
 800bbb4:	429a      	cmp	r2, r3
 800bbb6:	d196      	bne.n	800bae6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800bbb8:	2300      	movs	r3, #0
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	3728      	adds	r7, #40	; 0x28
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}
 800bbc2:	bf00      	nop
 800bbc4:	20000000 	.word	0x20000000

0800bbc8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b086      	sub	sp, #24
 800bbcc:	af02      	add	r7, sp, #8
 800bbce:	60f8      	str	r0, [r7, #12]
 800bbd0:	60b9      	str	r1, [r7, #8]
 800bbd2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	9300      	str	r3, [sp, #0]
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800bbe0:	68f8      	ldr	r0, [r7, #12]
 800bbe2:	f7ff ff5b 	bl	800ba9c <SPI_WaitFifoStateUntilTimeout>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d007      	beq.n	800bbfc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bbf0:	f043 0220 	orr.w	r2, r3, #32
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800bbf8:	2303      	movs	r3, #3
 800bbfa:	e027      	b.n	800bc4c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	9300      	str	r3, [sp, #0]
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	2200      	movs	r2, #0
 800bc04:	2180      	movs	r1, #128	; 0x80
 800bc06:	68f8      	ldr	r0, [r7, #12]
 800bc08:	f7ff fec0 	bl	800b98c <SPI_WaitFlagStateUntilTimeout>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d007      	beq.n	800bc22 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc16:	f043 0220 	orr.w	r2, r3, #32
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800bc1e:	2303      	movs	r3, #3
 800bc20:	e014      	b.n	800bc4c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	9300      	str	r3, [sp, #0]
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	2200      	movs	r2, #0
 800bc2a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800bc2e:	68f8      	ldr	r0, [r7, #12]
 800bc30:	f7ff ff34 	bl	800ba9c <SPI_WaitFifoStateUntilTimeout>
 800bc34:	4603      	mov	r3, r0
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d007      	beq.n	800bc4a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc3e:	f043 0220 	orr.w	r2, r3, #32
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800bc46:	2303      	movs	r3, #3
 800bc48:	e000      	b.n	800bc4c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800bc4a:	2300      	movs	r3, #0
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3710      	adds	r7, #16
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}

0800bc54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b082      	sub	sp, #8
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d101      	bne.n	800bc66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bc62:	2301      	movs	r3, #1
 800bc64:	e049      	b.n	800bcfa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc6c:	b2db      	uxtb	r3, r3
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d106      	bne.n	800bc80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2200      	movs	r2, #0
 800bc76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f7f5 fbc0 	bl	8001400 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2202      	movs	r2, #2
 800bc84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681a      	ldr	r2, [r3, #0]
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	3304      	adds	r3, #4
 800bc90:	4619      	mov	r1, r3
 800bc92:	4610      	mov	r0, r2
 800bc94:	f000 fae6 	bl	800c264 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2201      	movs	r2, #1
 800bc9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2201      	movs	r2, #1
 800bca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2201      	movs	r2, #1
 800bcac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2201      	movs	r2, #1
 800bcb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2201      	movs	r2, #1
 800bcbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2201      	movs	r2, #1
 800bcc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2201      	movs	r2, #1
 800bccc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2201      	movs	r2, #1
 800bcd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2201      	movs	r2, #1
 800bcdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2201      	movs	r2, #1
 800bce4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2201      	movs	r2, #1
 800bcec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2201      	movs	r2, #1
 800bcf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bcf8:	2300      	movs	r3, #0
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3708      	adds	r7, #8
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}
	...

0800bd04 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b085      	sub	sp, #20
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd12:	b2db      	uxtb	r3, r3
 800bd14:	2b01      	cmp	r3, #1
 800bd16:	d001      	beq.n	800bd1c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800bd18:	2301      	movs	r3, #1
 800bd1a:	e033      	b.n	800bd84 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2202      	movs	r2, #2
 800bd20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	4a19      	ldr	r2, [pc, #100]	; (800bd90 <HAL_TIM_Base_Start+0x8c>)
 800bd2a:	4293      	cmp	r3, r2
 800bd2c:	d009      	beq.n	800bd42 <HAL_TIM_Base_Start+0x3e>
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd36:	d004      	beq.n	800bd42 <HAL_TIM_Base_Start+0x3e>
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	4a15      	ldr	r2, [pc, #84]	; (800bd94 <HAL_TIM_Base_Start+0x90>)
 800bd3e:	4293      	cmp	r3, r2
 800bd40:	d115      	bne.n	800bd6e <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	689a      	ldr	r2, [r3, #8]
 800bd48:	4b13      	ldr	r3, [pc, #76]	; (800bd98 <HAL_TIM_Base_Start+0x94>)
 800bd4a:	4013      	ands	r3, r2
 800bd4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	2b06      	cmp	r3, #6
 800bd52:	d015      	beq.n	800bd80 <HAL_TIM_Base_Start+0x7c>
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd5a:	d011      	beq.n	800bd80 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	681a      	ldr	r2, [r3, #0]
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	f042 0201 	orr.w	r2, r2, #1
 800bd6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd6c:	e008      	b.n	800bd80 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	681a      	ldr	r2, [r3, #0]
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	f042 0201 	orr.w	r2, r2, #1
 800bd7c:	601a      	str	r2, [r3, #0]
 800bd7e:	e000      	b.n	800bd82 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd80:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bd82:	2300      	movs	r3, #0
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	3714      	adds	r7, #20
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8e:	4770      	bx	lr
 800bd90:	40012c00 	.word	0x40012c00
 800bd94:	40014000 	.word	0x40014000
 800bd98:	00010007 	.word	0x00010007

0800bd9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	b085      	sub	sp, #20
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bdaa:	b2db      	uxtb	r3, r3
 800bdac:	2b01      	cmp	r3, #1
 800bdae:	d001      	beq.n	800bdb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	e03b      	b.n	800be2c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2202      	movs	r2, #2
 800bdb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	68da      	ldr	r2, [r3, #12]
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f042 0201 	orr.w	r2, r2, #1
 800bdca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	4a19      	ldr	r2, [pc, #100]	; (800be38 <HAL_TIM_Base_Start_IT+0x9c>)
 800bdd2:	4293      	cmp	r3, r2
 800bdd4:	d009      	beq.n	800bdea <HAL_TIM_Base_Start_IT+0x4e>
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdde:	d004      	beq.n	800bdea <HAL_TIM_Base_Start_IT+0x4e>
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	4a15      	ldr	r2, [pc, #84]	; (800be3c <HAL_TIM_Base_Start_IT+0xa0>)
 800bde6:	4293      	cmp	r3, r2
 800bde8:	d115      	bne.n	800be16 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	689a      	ldr	r2, [r3, #8]
 800bdf0:	4b13      	ldr	r3, [pc, #76]	; (800be40 <HAL_TIM_Base_Start_IT+0xa4>)
 800bdf2:	4013      	ands	r3, r2
 800bdf4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	2b06      	cmp	r3, #6
 800bdfa:	d015      	beq.n	800be28 <HAL_TIM_Base_Start_IT+0x8c>
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be02:	d011      	beq.n	800be28 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	681a      	ldr	r2, [r3, #0]
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f042 0201 	orr.w	r2, r2, #1
 800be12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be14:	e008      	b.n	800be28 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	681a      	ldr	r2, [r3, #0]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f042 0201 	orr.w	r2, r2, #1
 800be24:	601a      	str	r2, [r3, #0]
 800be26:	e000      	b.n	800be2a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be28:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800be2a:	2300      	movs	r3, #0
}
 800be2c:	4618      	mov	r0, r3
 800be2e:	3714      	adds	r7, #20
 800be30:	46bd      	mov	sp, r7
 800be32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be36:	4770      	bx	lr
 800be38:	40012c00 	.word	0x40012c00
 800be3c:	40014000 	.word	0x40014000
 800be40:	00010007 	.word	0x00010007

0800be44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b082      	sub	sp, #8
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	691b      	ldr	r3, [r3, #16]
 800be52:	f003 0302 	and.w	r3, r3, #2
 800be56:	2b02      	cmp	r3, #2
 800be58:	d122      	bne.n	800bea0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	68db      	ldr	r3, [r3, #12]
 800be60:	f003 0302 	and.w	r3, r3, #2
 800be64:	2b02      	cmp	r3, #2
 800be66:	d11b      	bne.n	800bea0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	f06f 0202 	mvn.w	r2, #2
 800be70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2201      	movs	r2, #1
 800be76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	699b      	ldr	r3, [r3, #24]
 800be7e:	f003 0303 	and.w	r3, r3, #3
 800be82:	2b00      	cmp	r3, #0
 800be84:	d003      	beq.n	800be8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f000 f9ce 	bl	800c228 <HAL_TIM_IC_CaptureCallback>
 800be8c:	e005      	b.n	800be9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f000 f9c0 	bl	800c214 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be94:	6878      	ldr	r0, [r7, #4]
 800be96:	f000 f9d1 	bl	800c23c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2200      	movs	r2, #0
 800be9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	691b      	ldr	r3, [r3, #16]
 800bea6:	f003 0304 	and.w	r3, r3, #4
 800beaa:	2b04      	cmp	r3, #4
 800beac:	d122      	bne.n	800bef4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	68db      	ldr	r3, [r3, #12]
 800beb4:	f003 0304 	and.w	r3, r3, #4
 800beb8:	2b04      	cmp	r3, #4
 800beba:	d11b      	bne.n	800bef4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	f06f 0204 	mvn.w	r2, #4
 800bec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2202      	movs	r2, #2
 800beca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	699b      	ldr	r3, [r3, #24]
 800bed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d003      	beq.n	800bee2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f000 f9a4 	bl	800c228 <HAL_TIM_IC_CaptureCallback>
 800bee0:	e005      	b.n	800beee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f000 f996 	bl	800c214 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f000 f9a7 	bl	800c23c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2200      	movs	r2, #0
 800bef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	691b      	ldr	r3, [r3, #16]
 800befa:	f003 0308 	and.w	r3, r3, #8
 800befe:	2b08      	cmp	r3, #8
 800bf00:	d122      	bne.n	800bf48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	68db      	ldr	r3, [r3, #12]
 800bf08:	f003 0308 	and.w	r3, r3, #8
 800bf0c:	2b08      	cmp	r3, #8
 800bf0e:	d11b      	bne.n	800bf48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	f06f 0208 	mvn.w	r2, #8
 800bf18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2204      	movs	r2, #4
 800bf1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	69db      	ldr	r3, [r3, #28]
 800bf26:	f003 0303 	and.w	r3, r3, #3
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d003      	beq.n	800bf36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f000 f97a 	bl	800c228 <HAL_TIM_IC_CaptureCallback>
 800bf34:	e005      	b.n	800bf42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f000 f96c 	bl	800c214 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	f000 f97d 	bl	800c23c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2200      	movs	r2, #0
 800bf46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	691b      	ldr	r3, [r3, #16]
 800bf4e:	f003 0310 	and.w	r3, r3, #16
 800bf52:	2b10      	cmp	r3, #16
 800bf54:	d122      	bne.n	800bf9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	68db      	ldr	r3, [r3, #12]
 800bf5c:	f003 0310 	and.w	r3, r3, #16
 800bf60:	2b10      	cmp	r3, #16
 800bf62:	d11b      	bne.n	800bf9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	f06f 0210 	mvn.w	r2, #16
 800bf6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2208      	movs	r2, #8
 800bf72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	69db      	ldr	r3, [r3, #28]
 800bf7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d003      	beq.n	800bf8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f000 f950 	bl	800c228 <HAL_TIM_IC_CaptureCallback>
 800bf88:	e005      	b.n	800bf96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f000 f942 	bl	800c214 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f000 f953 	bl	800c23c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	691b      	ldr	r3, [r3, #16]
 800bfa2:	f003 0301 	and.w	r3, r3, #1
 800bfa6:	2b01      	cmp	r3, #1
 800bfa8:	d10e      	bne.n	800bfc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	68db      	ldr	r3, [r3, #12]
 800bfb0:	f003 0301 	and.w	r3, r3, #1
 800bfb4:	2b01      	cmp	r3, #1
 800bfb6:	d107      	bne.n	800bfc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	f06f 0201 	mvn.w	r2, #1
 800bfc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f7f4 fb52 	bl	800066c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	691b      	ldr	r3, [r3, #16]
 800bfce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfd2:	2b80      	cmp	r3, #128	; 0x80
 800bfd4:	d10e      	bne.n	800bff4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	68db      	ldr	r3, [r3, #12]
 800bfdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfe0:	2b80      	cmp	r3, #128	; 0x80
 800bfe2:	d107      	bne.n	800bff4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bfec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f000 faa6 	bl	800c540 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	691b      	ldr	r3, [r3, #16]
 800bffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bffe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c002:	d10e      	bne.n	800c022 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	68db      	ldr	r3, [r3, #12]
 800c00a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c00e:	2b80      	cmp	r3, #128	; 0x80
 800c010:	d107      	bne.n	800c022 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c01a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f000 fa99 	bl	800c554 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	691b      	ldr	r3, [r3, #16]
 800c028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c02c:	2b40      	cmp	r3, #64	; 0x40
 800c02e:	d10e      	bne.n	800c04e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	68db      	ldr	r3, [r3, #12]
 800c036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c03a:	2b40      	cmp	r3, #64	; 0x40
 800c03c:	d107      	bne.n	800c04e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f000 f901 	bl	800c250 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	691b      	ldr	r3, [r3, #16]
 800c054:	f003 0320 	and.w	r3, r3, #32
 800c058:	2b20      	cmp	r3, #32
 800c05a:	d10e      	bne.n	800c07a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	68db      	ldr	r3, [r3, #12]
 800c062:	f003 0320 	and.w	r3, r3, #32
 800c066:	2b20      	cmp	r3, #32
 800c068:	d107      	bne.n	800c07a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	f06f 0220 	mvn.w	r2, #32
 800c072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c074:	6878      	ldr	r0, [r7, #4]
 800c076:	f000 fa59 	bl	800c52c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c07a:	bf00      	nop
 800c07c:	3708      	adds	r7, #8
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}

0800c082 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c082:	b580      	push	{r7, lr}
 800c084:	b084      	sub	sp, #16
 800c086:	af00      	add	r7, sp, #0
 800c088:	6078      	str	r0, [r7, #4]
 800c08a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c08c:	2300      	movs	r3, #0
 800c08e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c096:	2b01      	cmp	r3, #1
 800c098:	d101      	bne.n	800c09e <HAL_TIM_ConfigClockSource+0x1c>
 800c09a:	2302      	movs	r3, #2
 800c09c:	e0b6      	b.n	800c20c <HAL_TIM_ConfigClockSource+0x18a>
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2201      	movs	r2, #1
 800c0a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2202      	movs	r2, #2
 800c0aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	689b      	ldr	r3, [r3, #8]
 800c0b4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c0b6:	68bb      	ldr	r3, [r7, #8]
 800c0b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c0bc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c0c0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c0c8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	68ba      	ldr	r2, [r7, #8]
 800c0d0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c0da:	d03e      	beq.n	800c15a <HAL_TIM_ConfigClockSource+0xd8>
 800c0dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c0e0:	f200 8087 	bhi.w	800c1f2 <HAL_TIM_ConfigClockSource+0x170>
 800c0e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0e8:	f000 8086 	beq.w	800c1f8 <HAL_TIM_ConfigClockSource+0x176>
 800c0ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0f0:	d87f      	bhi.n	800c1f2 <HAL_TIM_ConfigClockSource+0x170>
 800c0f2:	2b70      	cmp	r3, #112	; 0x70
 800c0f4:	d01a      	beq.n	800c12c <HAL_TIM_ConfigClockSource+0xaa>
 800c0f6:	2b70      	cmp	r3, #112	; 0x70
 800c0f8:	d87b      	bhi.n	800c1f2 <HAL_TIM_ConfigClockSource+0x170>
 800c0fa:	2b60      	cmp	r3, #96	; 0x60
 800c0fc:	d050      	beq.n	800c1a0 <HAL_TIM_ConfigClockSource+0x11e>
 800c0fe:	2b60      	cmp	r3, #96	; 0x60
 800c100:	d877      	bhi.n	800c1f2 <HAL_TIM_ConfigClockSource+0x170>
 800c102:	2b50      	cmp	r3, #80	; 0x50
 800c104:	d03c      	beq.n	800c180 <HAL_TIM_ConfigClockSource+0xfe>
 800c106:	2b50      	cmp	r3, #80	; 0x50
 800c108:	d873      	bhi.n	800c1f2 <HAL_TIM_ConfigClockSource+0x170>
 800c10a:	2b40      	cmp	r3, #64	; 0x40
 800c10c:	d058      	beq.n	800c1c0 <HAL_TIM_ConfigClockSource+0x13e>
 800c10e:	2b40      	cmp	r3, #64	; 0x40
 800c110:	d86f      	bhi.n	800c1f2 <HAL_TIM_ConfigClockSource+0x170>
 800c112:	2b30      	cmp	r3, #48	; 0x30
 800c114:	d064      	beq.n	800c1e0 <HAL_TIM_ConfigClockSource+0x15e>
 800c116:	2b30      	cmp	r3, #48	; 0x30
 800c118:	d86b      	bhi.n	800c1f2 <HAL_TIM_ConfigClockSource+0x170>
 800c11a:	2b20      	cmp	r3, #32
 800c11c:	d060      	beq.n	800c1e0 <HAL_TIM_ConfigClockSource+0x15e>
 800c11e:	2b20      	cmp	r3, #32
 800c120:	d867      	bhi.n	800c1f2 <HAL_TIM_ConfigClockSource+0x170>
 800c122:	2b00      	cmp	r3, #0
 800c124:	d05c      	beq.n	800c1e0 <HAL_TIM_ConfigClockSource+0x15e>
 800c126:	2b10      	cmp	r3, #16
 800c128:	d05a      	beq.n	800c1e0 <HAL_TIM_ConfigClockSource+0x15e>
 800c12a:	e062      	b.n	800c1f2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6818      	ldr	r0, [r3, #0]
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	6899      	ldr	r1, [r3, #8]
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	685a      	ldr	r2, [r3, #4]
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	68db      	ldr	r3, [r3, #12]
 800c13c:	f000 f970 	bl	800c420 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	689b      	ldr	r3, [r3, #8]
 800c146:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c14e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	68ba      	ldr	r2, [r7, #8]
 800c156:	609a      	str	r2, [r3, #8]
      break;
 800c158:	e04f      	b.n	800c1fa <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6818      	ldr	r0, [r3, #0]
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	6899      	ldr	r1, [r3, #8]
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	685a      	ldr	r2, [r3, #4]
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	68db      	ldr	r3, [r3, #12]
 800c16a:	f000 f959 	bl	800c420 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	689a      	ldr	r2, [r3, #8]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c17c:	609a      	str	r2, [r3, #8]
      break;
 800c17e:	e03c      	b.n	800c1fa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	6818      	ldr	r0, [r3, #0]
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	6859      	ldr	r1, [r3, #4]
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	68db      	ldr	r3, [r3, #12]
 800c18c:	461a      	mov	r2, r3
 800c18e:	f000 f8cd 	bl	800c32c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	2150      	movs	r1, #80	; 0x50
 800c198:	4618      	mov	r0, r3
 800c19a:	f000 f926 	bl	800c3ea <TIM_ITRx_SetConfig>
      break;
 800c19e:	e02c      	b.n	800c1fa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6818      	ldr	r0, [r3, #0]
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	6859      	ldr	r1, [r3, #4]
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	68db      	ldr	r3, [r3, #12]
 800c1ac:	461a      	mov	r2, r3
 800c1ae:	f000 f8ec 	bl	800c38a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	2160      	movs	r1, #96	; 0x60
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	f000 f916 	bl	800c3ea <TIM_ITRx_SetConfig>
      break;
 800c1be:	e01c      	b.n	800c1fa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	6818      	ldr	r0, [r3, #0]
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	6859      	ldr	r1, [r3, #4]
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	68db      	ldr	r3, [r3, #12]
 800c1cc:	461a      	mov	r2, r3
 800c1ce:	f000 f8ad 	bl	800c32c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	2140      	movs	r1, #64	; 0x40
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f000 f906 	bl	800c3ea <TIM_ITRx_SetConfig>
      break;
 800c1de:	e00c      	b.n	800c1fa <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681a      	ldr	r2, [r3, #0]
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	4619      	mov	r1, r3
 800c1ea:	4610      	mov	r0, r2
 800c1ec:	f000 f8fd 	bl	800c3ea <TIM_ITRx_SetConfig>
      break;
 800c1f0:	e003      	b.n	800c1fa <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	73fb      	strb	r3, [r7, #15]
      break;
 800c1f6:	e000      	b.n	800c1fa <HAL_TIM_ConfigClockSource+0x178>
      break;
 800c1f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2201      	movs	r2, #1
 800c1fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2200      	movs	r2, #0
 800c206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c20a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	3710      	adds	r7, #16
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}

0800c214 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c214:	b480      	push	{r7}
 800c216:	b083      	sub	sp, #12
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c21c:	bf00      	nop
 800c21e:	370c      	adds	r7, #12
 800c220:	46bd      	mov	sp, r7
 800c222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c226:	4770      	bx	lr

0800c228 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c228:	b480      	push	{r7}
 800c22a:	b083      	sub	sp, #12
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c230:	bf00      	nop
 800c232:	370c      	adds	r7, #12
 800c234:	46bd      	mov	sp, r7
 800c236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23a:	4770      	bx	lr

0800c23c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c23c:	b480      	push	{r7}
 800c23e:	b083      	sub	sp, #12
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c244:	bf00      	nop
 800c246:	370c      	adds	r7, #12
 800c248:	46bd      	mov	sp, r7
 800c24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24e:	4770      	bx	lr

0800c250 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c250:	b480      	push	{r7}
 800c252:	b083      	sub	sp, #12
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c258:	bf00      	nop
 800c25a:	370c      	adds	r7, #12
 800c25c:	46bd      	mov	sp, r7
 800c25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c262:	4770      	bx	lr

0800c264 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c264:	b480      	push	{r7}
 800c266:	b085      	sub	sp, #20
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
 800c26c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	4a2a      	ldr	r2, [pc, #168]	; (800c320 <TIM_Base_SetConfig+0xbc>)
 800c278:	4293      	cmp	r3, r2
 800c27a:	d003      	beq.n	800c284 <TIM_Base_SetConfig+0x20>
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c282:	d108      	bne.n	800c296 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c28a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	685b      	ldr	r3, [r3, #4]
 800c290:	68fa      	ldr	r2, [r7, #12]
 800c292:	4313      	orrs	r3, r2
 800c294:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	4a21      	ldr	r2, [pc, #132]	; (800c320 <TIM_Base_SetConfig+0xbc>)
 800c29a:	4293      	cmp	r3, r2
 800c29c:	d00b      	beq.n	800c2b6 <TIM_Base_SetConfig+0x52>
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2a4:	d007      	beq.n	800c2b6 <TIM_Base_SetConfig+0x52>
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	4a1e      	ldr	r2, [pc, #120]	; (800c324 <TIM_Base_SetConfig+0xc0>)
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	d003      	beq.n	800c2b6 <TIM_Base_SetConfig+0x52>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	4a1d      	ldr	r2, [pc, #116]	; (800c328 <TIM_Base_SetConfig+0xc4>)
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	d108      	bne.n	800c2c8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c2bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	68db      	ldr	r3, [r3, #12]
 800c2c2:	68fa      	ldr	r2, [r7, #12]
 800c2c4:	4313      	orrs	r3, r2
 800c2c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	695b      	ldr	r3, [r3, #20]
 800c2d2:	4313      	orrs	r3, r2
 800c2d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	68fa      	ldr	r2, [r7, #12]
 800c2da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	689a      	ldr	r2, [r3, #8]
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	681a      	ldr	r2, [r3, #0]
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	4a0c      	ldr	r2, [pc, #48]	; (800c320 <TIM_Base_SetConfig+0xbc>)
 800c2f0:	4293      	cmp	r3, r2
 800c2f2:	d007      	beq.n	800c304 <TIM_Base_SetConfig+0xa0>
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	4a0b      	ldr	r2, [pc, #44]	; (800c324 <TIM_Base_SetConfig+0xc0>)
 800c2f8:	4293      	cmp	r3, r2
 800c2fa:	d003      	beq.n	800c304 <TIM_Base_SetConfig+0xa0>
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	4a0a      	ldr	r2, [pc, #40]	; (800c328 <TIM_Base_SetConfig+0xc4>)
 800c300:	4293      	cmp	r3, r2
 800c302:	d103      	bne.n	800c30c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	691a      	ldr	r2, [r3, #16]
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2201      	movs	r2, #1
 800c310:	615a      	str	r2, [r3, #20]
}
 800c312:	bf00      	nop
 800c314:	3714      	adds	r7, #20
 800c316:	46bd      	mov	sp, r7
 800c318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31c:	4770      	bx	lr
 800c31e:	bf00      	nop
 800c320:	40012c00 	.word	0x40012c00
 800c324:	40014000 	.word	0x40014000
 800c328:	40014400 	.word	0x40014400

0800c32c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c32c:	b480      	push	{r7}
 800c32e:	b087      	sub	sp, #28
 800c330:	af00      	add	r7, sp, #0
 800c332:	60f8      	str	r0, [r7, #12]
 800c334:	60b9      	str	r1, [r7, #8]
 800c336:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	6a1b      	ldr	r3, [r3, #32]
 800c33c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	6a1b      	ldr	r3, [r3, #32]
 800c342:	f023 0201 	bic.w	r2, r3, #1
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	699b      	ldr	r3, [r3, #24]
 800c34e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c350:	693b      	ldr	r3, [r7, #16]
 800c352:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c356:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	011b      	lsls	r3, r3, #4
 800c35c:	693a      	ldr	r2, [r7, #16]
 800c35e:	4313      	orrs	r3, r2
 800c360:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c362:	697b      	ldr	r3, [r7, #20]
 800c364:	f023 030a 	bic.w	r3, r3, #10
 800c368:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c36a:	697a      	ldr	r2, [r7, #20]
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	4313      	orrs	r3, r2
 800c370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	693a      	ldr	r2, [r7, #16]
 800c376:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	697a      	ldr	r2, [r7, #20]
 800c37c:	621a      	str	r2, [r3, #32]
}
 800c37e:	bf00      	nop
 800c380:	371c      	adds	r7, #28
 800c382:	46bd      	mov	sp, r7
 800c384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c388:	4770      	bx	lr

0800c38a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c38a:	b480      	push	{r7}
 800c38c:	b087      	sub	sp, #28
 800c38e:	af00      	add	r7, sp, #0
 800c390:	60f8      	str	r0, [r7, #12]
 800c392:	60b9      	str	r1, [r7, #8]
 800c394:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	6a1b      	ldr	r3, [r3, #32]
 800c39a:	f023 0210 	bic.w	r2, r3, #16
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	699b      	ldr	r3, [r3, #24]
 800c3a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	6a1b      	ldr	r3, [r3, #32]
 800c3ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c3ae:	697b      	ldr	r3, [r7, #20]
 800c3b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c3b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	031b      	lsls	r3, r3, #12
 800c3ba:	697a      	ldr	r2, [r7, #20]
 800c3bc:	4313      	orrs	r3, r2
 800c3be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c3c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	011b      	lsls	r3, r3, #4
 800c3cc:	693a      	ldr	r2, [r7, #16]
 800c3ce:	4313      	orrs	r3, r2
 800c3d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	697a      	ldr	r2, [r7, #20]
 800c3d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	693a      	ldr	r2, [r7, #16]
 800c3dc:	621a      	str	r2, [r3, #32]
}
 800c3de:	bf00      	nop
 800c3e0:	371c      	adds	r7, #28
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e8:	4770      	bx	lr

0800c3ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c3ea:	b480      	push	{r7}
 800c3ec:	b085      	sub	sp, #20
 800c3ee:	af00      	add	r7, sp, #0
 800c3f0:	6078      	str	r0, [r7, #4]
 800c3f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	689b      	ldr	r3, [r3, #8]
 800c3f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c400:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c402:	683a      	ldr	r2, [r7, #0]
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	4313      	orrs	r3, r2
 800c408:	f043 0307 	orr.w	r3, r3, #7
 800c40c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	68fa      	ldr	r2, [r7, #12]
 800c412:	609a      	str	r2, [r3, #8]
}
 800c414:	bf00      	nop
 800c416:	3714      	adds	r7, #20
 800c418:	46bd      	mov	sp, r7
 800c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41e:	4770      	bx	lr

0800c420 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c420:	b480      	push	{r7}
 800c422:	b087      	sub	sp, #28
 800c424:	af00      	add	r7, sp, #0
 800c426:	60f8      	str	r0, [r7, #12]
 800c428:	60b9      	str	r1, [r7, #8]
 800c42a:	607a      	str	r2, [r7, #4]
 800c42c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	689b      	ldr	r3, [r3, #8]
 800c432:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c434:	697b      	ldr	r3, [r7, #20]
 800c436:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c43a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	021a      	lsls	r2, r3, #8
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	431a      	orrs	r2, r3
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	4313      	orrs	r3, r2
 800c448:	697a      	ldr	r2, [r7, #20]
 800c44a:	4313      	orrs	r3, r2
 800c44c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	697a      	ldr	r2, [r7, #20]
 800c452:	609a      	str	r2, [r3, #8]
}
 800c454:	bf00      	nop
 800c456:	371c      	adds	r7, #28
 800c458:	46bd      	mov	sp, r7
 800c45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45e:	4770      	bx	lr

0800c460 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c460:	b480      	push	{r7}
 800c462:	b085      	sub	sp, #20
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
 800c468:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c470:	2b01      	cmp	r3, #1
 800c472:	d101      	bne.n	800c478 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c474:	2302      	movs	r3, #2
 800c476:	e04f      	b.n	800c518 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2201      	movs	r2, #1
 800c47c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2202      	movs	r2, #2
 800c484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	685b      	ldr	r3, [r3, #4]
 800c48e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	689b      	ldr	r3, [r3, #8]
 800c496:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	4a21      	ldr	r2, [pc, #132]	; (800c524 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	d108      	bne.n	800c4b4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c4a8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	685b      	ldr	r3, [r3, #4]
 800c4ae:	68fa      	ldr	r2, [r7, #12]
 800c4b0:	4313      	orrs	r3, r2
 800c4b2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c4ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	68fa      	ldr	r2, [r7, #12]
 800c4c2:	4313      	orrs	r3, r2
 800c4c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	68fa      	ldr	r2, [r7, #12]
 800c4cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	4a14      	ldr	r2, [pc, #80]	; (800c524 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c4d4:	4293      	cmp	r3, r2
 800c4d6:	d009      	beq.n	800c4ec <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4e0:	d004      	beq.n	800c4ec <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	4a10      	ldr	r2, [pc, #64]	; (800c528 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c4e8:	4293      	cmp	r3, r2
 800c4ea:	d10c      	bne.n	800c506 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c4f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	689b      	ldr	r3, [r3, #8]
 800c4f8:	68ba      	ldr	r2, [r7, #8]
 800c4fa:	4313      	orrs	r3, r2
 800c4fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	68ba      	ldr	r2, [r7, #8]
 800c504:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2201      	movs	r2, #1
 800c50a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2200      	movs	r2, #0
 800c512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c516:	2300      	movs	r3, #0
}
 800c518:	4618      	mov	r0, r3
 800c51a:	3714      	adds	r7, #20
 800c51c:	46bd      	mov	sp, r7
 800c51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c522:	4770      	bx	lr
 800c524:	40012c00 	.word	0x40012c00
 800c528:	40014000 	.word	0x40014000

0800c52c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c52c:	b480      	push	{r7}
 800c52e:	b083      	sub	sp, #12
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c534:	bf00      	nop
 800c536:	370c      	adds	r7, #12
 800c538:	46bd      	mov	sp, r7
 800c53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53e:	4770      	bx	lr

0800c540 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c540:	b480      	push	{r7}
 800c542:	b083      	sub	sp, #12
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c548:	bf00      	nop
 800c54a:	370c      	adds	r7, #12
 800c54c:	46bd      	mov	sp, r7
 800c54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c552:	4770      	bx	lr

0800c554 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c554:	b480      	push	{r7}
 800c556:	b083      	sub	sp, #12
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c55c:	bf00      	nop
 800c55e:	370c      	adds	r7, #12
 800c560:	46bd      	mov	sp, r7
 800c562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c566:	4770      	bx	lr

0800c568 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b082      	sub	sp, #8
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d101      	bne.n	800c57a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c576:	2301      	movs	r3, #1
 800c578:	e040      	b.n	800c5fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d106      	bne.n	800c590 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	2200      	movs	r2, #0
 800c586:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	f7f4 fdcc 	bl	8001128 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2224      	movs	r2, #36	; 0x24
 800c594:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	681a      	ldr	r2, [r3, #0]
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	f022 0201 	bic.w	r2, r2, #1
 800c5a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f000 fbf2 	bl	800cd90 <UART_SetConfig>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	2b01      	cmp	r3, #1
 800c5b0:	d101      	bne.n	800c5b6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	e022      	b.n	800c5fc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d002      	beq.n	800c5c4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f000 fe40 	bl	800d244 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	685a      	ldr	r2, [r3, #4]
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c5d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	689a      	ldr	r2, [r3, #8]
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c5e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	681a      	ldr	r2, [r3, #0]
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	f042 0201 	orr.w	r2, r2, #1
 800c5f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f000 fec7 	bl	800d388 <UART_CheckIdleState>
 800c5fa:	4603      	mov	r3, r0
}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	3708      	adds	r7, #8
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}

0800c604 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c604:	b480      	push	{r7}
 800c606:	b08b      	sub	sp, #44	; 0x2c
 800c608:	af00      	add	r7, sp, #0
 800c60a:	60f8      	str	r0, [r7, #12]
 800c60c:	60b9      	str	r1, [r7, #8]
 800c60e:	4613      	mov	r3, r2
 800c610:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c616:	2b20      	cmp	r3, #32
 800c618:	d156      	bne.n	800c6c8 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800c61a:	68bb      	ldr	r3, [r7, #8]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d002      	beq.n	800c626 <HAL_UART_Transmit_IT+0x22>
 800c620:	88fb      	ldrh	r3, [r7, #6]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d101      	bne.n	800c62a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800c626:	2301      	movs	r3, #1
 800c628:	e04f      	b.n	800c6ca <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800c630:	2b01      	cmp	r3, #1
 800c632:	d101      	bne.n	800c638 <HAL_UART_Transmit_IT+0x34>
 800c634:	2302      	movs	r3, #2
 800c636:	e048      	b.n	800c6ca <HAL_UART_Transmit_IT+0xc6>
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	2201      	movs	r2, #1
 800c63c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	68ba      	ldr	r2, [r7, #8]
 800c644:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	88fa      	ldrh	r2, [r7, #6]
 800c64a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	88fa      	ldrh	r2, [r7, #6]
 800c652:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	2200      	movs	r2, #0
 800c65a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	2200      	movs	r2, #0
 800c660:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	2221      	movs	r2, #33	; 0x21
 800c668:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	689b      	ldr	r3, [r3, #8]
 800c66e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c672:	d107      	bne.n	800c684 <HAL_UART_Transmit_IT+0x80>
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	691b      	ldr	r3, [r3, #16]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d103      	bne.n	800c684 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	4a16      	ldr	r2, [pc, #88]	; (800c6d8 <HAL_UART_Transmit_IT+0xd4>)
 800c680:	669a      	str	r2, [r3, #104]	; 0x68
 800c682:	e002      	b.n	800c68a <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	4a15      	ldr	r2, [pc, #84]	; (800c6dc <HAL_UART_Transmit_IT+0xd8>)
 800c688:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	2200      	movs	r2, #0
 800c68e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c698:	697b      	ldr	r3, [r7, #20]
 800c69a:	e853 3f00 	ldrex	r3, [r3]
 800c69e:	613b      	str	r3, [r7, #16]
   return(result);
 800c6a0:	693b      	ldr	r3, [r7, #16]
 800c6a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6a6:	627b      	str	r3, [r7, #36]	; 0x24
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	461a      	mov	r2, r3
 800c6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b0:	623b      	str	r3, [r7, #32]
 800c6b2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6b4:	69f9      	ldr	r1, [r7, #28]
 800c6b6:	6a3a      	ldr	r2, [r7, #32]
 800c6b8:	e841 2300 	strex	r3, r2, [r1]
 800c6bc:	61bb      	str	r3, [r7, #24]
   return(result);
 800c6be:	69bb      	ldr	r3, [r7, #24]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d1e6      	bne.n	800c692 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	e000      	b.n	800c6ca <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800c6c8:	2302      	movs	r3, #2
  }
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	372c      	adds	r7, #44	; 0x2c
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d4:	4770      	bx	lr
 800c6d6:	bf00      	nop
 800c6d8:	0800d8e3 	.word	0x0800d8e3
 800c6dc:	0800d82b 	.word	0x0800d82b

0800c6e0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b08a      	sub	sp, #40	; 0x28
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	60f8      	str	r0, [r7, #12]
 800c6e8:	60b9      	str	r1, [r7, #8]
 800c6ea:	4613      	mov	r3, r2
 800c6ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c6f2:	2b20      	cmp	r3, #32
 800c6f4:	d142      	bne.n	800c77c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d002      	beq.n	800c702 <HAL_UART_Receive_IT+0x22>
 800c6fc:	88fb      	ldrh	r3, [r7, #6]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d101      	bne.n	800c706 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800c702:	2301      	movs	r3, #1
 800c704:	e03b      	b.n	800c77e <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800c70c:	2b01      	cmp	r3, #1
 800c70e:	d101      	bne.n	800c714 <HAL_UART_Receive_IT+0x34>
 800c710:	2302      	movs	r3, #2
 800c712:	e034      	b.n	800c77e <HAL_UART_Receive_IT+0x9e>
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	2201      	movs	r2, #1
 800c718:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	2200      	movs	r2, #0
 800c720:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	4a18      	ldr	r2, [pc, #96]	; (800c788 <HAL_UART_Receive_IT+0xa8>)
 800c728:	4293      	cmp	r3, r2
 800c72a:	d01f      	beq.n	800c76c <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	685b      	ldr	r3, [r3, #4]
 800c732:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c736:	2b00      	cmp	r3, #0
 800c738:	d018      	beq.n	800c76c <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c740:	697b      	ldr	r3, [r7, #20]
 800c742:	e853 3f00 	ldrex	r3, [r3]
 800c746:	613b      	str	r3, [r7, #16]
   return(result);
 800c748:	693b      	ldr	r3, [r7, #16]
 800c74a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c74e:	627b      	str	r3, [r7, #36]	; 0x24
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	461a      	mov	r2, r3
 800c756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c758:	623b      	str	r3, [r7, #32]
 800c75a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c75c:	69f9      	ldr	r1, [r7, #28]
 800c75e:	6a3a      	ldr	r2, [r7, #32]
 800c760:	e841 2300 	strex	r3, r2, [r1]
 800c764:	61bb      	str	r3, [r7, #24]
   return(result);
 800c766:	69bb      	ldr	r3, [r7, #24]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d1e6      	bne.n	800c73a <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c76c:	88fb      	ldrh	r3, [r7, #6]
 800c76e:	461a      	mov	r2, r3
 800c770:	68b9      	ldr	r1, [r7, #8]
 800c772:	68f8      	ldr	r0, [r7, #12]
 800c774:	f000 ff16 	bl	800d5a4 <UART_Start_Receive_IT>
 800c778:	4603      	mov	r3, r0
 800c77a:	e000      	b.n	800c77e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800c77c:	2302      	movs	r3, #2
  }
}
 800c77e:	4618      	mov	r0, r3
 800c780:	3728      	adds	r7, #40	; 0x28
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}
 800c786:	bf00      	nop
 800c788:	40008000 	.word	0x40008000

0800c78c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b0ba      	sub	sp, #232	; 0xe8
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	69db      	ldr	r3, [r3, #28]
 800c79a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	689b      	ldr	r3, [r3, #8]
 800c7ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c7b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c7b6:	f640 030f 	movw	r3, #2063	; 0x80f
 800c7ba:	4013      	ands	r3, r2
 800c7bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c7c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d115      	bne.n	800c7f4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800c7c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7cc:	f003 0320 	and.w	r3, r3, #32
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d00f      	beq.n	800c7f4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c7d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7d8:	f003 0320 	and.w	r3, r3, #32
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d009      	beq.n	800c7f4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	f000 82a6 	beq.w	800cd36 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	4798      	blx	r3
      }
      return;
 800c7f2:	e2a0      	b.n	800cd36 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800c7f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	f000 8117 	beq.w	800ca2c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800c7fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c802:	f003 0301 	and.w	r3, r3, #1
 800c806:	2b00      	cmp	r3, #0
 800c808:	d106      	bne.n	800c818 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800c80a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c80e:	4b85      	ldr	r3, [pc, #532]	; (800ca24 <HAL_UART_IRQHandler+0x298>)
 800c810:	4013      	ands	r3, r2
 800c812:	2b00      	cmp	r3, #0
 800c814:	f000 810a 	beq.w	800ca2c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c81c:	f003 0301 	and.w	r3, r3, #1
 800c820:	2b00      	cmp	r3, #0
 800c822:	d011      	beq.n	800c848 <HAL_UART_IRQHandler+0xbc>
 800c824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d00b      	beq.n	800c848 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	2201      	movs	r2, #1
 800c836:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c83e:	f043 0201 	orr.w	r2, r3, #1
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c84c:	f003 0302 	and.w	r3, r3, #2
 800c850:	2b00      	cmp	r3, #0
 800c852:	d011      	beq.n	800c878 <HAL_UART_IRQHandler+0xec>
 800c854:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c858:	f003 0301 	and.w	r3, r3, #1
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d00b      	beq.n	800c878 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	2202      	movs	r2, #2
 800c866:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c86e:	f043 0204 	orr.w	r2, r3, #4
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c87c:	f003 0304 	and.w	r3, r3, #4
 800c880:	2b00      	cmp	r3, #0
 800c882:	d011      	beq.n	800c8a8 <HAL_UART_IRQHandler+0x11c>
 800c884:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c888:	f003 0301 	and.w	r3, r3, #1
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d00b      	beq.n	800c8a8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	2204      	movs	r2, #4
 800c896:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c89e:	f043 0202 	orr.w	r2, r3, #2
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c8a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c8ac:	f003 0308 	and.w	r3, r3, #8
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d017      	beq.n	800c8e4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c8b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c8b8:	f003 0320 	and.w	r3, r3, #32
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d105      	bne.n	800c8cc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800c8c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c8c4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d00b      	beq.n	800c8e4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	2208      	movs	r2, #8
 800c8d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c8da:	f043 0208 	orr.w	r2, r3, #8
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c8e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c8e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d012      	beq.n	800c916 <HAL_UART_IRQHandler+0x18a>
 800c8f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c8f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d00c      	beq.n	800c916 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c904:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c90c:	f043 0220 	orr.w	r2, r3, #32
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	f000 820c 	beq.w	800cd3a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800c922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c926:	f003 0320 	and.w	r3, r3, #32
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d00d      	beq.n	800c94a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c92e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c932:	f003 0320 	and.w	r3, r3, #32
 800c936:	2b00      	cmp	r3, #0
 800c938:	d007      	beq.n	800c94a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d003      	beq.n	800c94a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c946:	6878      	ldr	r0, [r7, #4]
 800c948:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c950:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	689b      	ldr	r3, [r3, #8]
 800c95a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c95e:	2b40      	cmp	r3, #64	; 0x40
 800c960:	d005      	beq.n	800c96e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c962:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c966:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d04f      	beq.n	800ca0e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f000 fee2 	bl	800d738 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	689b      	ldr	r3, [r3, #8]
 800c97a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c97e:	2b40      	cmp	r3, #64	; 0x40
 800c980:	d141      	bne.n	800ca06 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	3308      	adds	r3, #8
 800c988:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c98c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c990:	e853 3f00 	ldrex	r3, [r3]
 800c994:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c998:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c99c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c9a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	3308      	adds	r3, #8
 800c9aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c9ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c9b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c9ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c9be:	e841 2300 	strex	r3, r2, [r1]
 800c9c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c9c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d1d9      	bne.n	800c982 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d013      	beq.n	800c9fe <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9da:	4a13      	ldr	r2, [pc, #76]	; (800ca28 <HAL_UART_IRQHandler+0x29c>)
 800c9dc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	f7fd f831 	bl	8009a4a <HAL_DMA_Abort_IT>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d017      	beq.n	800ca1e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9f4:	687a      	ldr	r2, [r7, #4]
 800c9f6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800c9f8:	4610      	mov	r0, r2
 800c9fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c9fc:	e00f      	b.n	800ca1e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	f000 f9b0 	bl	800cd64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca04:	e00b      	b.n	800ca1e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f000 f9ac 	bl	800cd64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca0c:	e007      	b.n	800ca1e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f000 f9a8 	bl	800cd64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2200      	movs	r2, #0
 800ca18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800ca1c:	e18d      	b.n	800cd3a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca1e:	bf00      	nop
    return;
 800ca20:	e18b      	b.n	800cd3a <HAL_UART_IRQHandler+0x5ae>
 800ca22:	bf00      	nop
 800ca24:	04000120 	.word	0x04000120
 800ca28:	0800d7ff 	.word	0x0800d7ff

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ca30:	2b01      	cmp	r3, #1
 800ca32:	f040 8146 	bne.w	800ccc2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ca36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca3a:	f003 0310 	and.w	r3, r3, #16
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	f000 813f 	beq.w	800ccc2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ca44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca48:	f003 0310 	and.w	r3, r3, #16
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	f000 8138 	beq.w	800ccc2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	2210      	movs	r2, #16
 800ca58:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	689b      	ldr	r3, [r3, #8]
 800ca60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca64:	2b40      	cmp	r3, #64	; 0x40
 800ca66:	f040 80b4 	bne.w	800cbd2 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	685b      	ldr	r3, [r3, #4]
 800ca72:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ca76:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	f000 815f 	beq.w	800cd3e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ca86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	f080 8157 	bcs.w	800cd3e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ca96:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	f003 0320 	and.w	r3, r3, #32
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	f040 8085 	bne.w	800cbb6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cab4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cab8:	e853 3f00 	ldrex	r3, [r3]
 800cabc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800cac0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cac4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cac8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	461a      	mov	r2, r3
 800cad2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cad6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cada:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cade:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800cae2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cae6:	e841 2300 	strex	r3, r2, [r1]
 800caea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800caee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d1da      	bne.n	800caac <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	3308      	adds	r3, #8
 800cafc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cafe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cb00:	e853 3f00 	ldrex	r3, [r3]
 800cb04:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800cb06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cb08:	f023 0301 	bic.w	r3, r3, #1
 800cb0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	3308      	adds	r3, #8
 800cb16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800cb1a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800cb1e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb20:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cb22:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cb26:	e841 2300 	strex	r3, r2, [r1]
 800cb2a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800cb2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d1e1      	bne.n	800caf6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	3308      	adds	r3, #8
 800cb38:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cb3c:	e853 3f00 	ldrex	r3, [r3]
 800cb40:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800cb42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	3308      	adds	r3, #8
 800cb52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800cb56:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cb58:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb5a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cb5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cb5e:	e841 2300 	strex	r3, r2, [r1]
 800cb62:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800cb64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d1e3      	bne.n	800cb32 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	2220      	movs	r2, #32
 800cb6e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2200      	movs	r2, #0
 800cb74:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb7e:	e853 3f00 	ldrex	r3, [r3]
 800cb82:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cb84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb86:	f023 0310 	bic.w	r3, r3, #16
 800cb8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	461a      	mov	r2, r3
 800cb94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cb98:	65bb      	str	r3, [r7, #88]	; 0x58
 800cb9a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cb9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cba0:	e841 2300 	strex	r3, r2, [r1]
 800cba4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d1e4      	bne.n	800cb76 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	f7fc ff0c 	bl	80099ce <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800cbc2:	b29b      	uxth	r3, r3
 800cbc4:	1ad3      	subs	r3, r2, r3
 800cbc6:	b29b      	uxth	r3, r3
 800cbc8:	4619      	mov	r1, r3
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f000 f8d4 	bl	800cd78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cbd0:	e0b5      	b.n	800cd3e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800cbde:	b29b      	uxth	r3, r3
 800cbe0:	1ad3      	subs	r3, r2, r3
 800cbe2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800cbec:	b29b      	uxth	r3, r3
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	f000 80a7 	beq.w	800cd42 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800cbf4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	f000 80a2 	beq.w	800cd42 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc06:	e853 3f00 	ldrex	r3, [r3]
 800cc0a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cc0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cc12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	461a      	mov	r2, r3
 800cc1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cc20:	647b      	str	r3, [r7, #68]	; 0x44
 800cc22:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc24:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cc26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cc28:	e841 2300 	strex	r3, r2, [r1]
 800cc2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cc2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d1e4      	bne.n	800cbfe <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	3308      	adds	r3, #8
 800cc3a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc3e:	e853 3f00 	ldrex	r3, [r3]
 800cc42:	623b      	str	r3, [r7, #32]
   return(result);
 800cc44:	6a3b      	ldr	r3, [r7, #32]
 800cc46:	f023 0301 	bic.w	r3, r3, #1
 800cc4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	3308      	adds	r3, #8
 800cc54:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800cc58:	633a      	str	r2, [r7, #48]	; 0x30
 800cc5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cc5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc60:	e841 2300 	strex	r3, r2, [r1]
 800cc64:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cc66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d1e3      	bne.n	800cc34 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2220      	movs	r2, #32
 800cc70:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	2200      	movs	r2, #0
 800cc76:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc84:	693b      	ldr	r3, [r7, #16]
 800cc86:	e853 3f00 	ldrex	r3, [r3]
 800cc8a:	60fb      	str	r3, [r7, #12]
   return(result);
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	f023 0310 	bic.w	r3, r3, #16
 800cc92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	461a      	mov	r2, r3
 800cc9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cca0:	61fb      	str	r3, [r7, #28]
 800cca2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cca4:	69b9      	ldr	r1, [r7, #24]
 800cca6:	69fa      	ldr	r2, [r7, #28]
 800cca8:	e841 2300 	strex	r3, r2, [r1]
 800ccac:	617b      	str	r3, [r7, #20]
   return(result);
 800ccae:	697b      	ldr	r3, [r7, #20]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d1e4      	bne.n	800cc7e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ccb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ccb8:	4619      	mov	r1, r3
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f000 f85c 	bl	800cd78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ccc0:	e03f      	b.n	800cd42 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ccc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ccc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d00e      	beq.n	800ccec <HAL_UART_IRQHandler+0x560>
 800ccce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ccd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d008      	beq.n	800ccec <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800cce2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800cce4:	6878      	ldr	r0, [r7, #4]
 800cce6:	f000 ffe6 	bl	800dcb6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ccea:	e02d      	b.n	800cd48 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800ccec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ccf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d00e      	beq.n	800cd16 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800ccf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ccfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d008      	beq.n	800cd16 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d01c      	beq.n	800cd46 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cd10:	6878      	ldr	r0, [r7, #4]
 800cd12:	4798      	blx	r3
    }
    return;
 800cd14:	e017      	b.n	800cd46 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cd16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cd1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d012      	beq.n	800cd48 <HAL_UART_IRQHandler+0x5bc>
 800cd22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cd26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d00c      	beq.n	800cd48 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f000 fe37 	bl	800d9a2 <UART_EndTransmit_IT>
    return;
 800cd34:	e008      	b.n	800cd48 <HAL_UART_IRQHandler+0x5bc>
      return;
 800cd36:	bf00      	nop
 800cd38:	e006      	b.n	800cd48 <HAL_UART_IRQHandler+0x5bc>
    return;
 800cd3a:	bf00      	nop
 800cd3c:	e004      	b.n	800cd48 <HAL_UART_IRQHandler+0x5bc>
      return;
 800cd3e:	bf00      	nop
 800cd40:	e002      	b.n	800cd48 <HAL_UART_IRQHandler+0x5bc>
      return;
 800cd42:	bf00      	nop
 800cd44:	e000      	b.n	800cd48 <HAL_UART_IRQHandler+0x5bc>
    return;
 800cd46:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800cd48:	37e8      	adds	r7, #232	; 0xe8
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bd80      	pop	{r7, pc}
 800cd4e:	bf00      	nop

0800cd50 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cd50:	b480      	push	{r7}
 800cd52:	b083      	sub	sp, #12
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cd58:	bf00      	nop
 800cd5a:	370c      	adds	r7, #12
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd62:	4770      	bx	lr

0800cd64 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cd64:	b480      	push	{r7}
 800cd66:	b083      	sub	sp, #12
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cd6c:	bf00      	nop
 800cd6e:	370c      	adds	r7, #12
 800cd70:	46bd      	mov	sp, r7
 800cd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd76:	4770      	bx	lr

0800cd78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cd78:	b480      	push	{r7}
 800cd7a:	b083      	sub	sp, #12
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
 800cd80:	460b      	mov	r3, r1
 800cd82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cd84:	bf00      	nop
 800cd86:	370c      	adds	r7, #12
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8e:	4770      	bx	lr

0800cd90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cd90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cd94:	b08a      	sub	sp, #40	; 0x28
 800cd96:	af00      	add	r7, sp, #0
 800cd98:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	689a      	ldr	r2, [r3, #8]
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	691b      	ldr	r3, [r3, #16]
 800cda8:	431a      	orrs	r2, r3
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	695b      	ldr	r3, [r3, #20]
 800cdae:	431a      	orrs	r2, r3
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	69db      	ldr	r3, [r3, #28]
 800cdb4:	4313      	orrs	r3, r2
 800cdb6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	681a      	ldr	r2, [r3, #0]
 800cdbe:	4b9e      	ldr	r3, [pc, #632]	; (800d038 <UART_SetConfig+0x2a8>)
 800cdc0:	4013      	ands	r3, r2
 800cdc2:	68fa      	ldr	r2, [r7, #12]
 800cdc4:	6812      	ldr	r2, [r2, #0]
 800cdc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cdc8:	430b      	orrs	r3, r1
 800cdca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	685b      	ldr	r3, [r3, #4]
 800cdd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	68da      	ldr	r2, [r3, #12]
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	430a      	orrs	r2, r1
 800cde0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	699b      	ldr	r3, [r3, #24]
 800cde6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	4a93      	ldr	r2, [pc, #588]	; (800d03c <UART_SetConfig+0x2ac>)
 800cdee:	4293      	cmp	r3, r2
 800cdf0:	d004      	beq.n	800cdfc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	6a1b      	ldr	r3, [r3, #32]
 800cdf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdf8:	4313      	orrs	r3, r2
 800cdfa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	689b      	ldr	r3, [r3, #8]
 800ce02:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce0c:	430a      	orrs	r2, r1
 800ce0e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	4a8a      	ldr	r2, [pc, #552]	; (800d040 <UART_SetConfig+0x2b0>)
 800ce16:	4293      	cmp	r3, r2
 800ce18:	d126      	bne.n	800ce68 <UART_SetConfig+0xd8>
 800ce1a:	4b8a      	ldr	r3, [pc, #552]	; (800d044 <UART_SetConfig+0x2b4>)
 800ce1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce20:	f003 0303 	and.w	r3, r3, #3
 800ce24:	2b03      	cmp	r3, #3
 800ce26:	d81b      	bhi.n	800ce60 <UART_SetConfig+0xd0>
 800ce28:	a201      	add	r2, pc, #4	; (adr r2, 800ce30 <UART_SetConfig+0xa0>)
 800ce2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce2e:	bf00      	nop
 800ce30:	0800ce41 	.word	0x0800ce41
 800ce34:	0800ce51 	.word	0x0800ce51
 800ce38:	0800ce49 	.word	0x0800ce49
 800ce3c:	0800ce59 	.word	0x0800ce59
 800ce40:	2301      	movs	r3, #1
 800ce42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ce46:	e0ab      	b.n	800cfa0 <UART_SetConfig+0x210>
 800ce48:	2302      	movs	r3, #2
 800ce4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ce4e:	e0a7      	b.n	800cfa0 <UART_SetConfig+0x210>
 800ce50:	2304      	movs	r3, #4
 800ce52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ce56:	e0a3      	b.n	800cfa0 <UART_SetConfig+0x210>
 800ce58:	2308      	movs	r3, #8
 800ce5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ce5e:	e09f      	b.n	800cfa0 <UART_SetConfig+0x210>
 800ce60:	2310      	movs	r3, #16
 800ce62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ce66:	e09b      	b.n	800cfa0 <UART_SetConfig+0x210>
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	4a76      	ldr	r2, [pc, #472]	; (800d048 <UART_SetConfig+0x2b8>)
 800ce6e:	4293      	cmp	r3, r2
 800ce70:	d138      	bne.n	800cee4 <UART_SetConfig+0x154>
 800ce72:	4b74      	ldr	r3, [pc, #464]	; (800d044 <UART_SetConfig+0x2b4>)
 800ce74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce78:	f003 030c 	and.w	r3, r3, #12
 800ce7c:	2b0c      	cmp	r3, #12
 800ce7e:	d82d      	bhi.n	800cedc <UART_SetConfig+0x14c>
 800ce80:	a201      	add	r2, pc, #4	; (adr r2, 800ce88 <UART_SetConfig+0xf8>)
 800ce82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce86:	bf00      	nop
 800ce88:	0800cebd 	.word	0x0800cebd
 800ce8c:	0800cedd 	.word	0x0800cedd
 800ce90:	0800cedd 	.word	0x0800cedd
 800ce94:	0800cedd 	.word	0x0800cedd
 800ce98:	0800cecd 	.word	0x0800cecd
 800ce9c:	0800cedd 	.word	0x0800cedd
 800cea0:	0800cedd 	.word	0x0800cedd
 800cea4:	0800cedd 	.word	0x0800cedd
 800cea8:	0800cec5 	.word	0x0800cec5
 800ceac:	0800cedd 	.word	0x0800cedd
 800ceb0:	0800cedd 	.word	0x0800cedd
 800ceb4:	0800cedd 	.word	0x0800cedd
 800ceb8:	0800ced5 	.word	0x0800ced5
 800cebc:	2300      	movs	r3, #0
 800cebe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cec2:	e06d      	b.n	800cfa0 <UART_SetConfig+0x210>
 800cec4:	2302      	movs	r3, #2
 800cec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ceca:	e069      	b.n	800cfa0 <UART_SetConfig+0x210>
 800cecc:	2304      	movs	r3, #4
 800cece:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ced2:	e065      	b.n	800cfa0 <UART_SetConfig+0x210>
 800ced4:	2308      	movs	r3, #8
 800ced6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ceda:	e061      	b.n	800cfa0 <UART_SetConfig+0x210>
 800cedc:	2310      	movs	r3, #16
 800cede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cee2:	e05d      	b.n	800cfa0 <UART_SetConfig+0x210>
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	4a58      	ldr	r2, [pc, #352]	; (800d04c <UART_SetConfig+0x2bc>)
 800ceea:	4293      	cmp	r3, r2
 800ceec:	d125      	bne.n	800cf3a <UART_SetConfig+0x1aa>
 800ceee:	4b55      	ldr	r3, [pc, #340]	; (800d044 <UART_SetConfig+0x2b4>)
 800cef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cef4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800cef8:	2b30      	cmp	r3, #48	; 0x30
 800cefa:	d016      	beq.n	800cf2a <UART_SetConfig+0x19a>
 800cefc:	2b30      	cmp	r3, #48	; 0x30
 800cefe:	d818      	bhi.n	800cf32 <UART_SetConfig+0x1a2>
 800cf00:	2b20      	cmp	r3, #32
 800cf02:	d00a      	beq.n	800cf1a <UART_SetConfig+0x18a>
 800cf04:	2b20      	cmp	r3, #32
 800cf06:	d814      	bhi.n	800cf32 <UART_SetConfig+0x1a2>
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d002      	beq.n	800cf12 <UART_SetConfig+0x182>
 800cf0c:	2b10      	cmp	r3, #16
 800cf0e:	d008      	beq.n	800cf22 <UART_SetConfig+0x192>
 800cf10:	e00f      	b.n	800cf32 <UART_SetConfig+0x1a2>
 800cf12:	2300      	movs	r3, #0
 800cf14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cf18:	e042      	b.n	800cfa0 <UART_SetConfig+0x210>
 800cf1a:	2302      	movs	r3, #2
 800cf1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cf20:	e03e      	b.n	800cfa0 <UART_SetConfig+0x210>
 800cf22:	2304      	movs	r3, #4
 800cf24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cf28:	e03a      	b.n	800cfa0 <UART_SetConfig+0x210>
 800cf2a:	2308      	movs	r3, #8
 800cf2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cf30:	e036      	b.n	800cfa0 <UART_SetConfig+0x210>
 800cf32:	2310      	movs	r3, #16
 800cf34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cf38:	e032      	b.n	800cfa0 <UART_SetConfig+0x210>
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	4a3f      	ldr	r2, [pc, #252]	; (800d03c <UART_SetConfig+0x2ac>)
 800cf40:	4293      	cmp	r3, r2
 800cf42:	d12a      	bne.n	800cf9a <UART_SetConfig+0x20a>
 800cf44:	4b3f      	ldr	r3, [pc, #252]	; (800d044 <UART_SetConfig+0x2b4>)
 800cf46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf4a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800cf4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cf52:	d01a      	beq.n	800cf8a <UART_SetConfig+0x1fa>
 800cf54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cf58:	d81b      	bhi.n	800cf92 <UART_SetConfig+0x202>
 800cf5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cf5e:	d00c      	beq.n	800cf7a <UART_SetConfig+0x1ea>
 800cf60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cf64:	d815      	bhi.n	800cf92 <UART_SetConfig+0x202>
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d003      	beq.n	800cf72 <UART_SetConfig+0x1e2>
 800cf6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cf6e:	d008      	beq.n	800cf82 <UART_SetConfig+0x1f2>
 800cf70:	e00f      	b.n	800cf92 <UART_SetConfig+0x202>
 800cf72:	2300      	movs	r3, #0
 800cf74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cf78:	e012      	b.n	800cfa0 <UART_SetConfig+0x210>
 800cf7a:	2302      	movs	r3, #2
 800cf7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cf80:	e00e      	b.n	800cfa0 <UART_SetConfig+0x210>
 800cf82:	2304      	movs	r3, #4
 800cf84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cf88:	e00a      	b.n	800cfa0 <UART_SetConfig+0x210>
 800cf8a:	2308      	movs	r3, #8
 800cf8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cf90:	e006      	b.n	800cfa0 <UART_SetConfig+0x210>
 800cf92:	2310      	movs	r3, #16
 800cf94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cf98:	e002      	b.n	800cfa0 <UART_SetConfig+0x210>
 800cf9a:	2310      	movs	r3, #16
 800cf9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	4a25      	ldr	r2, [pc, #148]	; (800d03c <UART_SetConfig+0x2ac>)
 800cfa6:	4293      	cmp	r3, r2
 800cfa8:	f040 808a 	bne.w	800d0c0 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cfac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cfb0:	2b08      	cmp	r3, #8
 800cfb2:	d824      	bhi.n	800cffe <UART_SetConfig+0x26e>
 800cfb4:	a201      	add	r2, pc, #4	; (adr r2, 800cfbc <UART_SetConfig+0x22c>)
 800cfb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfba:	bf00      	nop
 800cfbc:	0800cfe1 	.word	0x0800cfe1
 800cfc0:	0800cfff 	.word	0x0800cfff
 800cfc4:	0800cfe9 	.word	0x0800cfe9
 800cfc8:	0800cfff 	.word	0x0800cfff
 800cfcc:	0800cfef 	.word	0x0800cfef
 800cfd0:	0800cfff 	.word	0x0800cfff
 800cfd4:	0800cfff 	.word	0x0800cfff
 800cfd8:	0800cfff 	.word	0x0800cfff
 800cfdc:	0800cff7 	.word	0x0800cff7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cfe0:	f7fd fe56 	bl	800ac90 <HAL_RCC_GetPCLK1Freq>
 800cfe4:	61f8      	str	r0, [r7, #28]
        break;
 800cfe6:	e010      	b.n	800d00a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cfe8:	4b19      	ldr	r3, [pc, #100]	; (800d050 <UART_SetConfig+0x2c0>)
 800cfea:	61fb      	str	r3, [r7, #28]
        break;
 800cfec:	e00d      	b.n	800d00a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cfee:	f7fd fdb7 	bl	800ab60 <HAL_RCC_GetSysClockFreq>
 800cff2:	61f8      	str	r0, [r7, #28]
        break;
 800cff4:	e009      	b.n	800d00a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cffa:	61fb      	str	r3, [r7, #28]
        break;
 800cffc:	e005      	b.n	800d00a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800cffe:	2300      	movs	r3, #0
 800d000:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800d002:	2301      	movs	r3, #1
 800d004:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800d008:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d00a:	69fb      	ldr	r3, [r7, #28]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	f000 8109 	beq.w	800d224 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	685a      	ldr	r2, [r3, #4]
 800d016:	4613      	mov	r3, r2
 800d018:	005b      	lsls	r3, r3, #1
 800d01a:	4413      	add	r3, r2
 800d01c:	69fa      	ldr	r2, [r7, #28]
 800d01e:	429a      	cmp	r2, r3
 800d020:	d305      	bcc.n	800d02e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	685b      	ldr	r3, [r3, #4]
 800d026:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800d028:	69fa      	ldr	r2, [r7, #28]
 800d02a:	429a      	cmp	r2, r3
 800d02c:	d912      	bls.n	800d054 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800d02e:	2301      	movs	r3, #1
 800d030:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800d034:	e0f6      	b.n	800d224 <UART_SetConfig+0x494>
 800d036:	bf00      	nop
 800d038:	efff69f3 	.word	0xefff69f3
 800d03c:	40008000 	.word	0x40008000
 800d040:	40013800 	.word	0x40013800
 800d044:	40021000 	.word	0x40021000
 800d048:	40004400 	.word	0x40004400
 800d04c:	40004800 	.word	0x40004800
 800d050:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800d054:	69fb      	ldr	r3, [r7, #28]
 800d056:	2200      	movs	r2, #0
 800d058:	461c      	mov	r4, r3
 800d05a:	4615      	mov	r5, r2
 800d05c:	f04f 0200 	mov.w	r2, #0
 800d060:	f04f 0300 	mov.w	r3, #0
 800d064:	022b      	lsls	r3, r5, #8
 800d066:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800d06a:	0222      	lsls	r2, r4, #8
 800d06c:	68f9      	ldr	r1, [r7, #12]
 800d06e:	6849      	ldr	r1, [r1, #4]
 800d070:	0849      	lsrs	r1, r1, #1
 800d072:	2000      	movs	r0, #0
 800d074:	4688      	mov	r8, r1
 800d076:	4681      	mov	r9, r0
 800d078:	eb12 0a08 	adds.w	sl, r2, r8
 800d07c:	eb43 0b09 	adc.w	fp, r3, r9
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	685b      	ldr	r3, [r3, #4]
 800d084:	2200      	movs	r2, #0
 800d086:	603b      	str	r3, [r7, #0]
 800d088:	607a      	str	r2, [r7, #4]
 800d08a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d08e:	4650      	mov	r0, sl
 800d090:	4659      	mov	r1, fp
 800d092:	f7f3 f8fd 	bl	8000290 <__aeabi_uldivmod>
 800d096:	4602      	mov	r2, r0
 800d098:	460b      	mov	r3, r1
 800d09a:	4613      	mov	r3, r2
 800d09c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d09e:	69bb      	ldr	r3, [r7, #24]
 800d0a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d0a4:	d308      	bcc.n	800d0b8 <UART_SetConfig+0x328>
 800d0a6:	69bb      	ldr	r3, [r7, #24]
 800d0a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d0ac:	d204      	bcs.n	800d0b8 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	69ba      	ldr	r2, [r7, #24]
 800d0b4:	60da      	str	r2, [r3, #12]
 800d0b6:	e0b5      	b.n	800d224 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800d0be:	e0b1      	b.n	800d224 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	69db      	ldr	r3, [r3, #28]
 800d0c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d0c8:	d15d      	bne.n	800d186 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800d0ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d0ce:	2b08      	cmp	r3, #8
 800d0d0:	d827      	bhi.n	800d122 <UART_SetConfig+0x392>
 800d0d2:	a201      	add	r2, pc, #4	; (adr r2, 800d0d8 <UART_SetConfig+0x348>)
 800d0d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0d8:	0800d0fd 	.word	0x0800d0fd
 800d0dc:	0800d105 	.word	0x0800d105
 800d0e0:	0800d10d 	.word	0x0800d10d
 800d0e4:	0800d123 	.word	0x0800d123
 800d0e8:	0800d113 	.word	0x0800d113
 800d0ec:	0800d123 	.word	0x0800d123
 800d0f0:	0800d123 	.word	0x0800d123
 800d0f4:	0800d123 	.word	0x0800d123
 800d0f8:	0800d11b 	.word	0x0800d11b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d0fc:	f7fd fdc8 	bl	800ac90 <HAL_RCC_GetPCLK1Freq>
 800d100:	61f8      	str	r0, [r7, #28]
        break;
 800d102:	e014      	b.n	800d12e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d104:	f7fd fdda 	bl	800acbc <HAL_RCC_GetPCLK2Freq>
 800d108:	61f8      	str	r0, [r7, #28]
        break;
 800d10a:	e010      	b.n	800d12e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d10c:	4b4c      	ldr	r3, [pc, #304]	; (800d240 <UART_SetConfig+0x4b0>)
 800d10e:	61fb      	str	r3, [r7, #28]
        break;
 800d110:	e00d      	b.n	800d12e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d112:	f7fd fd25 	bl	800ab60 <HAL_RCC_GetSysClockFreq>
 800d116:	61f8      	str	r0, [r7, #28]
        break;
 800d118:	e009      	b.n	800d12e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d11a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d11e:	61fb      	str	r3, [r7, #28]
        break;
 800d120:	e005      	b.n	800d12e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800d122:	2300      	movs	r3, #0
 800d124:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800d126:	2301      	movs	r3, #1
 800d128:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800d12c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d12e:	69fb      	ldr	r3, [r7, #28]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d077      	beq.n	800d224 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d134:	69fb      	ldr	r3, [r7, #28]
 800d136:	005a      	lsls	r2, r3, #1
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	685b      	ldr	r3, [r3, #4]
 800d13c:	085b      	lsrs	r3, r3, #1
 800d13e:	441a      	add	r2, r3
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	685b      	ldr	r3, [r3, #4]
 800d144:	fbb2 f3f3 	udiv	r3, r2, r3
 800d148:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d14a:	69bb      	ldr	r3, [r7, #24]
 800d14c:	2b0f      	cmp	r3, #15
 800d14e:	d916      	bls.n	800d17e <UART_SetConfig+0x3ee>
 800d150:	69bb      	ldr	r3, [r7, #24]
 800d152:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d156:	d212      	bcs.n	800d17e <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d158:	69bb      	ldr	r3, [r7, #24]
 800d15a:	b29b      	uxth	r3, r3
 800d15c:	f023 030f 	bic.w	r3, r3, #15
 800d160:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d162:	69bb      	ldr	r3, [r7, #24]
 800d164:	085b      	lsrs	r3, r3, #1
 800d166:	b29b      	uxth	r3, r3
 800d168:	f003 0307 	and.w	r3, r3, #7
 800d16c:	b29a      	uxth	r2, r3
 800d16e:	8afb      	ldrh	r3, [r7, #22]
 800d170:	4313      	orrs	r3, r2
 800d172:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	8afa      	ldrh	r2, [r7, #22]
 800d17a:	60da      	str	r2, [r3, #12]
 800d17c:	e052      	b.n	800d224 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800d17e:	2301      	movs	r3, #1
 800d180:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800d184:	e04e      	b.n	800d224 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d186:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d18a:	2b08      	cmp	r3, #8
 800d18c:	d827      	bhi.n	800d1de <UART_SetConfig+0x44e>
 800d18e:	a201      	add	r2, pc, #4	; (adr r2, 800d194 <UART_SetConfig+0x404>)
 800d190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d194:	0800d1b9 	.word	0x0800d1b9
 800d198:	0800d1c1 	.word	0x0800d1c1
 800d19c:	0800d1c9 	.word	0x0800d1c9
 800d1a0:	0800d1df 	.word	0x0800d1df
 800d1a4:	0800d1cf 	.word	0x0800d1cf
 800d1a8:	0800d1df 	.word	0x0800d1df
 800d1ac:	0800d1df 	.word	0x0800d1df
 800d1b0:	0800d1df 	.word	0x0800d1df
 800d1b4:	0800d1d7 	.word	0x0800d1d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d1b8:	f7fd fd6a 	bl	800ac90 <HAL_RCC_GetPCLK1Freq>
 800d1bc:	61f8      	str	r0, [r7, #28]
        break;
 800d1be:	e014      	b.n	800d1ea <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d1c0:	f7fd fd7c 	bl	800acbc <HAL_RCC_GetPCLK2Freq>
 800d1c4:	61f8      	str	r0, [r7, #28]
        break;
 800d1c6:	e010      	b.n	800d1ea <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d1c8:	4b1d      	ldr	r3, [pc, #116]	; (800d240 <UART_SetConfig+0x4b0>)
 800d1ca:	61fb      	str	r3, [r7, #28]
        break;
 800d1cc:	e00d      	b.n	800d1ea <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d1ce:	f7fd fcc7 	bl	800ab60 <HAL_RCC_GetSysClockFreq>
 800d1d2:	61f8      	str	r0, [r7, #28]
        break;
 800d1d4:	e009      	b.n	800d1ea <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d1d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d1da:	61fb      	str	r3, [r7, #28]
        break;
 800d1dc:	e005      	b.n	800d1ea <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800d1e2:	2301      	movs	r3, #1
 800d1e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800d1e8:	bf00      	nop
    }

    if (pclk != 0U)
 800d1ea:	69fb      	ldr	r3, [r7, #28]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d019      	beq.n	800d224 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	685b      	ldr	r3, [r3, #4]
 800d1f4:	085a      	lsrs	r2, r3, #1
 800d1f6:	69fb      	ldr	r3, [r7, #28]
 800d1f8:	441a      	add	r2, r3
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	685b      	ldr	r3, [r3, #4]
 800d1fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800d202:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d204:	69bb      	ldr	r3, [r7, #24]
 800d206:	2b0f      	cmp	r3, #15
 800d208:	d909      	bls.n	800d21e <UART_SetConfig+0x48e>
 800d20a:	69bb      	ldr	r3, [r7, #24]
 800d20c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d210:	d205      	bcs.n	800d21e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d212:	69bb      	ldr	r3, [r7, #24]
 800d214:	b29a      	uxth	r2, r3
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	60da      	str	r2, [r3, #12]
 800d21c:	e002      	b.n	800d224 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800d21e:	2301      	movs	r3, #1
 800d220:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	2200      	movs	r2, #0
 800d228:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	2200      	movs	r2, #0
 800d22e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800d230:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800d234:	4618      	mov	r0, r3
 800d236:	3728      	adds	r7, #40	; 0x28
 800d238:	46bd      	mov	sp, r7
 800d23a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d23e:	bf00      	nop
 800d240:	00f42400 	.word	0x00f42400

0800d244 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d244:	b480      	push	{r7}
 800d246:	b083      	sub	sp, #12
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d250:	f003 0301 	and.w	r3, r3, #1
 800d254:	2b00      	cmp	r3, #0
 800d256:	d00a      	beq.n	800d26e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	685b      	ldr	r3, [r3, #4]
 800d25e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	430a      	orrs	r2, r1
 800d26c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d272:	f003 0302 	and.w	r3, r3, #2
 800d276:	2b00      	cmp	r3, #0
 800d278:	d00a      	beq.n	800d290 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	685b      	ldr	r3, [r3, #4]
 800d280:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	430a      	orrs	r2, r1
 800d28e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d294:	f003 0304 	and.w	r3, r3, #4
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d00a      	beq.n	800d2b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	685b      	ldr	r3, [r3, #4]
 800d2a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	430a      	orrs	r2, r1
 800d2b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2b6:	f003 0308 	and.w	r3, r3, #8
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d00a      	beq.n	800d2d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	685b      	ldr	r3, [r3, #4]
 800d2c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	430a      	orrs	r2, r1
 800d2d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2d8:	f003 0310 	and.w	r3, r3, #16
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d00a      	beq.n	800d2f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	689b      	ldr	r3, [r3, #8]
 800d2e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	430a      	orrs	r2, r1
 800d2f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2fa:	f003 0320 	and.w	r3, r3, #32
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d00a      	beq.n	800d318 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	689b      	ldr	r3, [r3, #8]
 800d308:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	430a      	orrs	r2, r1
 800d316:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d31c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d320:	2b00      	cmp	r3, #0
 800d322:	d01a      	beq.n	800d35a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	685b      	ldr	r3, [r3, #4]
 800d32a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	430a      	orrs	r2, r1
 800d338:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d33e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d342:	d10a      	bne.n	800d35a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	685b      	ldr	r3, [r3, #4]
 800d34a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	430a      	orrs	r2, r1
 800d358:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d35e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d362:	2b00      	cmp	r3, #0
 800d364:	d00a      	beq.n	800d37c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	685b      	ldr	r3, [r3, #4]
 800d36c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	430a      	orrs	r2, r1
 800d37a:	605a      	str	r2, [r3, #4]
  }
}
 800d37c:	bf00      	nop
 800d37e:	370c      	adds	r7, #12
 800d380:	46bd      	mov	sp, r7
 800d382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d386:	4770      	bx	lr

0800d388 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b086      	sub	sp, #24
 800d38c:	af02      	add	r7, sp, #8
 800d38e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2200      	movs	r2, #0
 800d394:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d398:	f7fc f9d8 	bl	800974c <HAL_GetTick>
 800d39c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	f003 0308 	and.w	r3, r3, #8
 800d3a8:	2b08      	cmp	r3, #8
 800d3aa:	d10e      	bne.n	800d3ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d3ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d3b0:	9300      	str	r3, [sp, #0]
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d3ba:	6878      	ldr	r0, [r7, #4]
 800d3bc:	f000 f82d 	bl	800d41a <UART_WaitOnFlagUntilTimeout>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d001      	beq.n	800d3ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d3c6:	2303      	movs	r3, #3
 800d3c8:	e023      	b.n	800d412 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	f003 0304 	and.w	r3, r3, #4
 800d3d4:	2b04      	cmp	r3, #4
 800d3d6:	d10e      	bne.n	800d3f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d3d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d3dc:	9300      	str	r3, [sp, #0]
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d3e6:	6878      	ldr	r0, [r7, #4]
 800d3e8:	f000 f817 	bl	800d41a <UART_WaitOnFlagUntilTimeout>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d001      	beq.n	800d3f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d3f2:	2303      	movs	r3, #3
 800d3f4:	e00d      	b.n	800d412 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	2220      	movs	r2, #32
 800d3fa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	2220      	movs	r2, #32
 800d400:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2200      	movs	r2, #0
 800d406:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2200      	movs	r2, #0
 800d40c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800d410:	2300      	movs	r3, #0
}
 800d412:	4618      	mov	r0, r3
 800d414:	3710      	adds	r7, #16
 800d416:	46bd      	mov	sp, r7
 800d418:	bd80      	pop	{r7, pc}

0800d41a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d41a:	b580      	push	{r7, lr}
 800d41c:	b09c      	sub	sp, #112	; 0x70
 800d41e:	af00      	add	r7, sp, #0
 800d420:	60f8      	str	r0, [r7, #12]
 800d422:	60b9      	str	r1, [r7, #8]
 800d424:	603b      	str	r3, [r7, #0]
 800d426:	4613      	mov	r3, r2
 800d428:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d42a:	e0a5      	b.n	800d578 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d42c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d42e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d432:	f000 80a1 	beq.w	800d578 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d436:	f7fc f989 	bl	800974c <HAL_GetTick>
 800d43a:	4602      	mov	r2, r0
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	1ad3      	subs	r3, r2, r3
 800d440:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d442:	429a      	cmp	r2, r3
 800d444:	d302      	bcc.n	800d44c <UART_WaitOnFlagUntilTimeout+0x32>
 800d446:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d13e      	bne.n	800d4ca <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d454:	e853 3f00 	ldrex	r3, [r3]
 800d458:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d45a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d45c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d460:	667b      	str	r3, [r7, #100]	; 0x64
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	461a      	mov	r2, r3
 800d468:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d46a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d46c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d46e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d470:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d472:	e841 2300 	strex	r3, r2, [r1]
 800d476:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d478:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d1e6      	bne.n	800d44c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	3308      	adds	r3, #8
 800d484:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d488:	e853 3f00 	ldrex	r3, [r3]
 800d48c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d490:	f023 0301 	bic.w	r3, r3, #1
 800d494:	663b      	str	r3, [r7, #96]	; 0x60
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	3308      	adds	r3, #8
 800d49c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d49e:	64ba      	str	r2, [r7, #72]	; 0x48
 800d4a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d4a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d4a6:	e841 2300 	strex	r3, r2, [r1]
 800d4aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d4ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d1e5      	bne.n	800d47e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	2220      	movs	r2, #32
 800d4b6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	2220      	movs	r2, #32
 800d4bc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800d4c6:	2303      	movs	r3, #3
 800d4c8:	e067      	b.n	800d59a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	f003 0304 	and.w	r3, r3, #4
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d04f      	beq.n	800d578 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	69db      	ldr	r3, [r3, #28]
 800d4de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d4e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d4e6:	d147      	bne.n	800d578 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d4f0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4fa:	e853 3f00 	ldrex	r3, [r3]
 800d4fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d502:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d506:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	461a      	mov	r2, r3
 800d50e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d510:	637b      	str	r3, [r7, #52]	; 0x34
 800d512:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d514:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d516:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d518:	e841 2300 	strex	r3, r2, [r1]
 800d51c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d520:	2b00      	cmp	r3, #0
 800d522:	d1e6      	bne.n	800d4f2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	3308      	adds	r3, #8
 800d52a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d52c:	697b      	ldr	r3, [r7, #20]
 800d52e:	e853 3f00 	ldrex	r3, [r3]
 800d532:	613b      	str	r3, [r7, #16]
   return(result);
 800d534:	693b      	ldr	r3, [r7, #16]
 800d536:	f023 0301 	bic.w	r3, r3, #1
 800d53a:	66bb      	str	r3, [r7, #104]	; 0x68
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	3308      	adds	r3, #8
 800d542:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d544:	623a      	str	r2, [r7, #32]
 800d546:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d548:	69f9      	ldr	r1, [r7, #28]
 800d54a:	6a3a      	ldr	r2, [r7, #32]
 800d54c:	e841 2300 	strex	r3, r2, [r1]
 800d550:	61bb      	str	r3, [r7, #24]
   return(result);
 800d552:	69bb      	ldr	r3, [r7, #24]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d1e5      	bne.n	800d524 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	2220      	movs	r2, #32
 800d55c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	2220      	movs	r2, #32
 800d562:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	2220      	movs	r2, #32
 800d568:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	2200      	movs	r2, #0
 800d570:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800d574:	2303      	movs	r3, #3
 800d576:	e010      	b.n	800d59a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	69da      	ldr	r2, [r3, #28]
 800d57e:	68bb      	ldr	r3, [r7, #8]
 800d580:	4013      	ands	r3, r2
 800d582:	68ba      	ldr	r2, [r7, #8]
 800d584:	429a      	cmp	r2, r3
 800d586:	bf0c      	ite	eq
 800d588:	2301      	moveq	r3, #1
 800d58a:	2300      	movne	r3, #0
 800d58c:	b2db      	uxtb	r3, r3
 800d58e:	461a      	mov	r2, r3
 800d590:	79fb      	ldrb	r3, [r7, #7]
 800d592:	429a      	cmp	r2, r3
 800d594:	f43f af4a 	beq.w	800d42c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d598:	2300      	movs	r3, #0
}
 800d59a:	4618      	mov	r0, r3
 800d59c:	3770      	adds	r7, #112	; 0x70
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bd80      	pop	{r7, pc}
	...

0800d5a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d5a4:	b480      	push	{r7}
 800d5a6:	b097      	sub	sp, #92	; 0x5c
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	60f8      	str	r0, [r7, #12]
 800d5ac:	60b9      	str	r1, [r7, #8]
 800d5ae:	4613      	mov	r3, r2
 800d5b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	68ba      	ldr	r2, [r7, #8]
 800d5b6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	88fa      	ldrh	r2, [r7, #6]
 800d5bc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	88fa      	ldrh	r2, [r7, #6]
 800d5c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	689b      	ldr	r3, [r3, #8]
 800d5d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d5d6:	d10e      	bne.n	800d5f6 <UART_Start_Receive_IT+0x52>
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	691b      	ldr	r3, [r3, #16]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d105      	bne.n	800d5ec <UART_Start_Receive_IT+0x48>
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d5e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d5ea:	e02d      	b.n	800d648 <UART_Start_Receive_IT+0xa4>
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	22ff      	movs	r2, #255	; 0xff
 800d5f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d5f4:	e028      	b.n	800d648 <UART_Start_Receive_IT+0xa4>
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	689b      	ldr	r3, [r3, #8]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d10d      	bne.n	800d61a <UART_Start_Receive_IT+0x76>
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	691b      	ldr	r3, [r3, #16]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d104      	bne.n	800d610 <UART_Start_Receive_IT+0x6c>
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	22ff      	movs	r2, #255	; 0xff
 800d60a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d60e:	e01b      	b.n	800d648 <UART_Start_Receive_IT+0xa4>
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	227f      	movs	r2, #127	; 0x7f
 800d614:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d618:	e016      	b.n	800d648 <UART_Start_Receive_IT+0xa4>
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	689b      	ldr	r3, [r3, #8]
 800d61e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d622:	d10d      	bne.n	800d640 <UART_Start_Receive_IT+0x9c>
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	691b      	ldr	r3, [r3, #16]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d104      	bne.n	800d636 <UART_Start_Receive_IT+0x92>
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	227f      	movs	r2, #127	; 0x7f
 800d630:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d634:	e008      	b.n	800d648 <UART_Start_Receive_IT+0xa4>
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	223f      	movs	r2, #63	; 0x3f
 800d63a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d63e:	e003      	b.n	800d648 <UART_Start_Receive_IT+0xa4>
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	2200      	movs	r2, #0
 800d644:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	2200      	movs	r2, #0
 800d64c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	2222      	movs	r2, #34	; 0x22
 800d654:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	3308      	adds	r3, #8
 800d65c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d65e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d660:	e853 3f00 	ldrex	r3, [r3]
 800d664:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d668:	f043 0301 	orr.w	r3, r3, #1
 800d66c:	657b      	str	r3, [r7, #84]	; 0x54
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	3308      	adds	r3, #8
 800d674:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d676:	64ba      	str	r2, [r7, #72]	; 0x48
 800d678:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d67a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d67c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d67e:	e841 2300 	strex	r3, r2, [r1]
 800d682:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d686:	2b00      	cmp	r3, #0
 800d688:	d1e5      	bne.n	800d656 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	689b      	ldr	r3, [r3, #8]
 800d68e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d692:	d107      	bne.n	800d6a4 <UART_Start_Receive_IT+0x100>
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	691b      	ldr	r3, [r3, #16]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d103      	bne.n	800d6a4 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	4a24      	ldr	r2, [pc, #144]	; (800d730 <UART_Start_Receive_IT+0x18c>)
 800d6a0:	665a      	str	r2, [r3, #100]	; 0x64
 800d6a2:	e002      	b.n	800d6aa <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	4a23      	ldr	r2, [pc, #140]	; (800d734 <UART_Start_Receive_IT+0x190>)
 800d6a8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	691b      	ldr	r3, [r3, #16]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d019      	beq.n	800d6ee <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6c2:	e853 3f00 	ldrex	r3, [r3]
 800d6c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ca:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800d6ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	461a      	mov	r2, r3
 800d6d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6d8:	637b      	str	r3, [r7, #52]	; 0x34
 800d6da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d6de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d6e0:	e841 2300 	strex	r3, r2, [r1]
 800d6e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d1e6      	bne.n	800d6ba <UART_Start_Receive_IT+0x116>
 800d6ec:	e018      	b.n	800d720 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6f4:	697b      	ldr	r3, [r7, #20]
 800d6f6:	e853 3f00 	ldrex	r3, [r3]
 800d6fa:	613b      	str	r3, [r7, #16]
   return(result);
 800d6fc:	693b      	ldr	r3, [r7, #16]
 800d6fe:	f043 0320 	orr.w	r3, r3, #32
 800d702:	653b      	str	r3, [r7, #80]	; 0x50
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	461a      	mov	r2, r3
 800d70a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d70c:	623b      	str	r3, [r7, #32]
 800d70e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d710:	69f9      	ldr	r1, [r7, #28]
 800d712:	6a3a      	ldr	r2, [r7, #32]
 800d714:	e841 2300 	strex	r3, r2, [r1]
 800d718:	61bb      	str	r3, [r7, #24]
   return(result);
 800d71a:	69bb      	ldr	r3, [r7, #24]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d1e6      	bne.n	800d6ee <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800d720:	2300      	movs	r3, #0
}
 800d722:	4618      	mov	r0, r3
 800d724:	375c      	adds	r7, #92	; 0x5c
 800d726:	46bd      	mov	sp, r7
 800d728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72c:	4770      	bx	lr
 800d72e:	bf00      	nop
 800d730:	0800db57 	.word	0x0800db57
 800d734:	0800d9f7 	.word	0x0800d9f7

0800d738 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d738:	b480      	push	{r7}
 800d73a:	b095      	sub	sp, #84	; 0x54
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d748:	e853 3f00 	ldrex	r3, [r3]
 800d74c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d750:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d754:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	461a      	mov	r2, r3
 800d75c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d75e:	643b      	str	r3, [r7, #64]	; 0x40
 800d760:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d762:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d764:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d766:	e841 2300 	strex	r3, r2, [r1]
 800d76a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d76c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d1e6      	bne.n	800d740 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	3308      	adds	r3, #8
 800d778:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d77a:	6a3b      	ldr	r3, [r7, #32]
 800d77c:	e853 3f00 	ldrex	r3, [r3]
 800d780:	61fb      	str	r3, [r7, #28]
   return(result);
 800d782:	69fb      	ldr	r3, [r7, #28]
 800d784:	f023 0301 	bic.w	r3, r3, #1
 800d788:	64bb      	str	r3, [r7, #72]	; 0x48
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	3308      	adds	r3, #8
 800d790:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d792:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d794:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d796:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d79a:	e841 2300 	strex	r3, r2, [r1]
 800d79e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d1e5      	bne.n	800d772 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d7aa:	2b01      	cmp	r3, #1
 800d7ac:	d118      	bne.n	800d7e0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	e853 3f00 	ldrex	r3, [r3]
 800d7ba:	60bb      	str	r3, [r7, #8]
   return(result);
 800d7bc:	68bb      	ldr	r3, [r7, #8]
 800d7be:	f023 0310 	bic.w	r3, r3, #16
 800d7c2:	647b      	str	r3, [r7, #68]	; 0x44
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	461a      	mov	r2, r3
 800d7ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7cc:	61bb      	str	r3, [r7, #24]
 800d7ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7d0:	6979      	ldr	r1, [r7, #20]
 800d7d2:	69ba      	ldr	r2, [r7, #24]
 800d7d4:	e841 2300 	strex	r3, r2, [r1]
 800d7d8:	613b      	str	r3, [r7, #16]
   return(result);
 800d7da:	693b      	ldr	r3, [r7, #16]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d1e6      	bne.n	800d7ae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2220      	movs	r2, #32
 800d7e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	665a      	str	r2, [r3, #100]	; 0x64
}
 800d7f2:	bf00      	nop
 800d7f4:	3754      	adds	r7, #84	; 0x54
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fc:	4770      	bx	lr

0800d7fe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d7fe:	b580      	push	{r7, lr}
 800d800:	b084      	sub	sp, #16
 800d802:	af00      	add	r7, sp, #0
 800d804:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d80a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	2200      	movs	r2, #0
 800d810:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	2200      	movs	r2, #0
 800d818:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d81c:	68f8      	ldr	r0, [r7, #12]
 800d81e:	f7ff faa1 	bl	800cd64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d822:	bf00      	nop
 800d824:	3710      	adds	r7, #16
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}

0800d82a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d82a:	b480      	push	{r7}
 800d82c:	b08f      	sub	sp, #60	; 0x3c
 800d82e:	af00      	add	r7, sp, #0
 800d830:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d836:	2b21      	cmp	r3, #33	; 0x21
 800d838:	d14d      	bne.n	800d8d6 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d840:	b29b      	uxth	r3, r3
 800d842:	2b00      	cmp	r3, #0
 800d844:	d132      	bne.n	800d8ac <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d84c:	6a3b      	ldr	r3, [r7, #32]
 800d84e:	e853 3f00 	ldrex	r3, [r3]
 800d852:	61fb      	str	r3, [r7, #28]
   return(result);
 800d854:	69fb      	ldr	r3, [r7, #28]
 800d856:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d85a:	637b      	str	r3, [r7, #52]	; 0x34
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	461a      	mov	r2, r3
 800d862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d864:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d866:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d868:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d86a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d86c:	e841 2300 	strex	r3, r2, [r1]
 800d870:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d874:	2b00      	cmp	r3, #0
 800d876:	d1e6      	bne.n	800d846 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	e853 3f00 	ldrex	r3, [r3]
 800d884:	60bb      	str	r3, [r7, #8]
   return(result);
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d88c:	633b      	str	r3, [r7, #48]	; 0x30
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	461a      	mov	r2, r3
 800d894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d896:	61bb      	str	r3, [r7, #24]
 800d898:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d89a:	6979      	ldr	r1, [r7, #20]
 800d89c:	69ba      	ldr	r2, [r7, #24]
 800d89e:	e841 2300 	strex	r3, r2, [r1]
 800d8a2:	613b      	str	r3, [r7, #16]
   return(result);
 800d8a4:	693b      	ldr	r3, [r7, #16]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d1e6      	bne.n	800d878 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800d8aa:	e014      	b.n	800d8d6 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d8b0:	781a      	ldrb	r2, [r3, #0]
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	b292      	uxth	r2, r2
 800d8b8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d8be:	1c5a      	adds	r2, r3, #1
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d8ca:	b29b      	uxth	r3, r3
 800d8cc:	3b01      	subs	r3, #1
 800d8ce:	b29a      	uxth	r2, r3
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800d8d6:	bf00      	nop
 800d8d8:	373c      	adds	r7, #60	; 0x3c
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e0:	4770      	bx	lr

0800d8e2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d8e2:	b480      	push	{r7}
 800d8e4:	b091      	sub	sp, #68	; 0x44
 800d8e6:	af00      	add	r7, sp, #0
 800d8e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d8ee:	2b21      	cmp	r3, #33	; 0x21
 800d8f0:	d151      	bne.n	800d996 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d8f8:	b29b      	uxth	r3, r3
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d132      	bne.n	800d964 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d906:	e853 3f00 	ldrex	r3, [r3]
 800d90a:	623b      	str	r3, [r7, #32]
   return(result);
 800d90c:	6a3b      	ldr	r3, [r7, #32]
 800d90e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d912:	63bb      	str	r3, [r7, #56]	; 0x38
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	461a      	mov	r2, r3
 800d91a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d91c:	633b      	str	r3, [r7, #48]	; 0x30
 800d91e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d920:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d922:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d924:	e841 2300 	strex	r3, r2, [r1]
 800d928:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d1e6      	bne.n	800d8fe <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	e853 3f00 	ldrex	r3, [r3]
 800d93c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d944:	637b      	str	r3, [r7, #52]	; 0x34
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	461a      	mov	r2, r3
 800d94c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d94e:	61fb      	str	r3, [r7, #28]
 800d950:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d952:	69b9      	ldr	r1, [r7, #24]
 800d954:	69fa      	ldr	r2, [r7, #28]
 800d956:	e841 2300 	strex	r3, r2, [r1]
 800d95a:	617b      	str	r3, [r7, #20]
   return(result);
 800d95c:	697b      	ldr	r3, [r7, #20]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d1e6      	bne.n	800d930 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800d962:	e018      	b.n	800d996 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d968:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800d96a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d96c:	881a      	ldrh	r2, [r3, #0]
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d976:	b292      	uxth	r2, r2
 800d978:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d97e:	1c9a      	adds	r2, r3, #2
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d98a:	b29b      	uxth	r3, r3
 800d98c:	3b01      	subs	r3, #1
 800d98e:	b29a      	uxth	r2, r3
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800d996:	bf00      	nop
 800d998:	3744      	adds	r7, #68	; 0x44
 800d99a:	46bd      	mov	sp, r7
 800d99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a0:	4770      	bx	lr

0800d9a2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d9a2:	b580      	push	{r7, lr}
 800d9a4:	b088      	sub	sp, #32
 800d9a6:	af00      	add	r7, sp, #0
 800d9a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	e853 3f00 	ldrex	r3, [r3]
 800d9b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800d9b8:	68bb      	ldr	r3, [r7, #8]
 800d9ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d9be:	61fb      	str	r3, [r7, #28]
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	461a      	mov	r2, r3
 800d9c6:	69fb      	ldr	r3, [r7, #28]
 800d9c8:	61bb      	str	r3, [r7, #24]
 800d9ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9cc:	6979      	ldr	r1, [r7, #20]
 800d9ce:	69ba      	ldr	r2, [r7, #24]
 800d9d0:	e841 2300 	strex	r3, r2, [r1]
 800d9d4:	613b      	str	r3, [r7, #16]
   return(result);
 800d9d6:	693b      	ldr	r3, [r7, #16]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d1e6      	bne.n	800d9aa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2220      	movs	r2, #32
 800d9e0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d9e8:	6878      	ldr	r0, [r7, #4]
 800d9ea:	f7ff f9b1 	bl	800cd50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d9ee:	bf00      	nop
 800d9f0:	3720      	adds	r7, #32
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}

0800d9f6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d9f6:	b580      	push	{r7, lr}
 800d9f8:	b096      	sub	sp, #88	; 0x58
 800d9fa:	af00      	add	r7, sp, #0
 800d9fc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800da04:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da0c:	2b22      	cmp	r3, #34	; 0x22
 800da0e:	f040 8094 	bne.w	800db3a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800da18:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800da1c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800da20:	b2d9      	uxtb	r1, r3
 800da22:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800da26:	b2da      	uxtb	r2, r3
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da2c:	400a      	ands	r2, r1
 800da2e:	b2d2      	uxtb	r2, r2
 800da30:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da36:	1c5a      	adds	r2, r3, #1
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800da42:	b29b      	uxth	r3, r3
 800da44:	3b01      	subs	r3, #1
 800da46:	b29a      	uxth	r2, r3
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800da54:	b29b      	uxth	r3, r3
 800da56:	2b00      	cmp	r3, #0
 800da58:	d179      	bne.n	800db4e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da62:	e853 3f00 	ldrex	r3, [r3]
 800da66:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800da68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800da6e:	653b      	str	r3, [r7, #80]	; 0x50
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	461a      	mov	r2, r3
 800da76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da78:	647b      	str	r3, [r7, #68]	; 0x44
 800da7a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da7c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800da7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800da80:	e841 2300 	strex	r3, r2, [r1]
 800da84:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800da86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d1e6      	bne.n	800da5a <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	3308      	adds	r3, #8
 800da92:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da96:	e853 3f00 	ldrex	r3, [r3]
 800da9a:	623b      	str	r3, [r7, #32]
   return(result);
 800da9c:	6a3b      	ldr	r3, [r7, #32]
 800da9e:	f023 0301 	bic.w	r3, r3, #1
 800daa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	3308      	adds	r3, #8
 800daaa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800daac:	633a      	str	r2, [r7, #48]	; 0x30
 800daae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dab0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dab2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dab4:	e841 2300 	strex	r3, r2, [r1]
 800dab8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800daba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d1e5      	bne.n	800da8c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2220      	movs	r2, #32
 800dac4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	2200      	movs	r2, #0
 800daca:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dad0:	2b01      	cmp	r3, #1
 800dad2:	d12e      	bne.n	800db32 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	2200      	movs	r2, #0
 800dad8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dae0:	693b      	ldr	r3, [r7, #16]
 800dae2:	e853 3f00 	ldrex	r3, [r3]
 800dae6:	60fb      	str	r3, [r7, #12]
   return(result);
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	f023 0310 	bic.w	r3, r3, #16
 800daee:	64bb      	str	r3, [r7, #72]	; 0x48
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	461a      	mov	r2, r3
 800daf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800daf8:	61fb      	str	r3, [r7, #28]
 800dafa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dafc:	69b9      	ldr	r1, [r7, #24]
 800dafe:	69fa      	ldr	r2, [r7, #28]
 800db00:	e841 2300 	strex	r3, r2, [r1]
 800db04:	617b      	str	r3, [r7, #20]
   return(result);
 800db06:	697b      	ldr	r3, [r7, #20]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d1e6      	bne.n	800dada <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	69db      	ldr	r3, [r3, #28]
 800db12:	f003 0310 	and.w	r3, r3, #16
 800db16:	2b10      	cmp	r3, #16
 800db18:	d103      	bne.n	800db22 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	2210      	movs	r2, #16
 800db20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800db28:	4619      	mov	r1, r3
 800db2a:	6878      	ldr	r0, [r7, #4]
 800db2c:	f7ff f924 	bl	800cd78 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800db30:	e00d      	b.n	800db4e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f7f2 fde4 	bl	8000700 <HAL_UART_RxCpltCallback>
}
 800db38:	e009      	b.n	800db4e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	8b1b      	ldrh	r3, [r3, #24]
 800db40:	b29a      	uxth	r2, r3
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	f042 0208 	orr.w	r2, r2, #8
 800db4a:	b292      	uxth	r2, r2
 800db4c:	831a      	strh	r2, [r3, #24]
}
 800db4e:	bf00      	nop
 800db50:	3758      	adds	r7, #88	; 0x58
 800db52:	46bd      	mov	sp, r7
 800db54:	bd80      	pop	{r7, pc}

0800db56 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800db56:	b580      	push	{r7, lr}
 800db58:	b096      	sub	sp, #88	; 0x58
 800db5a:	af00      	add	r7, sp, #0
 800db5c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800db64:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db6c:	2b22      	cmp	r3, #34	; 0x22
 800db6e:	f040 8094 	bne.w	800dc9a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800db78:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db80:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800db82:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800db86:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800db8a:	4013      	ands	r3, r2
 800db8c:	b29a      	uxth	r2, r3
 800db8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db90:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db96:	1c9a      	adds	r2, r3, #2
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800dba2:	b29b      	uxth	r3, r3
 800dba4:	3b01      	subs	r3, #1
 800dba6:	b29a      	uxth	r2, r3
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800dbb4:	b29b      	uxth	r3, r3
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d179      	bne.n	800dcae <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbc2:	e853 3f00 	ldrex	r3, [r3]
 800dbc6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800dbc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dbce:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	461a      	mov	r2, r3
 800dbd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbd8:	643b      	str	r3, [r7, #64]	; 0x40
 800dbda:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbdc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dbde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dbe0:	e841 2300 	strex	r3, r2, [r1]
 800dbe4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dbe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d1e6      	bne.n	800dbba <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	3308      	adds	r3, #8
 800dbf2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbf4:	6a3b      	ldr	r3, [r7, #32]
 800dbf6:	e853 3f00 	ldrex	r3, [r3]
 800dbfa:	61fb      	str	r3, [r7, #28]
   return(result);
 800dbfc:	69fb      	ldr	r3, [r7, #28]
 800dbfe:	f023 0301 	bic.w	r3, r3, #1
 800dc02:	64bb      	str	r3, [r7, #72]	; 0x48
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	3308      	adds	r3, #8
 800dc0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dc0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dc0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dc12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc14:	e841 2300 	strex	r3, r2, [r1]
 800dc18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dc1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d1e5      	bne.n	800dbec <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	2220      	movs	r2, #32
 800dc24:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	2200      	movs	r2, #0
 800dc2a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dc30:	2b01      	cmp	r3, #1
 800dc32:	d12e      	bne.n	800dc92 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2200      	movs	r2, #0
 800dc38:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	e853 3f00 	ldrex	r3, [r3]
 800dc46:	60bb      	str	r3, [r7, #8]
   return(result);
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	f023 0310 	bic.w	r3, r3, #16
 800dc4e:	647b      	str	r3, [r7, #68]	; 0x44
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	461a      	mov	r2, r3
 800dc56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc58:	61bb      	str	r3, [r7, #24]
 800dc5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc5c:	6979      	ldr	r1, [r7, #20]
 800dc5e:	69ba      	ldr	r2, [r7, #24]
 800dc60:	e841 2300 	strex	r3, r2, [r1]
 800dc64:	613b      	str	r3, [r7, #16]
   return(result);
 800dc66:	693b      	ldr	r3, [r7, #16]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d1e6      	bne.n	800dc3a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	69db      	ldr	r3, [r3, #28]
 800dc72:	f003 0310 	and.w	r3, r3, #16
 800dc76:	2b10      	cmp	r3, #16
 800dc78:	d103      	bne.n	800dc82 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	2210      	movs	r2, #16
 800dc80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800dc88:	4619      	mov	r1, r3
 800dc8a:	6878      	ldr	r0, [r7, #4]
 800dc8c:	f7ff f874 	bl	800cd78 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dc90:	e00d      	b.n	800dcae <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800dc92:	6878      	ldr	r0, [r7, #4]
 800dc94:	f7f2 fd34 	bl	8000700 <HAL_UART_RxCpltCallback>
}
 800dc98:	e009      	b.n	800dcae <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	8b1b      	ldrh	r3, [r3, #24]
 800dca0:	b29a      	uxth	r2, r3
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	f042 0208 	orr.w	r2, r2, #8
 800dcaa:	b292      	uxth	r2, r2
 800dcac:	831a      	strh	r2, [r3, #24]
}
 800dcae:	bf00      	nop
 800dcb0:	3758      	adds	r7, #88	; 0x58
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	bd80      	pop	{r7, pc}

0800dcb6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800dcb6:	b480      	push	{r7}
 800dcb8:	b083      	sub	sp, #12
 800dcba:	af00      	add	r7, sp, #0
 800dcbc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800dcbe:	bf00      	nop
 800dcc0:	370c      	adds	r7, #12
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc8:	4770      	bx	lr

0800dcca <_ZdlPvj>:
 800dcca:	f000 b800 	b.w	800dcce <_ZdlPv>

0800dcce <_ZdlPv>:
 800dcce:	f000 b833 	b.w	800dd38 <free>
	...

0800dcd4 <__errno>:
 800dcd4:	4b01      	ldr	r3, [pc, #4]	; (800dcdc <__errno+0x8>)
 800dcd6:	6818      	ldr	r0, [r3, #0]
 800dcd8:	4770      	bx	lr
 800dcda:	bf00      	nop
 800dcdc:	20000090 	.word	0x20000090

0800dce0 <__libc_init_array>:
 800dce0:	b570      	push	{r4, r5, r6, lr}
 800dce2:	4d0d      	ldr	r5, [pc, #52]	; (800dd18 <__libc_init_array+0x38>)
 800dce4:	4c0d      	ldr	r4, [pc, #52]	; (800dd1c <__libc_init_array+0x3c>)
 800dce6:	1b64      	subs	r4, r4, r5
 800dce8:	10a4      	asrs	r4, r4, #2
 800dcea:	2600      	movs	r6, #0
 800dcec:	42a6      	cmp	r6, r4
 800dcee:	d109      	bne.n	800dd04 <__libc_init_array+0x24>
 800dcf0:	4d0b      	ldr	r5, [pc, #44]	; (800dd20 <__libc_init_array+0x40>)
 800dcf2:	4c0c      	ldr	r4, [pc, #48]	; (800dd24 <__libc_init_array+0x44>)
 800dcf4:	f001 faae 	bl	800f254 <_init>
 800dcf8:	1b64      	subs	r4, r4, r5
 800dcfa:	10a4      	asrs	r4, r4, #2
 800dcfc:	2600      	movs	r6, #0
 800dcfe:	42a6      	cmp	r6, r4
 800dd00:	d105      	bne.n	800dd0e <__libc_init_array+0x2e>
 800dd02:	bd70      	pop	{r4, r5, r6, pc}
 800dd04:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd08:	4798      	blx	r3
 800dd0a:	3601      	adds	r6, #1
 800dd0c:	e7ee      	b.n	800dcec <__libc_init_array+0xc>
 800dd0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd12:	4798      	blx	r3
 800dd14:	3601      	adds	r6, #1
 800dd16:	e7f2      	b.n	800dcfe <__libc_init_array+0x1e>
 800dd18:	0800f9e4 	.word	0x0800f9e4
 800dd1c:	0800f9e4 	.word	0x0800f9e4
 800dd20:	0800f9e4 	.word	0x0800f9e4
 800dd24:	0800f9ec 	.word	0x0800f9ec

0800dd28 <malloc>:
 800dd28:	4b02      	ldr	r3, [pc, #8]	; (800dd34 <malloc+0xc>)
 800dd2a:	4601      	mov	r1, r0
 800dd2c:	6818      	ldr	r0, [r3, #0]
 800dd2e:	f000 b88d 	b.w	800de4c <_malloc_r>
 800dd32:	bf00      	nop
 800dd34:	20000090 	.word	0x20000090

0800dd38 <free>:
 800dd38:	4b02      	ldr	r3, [pc, #8]	; (800dd44 <free+0xc>)
 800dd3a:	4601      	mov	r1, r0
 800dd3c:	6818      	ldr	r0, [r3, #0]
 800dd3e:	f000 b819 	b.w	800dd74 <_free_r>
 800dd42:	bf00      	nop
 800dd44:	20000090 	.word	0x20000090

0800dd48 <memcpy>:
 800dd48:	440a      	add	r2, r1
 800dd4a:	4291      	cmp	r1, r2
 800dd4c:	f100 33ff 	add.w	r3, r0, #4294967295
 800dd50:	d100      	bne.n	800dd54 <memcpy+0xc>
 800dd52:	4770      	bx	lr
 800dd54:	b510      	push	{r4, lr}
 800dd56:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd5e:	4291      	cmp	r1, r2
 800dd60:	d1f9      	bne.n	800dd56 <memcpy+0xe>
 800dd62:	bd10      	pop	{r4, pc}

0800dd64 <memset>:
 800dd64:	4402      	add	r2, r0
 800dd66:	4603      	mov	r3, r0
 800dd68:	4293      	cmp	r3, r2
 800dd6a:	d100      	bne.n	800dd6e <memset+0xa>
 800dd6c:	4770      	bx	lr
 800dd6e:	f803 1b01 	strb.w	r1, [r3], #1
 800dd72:	e7f9      	b.n	800dd68 <memset+0x4>

0800dd74 <_free_r>:
 800dd74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dd76:	2900      	cmp	r1, #0
 800dd78:	d044      	beq.n	800de04 <_free_r+0x90>
 800dd7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd7e:	9001      	str	r0, [sp, #4]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	f1a1 0404 	sub.w	r4, r1, #4
 800dd86:	bfb8      	it	lt
 800dd88:	18e4      	addlt	r4, r4, r3
 800dd8a:	f000 f9e3 	bl	800e154 <__malloc_lock>
 800dd8e:	4a1e      	ldr	r2, [pc, #120]	; (800de08 <_free_r+0x94>)
 800dd90:	9801      	ldr	r0, [sp, #4]
 800dd92:	6813      	ldr	r3, [r2, #0]
 800dd94:	b933      	cbnz	r3, 800dda4 <_free_r+0x30>
 800dd96:	6063      	str	r3, [r4, #4]
 800dd98:	6014      	str	r4, [r2, #0]
 800dd9a:	b003      	add	sp, #12
 800dd9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dda0:	f000 b9de 	b.w	800e160 <__malloc_unlock>
 800dda4:	42a3      	cmp	r3, r4
 800dda6:	d908      	bls.n	800ddba <_free_r+0x46>
 800dda8:	6825      	ldr	r5, [r4, #0]
 800ddaa:	1961      	adds	r1, r4, r5
 800ddac:	428b      	cmp	r3, r1
 800ddae:	bf01      	itttt	eq
 800ddb0:	6819      	ldreq	r1, [r3, #0]
 800ddb2:	685b      	ldreq	r3, [r3, #4]
 800ddb4:	1949      	addeq	r1, r1, r5
 800ddb6:	6021      	streq	r1, [r4, #0]
 800ddb8:	e7ed      	b.n	800dd96 <_free_r+0x22>
 800ddba:	461a      	mov	r2, r3
 800ddbc:	685b      	ldr	r3, [r3, #4]
 800ddbe:	b10b      	cbz	r3, 800ddc4 <_free_r+0x50>
 800ddc0:	42a3      	cmp	r3, r4
 800ddc2:	d9fa      	bls.n	800ddba <_free_r+0x46>
 800ddc4:	6811      	ldr	r1, [r2, #0]
 800ddc6:	1855      	adds	r5, r2, r1
 800ddc8:	42a5      	cmp	r5, r4
 800ddca:	d10b      	bne.n	800dde4 <_free_r+0x70>
 800ddcc:	6824      	ldr	r4, [r4, #0]
 800ddce:	4421      	add	r1, r4
 800ddd0:	1854      	adds	r4, r2, r1
 800ddd2:	42a3      	cmp	r3, r4
 800ddd4:	6011      	str	r1, [r2, #0]
 800ddd6:	d1e0      	bne.n	800dd9a <_free_r+0x26>
 800ddd8:	681c      	ldr	r4, [r3, #0]
 800ddda:	685b      	ldr	r3, [r3, #4]
 800dddc:	6053      	str	r3, [r2, #4]
 800ddde:	4421      	add	r1, r4
 800dde0:	6011      	str	r1, [r2, #0]
 800dde2:	e7da      	b.n	800dd9a <_free_r+0x26>
 800dde4:	d902      	bls.n	800ddec <_free_r+0x78>
 800dde6:	230c      	movs	r3, #12
 800dde8:	6003      	str	r3, [r0, #0]
 800ddea:	e7d6      	b.n	800dd9a <_free_r+0x26>
 800ddec:	6825      	ldr	r5, [r4, #0]
 800ddee:	1961      	adds	r1, r4, r5
 800ddf0:	428b      	cmp	r3, r1
 800ddf2:	bf04      	itt	eq
 800ddf4:	6819      	ldreq	r1, [r3, #0]
 800ddf6:	685b      	ldreq	r3, [r3, #4]
 800ddf8:	6063      	str	r3, [r4, #4]
 800ddfa:	bf04      	itt	eq
 800ddfc:	1949      	addeq	r1, r1, r5
 800ddfe:	6021      	streq	r1, [r4, #0]
 800de00:	6054      	str	r4, [r2, #4]
 800de02:	e7ca      	b.n	800dd9a <_free_r+0x26>
 800de04:	b003      	add	sp, #12
 800de06:	bd30      	pop	{r4, r5, pc}
 800de08:	20005510 	.word	0x20005510

0800de0c <sbrk_aligned>:
 800de0c:	b570      	push	{r4, r5, r6, lr}
 800de0e:	4e0e      	ldr	r6, [pc, #56]	; (800de48 <sbrk_aligned+0x3c>)
 800de10:	460c      	mov	r4, r1
 800de12:	6831      	ldr	r1, [r6, #0]
 800de14:	4605      	mov	r5, r0
 800de16:	b911      	cbnz	r1, 800de1e <sbrk_aligned+0x12>
 800de18:	f000 f8ca 	bl	800dfb0 <_sbrk_r>
 800de1c:	6030      	str	r0, [r6, #0]
 800de1e:	4621      	mov	r1, r4
 800de20:	4628      	mov	r0, r5
 800de22:	f000 f8c5 	bl	800dfb0 <_sbrk_r>
 800de26:	1c43      	adds	r3, r0, #1
 800de28:	d00a      	beq.n	800de40 <sbrk_aligned+0x34>
 800de2a:	1cc4      	adds	r4, r0, #3
 800de2c:	f024 0403 	bic.w	r4, r4, #3
 800de30:	42a0      	cmp	r0, r4
 800de32:	d007      	beq.n	800de44 <sbrk_aligned+0x38>
 800de34:	1a21      	subs	r1, r4, r0
 800de36:	4628      	mov	r0, r5
 800de38:	f000 f8ba 	bl	800dfb0 <_sbrk_r>
 800de3c:	3001      	adds	r0, #1
 800de3e:	d101      	bne.n	800de44 <sbrk_aligned+0x38>
 800de40:	f04f 34ff 	mov.w	r4, #4294967295
 800de44:	4620      	mov	r0, r4
 800de46:	bd70      	pop	{r4, r5, r6, pc}
 800de48:	20005514 	.word	0x20005514

0800de4c <_malloc_r>:
 800de4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de50:	1ccd      	adds	r5, r1, #3
 800de52:	f025 0503 	bic.w	r5, r5, #3
 800de56:	3508      	adds	r5, #8
 800de58:	2d0c      	cmp	r5, #12
 800de5a:	bf38      	it	cc
 800de5c:	250c      	movcc	r5, #12
 800de5e:	2d00      	cmp	r5, #0
 800de60:	4607      	mov	r7, r0
 800de62:	db01      	blt.n	800de68 <_malloc_r+0x1c>
 800de64:	42a9      	cmp	r1, r5
 800de66:	d905      	bls.n	800de74 <_malloc_r+0x28>
 800de68:	230c      	movs	r3, #12
 800de6a:	603b      	str	r3, [r7, #0]
 800de6c:	2600      	movs	r6, #0
 800de6e:	4630      	mov	r0, r6
 800de70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de74:	4e2e      	ldr	r6, [pc, #184]	; (800df30 <_malloc_r+0xe4>)
 800de76:	f000 f96d 	bl	800e154 <__malloc_lock>
 800de7a:	6833      	ldr	r3, [r6, #0]
 800de7c:	461c      	mov	r4, r3
 800de7e:	bb34      	cbnz	r4, 800dece <_malloc_r+0x82>
 800de80:	4629      	mov	r1, r5
 800de82:	4638      	mov	r0, r7
 800de84:	f7ff ffc2 	bl	800de0c <sbrk_aligned>
 800de88:	1c43      	adds	r3, r0, #1
 800de8a:	4604      	mov	r4, r0
 800de8c:	d14d      	bne.n	800df2a <_malloc_r+0xde>
 800de8e:	6834      	ldr	r4, [r6, #0]
 800de90:	4626      	mov	r6, r4
 800de92:	2e00      	cmp	r6, #0
 800de94:	d140      	bne.n	800df18 <_malloc_r+0xcc>
 800de96:	6823      	ldr	r3, [r4, #0]
 800de98:	4631      	mov	r1, r6
 800de9a:	4638      	mov	r0, r7
 800de9c:	eb04 0803 	add.w	r8, r4, r3
 800dea0:	f000 f886 	bl	800dfb0 <_sbrk_r>
 800dea4:	4580      	cmp	r8, r0
 800dea6:	d13a      	bne.n	800df1e <_malloc_r+0xd2>
 800dea8:	6821      	ldr	r1, [r4, #0]
 800deaa:	3503      	adds	r5, #3
 800deac:	1a6d      	subs	r5, r5, r1
 800deae:	f025 0503 	bic.w	r5, r5, #3
 800deb2:	3508      	adds	r5, #8
 800deb4:	2d0c      	cmp	r5, #12
 800deb6:	bf38      	it	cc
 800deb8:	250c      	movcc	r5, #12
 800deba:	4629      	mov	r1, r5
 800debc:	4638      	mov	r0, r7
 800debe:	f7ff ffa5 	bl	800de0c <sbrk_aligned>
 800dec2:	3001      	adds	r0, #1
 800dec4:	d02b      	beq.n	800df1e <_malloc_r+0xd2>
 800dec6:	6823      	ldr	r3, [r4, #0]
 800dec8:	442b      	add	r3, r5
 800deca:	6023      	str	r3, [r4, #0]
 800decc:	e00e      	b.n	800deec <_malloc_r+0xa0>
 800dece:	6822      	ldr	r2, [r4, #0]
 800ded0:	1b52      	subs	r2, r2, r5
 800ded2:	d41e      	bmi.n	800df12 <_malloc_r+0xc6>
 800ded4:	2a0b      	cmp	r2, #11
 800ded6:	d916      	bls.n	800df06 <_malloc_r+0xba>
 800ded8:	1961      	adds	r1, r4, r5
 800deda:	42a3      	cmp	r3, r4
 800dedc:	6025      	str	r5, [r4, #0]
 800dede:	bf18      	it	ne
 800dee0:	6059      	strne	r1, [r3, #4]
 800dee2:	6863      	ldr	r3, [r4, #4]
 800dee4:	bf08      	it	eq
 800dee6:	6031      	streq	r1, [r6, #0]
 800dee8:	5162      	str	r2, [r4, r5]
 800deea:	604b      	str	r3, [r1, #4]
 800deec:	4638      	mov	r0, r7
 800deee:	f104 060b 	add.w	r6, r4, #11
 800def2:	f000 f935 	bl	800e160 <__malloc_unlock>
 800def6:	f026 0607 	bic.w	r6, r6, #7
 800defa:	1d23      	adds	r3, r4, #4
 800defc:	1af2      	subs	r2, r6, r3
 800defe:	d0b6      	beq.n	800de6e <_malloc_r+0x22>
 800df00:	1b9b      	subs	r3, r3, r6
 800df02:	50a3      	str	r3, [r4, r2]
 800df04:	e7b3      	b.n	800de6e <_malloc_r+0x22>
 800df06:	6862      	ldr	r2, [r4, #4]
 800df08:	42a3      	cmp	r3, r4
 800df0a:	bf0c      	ite	eq
 800df0c:	6032      	streq	r2, [r6, #0]
 800df0e:	605a      	strne	r2, [r3, #4]
 800df10:	e7ec      	b.n	800deec <_malloc_r+0xa0>
 800df12:	4623      	mov	r3, r4
 800df14:	6864      	ldr	r4, [r4, #4]
 800df16:	e7b2      	b.n	800de7e <_malloc_r+0x32>
 800df18:	4634      	mov	r4, r6
 800df1a:	6876      	ldr	r6, [r6, #4]
 800df1c:	e7b9      	b.n	800de92 <_malloc_r+0x46>
 800df1e:	230c      	movs	r3, #12
 800df20:	603b      	str	r3, [r7, #0]
 800df22:	4638      	mov	r0, r7
 800df24:	f000 f91c 	bl	800e160 <__malloc_unlock>
 800df28:	e7a1      	b.n	800de6e <_malloc_r+0x22>
 800df2a:	6025      	str	r5, [r4, #0]
 800df2c:	e7de      	b.n	800deec <_malloc_r+0xa0>
 800df2e:	bf00      	nop
 800df30:	20005510 	.word	0x20005510

0800df34 <rand>:
 800df34:	4b16      	ldr	r3, [pc, #88]	; (800df90 <rand+0x5c>)
 800df36:	b510      	push	{r4, lr}
 800df38:	681c      	ldr	r4, [r3, #0]
 800df3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800df3c:	b9b3      	cbnz	r3, 800df6c <rand+0x38>
 800df3e:	2018      	movs	r0, #24
 800df40:	f7ff fef2 	bl	800dd28 <malloc>
 800df44:	63a0      	str	r0, [r4, #56]	; 0x38
 800df46:	b928      	cbnz	r0, 800df54 <rand+0x20>
 800df48:	4602      	mov	r2, r0
 800df4a:	4b12      	ldr	r3, [pc, #72]	; (800df94 <rand+0x60>)
 800df4c:	4812      	ldr	r0, [pc, #72]	; (800df98 <rand+0x64>)
 800df4e:	214e      	movs	r1, #78	; 0x4e
 800df50:	f000 f8d0 	bl	800e0f4 <__assert_func>
 800df54:	4a11      	ldr	r2, [pc, #68]	; (800df9c <rand+0x68>)
 800df56:	4b12      	ldr	r3, [pc, #72]	; (800dfa0 <rand+0x6c>)
 800df58:	e9c0 2300 	strd	r2, r3, [r0]
 800df5c:	4b11      	ldr	r3, [pc, #68]	; (800dfa4 <rand+0x70>)
 800df5e:	6083      	str	r3, [r0, #8]
 800df60:	230b      	movs	r3, #11
 800df62:	8183      	strh	r3, [r0, #12]
 800df64:	2201      	movs	r2, #1
 800df66:	2300      	movs	r3, #0
 800df68:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800df6c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800df6e:	4a0e      	ldr	r2, [pc, #56]	; (800dfa8 <rand+0x74>)
 800df70:	6920      	ldr	r0, [r4, #16]
 800df72:	6963      	ldr	r3, [r4, #20]
 800df74:	490d      	ldr	r1, [pc, #52]	; (800dfac <rand+0x78>)
 800df76:	4342      	muls	r2, r0
 800df78:	fb01 2203 	mla	r2, r1, r3, r2
 800df7c:	fba0 0101 	umull	r0, r1, r0, r1
 800df80:	1c43      	adds	r3, r0, #1
 800df82:	eb42 0001 	adc.w	r0, r2, r1
 800df86:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800df8a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800df8e:	bd10      	pop	{r4, pc}
 800df90:	20000090 	.word	0x20000090
 800df94:	0800f83c 	.word	0x0800f83c
 800df98:	0800f853 	.word	0x0800f853
 800df9c:	abcd330e 	.word	0xabcd330e
 800dfa0:	e66d1234 	.word	0xe66d1234
 800dfa4:	0005deec 	.word	0x0005deec
 800dfa8:	5851f42d 	.word	0x5851f42d
 800dfac:	4c957f2d 	.word	0x4c957f2d

0800dfb0 <_sbrk_r>:
 800dfb0:	b538      	push	{r3, r4, r5, lr}
 800dfb2:	4d06      	ldr	r5, [pc, #24]	; (800dfcc <_sbrk_r+0x1c>)
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	4604      	mov	r4, r0
 800dfb8:	4608      	mov	r0, r1
 800dfba:	602b      	str	r3, [r5, #0]
 800dfbc:	f7f3 fb58 	bl	8001670 <_sbrk>
 800dfc0:	1c43      	adds	r3, r0, #1
 800dfc2:	d102      	bne.n	800dfca <_sbrk_r+0x1a>
 800dfc4:	682b      	ldr	r3, [r5, #0]
 800dfc6:	b103      	cbz	r3, 800dfca <_sbrk_r+0x1a>
 800dfc8:	6023      	str	r3, [r4, #0]
 800dfca:	bd38      	pop	{r3, r4, r5, pc}
 800dfcc:	20005518 	.word	0x20005518

0800dfd0 <siprintf>:
 800dfd0:	b40e      	push	{r1, r2, r3}
 800dfd2:	b500      	push	{lr}
 800dfd4:	b09c      	sub	sp, #112	; 0x70
 800dfd6:	ab1d      	add	r3, sp, #116	; 0x74
 800dfd8:	9002      	str	r0, [sp, #8]
 800dfda:	9006      	str	r0, [sp, #24]
 800dfdc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dfe0:	4809      	ldr	r0, [pc, #36]	; (800e008 <siprintf+0x38>)
 800dfe2:	9107      	str	r1, [sp, #28]
 800dfe4:	9104      	str	r1, [sp, #16]
 800dfe6:	4909      	ldr	r1, [pc, #36]	; (800e00c <siprintf+0x3c>)
 800dfe8:	f853 2b04 	ldr.w	r2, [r3], #4
 800dfec:	9105      	str	r1, [sp, #20]
 800dfee:	6800      	ldr	r0, [r0, #0]
 800dff0:	9301      	str	r3, [sp, #4]
 800dff2:	a902      	add	r1, sp, #8
 800dff4:	f000 f916 	bl	800e224 <_svfiprintf_r>
 800dff8:	9b02      	ldr	r3, [sp, #8]
 800dffa:	2200      	movs	r2, #0
 800dffc:	701a      	strb	r2, [r3, #0]
 800dffe:	b01c      	add	sp, #112	; 0x70
 800e000:	f85d eb04 	ldr.w	lr, [sp], #4
 800e004:	b003      	add	sp, #12
 800e006:	4770      	bx	lr
 800e008:	20000090 	.word	0x20000090
 800e00c:	ffff0208 	.word	0xffff0208

0800e010 <strchr>:
 800e010:	b2c9      	uxtb	r1, r1
 800e012:	4603      	mov	r3, r0
 800e014:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e018:	b11a      	cbz	r2, 800e022 <strchr+0x12>
 800e01a:	428a      	cmp	r2, r1
 800e01c:	d1f9      	bne.n	800e012 <strchr+0x2>
 800e01e:	4618      	mov	r0, r3
 800e020:	4770      	bx	lr
 800e022:	2900      	cmp	r1, #0
 800e024:	bf18      	it	ne
 800e026:	2300      	movne	r3, #0
 800e028:	e7f9      	b.n	800e01e <strchr+0xe>

0800e02a <strcpy>:
 800e02a:	4603      	mov	r3, r0
 800e02c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e030:	f803 2b01 	strb.w	r2, [r3], #1
 800e034:	2a00      	cmp	r2, #0
 800e036:	d1f9      	bne.n	800e02c <strcpy+0x2>
 800e038:	4770      	bx	lr
	...

0800e03c <strtok>:
 800e03c:	4b16      	ldr	r3, [pc, #88]	; (800e098 <strtok+0x5c>)
 800e03e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e040:	681e      	ldr	r6, [r3, #0]
 800e042:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800e044:	4605      	mov	r5, r0
 800e046:	b9fc      	cbnz	r4, 800e088 <strtok+0x4c>
 800e048:	2050      	movs	r0, #80	; 0x50
 800e04a:	9101      	str	r1, [sp, #4]
 800e04c:	f7ff fe6c 	bl	800dd28 <malloc>
 800e050:	9901      	ldr	r1, [sp, #4]
 800e052:	65b0      	str	r0, [r6, #88]	; 0x58
 800e054:	4602      	mov	r2, r0
 800e056:	b920      	cbnz	r0, 800e062 <strtok+0x26>
 800e058:	4b10      	ldr	r3, [pc, #64]	; (800e09c <strtok+0x60>)
 800e05a:	4811      	ldr	r0, [pc, #68]	; (800e0a0 <strtok+0x64>)
 800e05c:	2157      	movs	r1, #87	; 0x57
 800e05e:	f000 f849 	bl	800e0f4 <__assert_func>
 800e062:	e9c0 4400 	strd	r4, r4, [r0]
 800e066:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800e06a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800e06e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800e072:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800e076:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800e07a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800e07e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800e082:	6184      	str	r4, [r0, #24]
 800e084:	7704      	strb	r4, [r0, #28]
 800e086:	6244      	str	r4, [r0, #36]	; 0x24
 800e088:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800e08a:	2301      	movs	r3, #1
 800e08c:	4628      	mov	r0, r5
 800e08e:	b002      	add	sp, #8
 800e090:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e094:	f000 b806 	b.w	800e0a4 <__strtok_r>
 800e098:	20000090 	.word	0x20000090
 800e09c:	0800f83c 	.word	0x0800f83c
 800e0a0:	0800f8ae 	.word	0x0800f8ae

0800e0a4 <__strtok_r>:
 800e0a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0a6:	b908      	cbnz	r0, 800e0ac <__strtok_r+0x8>
 800e0a8:	6810      	ldr	r0, [r2, #0]
 800e0aa:	b188      	cbz	r0, 800e0d0 <__strtok_r+0x2c>
 800e0ac:	4604      	mov	r4, r0
 800e0ae:	4620      	mov	r0, r4
 800e0b0:	f814 5b01 	ldrb.w	r5, [r4], #1
 800e0b4:	460f      	mov	r7, r1
 800e0b6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800e0ba:	b91e      	cbnz	r6, 800e0c4 <__strtok_r+0x20>
 800e0bc:	b965      	cbnz	r5, 800e0d8 <__strtok_r+0x34>
 800e0be:	6015      	str	r5, [r2, #0]
 800e0c0:	4628      	mov	r0, r5
 800e0c2:	e005      	b.n	800e0d0 <__strtok_r+0x2c>
 800e0c4:	42b5      	cmp	r5, r6
 800e0c6:	d1f6      	bne.n	800e0b6 <__strtok_r+0x12>
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d1f0      	bne.n	800e0ae <__strtok_r+0xa>
 800e0cc:	6014      	str	r4, [r2, #0]
 800e0ce:	7003      	strb	r3, [r0, #0]
 800e0d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0d2:	461c      	mov	r4, r3
 800e0d4:	e00c      	b.n	800e0f0 <__strtok_r+0x4c>
 800e0d6:	b915      	cbnz	r5, 800e0de <__strtok_r+0x3a>
 800e0d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e0dc:	460e      	mov	r6, r1
 800e0de:	f816 5b01 	ldrb.w	r5, [r6], #1
 800e0e2:	42ab      	cmp	r3, r5
 800e0e4:	d1f7      	bne.n	800e0d6 <__strtok_r+0x32>
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d0f3      	beq.n	800e0d2 <__strtok_r+0x2e>
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	f804 3c01 	strb.w	r3, [r4, #-1]
 800e0f0:	6014      	str	r4, [r2, #0]
 800e0f2:	e7ed      	b.n	800e0d0 <__strtok_r+0x2c>

0800e0f4 <__assert_func>:
 800e0f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e0f6:	4614      	mov	r4, r2
 800e0f8:	461a      	mov	r2, r3
 800e0fa:	4b09      	ldr	r3, [pc, #36]	; (800e120 <__assert_func+0x2c>)
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	4605      	mov	r5, r0
 800e100:	68d8      	ldr	r0, [r3, #12]
 800e102:	b14c      	cbz	r4, 800e118 <__assert_func+0x24>
 800e104:	4b07      	ldr	r3, [pc, #28]	; (800e124 <__assert_func+0x30>)
 800e106:	9100      	str	r1, [sp, #0]
 800e108:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e10c:	4906      	ldr	r1, [pc, #24]	; (800e128 <__assert_func+0x34>)
 800e10e:	462b      	mov	r3, r5
 800e110:	f000 f80e 	bl	800e130 <fiprintf>
 800e114:	f000 fd34 	bl	800eb80 <abort>
 800e118:	4b04      	ldr	r3, [pc, #16]	; (800e12c <__assert_func+0x38>)
 800e11a:	461c      	mov	r4, r3
 800e11c:	e7f3      	b.n	800e106 <__assert_func+0x12>
 800e11e:	bf00      	nop
 800e120:	20000090 	.word	0x20000090
 800e124:	0800f90b 	.word	0x0800f90b
 800e128:	0800f918 	.word	0x0800f918
 800e12c:	0800f946 	.word	0x0800f946

0800e130 <fiprintf>:
 800e130:	b40e      	push	{r1, r2, r3}
 800e132:	b503      	push	{r0, r1, lr}
 800e134:	4601      	mov	r1, r0
 800e136:	ab03      	add	r3, sp, #12
 800e138:	4805      	ldr	r0, [pc, #20]	; (800e150 <fiprintf+0x20>)
 800e13a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e13e:	6800      	ldr	r0, [r0, #0]
 800e140:	9301      	str	r3, [sp, #4]
 800e142:	f000 f999 	bl	800e478 <_vfiprintf_r>
 800e146:	b002      	add	sp, #8
 800e148:	f85d eb04 	ldr.w	lr, [sp], #4
 800e14c:	b003      	add	sp, #12
 800e14e:	4770      	bx	lr
 800e150:	20000090 	.word	0x20000090

0800e154 <__malloc_lock>:
 800e154:	4801      	ldr	r0, [pc, #4]	; (800e15c <__malloc_lock+0x8>)
 800e156:	f000 bed3 	b.w	800ef00 <__retarget_lock_acquire_recursive>
 800e15a:	bf00      	nop
 800e15c:	2000551c 	.word	0x2000551c

0800e160 <__malloc_unlock>:
 800e160:	4801      	ldr	r0, [pc, #4]	; (800e168 <__malloc_unlock+0x8>)
 800e162:	f000 bece 	b.w	800ef02 <__retarget_lock_release_recursive>
 800e166:	bf00      	nop
 800e168:	2000551c 	.word	0x2000551c

0800e16c <__ssputs_r>:
 800e16c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e170:	688e      	ldr	r6, [r1, #8]
 800e172:	429e      	cmp	r6, r3
 800e174:	4682      	mov	sl, r0
 800e176:	460c      	mov	r4, r1
 800e178:	4690      	mov	r8, r2
 800e17a:	461f      	mov	r7, r3
 800e17c:	d838      	bhi.n	800e1f0 <__ssputs_r+0x84>
 800e17e:	898a      	ldrh	r2, [r1, #12]
 800e180:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e184:	d032      	beq.n	800e1ec <__ssputs_r+0x80>
 800e186:	6825      	ldr	r5, [r4, #0]
 800e188:	6909      	ldr	r1, [r1, #16]
 800e18a:	eba5 0901 	sub.w	r9, r5, r1
 800e18e:	6965      	ldr	r5, [r4, #20]
 800e190:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e194:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e198:	3301      	adds	r3, #1
 800e19a:	444b      	add	r3, r9
 800e19c:	106d      	asrs	r5, r5, #1
 800e19e:	429d      	cmp	r5, r3
 800e1a0:	bf38      	it	cc
 800e1a2:	461d      	movcc	r5, r3
 800e1a4:	0553      	lsls	r3, r2, #21
 800e1a6:	d531      	bpl.n	800e20c <__ssputs_r+0xa0>
 800e1a8:	4629      	mov	r1, r5
 800e1aa:	f7ff fe4f 	bl	800de4c <_malloc_r>
 800e1ae:	4606      	mov	r6, r0
 800e1b0:	b950      	cbnz	r0, 800e1c8 <__ssputs_r+0x5c>
 800e1b2:	230c      	movs	r3, #12
 800e1b4:	f8ca 3000 	str.w	r3, [sl]
 800e1b8:	89a3      	ldrh	r3, [r4, #12]
 800e1ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1be:	81a3      	strh	r3, [r4, #12]
 800e1c0:	f04f 30ff 	mov.w	r0, #4294967295
 800e1c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1c8:	6921      	ldr	r1, [r4, #16]
 800e1ca:	464a      	mov	r2, r9
 800e1cc:	f7ff fdbc 	bl	800dd48 <memcpy>
 800e1d0:	89a3      	ldrh	r3, [r4, #12]
 800e1d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e1d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1da:	81a3      	strh	r3, [r4, #12]
 800e1dc:	6126      	str	r6, [r4, #16]
 800e1de:	6165      	str	r5, [r4, #20]
 800e1e0:	444e      	add	r6, r9
 800e1e2:	eba5 0509 	sub.w	r5, r5, r9
 800e1e6:	6026      	str	r6, [r4, #0]
 800e1e8:	60a5      	str	r5, [r4, #8]
 800e1ea:	463e      	mov	r6, r7
 800e1ec:	42be      	cmp	r6, r7
 800e1ee:	d900      	bls.n	800e1f2 <__ssputs_r+0x86>
 800e1f0:	463e      	mov	r6, r7
 800e1f2:	6820      	ldr	r0, [r4, #0]
 800e1f4:	4632      	mov	r2, r6
 800e1f6:	4641      	mov	r1, r8
 800e1f8:	f000 feea 	bl	800efd0 <memmove>
 800e1fc:	68a3      	ldr	r3, [r4, #8]
 800e1fe:	1b9b      	subs	r3, r3, r6
 800e200:	60a3      	str	r3, [r4, #8]
 800e202:	6823      	ldr	r3, [r4, #0]
 800e204:	4433      	add	r3, r6
 800e206:	6023      	str	r3, [r4, #0]
 800e208:	2000      	movs	r0, #0
 800e20a:	e7db      	b.n	800e1c4 <__ssputs_r+0x58>
 800e20c:	462a      	mov	r2, r5
 800e20e:	f000 fef9 	bl	800f004 <_realloc_r>
 800e212:	4606      	mov	r6, r0
 800e214:	2800      	cmp	r0, #0
 800e216:	d1e1      	bne.n	800e1dc <__ssputs_r+0x70>
 800e218:	6921      	ldr	r1, [r4, #16]
 800e21a:	4650      	mov	r0, sl
 800e21c:	f7ff fdaa 	bl	800dd74 <_free_r>
 800e220:	e7c7      	b.n	800e1b2 <__ssputs_r+0x46>
	...

0800e224 <_svfiprintf_r>:
 800e224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e228:	4698      	mov	r8, r3
 800e22a:	898b      	ldrh	r3, [r1, #12]
 800e22c:	061b      	lsls	r3, r3, #24
 800e22e:	b09d      	sub	sp, #116	; 0x74
 800e230:	4607      	mov	r7, r0
 800e232:	460d      	mov	r5, r1
 800e234:	4614      	mov	r4, r2
 800e236:	d50e      	bpl.n	800e256 <_svfiprintf_r+0x32>
 800e238:	690b      	ldr	r3, [r1, #16]
 800e23a:	b963      	cbnz	r3, 800e256 <_svfiprintf_r+0x32>
 800e23c:	2140      	movs	r1, #64	; 0x40
 800e23e:	f7ff fe05 	bl	800de4c <_malloc_r>
 800e242:	6028      	str	r0, [r5, #0]
 800e244:	6128      	str	r0, [r5, #16]
 800e246:	b920      	cbnz	r0, 800e252 <_svfiprintf_r+0x2e>
 800e248:	230c      	movs	r3, #12
 800e24a:	603b      	str	r3, [r7, #0]
 800e24c:	f04f 30ff 	mov.w	r0, #4294967295
 800e250:	e0d1      	b.n	800e3f6 <_svfiprintf_r+0x1d2>
 800e252:	2340      	movs	r3, #64	; 0x40
 800e254:	616b      	str	r3, [r5, #20]
 800e256:	2300      	movs	r3, #0
 800e258:	9309      	str	r3, [sp, #36]	; 0x24
 800e25a:	2320      	movs	r3, #32
 800e25c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e260:	f8cd 800c 	str.w	r8, [sp, #12]
 800e264:	2330      	movs	r3, #48	; 0x30
 800e266:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e410 <_svfiprintf_r+0x1ec>
 800e26a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e26e:	f04f 0901 	mov.w	r9, #1
 800e272:	4623      	mov	r3, r4
 800e274:	469a      	mov	sl, r3
 800e276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e27a:	b10a      	cbz	r2, 800e280 <_svfiprintf_r+0x5c>
 800e27c:	2a25      	cmp	r2, #37	; 0x25
 800e27e:	d1f9      	bne.n	800e274 <_svfiprintf_r+0x50>
 800e280:	ebba 0b04 	subs.w	fp, sl, r4
 800e284:	d00b      	beq.n	800e29e <_svfiprintf_r+0x7a>
 800e286:	465b      	mov	r3, fp
 800e288:	4622      	mov	r2, r4
 800e28a:	4629      	mov	r1, r5
 800e28c:	4638      	mov	r0, r7
 800e28e:	f7ff ff6d 	bl	800e16c <__ssputs_r>
 800e292:	3001      	adds	r0, #1
 800e294:	f000 80aa 	beq.w	800e3ec <_svfiprintf_r+0x1c8>
 800e298:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e29a:	445a      	add	r2, fp
 800e29c:	9209      	str	r2, [sp, #36]	; 0x24
 800e29e:	f89a 3000 	ldrb.w	r3, [sl]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	f000 80a2 	beq.w	800e3ec <_svfiprintf_r+0x1c8>
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	f04f 32ff 	mov.w	r2, #4294967295
 800e2ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e2b2:	f10a 0a01 	add.w	sl, sl, #1
 800e2b6:	9304      	str	r3, [sp, #16]
 800e2b8:	9307      	str	r3, [sp, #28]
 800e2ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e2be:	931a      	str	r3, [sp, #104]	; 0x68
 800e2c0:	4654      	mov	r4, sl
 800e2c2:	2205      	movs	r2, #5
 800e2c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2c8:	4851      	ldr	r0, [pc, #324]	; (800e410 <_svfiprintf_r+0x1ec>)
 800e2ca:	f7f1 ff91 	bl	80001f0 <memchr>
 800e2ce:	9a04      	ldr	r2, [sp, #16]
 800e2d0:	b9d8      	cbnz	r0, 800e30a <_svfiprintf_r+0xe6>
 800e2d2:	06d0      	lsls	r0, r2, #27
 800e2d4:	bf44      	itt	mi
 800e2d6:	2320      	movmi	r3, #32
 800e2d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e2dc:	0711      	lsls	r1, r2, #28
 800e2de:	bf44      	itt	mi
 800e2e0:	232b      	movmi	r3, #43	; 0x2b
 800e2e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e2e6:	f89a 3000 	ldrb.w	r3, [sl]
 800e2ea:	2b2a      	cmp	r3, #42	; 0x2a
 800e2ec:	d015      	beq.n	800e31a <_svfiprintf_r+0xf6>
 800e2ee:	9a07      	ldr	r2, [sp, #28]
 800e2f0:	4654      	mov	r4, sl
 800e2f2:	2000      	movs	r0, #0
 800e2f4:	f04f 0c0a 	mov.w	ip, #10
 800e2f8:	4621      	mov	r1, r4
 800e2fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e2fe:	3b30      	subs	r3, #48	; 0x30
 800e300:	2b09      	cmp	r3, #9
 800e302:	d94e      	bls.n	800e3a2 <_svfiprintf_r+0x17e>
 800e304:	b1b0      	cbz	r0, 800e334 <_svfiprintf_r+0x110>
 800e306:	9207      	str	r2, [sp, #28]
 800e308:	e014      	b.n	800e334 <_svfiprintf_r+0x110>
 800e30a:	eba0 0308 	sub.w	r3, r0, r8
 800e30e:	fa09 f303 	lsl.w	r3, r9, r3
 800e312:	4313      	orrs	r3, r2
 800e314:	9304      	str	r3, [sp, #16]
 800e316:	46a2      	mov	sl, r4
 800e318:	e7d2      	b.n	800e2c0 <_svfiprintf_r+0x9c>
 800e31a:	9b03      	ldr	r3, [sp, #12]
 800e31c:	1d19      	adds	r1, r3, #4
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	9103      	str	r1, [sp, #12]
 800e322:	2b00      	cmp	r3, #0
 800e324:	bfbb      	ittet	lt
 800e326:	425b      	neglt	r3, r3
 800e328:	f042 0202 	orrlt.w	r2, r2, #2
 800e32c:	9307      	strge	r3, [sp, #28]
 800e32e:	9307      	strlt	r3, [sp, #28]
 800e330:	bfb8      	it	lt
 800e332:	9204      	strlt	r2, [sp, #16]
 800e334:	7823      	ldrb	r3, [r4, #0]
 800e336:	2b2e      	cmp	r3, #46	; 0x2e
 800e338:	d10c      	bne.n	800e354 <_svfiprintf_r+0x130>
 800e33a:	7863      	ldrb	r3, [r4, #1]
 800e33c:	2b2a      	cmp	r3, #42	; 0x2a
 800e33e:	d135      	bne.n	800e3ac <_svfiprintf_r+0x188>
 800e340:	9b03      	ldr	r3, [sp, #12]
 800e342:	1d1a      	adds	r2, r3, #4
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	9203      	str	r2, [sp, #12]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	bfb8      	it	lt
 800e34c:	f04f 33ff 	movlt.w	r3, #4294967295
 800e350:	3402      	adds	r4, #2
 800e352:	9305      	str	r3, [sp, #20]
 800e354:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e420 <_svfiprintf_r+0x1fc>
 800e358:	7821      	ldrb	r1, [r4, #0]
 800e35a:	2203      	movs	r2, #3
 800e35c:	4650      	mov	r0, sl
 800e35e:	f7f1 ff47 	bl	80001f0 <memchr>
 800e362:	b140      	cbz	r0, 800e376 <_svfiprintf_r+0x152>
 800e364:	2340      	movs	r3, #64	; 0x40
 800e366:	eba0 000a 	sub.w	r0, r0, sl
 800e36a:	fa03 f000 	lsl.w	r0, r3, r0
 800e36e:	9b04      	ldr	r3, [sp, #16]
 800e370:	4303      	orrs	r3, r0
 800e372:	3401      	adds	r4, #1
 800e374:	9304      	str	r3, [sp, #16]
 800e376:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e37a:	4826      	ldr	r0, [pc, #152]	; (800e414 <_svfiprintf_r+0x1f0>)
 800e37c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e380:	2206      	movs	r2, #6
 800e382:	f7f1 ff35 	bl	80001f0 <memchr>
 800e386:	2800      	cmp	r0, #0
 800e388:	d038      	beq.n	800e3fc <_svfiprintf_r+0x1d8>
 800e38a:	4b23      	ldr	r3, [pc, #140]	; (800e418 <_svfiprintf_r+0x1f4>)
 800e38c:	bb1b      	cbnz	r3, 800e3d6 <_svfiprintf_r+0x1b2>
 800e38e:	9b03      	ldr	r3, [sp, #12]
 800e390:	3307      	adds	r3, #7
 800e392:	f023 0307 	bic.w	r3, r3, #7
 800e396:	3308      	adds	r3, #8
 800e398:	9303      	str	r3, [sp, #12]
 800e39a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e39c:	4433      	add	r3, r6
 800e39e:	9309      	str	r3, [sp, #36]	; 0x24
 800e3a0:	e767      	b.n	800e272 <_svfiprintf_r+0x4e>
 800e3a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e3a6:	460c      	mov	r4, r1
 800e3a8:	2001      	movs	r0, #1
 800e3aa:	e7a5      	b.n	800e2f8 <_svfiprintf_r+0xd4>
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	3401      	adds	r4, #1
 800e3b0:	9305      	str	r3, [sp, #20]
 800e3b2:	4619      	mov	r1, r3
 800e3b4:	f04f 0c0a 	mov.w	ip, #10
 800e3b8:	4620      	mov	r0, r4
 800e3ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e3be:	3a30      	subs	r2, #48	; 0x30
 800e3c0:	2a09      	cmp	r2, #9
 800e3c2:	d903      	bls.n	800e3cc <_svfiprintf_r+0x1a8>
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d0c5      	beq.n	800e354 <_svfiprintf_r+0x130>
 800e3c8:	9105      	str	r1, [sp, #20]
 800e3ca:	e7c3      	b.n	800e354 <_svfiprintf_r+0x130>
 800e3cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800e3d0:	4604      	mov	r4, r0
 800e3d2:	2301      	movs	r3, #1
 800e3d4:	e7f0      	b.n	800e3b8 <_svfiprintf_r+0x194>
 800e3d6:	ab03      	add	r3, sp, #12
 800e3d8:	9300      	str	r3, [sp, #0]
 800e3da:	462a      	mov	r2, r5
 800e3dc:	4b0f      	ldr	r3, [pc, #60]	; (800e41c <_svfiprintf_r+0x1f8>)
 800e3de:	a904      	add	r1, sp, #16
 800e3e0:	4638      	mov	r0, r7
 800e3e2:	f3af 8000 	nop.w
 800e3e6:	1c42      	adds	r2, r0, #1
 800e3e8:	4606      	mov	r6, r0
 800e3ea:	d1d6      	bne.n	800e39a <_svfiprintf_r+0x176>
 800e3ec:	89ab      	ldrh	r3, [r5, #12]
 800e3ee:	065b      	lsls	r3, r3, #25
 800e3f0:	f53f af2c 	bmi.w	800e24c <_svfiprintf_r+0x28>
 800e3f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e3f6:	b01d      	add	sp, #116	; 0x74
 800e3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3fc:	ab03      	add	r3, sp, #12
 800e3fe:	9300      	str	r3, [sp, #0]
 800e400:	462a      	mov	r2, r5
 800e402:	4b06      	ldr	r3, [pc, #24]	; (800e41c <_svfiprintf_r+0x1f8>)
 800e404:	a904      	add	r1, sp, #16
 800e406:	4638      	mov	r0, r7
 800e408:	f000 f9d4 	bl	800e7b4 <_printf_i>
 800e40c:	e7eb      	b.n	800e3e6 <_svfiprintf_r+0x1c2>
 800e40e:	bf00      	nop
 800e410:	0800f947 	.word	0x0800f947
 800e414:	0800f951 	.word	0x0800f951
 800e418:	00000000 	.word	0x00000000
 800e41c:	0800e16d 	.word	0x0800e16d
 800e420:	0800f94d 	.word	0x0800f94d

0800e424 <__sfputc_r>:
 800e424:	6893      	ldr	r3, [r2, #8]
 800e426:	3b01      	subs	r3, #1
 800e428:	2b00      	cmp	r3, #0
 800e42a:	b410      	push	{r4}
 800e42c:	6093      	str	r3, [r2, #8]
 800e42e:	da08      	bge.n	800e442 <__sfputc_r+0x1e>
 800e430:	6994      	ldr	r4, [r2, #24]
 800e432:	42a3      	cmp	r3, r4
 800e434:	db01      	blt.n	800e43a <__sfputc_r+0x16>
 800e436:	290a      	cmp	r1, #10
 800e438:	d103      	bne.n	800e442 <__sfputc_r+0x1e>
 800e43a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e43e:	f000 badf 	b.w	800ea00 <__swbuf_r>
 800e442:	6813      	ldr	r3, [r2, #0]
 800e444:	1c58      	adds	r0, r3, #1
 800e446:	6010      	str	r0, [r2, #0]
 800e448:	7019      	strb	r1, [r3, #0]
 800e44a:	4608      	mov	r0, r1
 800e44c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e450:	4770      	bx	lr

0800e452 <__sfputs_r>:
 800e452:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e454:	4606      	mov	r6, r0
 800e456:	460f      	mov	r7, r1
 800e458:	4614      	mov	r4, r2
 800e45a:	18d5      	adds	r5, r2, r3
 800e45c:	42ac      	cmp	r4, r5
 800e45e:	d101      	bne.n	800e464 <__sfputs_r+0x12>
 800e460:	2000      	movs	r0, #0
 800e462:	e007      	b.n	800e474 <__sfputs_r+0x22>
 800e464:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e468:	463a      	mov	r2, r7
 800e46a:	4630      	mov	r0, r6
 800e46c:	f7ff ffda 	bl	800e424 <__sfputc_r>
 800e470:	1c43      	adds	r3, r0, #1
 800e472:	d1f3      	bne.n	800e45c <__sfputs_r+0xa>
 800e474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e478 <_vfiprintf_r>:
 800e478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e47c:	460d      	mov	r5, r1
 800e47e:	b09d      	sub	sp, #116	; 0x74
 800e480:	4614      	mov	r4, r2
 800e482:	4698      	mov	r8, r3
 800e484:	4606      	mov	r6, r0
 800e486:	b118      	cbz	r0, 800e490 <_vfiprintf_r+0x18>
 800e488:	6983      	ldr	r3, [r0, #24]
 800e48a:	b90b      	cbnz	r3, 800e490 <_vfiprintf_r+0x18>
 800e48c:	f000 fc9a 	bl	800edc4 <__sinit>
 800e490:	4b89      	ldr	r3, [pc, #548]	; (800e6b8 <_vfiprintf_r+0x240>)
 800e492:	429d      	cmp	r5, r3
 800e494:	d11b      	bne.n	800e4ce <_vfiprintf_r+0x56>
 800e496:	6875      	ldr	r5, [r6, #4]
 800e498:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e49a:	07d9      	lsls	r1, r3, #31
 800e49c:	d405      	bmi.n	800e4aa <_vfiprintf_r+0x32>
 800e49e:	89ab      	ldrh	r3, [r5, #12]
 800e4a0:	059a      	lsls	r2, r3, #22
 800e4a2:	d402      	bmi.n	800e4aa <_vfiprintf_r+0x32>
 800e4a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e4a6:	f000 fd2b 	bl	800ef00 <__retarget_lock_acquire_recursive>
 800e4aa:	89ab      	ldrh	r3, [r5, #12]
 800e4ac:	071b      	lsls	r3, r3, #28
 800e4ae:	d501      	bpl.n	800e4b4 <_vfiprintf_r+0x3c>
 800e4b0:	692b      	ldr	r3, [r5, #16]
 800e4b2:	b9eb      	cbnz	r3, 800e4f0 <_vfiprintf_r+0x78>
 800e4b4:	4629      	mov	r1, r5
 800e4b6:	4630      	mov	r0, r6
 800e4b8:	f000 faf4 	bl	800eaa4 <__swsetup_r>
 800e4bc:	b1c0      	cbz	r0, 800e4f0 <_vfiprintf_r+0x78>
 800e4be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e4c0:	07dc      	lsls	r4, r3, #31
 800e4c2:	d50e      	bpl.n	800e4e2 <_vfiprintf_r+0x6a>
 800e4c4:	f04f 30ff 	mov.w	r0, #4294967295
 800e4c8:	b01d      	add	sp, #116	; 0x74
 800e4ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4ce:	4b7b      	ldr	r3, [pc, #492]	; (800e6bc <_vfiprintf_r+0x244>)
 800e4d0:	429d      	cmp	r5, r3
 800e4d2:	d101      	bne.n	800e4d8 <_vfiprintf_r+0x60>
 800e4d4:	68b5      	ldr	r5, [r6, #8]
 800e4d6:	e7df      	b.n	800e498 <_vfiprintf_r+0x20>
 800e4d8:	4b79      	ldr	r3, [pc, #484]	; (800e6c0 <_vfiprintf_r+0x248>)
 800e4da:	429d      	cmp	r5, r3
 800e4dc:	bf08      	it	eq
 800e4de:	68f5      	ldreq	r5, [r6, #12]
 800e4e0:	e7da      	b.n	800e498 <_vfiprintf_r+0x20>
 800e4e2:	89ab      	ldrh	r3, [r5, #12]
 800e4e4:	0598      	lsls	r0, r3, #22
 800e4e6:	d4ed      	bmi.n	800e4c4 <_vfiprintf_r+0x4c>
 800e4e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e4ea:	f000 fd0a 	bl	800ef02 <__retarget_lock_release_recursive>
 800e4ee:	e7e9      	b.n	800e4c4 <_vfiprintf_r+0x4c>
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	9309      	str	r3, [sp, #36]	; 0x24
 800e4f4:	2320      	movs	r3, #32
 800e4f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e4fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800e4fe:	2330      	movs	r3, #48	; 0x30
 800e500:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e6c4 <_vfiprintf_r+0x24c>
 800e504:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e508:	f04f 0901 	mov.w	r9, #1
 800e50c:	4623      	mov	r3, r4
 800e50e:	469a      	mov	sl, r3
 800e510:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e514:	b10a      	cbz	r2, 800e51a <_vfiprintf_r+0xa2>
 800e516:	2a25      	cmp	r2, #37	; 0x25
 800e518:	d1f9      	bne.n	800e50e <_vfiprintf_r+0x96>
 800e51a:	ebba 0b04 	subs.w	fp, sl, r4
 800e51e:	d00b      	beq.n	800e538 <_vfiprintf_r+0xc0>
 800e520:	465b      	mov	r3, fp
 800e522:	4622      	mov	r2, r4
 800e524:	4629      	mov	r1, r5
 800e526:	4630      	mov	r0, r6
 800e528:	f7ff ff93 	bl	800e452 <__sfputs_r>
 800e52c:	3001      	adds	r0, #1
 800e52e:	f000 80aa 	beq.w	800e686 <_vfiprintf_r+0x20e>
 800e532:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e534:	445a      	add	r2, fp
 800e536:	9209      	str	r2, [sp, #36]	; 0x24
 800e538:	f89a 3000 	ldrb.w	r3, [sl]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	f000 80a2 	beq.w	800e686 <_vfiprintf_r+0x20e>
 800e542:	2300      	movs	r3, #0
 800e544:	f04f 32ff 	mov.w	r2, #4294967295
 800e548:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e54c:	f10a 0a01 	add.w	sl, sl, #1
 800e550:	9304      	str	r3, [sp, #16]
 800e552:	9307      	str	r3, [sp, #28]
 800e554:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e558:	931a      	str	r3, [sp, #104]	; 0x68
 800e55a:	4654      	mov	r4, sl
 800e55c:	2205      	movs	r2, #5
 800e55e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e562:	4858      	ldr	r0, [pc, #352]	; (800e6c4 <_vfiprintf_r+0x24c>)
 800e564:	f7f1 fe44 	bl	80001f0 <memchr>
 800e568:	9a04      	ldr	r2, [sp, #16]
 800e56a:	b9d8      	cbnz	r0, 800e5a4 <_vfiprintf_r+0x12c>
 800e56c:	06d1      	lsls	r1, r2, #27
 800e56e:	bf44      	itt	mi
 800e570:	2320      	movmi	r3, #32
 800e572:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e576:	0713      	lsls	r3, r2, #28
 800e578:	bf44      	itt	mi
 800e57a:	232b      	movmi	r3, #43	; 0x2b
 800e57c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e580:	f89a 3000 	ldrb.w	r3, [sl]
 800e584:	2b2a      	cmp	r3, #42	; 0x2a
 800e586:	d015      	beq.n	800e5b4 <_vfiprintf_r+0x13c>
 800e588:	9a07      	ldr	r2, [sp, #28]
 800e58a:	4654      	mov	r4, sl
 800e58c:	2000      	movs	r0, #0
 800e58e:	f04f 0c0a 	mov.w	ip, #10
 800e592:	4621      	mov	r1, r4
 800e594:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e598:	3b30      	subs	r3, #48	; 0x30
 800e59a:	2b09      	cmp	r3, #9
 800e59c:	d94e      	bls.n	800e63c <_vfiprintf_r+0x1c4>
 800e59e:	b1b0      	cbz	r0, 800e5ce <_vfiprintf_r+0x156>
 800e5a0:	9207      	str	r2, [sp, #28]
 800e5a2:	e014      	b.n	800e5ce <_vfiprintf_r+0x156>
 800e5a4:	eba0 0308 	sub.w	r3, r0, r8
 800e5a8:	fa09 f303 	lsl.w	r3, r9, r3
 800e5ac:	4313      	orrs	r3, r2
 800e5ae:	9304      	str	r3, [sp, #16]
 800e5b0:	46a2      	mov	sl, r4
 800e5b2:	e7d2      	b.n	800e55a <_vfiprintf_r+0xe2>
 800e5b4:	9b03      	ldr	r3, [sp, #12]
 800e5b6:	1d19      	adds	r1, r3, #4
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	9103      	str	r1, [sp, #12]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	bfbb      	ittet	lt
 800e5c0:	425b      	neglt	r3, r3
 800e5c2:	f042 0202 	orrlt.w	r2, r2, #2
 800e5c6:	9307      	strge	r3, [sp, #28]
 800e5c8:	9307      	strlt	r3, [sp, #28]
 800e5ca:	bfb8      	it	lt
 800e5cc:	9204      	strlt	r2, [sp, #16]
 800e5ce:	7823      	ldrb	r3, [r4, #0]
 800e5d0:	2b2e      	cmp	r3, #46	; 0x2e
 800e5d2:	d10c      	bne.n	800e5ee <_vfiprintf_r+0x176>
 800e5d4:	7863      	ldrb	r3, [r4, #1]
 800e5d6:	2b2a      	cmp	r3, #42	; 0x2a
 800e5d8:	d135      	bne.n	800e646 <_vfiprintf_r+0x1ce>
 800e5da:	9b03      	ldr	r3, [sp, #12]
 800e5dc:	1d1a      	adds	r2, r3, #4
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	9203      	str	r2, [sp, #12]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	bfb8      	it	lt
 800e5e6:	f04f 33ff 	movlt.w	r3, #4294967295
 800e5ea:	3402      	adds	r4, #2
 800e5ec:	9305      	str	r3, [sp, #20]
 800e5ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e6d4 <_vfiprintf_r+0x25c>
 800e5f2:	7821      	ldrb	r1, [r4, #0]
 800e5f4:	2203      	movs	r2, #3
 800e5f6:	4650      	mov	r0, sl
 800e5f8:	f7f1 fdfa 	bl	80001f0 <memchr>
 800e5fc:	b140      	cbz	r0, 800e610 <_vfiprintf_r+0x198>
 800e5fe:	2340      	movs	r3, #64	; 0x40
 800e600:	eba0 000a 	sub.w	r0, r0, sl
 800e604:	fa03 f000 	lsl.w	r0, r3, r0
 800e608:	9b04      	ldr	r3, [sp, #16]
 800e60a:	4303      	orrs	r3, r0
 800e60c:	3401      	adds	r4, #1
 800e60e:	9304      	str	r3, [sp, #16]
 800e610:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e614:	482c      	ldr	r0, [pc, #176]	; (800e6c8 <_vfiprintf_r+0x250>)
 800e616:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e61a:	2206      	movs	r2, #6
 800e61c:	f7f1 fde8 	bl	80001f0 <memchr>
 800e620:	2800      	cmp	r0, #0
 800e622:	d03f      	beq.n	800e6a4 <_vfiprintf_r+0x22c>
 800e624:	4b29      	ldr	r3, [pc, #164]	; (800e6cc <_vfiprintf_r+0x254>)
 800e626:	bb1b      	cbnz	r3, 800e670 <_vfiprintf_r+0x1f8>
 800e628:	9b03      	ldr	r3, [sp, #12]
 800e62a:	3307      	adds	r3, #7
 800e62c:	f023 0307 	bic.w	r3, r3, #7
 800e630:	3308      	adds	r3, #8
 800e632:	9303      	str	r3, [sp, #12]
 800e634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e636:	443b      	add	r3, r7
 800e638:	9309      	str	r3, [sp, #36]	; 0x24
 800e63a:	e767      	b.n	800e50c <_vfiprintf_r+0x94>
 800e63c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e640:	460c      	mov	r4, r1
 800e642:	2001      	movs	r0, #1
 800e644:	e7a5      	b.n	800e592 <_vfiprintf_r+0x11a>
 800e646:	2300      	movs	r3, #0
 800e648:	3401      	adds	r4, #1
 800e64a:	9305      	str	r3, [sp, #20]
 800e64c:	4619      	mov	r1, r3
 800e64e:	f04f 0c0a 	mov.w	ip, #10
 800e652:	4620      	mov	r0, r4
 800e654:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e658:	3a30      	subs	r2, #48	; 0x30
 800e65a:	2a09      	cmp	r2, #9
 800e65c:	d903      	bls.n	800e666 <_vfiprintf_r+0x1ee>
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d0c5      	beq.n	800e5ee <_vfiprintf_r+0x176>
 800e662:	9105      	str	r1, [sp, #20]
 800e664:	e7c3      	b.n	800e5ee <_vfiprintf_r+0x176>
 800e666:	fb0c 2101 	mla	r1, ip, r1, r2
 800e66a:	4604      	mov	r4, r0
 800e66c:	2301      	movs	r3, #1
 800e66e:	e7f0      	b.n	800e652 <_vfiprintf_r+0x1da>
 800e670:	ab03      	add	r3, sp, #12
 800e672:	9300      	str	r3, [sp, #0]
 800e674:	462a      	mov	r2, r5
 800e676:	4b16      	ldr	r3, [pc, #88]	; (800e6d0 <_vfiprintf_r+0x258>)
 800e678:	a904      	add	r1, sp, #16
 800e67a:	4630      	mov	r0, r6
 800e67c:	f3af 8000 	nop.w
 800e680:	4607      	mov	r7, r0
 800e682:	1c78      	adds	r0, r7, #1
 800e684:	d1d6      	bne.n	800e634 <_vfiprintf_r+0x1bc>
 800e686:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e688:	07d9      	lsls	r1, r3, #31
 800e68a:	d405      	bmi.n	800e698 <_vfiprintf_r+0x220>
 800e68c:	89ab      	ldrh	r3, [r5, #12]
 800e68e:	059a      	lsls	r2, r3, #22
 800e690:	d402      	bmi.n	800e698 <_vfiprintf_r+0x220>
 800e692:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e694:	f000 fc35 	bl	800ef02 <__retarget_lock_release_recursive>
 800e698:	89ab      	ldrh	r3, [r5, #12]
 800e69a:	065b      	lsls	r3, r3, #25
 800e69c:	f53f af12 	bmi.w	800e4c4 <_vfiprintf_r+0x4c>
 800e6a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e6a2:	e711      	b.n	800e4c8 <_vfiprintf_r+0x50>
 800e6a4:	ab03      	add	r3, sp, #12
 800e6a6:	9300      	str	r3, [sp, #0]
 800e6a8:	462a      	mov	r2, r5
 800e6aa:	4b09      	ldr	r3, [pc, #36]	; (800e6d0 <_vfiprintf_r+0x258>)
 800e6ac:	a904      	add	r1, sp, #16
 800e6ae:	4630      	mov	r0, r6
 800e6b0:	f000 f880 	bl	800e7b4 <_printf_i>
 800e6b4:	e7e4      	b.n	800e680 <_vfiprintf_r+0x208>
 800e6b6:	bf00      	nop
 800e6b8:	0800f99c 	.word	0x0800f99c
 800e6bc:	0800f9bc 	.word	0x0800f9bc
 800e6c0:	0800f97c 	.word	0x0800f97c
 800e6c4:	0800f947 	.word	0x0800f947
 800e6c8:	0800f951 	.word	0x0800f951
 800e6cc:	00000000 	.word	0x00000000
 800e6d0:	0800e453 	.word	0x0800e453
 800e6d4:	0800f94d 	.word	0x0800f94d

0800e6d8 <_printf_common>:
 800e6d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6dc:	4616      	mov	r6, r2
 800e6de:	4699      	mov	r9, r3
 800e6e0:	688a      	ldr	r2, [r1, #8]
 800e6e2:	690b      	ldr	r3, [r1, #16]
 800e6e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e6e8:	4293      	cmp	r3, r2
 800e6ea:	bfb8      	it	lt
 800e6ec:	4613      	movlt	r3, r2
 800e6ee:	6033      	str	r3, [r6, #0]
 800e6f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e6f4:	4607      	mov	r7, r0
 800e6f6:	460c      	mov	r4, r1
 800e6f8:	b10a      	cbz	r2, 800e6fe <_printf_common+0x26>
 800e6fa:	3301      	adds	r3, #1
 800e6fc:	6033      	str	r3, [r6, #0]
 800e6fe:	6823      	ldr	r3, [r4, #0]
 800e700:	0699      	lsls	r1, r3, #26
 800e702:	bf42      	ittt	mi
 800e704:	6833      	ldrmi	r3, [r6, #0]
 800e706:	3302      	addmi	r3, #2
 800e708:	6033      	strmi	r3, [r6, #0]
 800e70a:	6825      	ldr	r5, [r4, #0]
 800e70c:	f015 0506 	ands.w	r5, r5, #6
 800e710:	d106      	bne.n	800e720 <_printf_common+0x48>
 800e712:	f104 0a19 	add.w	sl, r4, #25
 800e716:	68e3      	ldr	r3, [r4, #12]
 800e718:	6832      	ldr	r2, [r6, #0]
 800e71a:	1a9b      	subs	r3, r3, r2
 800e71c:	42ab      	cmp	r3, r5
 800e71e:	dc26      	bgt.n	800e76e <_printf_common+0x96>
 800e720:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e724:	1e13      	subs	r3, r2, #0
 800e726:	6822      	ldr	r2, [r4, #0]
 800e728:	bf18      	it	ne
 800e72a:	2301      	movne	r3, #1
 800e72c:	0692      	lsls	r2, r2, #26
 800e72e:	d42b      	bmi.n	800e788 <_printf_common+0xb0>
 800e730:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e734:	4649      	mov	r1, r9
 800e736:	4638      	mov	r0, r7
 800e738:	47c0      	blx	r8
 800e73a:	3001      	adds	r0, #1
 800e73c:	d01e      	beq.n	800e77c <_printf_common+0xa4>
 800e73e:	6823      	ldr	r3, [r4, #0]
 800e740:	68e5      	ldr	r5, [r4, #12]
 800e742:	6832      	ldr	r2, [r6, #0]
 800e744:	f003 0306 	and.w	r3, r3, #6
 800e748:	2b04      	cmp	r3, #4
 800e74a:	bf08      	it	eq
 800e74c:	1aad      	subeq	r5, r5, r2
 800e74e:	68a3      	ldr	r3, [r4, #8]
 800e750:	6922      	ldr	r2, [r4, #16]
 800e752:	bf0c      	ite	eq
 800e754:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e758:	2500      	movne	r5, #0
 800e75a:	4293      	cmp	r3, r2
 800e75c:	bfc4      	itt	gt
 800e75e:	1a9b      	subgt	r3, r3, r2
 800e760:	18ed      	addgt	r5, r5, r3
 800e762:	2600      	movs	r6, #0
 800e764:	341a      	adds	r4, #26
 800e766:	42b5      	cmp	r5, r6
 800e768:	d11a      	bne.n	800e7a0 <_printf_common+0xc8>
 800e76a:	2000      	movs	r0, #0
 800e76c:	e008      	b.n	800e780 <_printf_common+0xa8>
 800e76e:	2301      	movs	r3, #1
 800e770:	4652      	mov	r2, sl
 800e772:	4649      	mov	r1, r9
 800e774:	4638      	mov	r0, r7
 800e776:	47c0      	blx	r8
 800e778:	3001      	adds	r0, #1
 800e77a:	d103      	bne.n	800e784 <_printf_common+0xac>
 800e77c:	f04f 30ff 	mov.w	r0, #4294967295
 800e780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e784:	3501      	adds	r5, #1
 800e786:	e7c6      	b.n	800e716 <_printf_common+0x3e>
 800e788:	18e1      	adds	r1, r4, r3
 800e78a:	1c5a      	adds	r2, r3, #1
 800e78c:	2030      	movs	r0, #48	; 0x30
 800e78e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e792:	4422      	add	r2, r4
 800e794:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e798:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e79c:	3302      	adds	r3, #2
 800e79e:	e7c7      	b.n	800e730 <_printf_common+0x58>
 800e7a0:	2301      	movs	r3, #1
 800e7a2:	4622      	mov	r2, r4
 800e7a4:	4649      	mov	r1, r9
 800e7a6:	4638      	mov	r0, r7
 800e7a8:	47c0      	blx	r8
 800e7aa:	3001      	adds	r0, #1
 800e7ac:	d0e6      	beq.n	800e77c <_printf_common+0xa4>
 800e7ae:	3601      	adds	r6, #1
 800e7b0:	e7d9      	b.n	800e766 <_printf_common+0x8e>
	...

0800e7b4 <_printf_i>:
 800e7b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e7b8:	7e0f      	ldrb	r7, [r1, #24]
 800e7ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e7bc:	2f78      	cmp	r7, #120	; 0x78
 800e7be:	4691      	mov	r9, r2
 800e7c0:	4680      	mov	r8, r0
 800e7c2:	460c      	mov	r4, r1
 800e7c4:	469a      	mov	sl, r3
 800e7c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e7ca:	d807      	bhi.n	800e7dc <_printf_i+0x28>
 800e7cc:	2f62      	cmp	r7, #98	; 0x62
 800e7ce:	d80a      	bhi.n	800e7e6 <_printf_i+0x32>
 800e7d0:	2f00      	cmp	r7, #0
 800e7d2:	f000 80d8 	beq.w	800e986 <_printf_i+0x1d2>
 800e7d6:	2f58      	cmp	r7, #88	; 0x58
 800e7d8:	f000 80a3 	beq.w	800e922 <_printf_i+0x16e>
 800e7dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e7e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e7e4:	e03a      	b.n	800e85c <_printf_i+0xa8>
 800e7e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e7ea:	2b15      	cmp	r3, #21
 800e7ec:	d8f6      	bhi.n	800e7dc <_printf_i+0x28>
 800e7ee:	a101      	add	r1, pc, #4	; (adr r1, 800e7f4 <_printf_i+0x40>)
 800e7f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e7f4:	0800e84d 	.word	0x0800e84d
 800e7f8:	0800e861 	.word	0x0800e861
 800e7fc:	0800e7dd 	.word	0x0800e7dd
 800e800:	0800e7dd 	.word	0x0800e7dd
 800e804:	0800e7dd 	.word	0x0800e7dd
 800e808:	0800e7dd 	.word	0x0800e7dd
 800e80c:	0800e861 	.word	0x0800e861
 800e810:	0800e7dd 	.word	0x0800e7dd
 800e814:	0800e7dd 	.word	0x0800e7dd
 800e818:	0800e7dd 	.word	0x0800e7dd
 800e81c:	0800e7dd 	.word	0x0800e7dd
 800e820:	0800e96d 	.word	0x0800e96d
 800e824:	0800e891 	.word	0x0800e891
 800e828:	0800e94f 	.word	0x0800e94f
 800e82c:	0800e7dd 	.word	0x0800e7dd
 800e830:	0800e7dd 	.word	0x0800e7dd
 800e834:	0800e98f 	.word	0x0800e98f
 800e838:	0800e7dd 	.word	0x0800e7dd
 800e83c:	0800e891 	.word	0x0800e891
 800e840:	0800e7dd 	.word	0x0800e7dd
 800e844:	0800e7dd 	.word	0x0800e7dd
 800e848:	0800e957 	.word	0x0800e957
 800e84c:	682b      	ldr	r3, [r5, #0]
 800e84e:	1d1a      	adds	r2, r3, #4
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	602a      	str	r2, [r5, #0]
 800e854:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e858:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e85c:	2301      	movs	r3, #1
 800e85e:	e0a3      	b.n	800e9a8 <_printf_i+0x1f4>
 800e860:	6820      	ldr	r0, [r4, #0]
 800e862:	6829      	ldr	r1, [r5, #0]
 800e864:	0606      	lsls	r6, r0, #24
 800e866:	f101 0304 	add.w	r3, r1, #4
 800e86a:	d50a      	bpl.n	800e882 <_printf_i+0xce>
 800e86c:	680e      	ldr	r6, [r1, #0]
 800e86e:	602b      	str	r3, [r5, #0]
 800e870:	2e00      	cmp	r6, #0
 800e872:	da03      	bge.n	800e87c <_printf_i+0xc8>
 800e874:	232d      	movs	r3, #45	; 0x2d
 800e876:	4276      	negs	r6, r6
 800e878:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e87c:	485e      	ldr	r0, [pc, #376]	; (800e9f8 <_printf_i+0x244>)
 800e87e:	230a      	movs	r3, #10
 800e880:	e019      	b.n	800e8b6 <_printf_i+0x102>
 800e882:	680e      	ldr	r6, [r1, #0]
 800e884:	602b      	str	r3, [r5, #0]
 800e886:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e88a:	bf18      	it	ne
 800e88c:	b236      	sxthne	r6, r6
 800e88e:	e7ef      	b.n	800e870 <_printf_i+0xbc>
 800e890:	682b      	ldr	r3, [r5, #0]
 800e892:	6820      	ldr	r0, [r4, #0]
 800e894:	1d19      	adds	r1, r3, #4
 800e896:	6029      	str	r1, [r5, #0]
 800e898:	0601      	lsls	r1, r0, #24
 800e89a:	d501      	bpl.n	800e8a0 <_printf_i+0xec>
 800e89c:	681e      	ldr	r6, [r3, #0]
 800e89e:	e002      	b.n	800e8a6 <_printf_i+0xf2>
 800e8a0:	0646      	lsls	r6, r0, #25
 800e8a2:	d5fb      	bpl.n	800e89c <_printf_i+0xe8>
 800e8a4:	881e      	ldrh	r6, [r3, #0]
 800e8a6:	4854      	ldr	r0, [pc, #336]	; (800e9f8 <_printf_i+0x244>)
 800e8a8:	2f6f      	cmp	r7, #111	; 0x6f
 800e8aa:	bf0c      	ite	eq
 800e8ac:	2308      	moveq	r3, #8
 800e8ae:	230a      	movne	r3, #10
 800e8b0:	2100      	movs	r1, #0
 800e8b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e8b6:	6865      	ldr	r5, [r4, #4]
 800e8b8:	60a5      	str	r5, [r4, #8]
 800e8ba:	2d00      	cmp	r5, #0
 800e8bc:	bfa2      	ittt	ge
 800e8be:	6821      	ldrge	r1, [r4, #0]
 800e8c0:	f021 0104 	bicge.w	r1, r1, #4
 800e8c4:	6021      	strge	r1, [r4, #0]
 800e8c6:	b90e      	cbnz	r6, 800e8cc <_printf_i+0x118>
 800e8c8:	2d00      	cmp	r5, #0
 800e8ca:	d04d      	beq.n	800e968 <_printf_i+0x1b4>
 800e8cc:	4615      	mov	r5, r2
 800e8ce:	fbb6 f1f3 	udiv	r1, r6, r3
 800e8d2:	fb03 6711 	mls	r7, r3, r1, r6
 800e8d6:	5dc7      	ldrb	r7, [r0, r7]
 800e8d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e8dc:	4637      	mov	r7, r6
 800e8de:	42bb      	cmp	r3, r7
 800e8e0:	460e      	mov	r6, r1
 800e8e2:	d9f4      	bls.n	800e8ce <_printf_i+0x11a>
 800e8e4:	2b08      	cmp	r3, #8
 800e8e6:	d10b      	bne.n	800e900 <_printf_i+0x14c>
 800e8e8:	6823      	ldr	r3, [r4, #0]
 800e8ea:	07de      	lsls	r6, r3, #31
 800e8ec:	d508      	bpl.n	800e900 <_printf_i+0x14c>
 800e8ee:	6923      	ldr	r3, [r4, #16]
 800e8f0:	6861      	ldr	r1, [r4, #4]
 800e8f2:	4299      	cmp	r1, r3
 800e8f4:	bfde      	ittt	le
 800e8f6:	2330      	movle	r3, #48	; 0x30
 800e8f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e8fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e900:	1b52      	subs	r2, r2, r5
 800e902:	6122      	str	r2, [r4, #16]
 800e904:	f8cd a000 	str.w	sl, [sp]
 800e908:	464b      	mov	r3, r9
 800e90a:	aa03      	add	r2, sp, #12
 800e90c:	4621      	mov	r1, r4
 800e90e:	4640      	mov	r0, r8
 800e910:	f7ff fee2 	bl	800e6d8 <_printf_common>
 800e914:	3001      	adds	r0, #1
 800e916:	d14c      	bne.n	800e9b2 <_printf_i+0x1fe>
 800e918:	f04f 30ff 	mov.w	r0, #4294967295
 800e91c:	b004      	add	sp, #16
 800e91e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e922:	4835      	ldr	r0, [pc, #212]	; (800e9f8 <_printf_i+0x244>)
 800e924:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e928:	6829      	ldr	r1, [r5, #0]
 800e92a:	6823      	ldr	r3, [r4, #0]
 800e92c:	f851 6b04 	ldr.w	r6, [r1], #4
 800e930:	6029      	str	r1, [r5, #0]
 800e932:	061d      	lsls	r5, r3, #24
 800e934:	d514      	bpl.n	800e960 <_printf_i+0x1ac>
 800e936:	07df      	lsls	r7, r3, #31
 800e938:	bf44      	itt	mi
 800e93a:	f043 0320 	orrmi.w	r3, r3, #32
 800e93e:	6023      	strmi	r3, [r4, #0]
 800e940:	b91e      	cbnz	r6, 800e94a <_printf_i+0x196>
 800e942:	6823      	ldr	r3, [r4, #0]
 800e944:	f023 0320 	bic.w	r3, r3, #32
 800e948:	6023      	str	r3, [r4, #0]
 800e94a:	2310      	movs	r3, #16
 800e94c:	e7b0      	b.n	800e8b0 <_printf_i+0xfc>
 800e94e:	6823      	ldr	r3, [r4, #0]
 800e950:	f043 0320 	orr.w	r3, r3, #32
 800e954:	6023      	str	r3, [r4, #0]
 800e956:	2378      	movs	r3, #120	; 0x78
 800e958:	4828      	ldr	r0, [pc, #160]	; (800e9fc <_printf_i+0x248>)
 800e95a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e95e:	e7e3      	b.n	800e928 <_printf_i+0x174>
 800e960:	0659      	lsls	r1, r3, #25
 800e962:	bf48      	it	mi
 800e964:	b2b6      	uxthmi	r6, r6
 800e966:	e7e6      	b.n	800e936 <_printf_i+0x182>
 800e968:	4615      	mov	r5, r2
 800e96a:	e7bb      	b.n	800e8e4 <_printf_i+0x130>
 800e96c:	682b      	ldr	r3, [r5, #0]
 800e96e:	6826      	ldr	r6, [r4, #0]
 800e970:	6961      	ldr	r1, [r4, #20]
 800e972:	1d18      	adds	r0, r3, #4
 800e974:	6028      	str	r0, [r5, #0]
 800e976:	0635      	lsls	r5, r6, #24
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	d501      	bpl.n	800e980 <_printf_i+0x1cc>
 800e97c:	6019      	str	r1, [r3, #0]
 800e97e:	e002      	b.n	800e986 <_printf_i+0x1d2>
 800e980:	0670      	lsls	r0, r6, #25
 800e982:	d5fb      	bpl.n	800e97c <_printf_i+0x1c8>
 800e984:	8019      	strh	r1, [r3, #0]
 800e986:	2300      	movs	r3, #0
 800e988:	6123      	str	r3, [r4, #16]
 800e98a:	4615      	mov	r5, r2
 800e98c:	e7ba      	b.n	800e904 <_printf_i+0x150>
 800e98e:	682b      	ldr	r3, [r5, #0]
 800e990:	1d1a      	adds	r2, r3, #4
 800e992:	602a      	str	r2, [r5, #0]
 800e994:	681d      	ldr	r5, [r3, #0]
 800e996:	6862      	ldr	r2, [r4, #4]
 800e998:	2100      	movs	r1, #0
 800e99a:	4628      	mov	r0, r5
 800e99c:	f7f1 fc28 	bl	80001f0 <memchr>
 800e9a0:	b108      	cbz	r0, 800e9a6 <_printf_i+0x1f2>
 800e9a2:	1b40      	subs	r0, r0, r5
 800e9a4:	6060      	str	r0, [r4, #4]
 800e9a6:	6863      	ldr	r3, [r4, #4]
 800e9a8:	6123      	str	r3, [r4, #16]
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e9b0:	e7a8      	b.n	800e904 <_printf_i+0x150>
 800e9b2:	6923      	ldr	r3, [r4, #16]
 800e9b4:	462a      	mov	r2, r5
 800e9b6:	4649      	mov	r1, r9
 800e9b8:	4640      	mov	r0, r8
 800e9ba:	47d0      	blx	sl
 800e9bc:	3001      	adds	r0, #1
 800e9be:	d0ab      	beq.n	800e918 <_printf_i+0x164>
 800e9c0:	6823      	ldr	r3, [r4, #0]
 800e9c2:	079b      	lsls	r3, r3, #30
 800e9c4:	d413      	bmi.n	800e9ee <_printf_i+0x23a>
 800e9c6:	68e0      	ldr	r0, [r4, #12]
 800e9c8:	9b03      	ldr	r3, [sp, #12]
 800e9ca:	4298      	cmp	r0, r3
 800e9cc:	bfb8      	it	lt
 800e9ce:	4618      	movlt	r0, r3
 800e9d0:	e7a4      	b.n	800e91c <_printf_i+0x168>
 800e9d2:	2301      	movs	r3, #1
 800e9d4:	4632      	mov	r2, r6
 800e9d6:	4649      	mov	r1, r9
 800e9d8:	4640      	mov	r0, r8
 800e9da:	47d0      	blx	sl
 800e9dc:	3001      	adds	r0, #1
 800e9de:	d09b      	beq.n	800e918 <_printf_i+0x164>
 800e9e0:	3501      	adds	r5, #1
 800e9e2:	68e3      	ldr	r3, [r4, #12]
 800e9e4:	9903      	ldr	r1, [sp, #12]
 800e9e6:	1a5b      	subs	r3, r3, r1
 800e9e8:	42ab      	cmp	r3, r5
 800e9ea:	dcf2      	bgt.n	800e9d2 <_printf_i+0x21e>
 800e9ec:	e7eb      	b.n	800e9c6 <_printf_i+0x212>
 800e9ee:	2500      	movs	r5, #0
 800e9f0:	f104 0619 	add.w	r6, r4, #25
 800e9f4:	e7f5      	b.n	800e9e2 <_printf_i+0x22e>
 800e9f6:	bf00      	nop
 800e9f8:	0800f958 	.word	0x0800f958
 800e9fc:	0800f969 	.word	0x0800f969

0800ea00 <__swbuf_r>:
 800ea00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea02:	460e      	mov	r6, r1
 800ea04:	4614      	mov	r4, r2
 800ea06:	4605      	mov	r5, r0
 800ea08:	b118      	cbz	r0, 800ea12 <__swbuf_r+0x12>
 800ea0a:	6983      	ldr	r3, [r0, #24]
 800ea0c:	b90b      	cbnz	r3, 800ea12 <__swbuf_r+0x12>
 800ea0e:	f000 f9d9 	bl	800edc4 <__sinit>
 800ea12:	4b21      	ldr	r3, [pc, #132]	; (800ea98 <__swbuf_r+0x98>)
 800ea14:	429c      	cmp	r4, r3
 800ea16:	d12b      	bne.n	800ea70 <__swbuf_r+0x70>
 800ea18:	686c      	ldr	r4, [r5, #4]
 800ea1a:	69a3      	ldr	r3, [r4, #24]
 800ea1c:	60a3      	str	r3, [r4, #8]
 800ea1e:	89a3      	ldrh	r3, [r4, #12]
 800ea20:	071a      	lsls	r2, r3, #28
 800ea22:	d52f      	bpl.n	800ea84 <__swbuf_r+0x84>
 800ea24:	6923      	ldr	r3, [r4, #16]
 800ea26:	b36b      	cbz	r3, 800ea84 <__swbuf_r+0x84>
 800ea28:	6923      	ldr	r3, [r4, #16]
 800ea2a:	6820      	ldr	r0, [r4, #0]
 800ea2c:	1ac0      	subs	r0, r0, r3
 800ea2e:	6963      	ldr	r3, [r4, #20]
 800ea30:	b2f6      	uxtb	r6, r6
 800ea32:	4283      	cmp	r3, r0
 800ea34:	4637      	mov	r7, r6
 800ea36:	dc04      	bgt.n	800ea42 <__swbuf_r+0x42>
 800ea38:	4621      	mov	r1, r4
 800ea3a:	4628      	mov	r0, r5
 800ea3c:	f000 f92e 	bl	800ec9c <_fflush_r>
 800ea40:	bb30      	cbnz	r0, 800ea90 <__swbuf_r+0x90>
 800ea42:	68a3      	ldr	r3, [r4, #8]
 800ea44:	3b01      	subs	r3, #1
 800ea46:	60a3      	str	r3, [r4, #8]
 800ea48:	6823      	ldr	r3, [r4, #0]
 800ea4a:	1c5a      	adds	r2, r3, #1
 800ea4c:	6022      	str	r2, [r4, #0]
 800ea4e:	701e      	strb	r6, [r3, #0]
 800ea50:	6963      	ldr	r3, [r4, #20]
 800ea52:	3001      	adds	r0, #1
 800ea54:	4283      	cmp	r3, r0
 800ea56:	d004      	beq.n	800ea62 <__swbuf_r+0x62>
 800ea58:	89a3      	ldrh	r3, [r4, #12]
 800ea5a:	07db      	lsls	r3, r3, #31
 800ea5c:	d506      	bpl.n	800ea6c <__swbuf_r+0x6c>
 800ea5e:	2e0a      	cmp	r6, #10
 800ea60:	d104      	bne.n	800ea6c <__swbuf_r+0x6c>
 800ea62:	4621      	mov	r1, r4
 800ea64:	4628      	mov	r0, r5
 800ea66:	f000 f919 	bl	800ec9c <_fflush_r>
 800ea6a:	b988      	cbnz	r0, 800ea90 <__swbuf_r+0x90>
 800ea6c:	4638      	mov	r0, r7
 800ea6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea70:	4b0a      	ldr	r3, [pc, #40]	; (800ea9c <__swbuf_r+0x9c>)
 800ea72:	429c      	cmp	r4, r3
 800ea74:	d101      	bne.n	800ea7a <__swbuf_r+0x7a>
 800ea76:	68ac      	ldr	r4, [r5, #8]
 800ea78:	e7cf      	b.n	800ea1a <__swbuf_r+0x1a>
 800ea7a:	4b09      	ldr	r3, [pc, #36]	; (800eaa0 <__swbuf_r+0xa0>)
 800ea7c:	429c      	cmp	r4, r3
 800ea7e:	bf08      	it	eq
 800ea80:	68ec      	ldreq	r4, [r5, #12]
 800ea82:	e7ca      	b.n	800ea1a <__swbuf_r+0x1a>
 800ea84:	4621      	mov	r1, r4
 800ea86:	4628      	mov	r0, r5
 800ea88:	f000 f80c 	bl	800eaa4 <__swsetup_r>
 800ea8c:	2800      	cmp	r0, #0
 800ea8e:	d0cb      	beq.n	800ea28 <__swbuf_r+0x28>
 800ea90:	f04f 37ff 	mov.w	r7, #4294967295
 800ea94:	e7ea      	b.n	800ea6c <__swbuf_r+0x6c>
 800ea96:	bf00      	nop
 800ea98:	0800f99c 	.word	0x0800f99c
 800ea9c:	0800f9bc 	.word	0x0800f9bc
 800eaa0:	0800f97c 	.word	0x0800f97c

0800eaa4 <__swsetup_r>:
 800eaa4:	4b32      	ldr	r3, [pc, #200]	; (800eb70 <__swsetup_r+0xcc>)
 800eaa6:	b570      	push	{r4, r5, r6, lr}
 800eaa8:	681d      	ldr	r5, [r3, #0]
 800eaaa:	4606      	mov	r6, r0
 800eaac:	460c      	mov	r4, r1
 800eaae:	b125      	cbz	r5, 800eaba <__swsetup_r+0x16>
 800eab0:	69ab      	ldr	r3, [r5, #24]
 800eab2:	b913      	cbnz	r3, 800eaba <__swsetup_r+0x16>
 800eab4:	4628      	mov	r0, r5
 800eab6:	f000 f985 	bl	800edc4 <__sinit>
 800eaba:	4b2e      	ldr	r3, [pc, #184]	; (800eb74 <__swsetup_r+0xd0>)
 800eabc:	429c      	cmp	r4, r3
 800eabe:	d10f      	bne.n	800eae0 <__swsetup_r+0x3c>
 800eac0:	686c      	ldr	r4, [r5, #4]
 800eac2:	89a3      	ldrh	r3, [r4, #12]
 800eac4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eac8:	0719      	lsls	r1, r3, #28
 800eaca:	d42c      	bmi.n	800eb26 <__swsetup_r+0x82>
 800eacc:	06dd      	lsls	r5, r3, #27
 800eace:	d411      	bmi.n	800eaf4 <__swsetup_r+0x50>
 800ead0:	2309      	movs	r3, #9
 800ead2:	6033      	str	r3, [r6, #0]
 800ead4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ead8:	81a3      	strh	r3, [r4, #12]
 800eada:	f04f 30ff 	mov.w	r0, #4294967295
 800eade:	e03e      	b.n	800eb5e <__swsetup_r+0xba>
 800eae0:	4b25      	ldr	r3, [pc, #148]	; (800eb78 <__swsetup_r+0xd4>)
 800eae2:	429c      	cmp	r4, r3
 800eae4:	d101      	bne.n	800eaea <__swsetup_r+0x46>
 800eae6:	68ac      	ldr	r4, [r5, #8]
 800eae8:	e7eb      	b.n	800eac2 <__swsetup_r+0x1e>
 800eaea:	4b24      	ldr	r3, [pc, #144]	; (800eb7c <__swsetup_r+0xd8>)
 800eaec:	429c      	cmp	r4, r3
 800eaee:	bf08      	it	eq
 800eaf0:	68ec      	ldreq	r4, [r5, #12]
 800eaf2:	e7e6      	b.n	800eac2 <__swsetup_r+0x1e>
 800eaf4:	0758      	lsls	r0, r3, #29
 800eaf6:	d512      	bpl.n	800eb1e <__swsetup_r+0x7a>
 800eaf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eafa:	b141      	cbz	r1, 800eb0e <__swsetup_r+0x6a>
 800eafc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eb00:	4299      	cmp	r1, r3
 800eb02:	d002      	beq.n	800eb0a <__swsetup_r+0x66>
 800eb04:	4630      	mov	r0, r6
 800eb06:	f7ff f935 	bl	800dd74 <_free_r>
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	6363      	str	r3, [r4, #52]	; 0x34
 800eb0e:	89a3      	ldrh	r3, [r4, #12]
 800eb10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800eb14:	81a3      	strh	r3, [r4, #12]
 800eb16:	2300      	movs	r3, #0
 800eb18:	6063      	str	r3, [r4, #4]
 800eb1a:	6923      	ldr	r3, [r4, #16]
 800eb1c:	6023      	str	r3, [r4, #0]
 800eb1e:	89a3      	ldrh	r3, [r4, #12]
 800eb20:	f043 0308 	orr.w	r3, r3, #8
 800eb24:	81a3      	strh	r3, [r4, #12]
 800eb26:	6923      	ldr	r3, [r4, #16]
 800eb28:	b94b      	cbnz	r3, 800eb3e <__swsetup_r+0x9a>
 800eb2a:	89a3      	ldrh	r3, [r4, #12]
 800eb2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800eb30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eb34:	d003      	beq.n	800eb3e <__swsetup_r+0x9a>
 800eb36:	4621      	mov	r1, r4
 800eb38:	4630      	mov	r0, r6
 800eb3a:	f000 fa09 	bl	800ef50 <__smakebuf_r>
 800eb3e:	89a0      	ldrh	r0, [r4, #12]
 800eb40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eb44:	f010 0301 	ands.w	r3, r0, #1
 800eb48:	d00a      	beq.n	800eb60 <__swsetup_r+0xbc>
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	60a3      	str	r3, [r4, #8]
 800eb4e:	6963      	ldr	r3, [r4, #20]
 800eb50:	425b      	negs	r3, r3
 800eb52:	61a3      	str	r3, [r4, #24]
 800eb54:	6923      	ldr	r3, [r4, #16]
 800eb56:	b943      	cbnz	r3, 800eb6a <__swsetup_r+0xc6>
 800eb58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800eb5c:	d1ba      	bne.n	800ead4 <__swsetup_r+0x30>
 800eb5e:	bd70      	pop	{r4, r5, r6, pc}
 800eb60:	0781      	lsls	r1, r0, #30
 800eb62:	bf58      	it	pl
 800eb64:	6963      	ldrpl	r3, [r4, #20]
 800eb66:	60a3      	str	r3, [r4, #8]
 800eb68:	e7f4      	b.n	800eb54 <__swsetup_r+0xb0>
 800eb6a:	2000      	movs	r0, #0
 800eb6c:	e7f7      	b.n	800eb5e <__swsetup_r+0xba>
 800eb6e:	bf00      	nop
 800eb70:	20000090 	.word	0x20000090
 800eb74:	0800f99c 	.word	0x0800f99c
 800eb78:	0800f9bc 	.word	0x0800f9bc
 800eb7c:	0800f97c 	.word	0x0800f97c

0800eb80 <abort>:
 800eb80:	b508      	push	{r3, lr}
 800eb82:	2006      	movs	r0, #6
 800eb84:	f000 fa96 	bl	800f0b4 <raise>
 800eb88:	2001      	movs	r0, #1
 800eb8a:	f7f2 fcf9 	bl	8001580 <_exit>
	...

0800eb90 <__sflush_r>:
 800eb90:	898a      	ldrh	r2, [r1, #12]
 800eb92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb96:	4605      	mov	r5, r0
 800eb98:	0710      	lsls	r0, r2, #28
 800eb9a:	460c      	mov	r4, r1
 800eb9c:	d458      	bmi.n	800ec50 <__sflush_r+0xc0>
 800eb9e:	684b      	ldr	r3, [r1, #4]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	dc05      	bgt.n	800ebb0 <__sflush_r+0x20>
 800eba4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	dc02      	bgt.n	800ebb0 <__sflush_r+0x20>
 800ebaa:	2000      	movs	r0, #0
 800ebac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ebb2:	2e00      	cmp	r6, #0
 800ebb4:	d0f9      	beq.n	800ebaa <__sflush_r+0x1a>
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ebbc:	682f      	ldr	r7, [r5, #0]
 800ebbe:	602b      	str	r3, [r5, #0]
 800ebc0:	d032      	beq.n	800ec28 <__sflush_r+0x98>
 800ebc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ebc4:	89a3      	ldrh	r3, [r4, #12]
 800ebc6:	075a      	lsls	r2, r3, #29
 800ebc8:	d505      	bpl.n	800ebd6 <__sflush_r+0x46>
 800ebca:	6863      	ldr	r3, [r4, #4]
 800ebcc:	1ac0      	subs	r0, r0, r3
 800ebce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ebd0:	b10b      	cbz	r3, 800ebd6 <__sflush_r+0x46>
 800ebd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ebd4:	1ac0      	subs	r0, r0, r3
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	4602      	mov	r2, r0
 800ebda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ebdc:	6a21      	ldr	r1, [r4, #32]
 800ebde:	4628      	mov	r0, r5
 800ebe0:	47b0      	blx	r6
 800ebe2:	1c43      	adds	r3, r0, #1
 800ebe4:	89a3      	ldrh	r3, [r4, #12]
 800ebe6:	d106      	bne.n	800ebf6 <__sflush_r+0x66>
 800ebe8:	6829      	ldr	r1, [r5, #0]
 800ebea:	291d      	cmp	r1, #29
 800ebec:	d82c      	bhi.n	800ec48 <__sflush_r+0xb8>
 800ebee:	4a2a      	ldr	r2, [pc, #168]	; (800ec98 <__sflush_r+0x108>)
 800ebf0:	40ca      	lsrs	r2, r1
 800ebf2:	07d6      	lsls	r6, r2, #31
 800ebf4:	d528      	bpl.n	800ec48 <__sflush_r+0xb8>
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	6062      	str	r2, [r4, #4]
 800ebfa:	04d9      	lsls	r1, r3, #19
 800ebfc:	6922      	ldr	r2, [r4, #16]
 800ebfe:	6022      	str	r2, [r4, #0]
 800ec00:	d504      	bpl.n	800ec0c <__sflush_r+0x7c>
 800ec02:	1c42      	adds	r2, r0, #1
 800ec04:	d101      	bne.n	800ec0a <__sflush_r+0x7a>
 800ec06:	682b      	ldr	r3, [r5, #0]
 800ec08:	b903      	cbnz	r3, 800ec0c <__sflush_r+0x7c>
 800ec0a:	6560      	str	r0, [r4, #84]	; 0x54
 800ec0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec0e:	602f      	str	r7, [r5, #0]
 800ec10:	2900      	cmp	r1, #0
 800ec12:	d0ca      	beq.n	800ebaa <__sflush_r+0x1a>
 800ec14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ec18:	4299      	cmp	r1, r3
 800ec1a:	d002      	beq.n	800ec22 <__sflush_r+0x92>
 800ec1c:	4628      	mov	r0, r5
 800ec1e:	f7ff f8a9 	bl	800dd74 <_free_r>
 800ec22:	2000      	movs	r0, #0
 800ec24:	6360      	str	r0, [r4, #52]	; 0x34
 800ec26:	e7c1      	b.n	800ebac <__sflush_r+0x1c>
 800ec28:	6a21      	ldr	r1, [r4, #32]
 800ec2a:	2301      	movs	r3, #1
 800ec2c:	4628      	mov	r0, r5
 800ec2e:	47b0      	blx	r6
 800ec30:	1c41      	adds	r1, r0, #1
 800ec32:	d1c7      	bne.n	800ebc4 <__sflush_r+0x34>
 800ec34:	682b      	ldr	r3, [r5, #0]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d0c4      	beq.n	800ebc4 <__sflush_r+0x34>
 800ec3a:	2b1d      	cmp	r3, #29
 800ec3c:	d001      	beq.n	800ec42 <__sflush_r+0xb2>
 800ec3e:	2b16      	cmp	r3, #22
 800ec40:	d101      	bne.n	800ec46 <__sflush_r+0xb6>
 800ec42:	602f      	str	r7, [r5, #0]
 800ec44:	e7b1      	b.n	800ebaa <__sflush_r+0x1a>
 800ec46:	89a3      	ldrh	r3, [r4, #12]
 800ec48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec4c:	81a3      	strh	r3, [r4, #12]
 800ec4e:	e7ad      	b.n	800ebac <__sflush_r+0x1c>
 800ec50:	690f      	ldr	r7, [r1, #16]
 800ec52:	2f00      	cmp	r7, #0
 800ec54:	d0a9      	beq.n	800ebaa <__sflush_r+0x1a>
 800ec56:	0793      	lsls	r3, r2, #30
 800ec58:	680e      	ldr	r6, [r1, #0]
 800ec5a:	bf08      	it	eq
 800ec5c:	694b      	ldreq	r3, [r1, #20]
 800ec5e:	600f      	str	r7, [r1, #0]
 800ec60:	bf18      	it	ne
 800ec62:	2300      	movne	r3, #0
 800ec64:	eba6 0807 	sub.w	r8, r6, r7
 800ec68:	608b      	str	r3, [r1, #8]
 800ec6a:	f1b8 0f00 	cmp.w	r8, #0
 800ec6e:	dd9c      	ble.n	800ebaa <__sflush_r+0x1a>
 800ec70:	6a21      	ldr	r1, [r4, #32]
 800ec72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ec74:	4643      	mov	r3, r8
 800ec76:	463a      	mov	r2, r7
 800ec78:	4628      	mov	r0, r5
 800ec7a:	47b0      	blx	r6
 800ec7c:	2800      	cmp	r0, #0
 800ec7e:	dc06      	bgt.n	800ec8e <__sflush_r+0xfe>
 800ec80:	89a3      	ldrh	r3, [r4, #12]
 800ec82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec86:	81a3      	strh	r3, [r4, #12]
 800ec88:	f04f 30ff 	mov.w	r0, #4294967295
 800ec8c:	e78e      	b.n	800ebac <__sflush_r+0x1c>
 800ec8e:	4407      	add	r7, r0
 800ec90:	eba8 0800 	sub.w	r8, r8, r0
 800ec94:	e7e9      	b.n	800ec6a <__sflush_r+0xda>
 800ec96:	bf00      	nop
 800ec98:	20400001 	.word	0x20400001

0800ec9c <_fflush_r>:
 800ec9c:	b538      	push	{r3, r4, r5, lr}
 800ec9e:	690b      	ldr	r3, [r1, #16]
 800eca0:	4605      	mov	r5, r0
 800eca2:	460c      	mov	r4, r1
 800eca4:	b913      	cbnz	r3, 800ecac <_fflush_r+0x10>
 800eca6:	2500      	movs	r5, #0
 800eca8:	4628      	mov	r0, r5
 800ecaa:	bd38      	pop	{r3, r4, r5, pc}
 800ecac:	b118      	cbz	r0, 800ecb6 <_fflush_r+0x1a>
 800ecae:	6983      	ldr	r3, [r0, #24]
 800ecb0:	b90b      	cbnz	r3, 800ecb6 <_fflush_r+0x1a>
 800ecb2:	f000 f887 	bl	800edc4 <__sinit>
 800ecb6:	4b14      	ldr	r3, [pc, #80]	; (800ed08 <_fflush_r+0x6c>)
 800ecb8:	429c      	cmp	r4, r3
 800ecba:	d11b      	bne.n	800ecf4 <_fflush_r+0x58>
 800ecbc:	686c      	ldr	r4, [r5, #4]
 800ecbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d0ef      	beq.n	800eca6 <_fflush_r+0xa>
 800ecc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ecc8:	07d0      	lsls	r0, r2, #31
 800ecca:	d404      	bmi.n	800ecd6 <_fflush_r+0x3a>
 800eccc:	0599      	lsls	r1, r3, #22
 800ecce:	d402      	bmi.n	800ecd6 <_fflush_r+0x3a>
 800ecd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ecd2:	f000 f915 	bl	800ef00 <__retarget_lock_acquire_recursive>
 800ecd6:	4628      	mov	r0, r5
 800ecd8:	4621      	mov	r1, r4
 800ecda:	f7ff ff59 	bl	800eb90 <__sflush_r>
 800ecde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ece0:	07da      	lsls	r2, r3, #31
 800ece2:	4605      	mov	r5, r0
 800ece4:	d4e0      	bmi.n	800eca8 <_fflush_r+0xc>
 800ece6:	89a3      	ldrh	r3, [r4, #12]
 800ece8:	059b      	lsls	r3, r3, #22
 800ecea:	d4dd      	bmi.n	800eca8 <_fflush_r+0xc>
 800ecec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ecee:	f000 f908 	bl	800ef02 <__retarget_lock_release_recursive>
 800ecf2:	e7d9      	b.n	800eca8 <_fflush_r+0xc>
 800ecf4:	4b05      	ldr	r3, [pc, #20]	; (800ed0c <_fflush_r+0x70>)
 800ecf6:	429c      	cmp	r4, r3
 800ecf8:	d101      	bne.n	800ecfe <_fflush_r+0x62>
 800ecfa:	68ac      	ldr	r4, [r5, #8]
 800ecfc:	e7df      	b.n	800ecbe <_fflush_r+0x22>
 800ecfe:	4b04      	ldr	r3, [pc, #16]	; (800ed10 <_fflush_r+0x74>)
 800ed00:	429c      	cmp	r4, r3
 800ed02:	bf08      	it	eq
 800ed04:	68ec      	ldreq	r4, [r5, #12]
 800ed06:	e7da      	b.n	800ecbe <_fflush_r+0x22>
 800ed08:	0800f99c 	.word	0x0800f99c
 800ed0c:	0800f9bc 	.word	0x0800f9bc
 800ed10:	0800f97c 	.word	0x0800f97c

0800ed14 <std>:
 800ed14:	2300      	movs	r3, #0
 800ed16:	b510      	push	{r4, lr}
 800ed18:	4604      	mov	r4, r0
 800ed1a:	e9c0 3300 	strd	r3, r3, [r0]
 800ed1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ed22:	6083      	str	r3, [r0, #8]
 800ed24:	8181      	strh	r1, [r0, #12]
 800ed26:	6643      	str	r3, [r0, #100]	; 0x64
 800ed28:	81c2      	strh	r2, [r0, #14]
 800ed2a:	6183      	str	r3, [r0, #24]
 800ed2c:	4619      	mov	r1, r3
 800ed2e:	2208      	movs	r2, #8
 800ed30:	305c      	adds	r0, #92	; 0x5c
 800ed32:	f7ff f817 	bl	800dd64 <memset>
 800ed36:	4b05      	ldr	r3, [pc, #20]	; (800ed4c <std+0x38>)
 800ed38:	6263      	str	r3, [r4, #36]	; 0x24
 800ed3a:	4b05      	ldr	r3, [pc, #20]	; (800ed50 <std+0x3c>)
 800ed3c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ed3e:	4b05      	ldr	r3, [pc, #20]	; (800ed54 <std+0x40>)
 800ed40:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ed42:	4b05      	ldr	r3, [pc, #20]	; (800ed58 <std+0x44>)
 800ed44:	6224      	str	r4, [r4, #32]
 800ed46:	6323      	str	r3, [r4, #48]	; 0x30
 800ed48:	bd10      	pop	{r4, pc}
 800ed4a:	bf00      	nop
 800ed4c:	0800f0ed 	.word	0x0800f0ed
 800ed50:	0800f10f 	.word	0x0800f10f
 800ed54:	0800f147 	.word	0x0800f147
 800ed58:	0800f16b 	.word	0x0800f16b

0800ed5c <_cleanup_r>:
 800ed5c:	4901      	ldr	r1, [pc, #4]	; (800ed64 <_cleanup_r+0x8>)
 800ed5e:	f000 b8af 	b.w	800eec0 <_fwalk_reent>
 800ed62:	bf00      	nop
 800ed64:	0800ec9d 	.word	0x0800ec9d

0800ed68 <__sfmoreglue>:
 800ed68:	b570      	push	{r4, r5, r6, lr}
 800ed6a:	2268      	movs	r2, #104	; 0x68
 800ed6c:	1e4d      	subs	r5, r1, #1
 800ed6e:	4355      	muls	r5, r2
 800ed70:	460e      	mov	r6, r1
 800ed72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ed76:	f7ff f869 	bl	800de4c <_malloc_r>
 800ed7a:	4604      	mov	r4, r0
 800ed7c:	b140      	cbz	r0, 800ed90 <__sfmoreglue+0x28>
 800ed7e:	2100      	movs	r1, #0
 800ed80:	e9c0 1600 	strd	r1, r6, [r0]
 800ed84:	300c      	adds	r0, #12
 800ed86:	60a0      	str	r0, [r4, #8]
 800ed88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ed8c:	f7fe ffea 	bl	800dd64 <memset>
 800ed90:	4620      	mov	r0, r4
 800ed92:	bd70      	pop	{r4, r5, r6, pc}

0800ed94 <__sfp_lock_acquire>:
 800ed94:	4801      	ldr	r0, [pc, #4]	; (800ed9c <__sfp_lock_acquire+0x8>)
 800ed96:	f000 b8b3 	b.w	800ef00 <__retarget_lock_acquire_recursive>
 800ed9a:	bf00      	nop
 800ed9c:	2000551d 	.word	0x2000551d

0800eda0 <__sfp_lock_release>:
 800eda0:	4801      	ldr	r0, [pc, #4]	; (800eda8 <__sfp_lock_release+0x8>)
 800eda2:	f000 b8ae 	b.w	800ef02 <__retarget_lock_release_recursive>
 800eda6:	bf00      	nop
 800eda8:	2000551d 	.word	0x2000551d

0800edac <__sinit_lock_acquire>:
 800edac:	4801      	ldr	r0, [pc, #4]	; (800edb4 <__sinit_lock_acquire+0x8>)
 800edae:	f000 b8a7 	b.w	800ef00 <__retarget_lock_acquire_recursive>
 800edb2:	bf00      	nop
 800edb4:	2000551e 	.word	0x2000551e

0800edb8 <__sinit_lock_release>:
 800edb8:	4801      	ldr	r0, [pc, #4]	; (800edc0 <__sinit_lock_release+0x8>)
 800edba:	f000 b8a2 	b.w	800ef02 <__retarget_lock_release_recursive>
 800edbe:	bf00      	nop
 800edc0:	2000551e 	.word	0x2000551e

0800edc4 <__sinit>:
 800edc4:	b510      	push	{r4, lr}
 800edc6:	4604      	mov	r4, r0
 800edc8:	f7ff fff0 	bl	800edac <__sinit_lock_acquire>
 800edcc:	69a3      	ldr	r3, [r4, #24]
 800edce:	b11b      	cbz	r3, 800edd8 <__sinit+0x14>
 800edd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800edd4:	f7ff bff0 	b.w	800edb8 <__sinit_lock_release>
 800edd8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800eddc:	6523      	str	r3, [r4, #80]	; 0x50
 800edde:	4b13      	ldr	r3, [pc, #76]	; (800ee2c <__sinit+0x68>)
 800ede0:	4a13      	ldr	r2, [pc, #76]	; (800ee30 <__sinit+0x6c>)
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	62a2      	str	r2, [r4, #40]	; 0x28
 800ede6:	42a3      	cmp	r3, r4
 800ede8:	bf04      	itt	eq
 800edea:	2301      	moveq	r3, #1
 800edec:	61a3      	streq	r3, [r4, #24]
 800edee:	4620      	mov	r0, r4
 800edf0:	f000 f820 	bl	800ee34 <__sfp>
 800edf4:	6060      	str	r0, [r4, #4]
 800edf6:	4620      	mov	r0, r4
 800edf8:	f000 f81c 	bl	800ee34 <__sfp>
 800edfc:	60a0      	str	r0, [r4, #8]
 800edfe:	4620      	mov	r0, r4
 800ee00:	f000 f818 	bl	800ee34 <__sfp>
 800ee04:	2200      	movs	r2, #0
 800ee06:	60e0      	str	r0, [r4, #12]
 800ee08:	2104      	movs	r1, #4
 800ee0a:	6860      	ldr	r0, [r4, #4]
 800ee0c:	f7ff ff82 	bl	800ed14 <std>
 800ee10:	68a0      	ldr	r0, [r4, #8]
 800ee12:	2201      	movs	r2, #1
 800ee14:	2109      	movs	r1, #9
 800ee16:	f7ff ff7d 	bl	800ed14 <std>
 800ee1a:	68e0      	ldr	r0, [r4, #12]
 800ee1c:	2202      	movs	r2, #2
 800ee1e:	2112      	movs	r1, #18
 800ee20:	f7ff ff78 	bl	800ed14 <std>
 800ee24:	2301      	movs	r3, #1
 800ee26:	61a3      	str	r3, [r4, #24]
 800ee28:	e7d2      	b.n	800edd0 <__sinit+0xc>
 800ee2a:	bf00      	nop
 800ee2c:	0800f838 	.word	0x0800f838
 800ee30:	0800ed5d 	.word	0x0800ed5d

0800ee34 <__sfp>:
 800ee34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee36:	4607      	mov	r7, r0
 800ee38:	f7ff ffac 	bl	800ed94 <__sfp_lock_acquire>
 800ee3c:	4b1e      	ldr	r3, [pc, #120]	; (800eeb8 <__sfp+0x84>)
 800ee3e:	681e      	ldr	r6, [r3, #0]
 800ee40:	69b3      	ldr	r3, [r6, #24]
 800ee42:	b913      	cbnz	r3, 800ee4a <__sfp+0x16>
 800ee44:	4630      	mov	r0, r6
 800ee46:	f7ff ffbd 	bl	800edc4 <__sinit>
 800ee4a:	3648      	adds	r6, #72	; 0x48
 800ee4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ee50:	3b01      	subs	r3, #1
 800ee52:	d503      	bpl.n	800ee5c <__sfp+0x28>
 800ee54:	6833      	ldr	r3, [r6, #0]
 800ee56:	b30b      	cbz	r3, 800ee9c <__sfp+0x68>
 800ee58:	6836      	ldr	r6, [r6, #0]
 800ee5a:	e7f7      	b.n	800ee4c <__sfp+0x18>
 800ee5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ee60:	b9d5      	cbnz	r5, 800ee98 <__sfp+0x64>
 800ee62:	4b16      	ldr	r3, [pc, #88]	; (800eebc <__sfp+0x88>)
 800ee64:	60e3      	str	r3, [r4, #12]
 800ee66:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ee6a:	6665      	str	r5, [r4, #100]	; 0x64
 800ee6c:	f000 f847 	bl	800eefe <__retarget_lock_init_recursive>
 800ee70:	f7ff ff96 	bl	800eda0 <__sfp_lock_release>
 800ee74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ee78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ee7c:	6025      	str	r5, [r4, #0]
 800ee7e:	61a5      	str	r5, [r4, #24]
 800ee80:	2208      	movs	r2, #8
 800ee82:	4629      	mov	r1, r5
 800ee84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ee88:	f7fe ff6c 	bl	800dd64 <memset>
 800ee8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ee90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ee94:	4620      	mov	r0, r4
 800ee96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee98:	3468      	adds	r4, #104	; 0x68
 800ee9a:	e7d9      	b.n	800ee50 <__sfp+0x1c>
 800ee9c:	2104      	movs	r1, #4
 800ee9e:	4638      	mov	r0, r7
 800eea0:	f7ff ff62 	bl	800ed68 <__sfmoreglue>
 800eea4:	4604      	mov	r4, r0
 800eea6:	6030      	str	r0, [r6, #0]
 800eea8:	2800      	cmp	r0, #0
 800eeaa:	d1d5      	bne.n	800ee58 <__sfp+0x24>
 800eeac:	f7ff ff78 	bl	800eda0 <__sfp_lock_release>
 800eeb0:	230c      	movs	r3, #12
 800eeb2:	603b      	str	r3, [r7, #0]
 800eeb4:	e7ee      	b.n	800ee94 <__sfp+0x60>
 800eeb6:	bf00      	nop
 800eeb8:	0800f838 	.word	0x0800f838
 800eebc:	ffff0001 	.word	0xffff0001

0800eec0 <_fwalk_reent>:
 800eec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eec4:	4606      	mov	r6, r0
 800eec6:	4688      	mov	r8, r1
 800eec8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800eecc:	2700      	movs	r7, #0
 800eece:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eed2:	f1b9 0901 	subs.w	r9, r9, #1
 800eed6:	d505      	bpl.n	800eee4 <_fwalk_reent+0x24>
 800eed8:	6824      	ldr	r4, [r4, #0]
 800eeda:	2c00      	cmp	r4, #0
 800eedc:	d1f7      	bne.n	800eece <_fwalk_reent+0xe>
 800eede:	4638      	mov	r0, r7
 800eee0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eee4:	89ab      	ldrh	r3, [r5, #12]
 800eee6:	2b01      	cmp	r3, #1
 800eee8:	d907      	bls.n	800eefa <_fwalk_reent+0x3a>
 800eeea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eeee:	3301      	adds	r3, #1
 800eef0:	d003      	beq.n	800eefa <_fwalk_reent+0x3a>
 800eef2:	4629      	mov	r1, r5
 800eef4:	4630      	mov	r0, r6
 800eef6:	47c0      	blx	r8
 800eef8:	4307      	orrs	r7, r0
 800eefa:	3568      	adds	r5, #104	; 0x68
 800eefc:	e7e9      	b.n	800eed2 <_fwalk_reent+0x12>

0800eefe <__retarget_lock_init_recursive>:
 800eefe:	4770      	bx	lr

0800ef00 <__retarget_lock_acquire_recursive>:
 800ef00:	4770      	bx	lr

0800ef02 <__retarget_lock_release_recursive>:
 800ef02:	4770      	bx	lr

0800ef04 <__swhatbuf_r>:
 800ef04:	b570      	push	{r4, r5, r6, lr}
 800ef06:	460e      	mov	r6, r1
 800ef08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef0c:	2900      	cmp	r1, #0
 800ef0e:	b096      	sub	sp, #88	; 0x58
 800ef10:	4614      	mov	r4, r2
 800ef12:	461d      	mov	r5, r3
 800ef14:	da08      	bge.n	800ef28 <__swhatbuf_r+0x24>
 800ef16:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	602a      	str	r2, [r5, #0]
 800ef1e:	061a      	lsls	r2, r3, #24
 800ef20:	d410      	bmi.n	800ef44 <__swhatbuf_r+0x40>
 800ef22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ef26:	e00e      	b.n	800ef46 <__swhatbuf_r+0x42>
 800ef28:	466a      	mov	r2, sp
 800ef2a:	f000 f945 	bl	800f1b8 <_fstat_r>
 800ef2e:	2800      	cmp	r0, #0
 800ef30:	dbf1      	blt.n	800ef16 <__swhatbuf_r+0x12>
 800ef32:	9a01      	ldr	r2, [sp, #4]
 800ef34:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ef38:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ef3c:	425a      	negs	r2, r3
 800ef3e:	415a      	adcs	r2, r3
 800ef40:	602a      	str	r2, [r5, #0]
 800ef42:	e7ee      	b.n	800ef22 <__swhatbuf_r+0x1e>
 800ef44:	2340      	movs	r3, #64	; 0x40
 800ef46:	2000      	movs	r0, #0
 800ef48:	6023      	str	r3, [r4, #0]
 800ef4a:	b016      	add	sp, #88	; 0x58
 800ef4c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ef50 <__smakebuf_r>:
 800ef50:	898b      	ldrh	r3, [r1, #12]
 800ef52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ef54:	079d      	lsls	r5, r3, #30
 800ef56:	4606      	mov	r6, r0
 800ef58:	460c      	mov	r4, r1
 800ef5a:	d507      	bpl.n	800ef6c <__smakebuf_r+0x1c>
 800ef5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ef60:	6023      	str	r3, [r4, #0]
 800ef62:	6123      	str	r3, [r4, #16]
 800ef64:	2301      	movs	r3, #1
 800ef66:	6163      	str	r3, [r4, #20]
 800ef68:	b002      	add	sp, #8
 800ef6a:	bd70      	pop	{r4, r5, r6, pc}
 800ef6c:	ab01      	add	r3, sp, #4
 800ef6e:	466a      	mov	r2, sp
 800ef70:	f7ff ffc8 	bl	800ef04 <__swhatbuf_r>
 800ef74:	9900      	ldr	r1, [sp, #0]
 800ef76:	4605      	mov	r5, r0
 800ef78:	4630      	mov	r0, r6
 800ef7a:	f7fe ff67 	bl	800de4c <_malloc_r>
 800ef7e:	b948      	cbnz	r0, 800ef94 <__smakebuf_r+0x44>
 800ef80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef84:	059a      	lsls	r2, r3, #22
 800ef86:	d4ef      	bmi.n	800ef68 <__smakebuf_r+0x18>
 800ef88:	f023 0303 	bic.w	r3, r3, #3
 800ef8c:	f043 0302 	orr.w	r3, r3, #2
 800ef90:	81a3      	strh	r3, [r4, #12]
 800ef92:	e7e3      	b.n	800ef5c <__smakebuf_r+0xc>
 800ef94:	4b0d      	ldr	r3, [pc, #52]	; (800efcc <__smakebuf_r+0x7c>)
 800ef96:	62b3      	str	r3, [r6, #40]	; 0x28
 800ef98:	89a3      	ldrh	r3, [r4, #12]
 800ef9a:	6020      	str	r0, [r4, #0]
 800ef9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800efa0:	81a3      	strh	r3, [r4, #12]
 800efa2:	9b00      	ldr	r3, [sp, #0]
 800efa4:	6163      	str	r3, [r4, #20]
 800efa6:	9b01      	ldr	r3, [sp, #4]
 800efa8:	6120      	str	r0, [r4, #16]
 800efaa:	b15b      	cbz	r3, 800efc4 <__smakebuf_r+0x74>
 800efac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800efb0:	4630      	mov	r0, r6
 800efb2:	f000 f913 	bl	800f1dc <_isatty_r>
 800efb6:	b128      	cbz	r0, 800efc4 <__smakebuf_r+0x74>
 800efb8:	89a3      	ldrh	r3, [r4, #12]
 800efba:	f023 0303 	bic.w	r3, r3, #3
 800efbe:	f043 0301 	orr.w	r3, r3, #1
 800efc2:	81a3      	strh	r3, [r4, #12]
 800efc4:	89a0      	ldrh	r0, [r4, #12]
 800efc6:	4305      	orrs	r5, r0
 800efc8:	81a5      	strh	r5, [r4, #12]
 800efca:	e7cd      	b.n	800ef68 <__smakebuf_r+0x18>
 800efcc:	0800ed5d 	.word	0x0800ed5d

0800efd0 <memmove>:
 800efd0:	4288      	cmp	r0, r1
 800efd2:	b510      	push	{r4, lr}
 800efd4:	eb01 0402 	add.w	r4, r1, r2
 800efd8:	d902      	bls.n	800efe0 <memmove+0x10>
 800efda:	4284      	cmp	r4, r0
 800efdc:	4623      	mov	r3, r4
 800efde:	d807      	bhi.n	800eff0 <memmove+0x20>
 800efe0:	1e43      	subs	r3, r0, #1
 800efe2:	42a1      	cmp	r1, r4
 800efe4:	d008      	beq.n	800eff8 <memmove+0x28>
 800efe6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800efea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800efee:	e7f8      	b.n	800efe2 <memmove+0x12>
 800eff0:	4402      	add	r2, r0
 800eff2:	4601      	mov	r1, r0
 800eff4:	428a      	cmp	r2, r1
 800eff6:	d100      	bne.n	800effa <memmove+0x2a>
 800eff8:	bd10      	pop	{r4, pc}
 800effa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800effe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f002:	e7f7      	b.n	800eff4 <memmove+0x24>

0800f004 <_realloc_r>:
 800f004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f008:	4680      	mov	r8, r0
 800f00a:	4614      	mov	r4, r2
 800f00c:	460e      	mov	r6, r1
 800f00e:	b921      	cbnz	r1, 800f01a <_realloc_r+0x16>
 800f010:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f014:	4611      	mov	r1, r2
 800f016:	f7fe bf19 	b.w	800de4c <_malloc_r>
 800f01a:	b92a      	cbnz	r2, 800f028 <_realloc_r+0x24>
 800f01c:	f7fe feaa 	bl	800dd74 <_free_r>
 800f020:	4625      	mov	r5, r4
 800f022:	4628      	mov	r0, r5
 800f024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f028:	f000 f8fa 	bl	800f220 <_malloc_usable_size_r>
 800f02c:	4284      	cmp	r4, r0
 800f02e:	4607      	mov	r7, r0
 800f030:	d802      	bhi.n	800f038 <_realloc_r+0x34>
 800f032:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f036:	d812      	bhi.n	800f05e <_realloc_r+0x5a>
 800f038:	4621      	mov	r1, r4
 800f03a:	4640      	mov	r0, r8
 800f03c:	f7fe ff06 	bl	800de4c <_malloc_r>
 800f040:	4605      	mov	r5, r0
 800f042:	2800      	cmp	r0, #0
 800f044:	d0ed      	beq.n	800f022 <_realloc_r+0x1e>
 800f046:	42bc      	cmp	r4, r7
 800f048:	4622      	mov	r2, r4
 800f04a:	4631      	mov	r1, r6
 800f04c:	bf28      	it	cs
 800f04e:	463a      	movcs	r2, r7
 800f050:	f7fe fe7a 	bl	800dd48 <memcpy>
 800f054:	4631      	mov	r1, r6
 800f056:	4640      	mov	r0, r8
 800f058:	f7fe fe8c 	bl	800dd74 <_free_r>
 800f05c:	e7e1      	b.n	800f022 <_realloc_r+0x1e>
 800f05e:	4635      	mov	r5, r6
 800f060:	e7df      	b.n	800f022 <_realloc_r+0x1e>

0800f062 <_raise_r>:
 800f062:	291f      	cmp	r1, #31
 800f064:	b538      	push	{r3, r4, r5, lr}
 800f066:	4604      	mov	r4, r0
 800f068:	460d      	mov	r5, r1
 800f06a:	d904      	bls.n	800f076 <_raise_r+0x14>
 800f06c:	2316      	movs	r3, #22
 800f06e:	6003      	str	r3, [r0, #0]
 800f070:	f04f 30ff 	mov.w	r0, #4294967295
 800f074:	bd38      	pop	{r3, r4, r5, pc}
 800f076:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f078:	b112      	cbz	r2, 800f080 <_raise_r+0x1e>
 800f07a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f07e:	b94b      	cbnz	r3, 800f094 <_raise_r+0x32>
 800f080:	4620      	mov	r0, r4
 800f082:	f000 f831 	bl	800f0e8 <_getpid_r>
 800f086:	462a      	mov	r2, r5
 800f088:	4601      	mov	r1, r0
 800f08a:	4620      	mov	r0, r4
 800f08c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f090:	f000 b818 	b.w	800f0c4 <_kill_r>
 800f094:	2b01      	cmp	r3, #1
 800f096:	d00a      	beq.n	800f0ae <_raise_r+0x4c>
 800f098:	1c59      	adds	r1, r3, #1
 800f09a:	d103      	bne.n	800f0a4 <_raise_r+0x42>
 800f09c:	2316      	movs	r3, #22
 800f09e:	6003      	str	r3, [r0, #0]
 800f0a0:	2001      	movs	r0, #1
 800f0a2:	e7e7      	b.n	800f074 <_raise_r+0x12>
 800f0a4:	2400      	movs	r4, #0
 800f0a6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f0aa:	4628      	mov	r0, r5
 800f0ac:	4798      	blx	r3
 800f0ae:	2000      	movs	r0, #0
 800f0b0:	e7e0      	b.n	800f074 <_raise_r+0x12>
	...

0800f0b4 <raise>:
 800f0b4:	4b02      	ldr	r3, [pc, #8]	; (800f0c0 <raise+0xc>)
 800f0b6:	4601      	mov	r1, r0
 800f0b8:	6818      	ldr	r0, [r3, #0]
 800f0ba:	f7ff bfd2 	b.w	800f062 <_raise_r>
 800f0be:	bf00      	nop
 800f0c0:	20000090 	.word	0x20000090

0800f0c4 <_kill_r>:
 800f0c4:	b538      	push	{r3, r4, r5, lr}
 800f0c6:	4d07      	ldr	r5, [pc, #28]	; (800f0e4 <_kill_r+0x20>)
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	4604      	mov	r4, r0
 800f0cc:	4608      	mov	r0, r1
 800f0ce:	4611      	mov	r1, r2
 800f0d0:	602b      	str	r3, [r5, #0]
 800f0d2:	f7f2 fa45 	bl	8001560 <_kill>
 800f0d6:	1c43      	adds	r3, r0, #1
 800f0d8:	d102      	bne.n	800f0e0 <_kill_r+0x1c>
 800f0da:	682b      	ldr	r3, [r5, #0]
 800f0dc:	b103      	cbz	r3, 800f0e0 <_kill_r+0x1c>
 800f0de:	6023      	str	r3, [r4, #0]
 800f0e0:	bd38      	pop	{r3, r4, r5, pc}
 800f0e2:	bf00      	nop
 800f0e4:	20005518 	.word	0x20005518

0800f0e8 <_getpid_r>:
 800f0e8:	f7f2 ba32 	b.w	8001550 <_getpid>

0800f0ec <__sread>:
 800f0ec:	b510      	push	{r4, lr}
 800f0ee:	460c      	mov	r4, r1
 800f0f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0f4:	f000 f89c 	bl	800f230 <_read_r>
 800f0f8:	2800      	cmp	r0, #0
 800f0fa:	bfab      	itete	ge
 800f0fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f0fe:	89a3      	ldrhlt	r3, [r4, #12]
 800f100:	181b      	addge	r3, r3, r0
 800f102:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f106:	bfac      	ite	ge
 800f108:	6563      	strge	r3, [r4, #84]	; 0x54
 800f10a:	81a3      	strhlt	r3, [r4, #12]
 800f10c:	bd10      	pop	{r4, pc}

0800f10e <__swrite>:
 800f10e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f112:	461f      	mov	r7, r3
 800f114:	898b      	ldrh	r3, [r1, #12]
 800f116:	05db      	lsls	r3, r3, #23
 800f118:	4605      	mov	r5, r0
 800f11a:	460c      	mov	r4, r1
 800f11c:	4616      	mov	r6, r2
 800f11e:	d505      	bpl.n	800f12c <__swrite+0x1e>
 800f120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f124:	2302      	movs	r3, #2
 800f126:	2200      	movs	r2, #0
 800f128:	f000 f868 	bl	800f1fc <_lseek_r>
 800f12c:	89a3      	ldrh	r3, [r4, #12]
 800f12e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f132:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f136:	81a3      	strh	r3, [r4, #12]
 800f138:	4632      	mov	r2, r6
 800f13a:	463b      	mov	r3, r7
 800f13c:	4628      	mov	r0, r5
 800f13e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f142:	f000 b817 	b.w	800f174 <_write_r>

0800f146 <__sseek>:
 800f146:	b510      	push	{r4, lr}
 800f148:	460c      	mov	r4, r1
 800f14a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f14e:	f000 f855 	bl	800f1fc <_lseek_r>
 800f152:	1c43      	adds	r3, r0, #1
 800f154:	89a3      	ldrh	r3, [r4, #12]
 800f156:	bf15      	itete	ne
 800f158:	6560      	strne	r0, [r4, #84]	; 0x54
 800f15a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f15e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f162:	81a3      	strheq	r3, [r4, #12]
 800f164:	bf18      	it	ne
 800f166:	81a3      	strhne	r3, [r4, #12]
 800f168:	bd10      	pop	{r4, pc}

0800f16a <__sclose>:
 800f16a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f16e:	f000 b813 	b.w	800f198 <_close_r>
	...

0800f174 <_write_r>:
 800f174:	b538      	push	{r3, r4, r5, lr}
 800f176:	4d07      	ldr	r5, [pc, #28]	; (800f194 <_write_r+0x20>)
 800f178:	4604      	mov	r4, r0
 800f17a:	4608      	mov	r0, r1
 800f17c:	4611      	mov	r1, r2
 800f17e:	2200      	movs	r2, #0
 800f180:	602a      	str	r2, [r5, #0]
 800f182:	461a      	mov	r2, r3
 800f184:	f7f2 fa23 	bl	80015ce <_write>
 800f188:	1c43      	adds	r3, r0, #1
 800f18a:	d102      	bne.n	800f192 <_write_r+0x1e>
 800f18c:	682b      	ldr	r3, [r5, #0]
 800f18e:	b103      	cbz	r3, 800f192 <_write_r+0x1e>
 800f190:	6023      	str	r3, [r4, #0]
 800f192:	bd38      	pop	{r3, r4, r5, pc}
 800f194:	20005518 	.word	0x20005518

0800f198 <_close_r>:
 800f198:	b538      	push	{r3, r4, r5, lr}
 800f19a:	4d06      	ldr	r5, [pc, #24]	; (800f1b4 <_close_r+0x1c>)
 800f19c:	2300      	movs	r3, #0
 800f19e:	4604      	mov	r4, r0
 800f1a0:	4608      	mov	r0, r1
 800f1a2:	602b      	str	r3, [r5, #0]
 800f1a4:	f7f2 fa2f 	bl	8001606 <_close>
 800f1a8:	1c43      	adds	r3, r0, #1
 800f1aa:	d102      	bne.n	800f1b2 <_close_r+0x1a>
 800f1ac:	682b      	ldr	r3, [r5, #0]
 800f1ae:	b103      	cbz	r3, 800f1b2 <_close_r+0x1a>
 800f1b0:	6023      	str	r3, [r4, #0]
 800f1b2:	bd38      	pop	{r3, r4, r5, pc}
 800f1b4:	20005518 	.word	0x20005518

0800f1b8 <_fstat_r>:
 800f1b8:	b538      	push	{r3, r4, r5, lr}
 800f1ba:	4d07      	ldr	r5, [pc, #28]	; (800f1d8 <_fstat_r+0x20>)
 800f1bc:	2300      	movs	r3, #0
 800f1be:	4604      	mov	r4, r0
 800f1c0:	4608      	mov	r0, r1
 800f1c2:	4611      	mov	r1, r2
 800f1c4:	602b      	str	r3, [r5, #0]
 800f1c6:	f7f2 fa2a 	bl	800161e <_fstat>
 800f1ca:	1c43      	adds	r3, r0, #1
 800f1cc:	d102      	bne.n	800f1d4 <_fstat_r+0x1c>
 800f1ce:	682b      	ldr	r3, [r5, #0]
 800f1d0:	b103      	cbz	r3, 800f1d4 <_fstat_r+0x1c>
 800f1d2:	6023      	str	r3, [r4, #0]
 800f1d4:	bd38      	pop	{r3, r4, r5, pc}
 800f1d6:	bf00      	nop
 800f1d8:	20005518 	.word	0x20005518

0800f1dc <_isatty_r>:
 800f1dc:	b538      	push	{r3, r4, r5, lr}
 800f1de:	4d06      	ldr	r5, [pc, #24]	; (800f1f8 <_isatty_r+0x1c>)
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	4604      	mov	r4, r0
 800f1e4:	4608      	mov	r0, r1
 800f1e6:	602b      	str	r3, [r5, #0]
 800f1e8:	f7f2 fa29 	bl	800163e <_isatty>
 800f1ec:	1c43      	adds	r3, r0, #1
 800f1ee:	d102      	bne.n	800f1f6 <_isatty_r+0x1a>
 800f1f0:	682b      	ldr	r3, [r5, #0]
 800f1f2:	b103      	cbz	r3, 800f1f6 <_isatty_r+0x1a>
 800f1f4:	6023      	str	r3, [r4, #0]
 800f1f6:	bd38      	pop	{r3, r4, r5, pc}
 800f1f8:	20005518 	.word	0x20005518

0800f1fc <_lseek_r>:
 800f1fc:	b538      	push	{r3, r4, r5, lr}
 800f1fe:	4d07      	ldr	r5, [pc, #28]	; (800f21c <_lseek_r+0x20>)
 800f200:	4604      	mov	r4, r0
 800f202:	4608      	mov	r0, r1
 800f204:	4611      	mov	r1, r2
 800f206:	2200      	movs	r2, #0
 800f208:	602a      	str	r2, [r5, #0]
 800f20a:	461a      	mov	r2, r3
 800f20c:	f7f2 fa22 	bl	8001654 <_lseek>
 800f210:	1c43      	adds	r3, r0, #1
 800f212:	d102      	bne.n	800f21a <_lseek_r+0x1e>
 800f214:	682b      	ldr	r3, [r5, #0]
 800f216:	b103      	cbz	r3, 800f21a <_lseek_r+0x1e>
 800f218:	6023      	str	r3, [r4, #0]
 800f21a:	bd38      	pop	{r3, r4, r5, pc}
 800f21c:	20005518 	.word	0x20005518

0800f220 <_malloc_usable_size_r>:
 800f220:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f224:	1f18      	subs	r0, r3, #4
 800f226:	2b00      	cmp	r3, #0
 800f228:	bfbc      	itt	lt
 800f22a:	580b      	ldrlt	r3, [r1, r0]
 800f22c:	18c0      	addlt	r0, r0, r3
 800f22e:	4770      	bx	lr

0800f230 <_read_r>:
 800f230:	b538      	push	{r3, r4, r5, lr}
 800f232:	4d07      	ldr	r5, [pc, #28]	; (800f250 <_read_r+0x20>)
 800f234:	4604      	mov	r4, r0
 800f236:	4608      	mov	r0, r1
 800f238:	4611      	mov	r1, r2
 800f23a:	2200      	movs	r2, #0
 800f23c:	602a      	str	r2, [r5, #0]
 800f23e:	461a      	mov	r2, r3
 800f240:	f7f2 f9a8 	bl	8001594 <_read>
 800f244:	1c43      	adds	r3, r0, #1
 800f246:	d102      	bne.n	800f24e <_read_r+0x1e>
 800f248:	682b      	ldr	r3, [r5, #0]
 800f24a:	b103      	cbz	r3, 800f24e <_read_r+0x1e>
 800f24c:	6023      	str	r3, [r4, #0]
 800f24e:	bd38      	pop	{r3, r4, r5, pc}
 800f250:	20005518 	.word	0x20005518

0800f254 <_init>:
 800f254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f256:	bf00      	nop
 800f258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f25a:	bc08      	pop	{r3}
 800f25c:	469e      	mov	lr, r3
 800f25e:	4770      	bx	lr

0800f260 <_fini>:
 800f260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f262:	bf00      	nop
 800f264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f266:	bc08      	pop	{r3}
 800f268:	469e      	mov	lr, r3
 800f26a:	4770      	bx	lr
